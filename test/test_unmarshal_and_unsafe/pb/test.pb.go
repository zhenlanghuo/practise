// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

// 定义包名

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 定义HelloRequest消息
type HelloRequest struct {
	// name字段
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 定义HelloReply消息
type HelloReply struct {
	// message字段
	Message              *string  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return m.Size()
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type TestStruct struct {
	IntPointField        *int64    `protobuf:"varint,1,req,name=int_point_field,json=intPointField" json:"int_point_field,omitempty"`
	FloatPointField      *float32  `protobuf:"fixed32,2,req,name=float_point_field,json=floatPointField" json:"float_point_field,omitempty"`
	Person               *Person   `protobuf:"bytes,3,req,name=person" json:"person,omitempty"`
	IntField             *int64    `protobuf:"varint,4,req,name=int_field,json=intField" json:"int_field,omitempty"`
	IntSlice             []int64   `protobuf:"varint,5,rep,name=int_slice,json=intSlice" json:"int_slice,omitempty"`
	Persons              []*Person `protobuf:"bytes,6,rep,name=persons" json:"persons,omitempty"`
	I1                   *int64    `protobuf:"varint,7,req,name=i1" json:"i1,omitempty"`
	I2                   *int64    `protobuf:"varint,8,req,name=i2" json:"i2,omitempty"`
	I3                   *int64    `protobuf:"varint,9,req,name=i3" json:"i3,omitempty"`
	I4                   *int64    `protobuf:"varint,10,req,name=i4" json:"i4,omitempty"`
	I5                   *int64    `protobuf:"varint,11,req,name=i5" json:"i5,omitempty"`
	S1                   *string   `protobuf:"bytes,12,req,name=s1" json:"s1,omitempty"`
	S2                   *string   `protobuf:"bytes,13,req,name=s2" json:"s2,omitempty"`
	S3                   *string   `protobuf:"bytes,14,req,name=s3" json:"s3,omitempty"`
	S4                   *string   `protobuf:"bytes,15,req,name=s4" json:"s4,omitempty"`
	S5                   *string   `protobuf:"bytes,16,req,name=s5" json:"s5,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TestStruct) Reset()         { *m = TestStruct{} }
func (m *TestStruct) String() string { return proto.CompactTextString(m) }
func (*TestStruct) ProtoMessage()    {}
func (*TestStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}
func (m *TestStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStruct.Merge(m, src)
}
func (m *TestStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestStruct proto.InternalMessageInfo

func (m *TestStruct) GetIntPointField() int64 {
	if m != nil && m.IntPointField != nil {
		return *m.IntPointField
	}
	return 0
}

func (m *TestStruct) GetFloatPointField() float32 {
	if m != nil && m.FloatPointField != nil {
		return *m.FloatPointField
	}
	return 0
}

func (m *TestStruct) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *TestStruct) GetIntField() int64 {
	if m != nil && m.IntField != nil {
		return *m.IntField
	}
	return 0
}

func (m *TestStruct) GetIntSlice() []int64 {
	if m != nil {
		return m.IntSlice
	}
	return nil
}

func (m *TestStruct) GetPersons() []*Person {
	if m != nil {
		return m.Persons
	}
	return nil
}

func (m *TestStruct) GetI1() int64 {
	if m != nil && m.I1 != nil {
		return *m.I1
	}
	return 0
}

func (m *TestStruct) GetI2() int64 {
	if m != nil && m.I2 != nil {
		return *m.I2
	}
	return 0
}

func (m *TestStruct) GetI3() int64 {
	if m != nil && m.I3 != nil {
		return *m.I3
	}
	return 0
}

func (m *TestStruct) GetI4() int64 {
	if m != nil && m.I4 != nil {
		return *m.I4
	}
	return 0
}

func (m *TestStruct) GetI5() int64 {
	if m != nil && m.I5 != nil {
		return *m.I5
	}
	return 0
}

func (m *TestStruct) GetS1() string {
	if m != nil && m.S1 != nil {
		return *m.S1
	}
	return ""
}

func (m *TestStruct) GetS2() string {
	if m != nil && m.S2 != nil {
		return *m.S2
	}
	return ""
}

func (m *TestStruct) GetS3() string {
	if m != nil && m.S3 != nil {
		return *m.S3
	}
	return ""
}

func (m *TestStruct) GetS4() string {
	if m != nil && m.S4 != nil {
		return *m.S4
	}
	return ""
}

func (m *TestStruct) GetS5() string {
	if m != nil && m.S5 != nil {
		return *m.S5
	}
	return ""
}

type Person struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Age                  *int64   `protobuf:"varint,2,req,name=age" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}
func (m *Person) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Person.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return m.Size()
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Person) GetAge() int64 {
	if m != nil && m.Age != nil {
		return *m.Age
	}
	return 0
}

type GogoProtoBufA struct {
	Name                 string   `protobuf:"bytes,1,req,name=name" json:"name"`
	BirthDay             int64    `protobuf:"varint,2,req,name=birthDay" json:"birthDay"`
	Phone                string   `protobuf:"bytes,3,req,name=phone" json:"phone"`
	Siblings             int32    `protobuf:"varint,4,req,name=siblings" json:"siblings"`
	Spouse               bool     `protobuf:"varint,5,req,name=spouse" json:"spouse"`
	Money                float64  `protobuf:"fixed64,6,req,name=money" json:"money"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GogoProtoBufA) Reset()         { *m = GogoProtoBufA{} }
func (m *GogoProtoBufA) String() string { return proto.CompactTextString(m) }
func (*GogoProtoBufA) ProtoMessage()    {}
func (*GogoProtoBufA) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{4}
}
func (m *GogoProtoBufA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GogoProtoBufA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GogoProtoBufA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GogoProtoBufA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GogoProtoBufA.Merge(m, src)
}
func (m *GogoProtoBufA) XXX_Size() int {
	return m.Size()
}
func (m *GogoProtoBufA) XXX_DiscardUnknown() {
	xxx_messageInfo_GogoProtoBufA.DiscardUnknown(m)
}

var xxx_messageInfo_GogoProtoBufA proto.InternalMessageInfo

func (m *GogoProtoBufA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GogoProtoBufA) GetBirthDay() int64 {
	if m != nil {
		return m.BirthDay
	}
	return 0
}

func (m *GogoProtoBufA) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GogoProtoBufA) GetSiblings() int32 {
	if m != nil {
		return m.Siblings
	}
	return 0
}

func (m *GogoProtoBufA) GetSpouse() bool {
	if m != nil {
		return m.Spouse
	}
	return false
}

func (m *GogoProtoBufA) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "pb.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "pb.HelloReply")
	proto.RegisterType((*TestStruct)(nil), "pb.TestStruct")
	proto.RegisterType((*Person)(nil), "pb.Person")
	proto.RegisterType((*GogoProtoBufA)(nil), "pb.GogoProtoBufA")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x3f, 0x8f, 0xd3, 0x40,
	0x10, 0xc5, 0xf1, 0x3a, 0x7f, 0xe7, 0x2e, 0x97, 0x63, 0x69, 0x56, 0x07, 0x0a, 0x96, 0x85, 0x4e,
	0x16, 0x12, 0x8e, 0xf2, 0xaf, 0xa2, 0x22, 0x42, 0x40, 0x19, 0xf9, 0xa8, 0x68, 0x50, 0x1c, 0x36,
	0xce, 0x4a, 0x8e, 0xd7, 0x64, 0xd6, 0x45, 0x7a, 0xbe, 0x19, 0xcd, 0x95, 0x7c, 0x02, 0x84, 0xf2,
	0x49, 0xd0, 0x8e, 0xd7, 0x47, 0xb8, 0x26, 0x9a, 0xdf, 0x7b, 0x33, 0x6f, 0x23, 0x3d, 0x03, 0x18,
	0x89, 0x26, 0x2e, 0x0f, 0xda, 0x68, 0xce, 0xca, 0xf4, 0xe6, 0x4d, 0xa6, 0xcc, 0xae, 0x4a, 0xe3,
	0x8d, 0xde, 0x8f, 0x33, 0x9d, 0xe9, 0x31, 0x59, 0x69, 0xb5, 0x25, 0x22, 0xa0, 0xa9, 0x3e, 0x09,
	0x43, 0xb8, 0xfc, 0x24, 0xf3, 0x5c, 0x27, 0xf2, 0x7b, 0x25, 0xd1, 0x70, 0x0e, 0xad, 0x62, 0xbd,
	0x97, 0xc2, 0x0b, 0xbc, 0xa8, 0x9f, 0xd0, 0x1c, 0xde, 0x02, 0xb8, 0x9d, 0x32, 0x3f, 0x72, 0x01,
	0xdd, 0xbd, 0x44, 0x5c, 0x67, 0xcd, 0x52, 0x83, 0xe1, 0x0f, 0x1f, 0xe0, 0xb3, 0x44, 0x73, 0x67,
	0x0e, 0xd5, 0xc6, 0xf0, 0x5b, 0x18, 0xaa, 0xc2, 0x7c, 0x2d, 0xb5, 0xfd, 0xdd, 0x2a, 0x99, 0x7f,
	0x13, 0x5e, 0xc0, 0x22, 0x3f, 0x19, 0xa8, 0xc2, 0xac, 0xac, 0xfa, 0xc1, 0x8a, 0xfc, 0x35, 0x3c,
	0xdd, 0xe6, 0x7a, 0xfd, 0xff, 0x26, 0x0b, 0x58, 0xc4, 0x92, 0x21, 0x19, 0x67, 0xbb, 0x21, 0x74,
	0x4a, 0x79, 0x40, 0x5d, 0x08, 0x3f, 0x60, 0xd1, 0xc5, 0x14, 0xe2, 0x32, 0x8d, 0x57, 0xa4, 0x24,
	0xce, 0xe1, 0xcf, 0xa1, 0xff, 0x2f, 0xa7, 0x45, 0x2f, 0xf6, 0x1e, 0x02, 0x9c, 0x89, 0xb9, 0xda,
	0x48, 0xd1, 0x0e, 0x7c, 0x67, 0xde, 0x59, 0xe6, 0xaf, 0xa0, 0x5b, 0x67, 0xa0, 0xe8, 0x04, 0xfe,
	0xa3, 0xf8, 0xc6, 0xe2, 0x57, 0xc0, 0xd4, 0x44, 0x74, 0x29, 0x98, 0xa9, 0x09, 0xf1, 0x54, 0xf4,
	0x1c, 0x4f, 0x89, 0x67, 0xa2, 0xef, 0x78, 0x46, 0x3c, 0x17, 0xe0, 0x78, 0x4e, 0xbc, 0x10, 0x17,
	0x8e, 0x17, 0x96, 0x71, 0x22, 0x2e, 0x03, 0x16, 0xf5, 0x13, 0x86, 0x94, 0x87, 0x53, 0x31, 0x70,
	0x4c, 0x79, 0x38, 0x13, 0x57, 0x8e, 0x29, 0x0f, 0xe7, 0x62, 0xe8, 0x98, 0xf2, 0x70, 0x21, 0xae,
	0x1d, 0x2f, 0xc2, 0x18, 0x3a, 0xf5, 0x5f, 0x3e, 0x2b, 0x93, 0x35, 0x65, 0xf2, 0x6b, 0xf0, 0x6d,
	0x75, 0x8c, 0x9e, 0xb7, 0x63, 0xf8, 0xd3, 0x83, 0xc1, 0x47, 0x9d, 0xe9, 0x95, 0xfd, 0x20, 0x96,
	0xd5, 0xf6, 0x1d, 0x17, 0xe7, 0x77, 0xcb, 0xd6, 0xfd, 0xef, 0x97, 0x4f, 0xdc, 0x75, 0x00, 0xbd,
	0x54, 0x1d, 0xcc, 0xee, 0xfd, 0xfa, 0x58, 0x47, 0x38, 0xf7, 0x41, 0xe5, 0x37, 0xd0, 0x2e, 0x77,
	0xba, 0x90, 0x54, 0x50, 0x73, 0x5c, 0x4b, 0xf6, 0x1a, 0x55, 0x9a, 0xab, 0x22, 0x43, 0x2a, 0xa6,
	0xdd, 0x5c, 0x37, 0x2a, 0x7f, 0x01, 0x1d, 0x2c, 0x75, 0x85, 0xb6, 0x1b, 0x16, 0xf5, 0x9c, 0xef,
	0x34, 0x9b, 0xbd, 0xd7, 0x85, 0x3c, 0x8a, 0x4e, 0xc0, 0x22, 0xaf, 0xc9, 0x26, 0x69, 0xf9, 0xec,
	0xfe, 0x34, 0xf2, 0x7e, 0x9d, 0x46, 0xde, 0x9f, 0xd3, 0xc8, 0xfb, 0xd2, 0x8e, 0xc7, 0x6f, 0xcb,
	0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x38, 0x91, 0x2b, 0x1d, 0x03, 0x00, 0x00,
}

func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.S5 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("s5")
	} else {
		i -= len(*m.S5)
		copy(dAtA[i:], *m.S5)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.S5)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.S4 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("s4")
	} else {
		i -= len(*m.S4)
		copy(dAtA[i:], *m.S4)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.S4)))
		i--
		dAtA[i] = 0x7a
	}
	if m.S3 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("s3")
	} else {
		i -= len(*m.S3)
		copy(dAtA[i:], *m.S3)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.S3)))
		i--
		dAtA[i] = 0x72
	}
	if m.S2 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("s2")
	} else {
		i -= len(*m.S2)
		copy(dAtA[i:], *m.S2)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.S2)))
		i--
		dAtA[i] = 0x6a
	}
	if m.S1 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("s1")
	} else {
		i -= len(*m.S1)
		copy(dAtA[i:], *m.S1)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.S1)))
		i--
		dAtA[i] = 0x62
	}
	if m.I5 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("i5")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.I5))
		i--
		dAtA[i] = 0x58
	}
	if m.I4 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("i4")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.I4))
		i--
		dAtA[i] = 0x50
	}
	if m.I3 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("i3")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.I3))
		i--
		dAtA[i] = 0x48
	}
	if m.I2 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("i2")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.I2))
		i--
		dAtA[i] = 0x40
	}
	if m.I1 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("i1")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.I1))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Persons) > 0 {
		for iNdEx := len(m.Persons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Persons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.IntSlice) > 0 {
		for iNdEx := len(m.IntSlice) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintTest(dAtA, i, uint64(m.IntSlice[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if m.IntField == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("int_field")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.IntField))
		i--
		dAtA[i] = 0x20
	}
	if m.Person == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("person")
	} else {
		{
			size, err := m.Person.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FloatPointField == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("float_point_field")
	} else {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.FloatPointField))))
		i--
		dAtA[i] = 0x15
	}
	if m.IntPointField == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("int_point_field")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.IntPointField))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Person) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Person) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Person) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Age == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("age")
	} else {
		i = encodeVarintTest(dAtA, i, uint64(*m.Age))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GogoProtoBufA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GogoProtoBufA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GogoProtoBufA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Money))))
	i--
	dAtA[i] = 0x31
	i--
	if m.Spouse {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintTest(dAtA, i, uint64(m.Siblings))
	i--
	dAtA[i] = 0x20
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintTest(dAtA, i, uint64(m.BirthDay))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntPointField != nil {
		n += 1 + sovTest(uint64(*m.IntPointField))
	}
	if m.FloatPointField != nil {
		n += 5
	}
	if m.Person != nil {
		l = m.Person.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.IntField != nil {
		n += 1 + sovTest(uint64(*m.IntField))
	}
	if len(m.IntSlice) > 0 {
		for _, e := range m.IntSlice {
			n += 1 + sovTest(uint64(e))
		}
	}
	if len(m.Persons) > 0 {
		for _, e := range m.Persons {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if m.I1 != nil {
		n += 1 + sovTest(uint64(*m.I1))
	}
	if m.I2 != nil {
		n += 1 + sovTest(uint64(*m.I2))
	}
	if m.I3 != nil {
		n += 1 + sovTest(uint64(*m.I3))
	}
	if m.I4 != nil {
		n += 1 + sovTest(uint64(*m.I4))
	}
	if m.I5 != nil {
		n += 1 + sovTest(uint64(*m.I5))
	}
	if m.S1 != nil {
		l = len(*m.S1)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.S2 != nil {
		l = len(*m.S2)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.S3 != nil {
		l = len(*m.S3)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.S4 != nil {
		l = len(*m.S4)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.S5 != nil {
		l = len(*m.S5)
		n += 2 + l + sovTest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Person) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Age != nil {
		n += 1 + sovTest(uint64(*m.Age))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GogoProtoBufA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTest(uint64(l))
	n += 1 + sovTest(uint64(m.BirthDay))
	l = len(m.Phone)
	n += 1 + l + sovTest(uint64(l))
	n += 1 + sovTest(uint64(m.Siblings))
	n += 2
	n += 9
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestStruct) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntPointField", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntPointField = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatPointField", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FloatPointField = &v2
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Person == nil {
				m.Person = &Person{}
			}
			if err := m.Person.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntField", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntField = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntSlice = append(m.IntSlice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntSlice) == 0 {
					m.IntSlice = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntSlice = append(m.IntSlice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntSlice", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Persons = append(m.Persons, &Person{})
			if err := m.Persons[len(m.Persons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.I1 = &v
			hasFields[0] |= uint64(0x00000010)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.I2 = &v
			hasFields[0] |= uint64(0x00000020)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I3", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.I3 = &v
			hasFields[0] |= uint64(0x00000040)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I4", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.I4 = &v
			hasFields[0] |= uint64(0x00000080)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I5", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.I5 = &v
			hasFields[0] |= uint64(0x00000100)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.S1 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.S2 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.S3 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.S4 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00001000)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.S5 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00002000)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("int_point_field")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("float_point_field")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("person")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("int_field")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("i1")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("i2")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("i3")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("i4")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("i5")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("s1")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("s2")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("s3")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("s4")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("s5")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Person) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Person: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Person: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Age = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("age")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GogoProtoBufA) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GogoProtoBufA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GogoProtoBufA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Siblings", wireType)
			}
			m.Siblings = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Siblings |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spouse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spouse = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Money = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("birthDay")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("phone")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("siblings")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("spouse")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("money")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
