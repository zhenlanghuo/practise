// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: foody_base.proto

package foody_base

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Available int32

const (
	Available_UNAVAILABLE Available = 0
	Available_AVAILABLE   Available = 1
)

var Available_name = map[int32]string{
	0: "UNAVAILABLE",
	1: "AVAILABLE",
}

var Available_value = map[string]int32{
	"UNAVAILABLE": 0,
	"AVAILABLE":   1,
}

func (x Available) Enum() *Available {
	p := new(Available)
	*p = x
	return p
}

func (x Available) String() string {
	return proto.EnumName(Available_name, int32(x))
}

func (x *Available) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Available_value, data, "Available")
	if err != nil {
		return err
	}
	*x = Available(value)
	return nil
}

func (Available) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{0}
}

// Status 表示上下架状态
type ShelveState int32

const (
	ShelveState_UNSHELVED ShelveState = 0
	ShelveState_SHELVED   ShelveState = 1
)

var ShelveState_name = map[int32]string{
	0: "UNSHELVED",
	1: "SHELVED",
}

var ShelveState_value = map[string]int32{
	"UNSHELVED": 0,
	"SHELVED":   1,
}

func (x ShelveState) Enum() *ShelveState {
	p := new(ShelveState)
	*p = x
	return p
}

func (x ShelveState) String() string {
	return proto.EnumName(ShelveState_name, int32(x))
}

func (x *ShelveState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShelveState_value, data, "ShelveState")
	if err != nil {
		return err
	}
	*x = ShelveState(value)
	return nil
}

func (ShelveState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{1}
}

// OptionSelectMode 表示一个 option group 中的 options 的选择模式。
type OptionSelectMode int32

const (
	OptionSelectMode_MODE_EQUAL             OptionSelectMode = 1
	OptionSelectMode_MODE_GREAT_EQUAL       OptionSelectMode = 2
	OptionSelectMode_MODE_LESS_EQUAL        OptionSelectMode = 3
	OptionSelectMode_MODE_BETWEEN_INCLUSIVE OptionSelectMode = 4
	OptionSelectMode_MODE_ANY               OptionSelectMode = 5
)

var OptionSelectMode_name = map[int32]string{
	1: "MODE_EQUAL",
	2: "MODE_GREAT_EQUAL",
	3: "MODE_LESS_EQUAL",
	4: "MODE_BETWEEN_INCLUSIVE",
	5: "MODE_ANY",
}

var OptionSelectMode_value = map[string]int32{
	"MODE_EQUAL":             1,
	"MODE_GREAT_EQUAL":       2,
	"MODE_LESS_EQUAL":        3,
	"MODE_BETWEEN_INCLUSIVE": 4,
	"MODE_ANY":               5,
}

func (x OptionSelectMode) Enum() *OptionSelectMode {
	p := new(OptionSelectMode)
	*p = x
	return p
}

func (x OptionSelectMode) String() string {
	return proto.EnumName(OptionSelectMode_name, int32(x))
}

func (x *OptionSelectMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OptionSelectMode_value, data, "OptionSelectMode")
	if err != nil {
		return err
	}
	*x = OptionSelectMode(value)
	return nil
}

func (OptionSelectMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{2}
}

type CartItemStatus int32

const (
	CartItemStatus_NORMAL                       CartItemStatus = 0
	CartItemStatus_DISH_UNAVAILABLE             CartItemStatus = 11
	CartItemStatus_DISH_DELETED                 CartItemStatus = 12
	CartItemStatus_DISH_OUT_OF_TIME             CartItemStatus = 13
	CartItemStatus_DISH_LISTING_STATUS_INACTIVE CartItemStatus = 14
	CartItemStatus_OPTION_GROUP_UNSHELVED       CartItemStatus = 21
	CartItemStatus_OPTION_GROUP_DELETED         CartItemStatus = 22
	CartItemStatus_OPTION_GROUP_INVALIDATE      CartItemStatus = 23
	CartItemStatus_OPTION_UNAVAILABLE           CartItemStatus = 31
	CartItemStatus_OPTION_DELETED               CartItemStatus = 32
	CartItemStatus_CART_ITEM_UPDATED            CartItemStatus = 40
	CartItemStatus_CART_ITEM_DELETED            CartItemStatus = 41
	CartItemStatus_ITEM_DISCOUNT_OUT_OF_STOCK   CartItemStatus = 50
	CartItemStatus_FLASH_SALE_OUT_OF_STOCK      CartItemStatus = 61
	CartItemStatus_FLASH_SALE_ENDED             CartItemStatus = 62
	CartItemStatus_FLASH_SALE_INACTIVE          CartItemStatus = 63
)

var CartItemStatus_name = map[int32]string{
	0:  "NORMAL",
	11: "DISH_UNAVAILABLE",
	12: "DISH_DELETED",
	13: "DISH_OUT_OF_TIME",
	14: "DISH_LISTING_STATUS_INACTIVE",
	21: "OPTION_GROUP_UNSHELVED",
	22: "OPTION_GROUP_DELETED",
	23: "OPTION_GROUP_INVALIDATE",
	31: "OPTION_UNAVAILABLE",
	32: "OPTION_DELETED",
	40: "CART_ITEM_UPDATED",
	41: "CART_ITEM_DELETED",
	50: "ITEM_DISCOUNT_OUT_OF_STOCK",
	61: "FLASH_SALE_OUT_OF_STOCK",
	62: "FLASH_SALE_ENDED",
	63: "FLASH_SALE_INACTIVE",
}

var CartItemStatus_value = map[string]int32{
	"NORMAL":                       0,
	"DISH_UNAVAILABLE":             11,
	"DISH_DELETED":                 12,
	"DISH_OUT_OF_TIME":             13,
	"DISH_LISTING_STATUS_INACTIVE": 14,
	"OPTION_GROUP_UNSHELVED":       21,
	"OPTION_GROUP_DELETED":         22,
	"OPTION_GROUP_INVALIDATE":      23,
	"OPTION_UNAVAILABLE":           31,
	"OPTION_DELETED":               32,
	"CART_ITEM_UPDATED":            40,
	"CART_ITEM_DELETED":            41,
	"ITEM_DISCOUNT_OUT_OF_STOCK":   50,
	"FLASH_SALE_OUT_OF_STOCK":      61,
	"FLASH_SALE_ENDED":             62,
	"FLASH_SALE_INACTIVE":          63,
}

func (x CartItemStatus) Enum() *CartItemStatus {
	p := new(CartItemStatus)
	*p = x
	return p
}

func (x CartItemStatus) String() string {
	return proto.EnumName(CartItemStatus_name, int32(x))
}

func (x *CartItemStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CartItemStatus_value, data, "CartItemStatus")
	if err != nil {
		return err
	}
	*x = CartItemStatus(value)
	return nil
}

func (CartItemStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_CREATED                OrderStatus = 0
	OrderStatus_ORDER_APPROVED               OrderStatus = 100
	OrderStatus_ORDER_PAID                   OrderStatus = 200
	OrderStatus_ORDER_MERCHANT_CONFIRMED     OrderStatus = 300
	OrderStatus_ORDER_ASSIGNED               OrderStatus = 400
	OrderStatus_ORDER_DELIVERY_ACCEPTED      OrderStatus = 410
	OrderStatus_ORDER_DELIVERY_ARRIVED_STORE OrderStatus = 420
	OrderStatus_ORDER_DRIVER_RECONFIRMED     OrderStatus = 425
	OrderStatus_ORDER_DELIVERY_PICKED_UP     OrderStatus = 430
	OrderStatus_ORDER_DELIVERED              OrderStatus = 440
	OrderStatus_ORDER_COMPLETED              OrderStatus = 800
	OrderStatus_ORDER_CANCELING              OrderStatus = 900
	OrderStatus_ORDER_CANCELED               OrderStatus = 910
)

var OrderStatus_name = map[int32]string{
	0:   "ORDER_CREATED",
	100: "ORDER_APPROVED",
	200: "ORDER_PAID",
	300: "ORDER_MERCHANT_CONFIRMED",
	400: "ORDER_ASSIGNED",
	410: "ORDER_DELIVERY_ACCEPTED",
	420: "ORDER_DELIVERY_ARRIVED_STORE",
	425: "ORDER_DRIVER_RECONFIRMED",
	430: "ORDER_DELIVERY_PICKED_UP",
	440: "ORDER_DELIVERED",
	800: "ORDER_COMPLETED",
	900: "ORDER_CANCELING",
	910: "ORDER_CANCELED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_CREATED":                0,
	"ORDER_APPROVED":               100,
	"ORDER_PAID":                   200,
	"ORDER_MERCHANT_CONFIRMED":     300,
	"ORDER_ASSIGNED":               400,
	"ORDER_DELIVERY_ACCEPTED":      410,
	"ORDER_DELIVERY_ARRIVED_STORE": 420,
	"ORDER_DRIVER_RECONFIRMED":     425,
	"ORDER_DELIVERY_PICKED_UP":     430,
	"ORDER_DELIVERED":              440,
	"ORDER_COMPLETED":              800,
	"ORDER_CANCELING":              900,
	"ORDER_CANCELED":               910,
}

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (x *OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderStatus_value, data, "OrderStatus")
	if err != nil {
		return err
	}
	*x = OrderStatus(value)
	return nil
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{4}
}

type SPXOrderShowStatus int32

const (
	SPXOrderShowStatus_SPX_ORDER_SHOW_CREATED           SPXOrderShowStatus = 0
	SPXOrderShowStatus_SPX_ORDER_SHOW_PAID              SPXOrderShowStatus = 100
	SPXOrderShowStatus_SPX_ORDER_SHOW_APPROVED          SPXOrderShowStatus = 200
	SPXOrderShowStatus_SPX_ORDER_SHOW_EXPRESS_CREATED   SPXOrderShowStatus = 300
	SPXOrderShowStatus_SPX_ORDER_SHOW_EXPRESS_ASSIGNED  SPXOrderShowStatus = 330
	SPXOrderShowStatus_SPX_ORDER_SHOW_EXPRESS_ARRIVED   SPXOrderShowStatus = 340
	SPXOrderShowStatus_SPX_ORDER_SHOW_EXPRESS_PICKEDUP  SPXOrderShowStatus = 350
	SPXOrderShowStatus_SPX_ORDER_SHOW_DELIVERY_ON_HOLD  SPXOrderShowStatus = 370
	SPXOrderShowStatus_SPX_ORDER_SHOW_DELIVERED         SPXOrderShowStatus = 400
	SPXOrderShowStatus_SPX_ORDER_SHOW_RETURNING         SPXOrderShowStatus = 500
	SPXOrderShowStatus_SPX_ORDER_SHOW_RETURNING_ON_HOLD SPXOrderShowStatus = 510
	SPXOrderShowStatus_SPX_ORDER_SHOW_RETURNED          SPXOrderShowStatus = 550
	SPXOrderShowStatus_SPX_ORDER_SHOW_COMPLETED         SPXOrderShowStatus = 600
	SPXOrderShowStatus_SPX_ORDER_SHOW_CANCELING         SPXOrderShowStatus = 700
	SPXOrderShowStatus_SPX_ORDER_SHOW_CANCELED          SPXOrderShowStatus = 710
)

var SPXOrderShowStatus_name = map[int32]string{
	0:   "SPX_ORDER_SHOW_CREATED",
	100: "SPX_ORDER_SHOW_PAID",
	200: "SPX_ORDER_SHOW_APPROVED",
	300: "SPX_ORDER_SHOW_EXPRESS_CREATED",
	330: "SPX_ORDER_SHOW_EXPRESS_ASSIGNED",
	340: "SPX_ORDER_SHOW_EXPRESS_ARRIVED",
	350: "SPX_ORDER_SHOW_EXPRESS_PICKEDUP",
	370: "SPX_ORDER_SHOW_DELIVERY_ON_HOLD",
	400: "SPX_ORDER_SHOW_DELIVERED",
	500: "SPX_ORDER_SHOW_RETURNING",
	510: "SPX_ORDER_SHOW_RETURNING_ON_HOLD",
	550: "SPX_ORDER_SHOW_RETURNED",
	600: "SPX_ORDER_SHOW_COMPLETED",
	700: "SPX_ORDER_SHOW_CANCELING",
	710: "SPX_ORDER_SHOW_CANCELED",
}

var SPXOrderShowStatus_value = map[string]int32{
	"SPX_ORDER_SHOW_CREATED":           0,
	"SPX_ORDER_SHOW_PAID":              100,
	"SPX_ORDER_SHOW_APPROVED":          200,
	"SPX_ORDER_SHOW_EXPRESS_CREATED":   300,
	"SPX_ORDER_SHOW_EXPRESS_ASSIGNED":  330,
	"SPX_ORDER_SHOW_EXPRESS_ARRIVED":   340,
	"SPX_ORDER_SHOW_EXPRESS_PICKEDUP":  350,
	"SPX_ORDER_SHOW_DELIVERY_ON_HOLD":  370,
	"SPX_ORDER_SHOW_DELIVERED":         400,
	"SPX_ORDER_SHOW_RETURNING":         500,
	"SPX_ORDER_SHOW_RETURNING_ON_HOLD": 510,
	"SPX_ORDER_SHOW_RETURNED":          550,
	"SPX_ORDER_SHOW_COMPLETED":         600,
	"SPX_ORDER_SHOW_CANCELING":         700,
	"SPX_ORDER_SHOW_CANCELED":          710,
}

func (x SPXOrderShowStatus) Enum() *SPXOrderShowStatus {
	p := new(SPXOrderShowStatus)
	*p = x
	return p
}

func (x SPXOrderShowStatus) String() string {
	return proto.EnumName(SPXOrderShowStatus_name, int32(x))
}

func (x *SPXOrderShowStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXOrderShowStatus_value, data, "SPXOrderShowStatus")
	if err != nil {
		return err
	}
	*x = SPXOrderShowStatus(value)
	return nil
}

func (SPXOrderShowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{5}
}

type SPXOrderStatus int32

const (
	SPXOrderStatus_SPX_ORDER_CREATED      SPXOrderStatus = 0
	SPXOrderStatus_SPX_ORDER_APPROVED     SPXOrderStatus = 100
	SPXOrderStatus_SPX_ORDER_PAID         SPXOrderStatus = 200
	SPXOrderStatus_SPX_ORDER_ONDELIVERING SPXOrderStatus = 210
	SPXOrderStatus_SPX_ORDER_DELIVERED    SPXOrderStatus = 440
	SPXOrderStatus_SPX_ORDER_COMPLETED    SPXOrderStatus = 800
	SPXOrderStatus_SPX_ORDER_CANCELING    SPXOrderStatus = 900
	SPXOrderStatus_SPX_ORDER_CANCELED     SPXOrderStatus = 910
	SPXOrderStatus_SPX_ORDER_RETURNED     SPXOrderStatus = 1000
)

var SPXOrderStatus_name = map[int32]string{
	0:    "SPX_ORDER_CREATED",
	100:  "SPX_ORDER_APPROVED",
	200:  "SPX_ORDER_PAID",
	210:  "SPX_ORDER_ONDELIVERING",
	440:  "SPX_ORDER_DELIVERED",
	800:  "SPX_ORDER_COMPLETED",
	900:  "SPX_ORDER_CANCELING",
	910:  "SPX_ORDER_CANCELED",
	1000: "SPX_ORDER_RETURNED",
}

var SPXOrderStatus_value = map[string]int32{
	"SPX_ORDER_CREATED":      0,
	"SPX_ORDER_APPROVED":     100,
	"SPX_ORDER_PAID":         200,
	"SPX_ORDER_ONDELIVERING": 210,
	"SPX_ORDER_DELIVERED":    440,
	"SPX_ORDER_COMPLETED":    800,
	"SPX_ORDER_CANCELING":    900,
	"SPX_ORDER_CANCELED":     910,
	"SPX_ORDER_RETURNED":     1000,
}

func (x SPXOrderStatus) Enum() *SPXOrderStatus {
	p := new(SPXOrderStatus)
	*p = x
	return p
}

func (x SPXOrderStatus) String() string {
	return proto.EnumName(SPXOrderStatus_name, int32(x))
}

func (x *SPXOrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXOrderStatus_value, data, "SPXOrderStatus")
	if err != nil {
		return err
	}
	*x = SPXOrderStatus(value)
	return nil
}

func (SPXOrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{6}
}

type PaymentPlatform int32

const (
	PaymentPlatform_PLATFORM_UNKNOWN PaymentPlatform = 0
	PaymentPlatform_PLATFORM_SPM     PaymentPlatform = 1
	PaymentPlatform_PLATFORM_PAOTANG PaymentPlatform = 2
)

var PaymentPlatform_name = map[int32]string{
	0: "PLATFORM_UNKNOWN",
	1: "PLATFORM_SPM",
	2: "PLATFORM_PAOTANG",
}

var PaymentPlatform_value = map[string]int32{
	"PLATFORM_UNKNOWN": 0,
	"PLATFORM_SPM":     1,
	"PLATFORM_PAOTANG": 2,
}

func (x PaymentPlatform) Enum() *PaymentPlatform {
	p := new(PaymentPlatform)
	*p = x
	return p
}

func (x PaymentPlatform) String() string {
	return proto.EnumName(PaymentPlatform_name, int32(x))
}

func (x *PaymentPlatform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentPlatform_value, data, "PaymentPlatform")
	if err != nil {
		return err
	}
	*x = PaymentPlatform(value)
	return nil
}

func (PaymentPlatform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{7}
}

// see https://confluence.shopee.io/pages/viewpage.action?pageId=15468775#PaymentDrawer(SPM)-ChannelsListChannelsList
// MY/TH 地区支付渠道： https://confluence.shopee.io/pages/viewpage.action?pageId=549397047
type PaymentMethod int32

const (
	PaymentMethod_PAY_UNKNOWN            PaymentMethod = 0
	PaymentMethod_PAY_COD                PaymentMethod = 1
	PaymentMethod_PAY_SHOPEE_PAY_WALLET  PaymentMethod = 2
	PaymentMethod_PAY_VIRTUAL_ACCOUNT    PaymentMethod = 3
	PaymentMethod_PAY_INDOMARET          PaymentMethod = 4
	PaymentMethod_PAY_ALFAMART           PaymentMethod = 5
	PaymentMethod_PAY_BANK               PaymentMethod = 6
	PaymentMethod_PAY_CYBERSOURCE        PaymentMethod = 7
	PaymentMethod_PAT_RPP_ONLINE_BANKING PaymentMethod = 8
	PaymentMethod_PAY_IPAY88_IBANKING    PaymentMethod = 9
	PaymentMethod_PAY_MOLPAY_CASH        PaymentMethod = 10
	PaymentMethod_PAY_APCC               PaymentMethod = 11
	PaymentMethod_PAY_AIRPAY_WALLET      PaymentMethod = 12
	PaymentMethod_PAY_AIRPAY_GIRO        PaymentMethod = 13
	PaymentMethod_PAY_IBANKING_AIRPAY    PaymentMethod = 14
	PaymentMethod_PAY_K_PLUS             PaymentMethod = 15
	PaymentMethod_PAY_ATM_BILL_PAYMENT   PaymentMethod = 16
	PaymentMethod_PAY_COD_SENDER         PaymentMethod = 17
	PaymentMethod_PAY_BY_SHOPEE          PaymentMethod = 18
	PaymentMethod_PAY_SHOPEE_PAY_LATER   PaymentMethod = 20
)

var PaymentMethod_name = map[int32]string{
	0:  "PAY_UNKNOWN",
	1:  "PAY_COD",
	2:  "PAY_SHOPEE_PAY_WALLET",
	3:  "PAY_VIRTUAL_ACCOUNT",
	4:  "PAY_INDOMARET",
	5:  "PAY_ALFAMART",
	6:  "PAY_BANK",
	7:  "PAY_CYBERSOURCE",
	8:  "PAT_RPP_ONLINE_BANKING",
	9:  "PAY_IPAY88_IBANKING",
	10: "PAY_MOLPAY_CASH",
	11: "PAY_APCC",
	12: "PAY_AIRPAY_WALLET",
	13: "PAY_AIRPAY_GIRO",
	14: "PAY_IBANKING_AIRPAY",
	15: "PAY_K_PLUS",
	16: "PAY_ATM_BILL_PAYMENT",
	17: "PAY_COD_SENDER",
	18: "PAY_BY_SHOPEE",
	20: "PAY_SHOPEE_PAY_LATER",
}

var PaymentMethod_value = map[string]int32{
	"PAY_UNKNOWN":            0,
	"PAY_COD":                1,
	"PAY_SHOPEE_PAY_WALLET":  2,
	"PAY_VIRTUAL_ACCOUNT":    3,
	"PAY_INDOMARET":          4,
	"PAY_ALFAMART":           5,
	"PAY_BANK":               6,
	"PAY_CYBERSOURCE":        7,
	"PAT_RPP_ONLINE_BANKING": 8,
	"PAY_IPAY88_IBANKING":    9,
	"PAY_MOLPAY_CASH":        10,
	"PAY_APCC":               11,
	"PAY_AIRPAY_WALLET":      12,
	"PAY_AIRPAY_GIRO":        13,
	"PAY_IBANKING_AIRPAY":    14,
	"PAY_K_PLUS":             15,
	"PAY_ATM_BILL_PAYMENT":   16,
	"PAY_COD_SENDER":         17,
	"PAY_BY_SHOPEE":          18,
	"PAY_SHOPEE_PAY_LATER":   20,
}

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return proto.EnumName(PaymentMethod_name, int32(x))
}

func (x *PaymentMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentMethod_value, data, "PaymentMethod")
	if err != nil {
		return err
	}
	*x = PaymentMethod(value)
	return nil
}

func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{8}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_CREATED  PaymentStatus = 0
	PaymentStatus_PAYMENT_PENDING  PaymentStatus = 1
	PaymentStatus_PAYMENT_PAID     PaymentStatus = 2
	PaymentStatus_PAYMENT_FAILED   PaymentStatus = 3
	PaymentStatus_PAYMENT_CLOSED   PaymentStatus = 4
	PaymentStatus_PAYMENT_EXPIRED  PaymentStatus = 5
	PaymentStatus_PAYMENT_CANCELED PaymentStatus = 6
)

var PaymentStatus_name = map[int32]string{
	0: "PAYMENT_CREATED",
	1: "PAYMENT_PENDING",
	2: "PAYMENT_PAID",
	3: "PAYMENT_FAILED",
	4: "PAYMENT_CLOSED",
	5: "PAYMENT_EXPIRED",
	6: "PAYMENT_CANCELED",
}

var PaymentStatus_value = map[string]int32{
	"PAYMENT_CREATED":  0,
	"PAYMENT_PENDING":  1,
	"PAYMENT_PAID":     2,
	"PAYMENT_FAILED":   3,
	"PAYMENT_CLOSED":   4,
	"PAYMENT_EXPIRED":  5,
	"PAYMENT_CANCELED": 6,
}

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return proto.EnumName(PaymentStatus_name, int32(x))
}

func (x *PaymentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentStatus_value, data, "PaymentStatus")
	if err != nil {
		return err
	}
	*x = PaymentStatus(value)
	return nil
}

func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{9}
}

type RefundStatus int32

const (
	RefundStatus_REFUND_CREATED   RefundStatus = 1
	RefundStatus_REFUND_APPROVED  RefundStatus = 2
	RefundStatus_REFUND_REJECTED  RefundStatus = 3
	RefundStatus_REFUND_PENDING   RefundStatus = 4
	RefundStatus_REFUND_COMPLETED RefundStatus = 5
	RefundStatus_REFUND_FAILED    RefundStatus = 6
)

var RefundStatus_name = map[int32]string{
	1: "REFUND_CREATED",
	2: "REFUND_APPROVED",
	3: "REFUND_REJECTED",
	4: "REFUND_PENDING",
	5: "REFUND_COMPLETED",
	6: "REFUND_FAILED",
}

var RefundStatus_value = map[string]int32{
	"REFUND_CREATED":   1,
	"REFUND_APPROVED":  2,
	"REFUND_REJECTED":  3,
	"REFUND_PENDING":   4,
	"REFUND_COMPLETED": 5,
	"REFUND_FAILED":    6,
}

func (x RefundStatus) Enum() *RefundStatus {
	p := new(RefundStatus)
	*p = x
	return p
}

func (x RefundStatus) String() string {
	return proto.EnumName(RefundStatus_name, int32(x))
}

func (x *RefundStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RefundStatus_value, data, "RefundStatus")
	if err != nil {
		return err
	}
	*x = RefundStatus(value)
	return nil
}

func (RefundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{10}
}

type OrderSource int32

const (
	OrderSource_SOURCE_SHOPEE OrderSource = 1
	OrderSource_SOURCE_FOODY  OrderSource = 2
)

var OrderSource_name = map[int32]string{
	1: "SOURCE_SHOPEE",
	2: "SOURCE_FOODY",
}

var OrderSource_value = map[string]int32{
	"SOURCE_SHOPEE": 1,
	"SOURCE_FOODY":  2,
}

func (x OrderSource) Enum() *OrderSource {
	p := new(OrderSource)
	*p = x
	return p
}

func (x OrderSource) String() string {
	return proto.EnumName(OrderSource_name, int32(x))
}

func (x *OrderSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderSource_value, data, "OrderSource")
	if err != nil {
		return err
	}
	*x = OrderSource(value)
	return nil
}

func (OrderSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{11}
}

type CancelSource int32

const (
	CancelSource_CANCEL_DEFAULT     CancelSource = 0
	CancelSource_CANCEL_BUYER       CancelSource = 1
	CancelSource_CANCEL_ADMIN       CancelSource = 2
	CancelSource_CANCEL_DRIVER      CancelSource = 3
	CancelSource_CANCEL_SYSTEM      CancelSource = 4
	CancelSource_CANCEL_MERCHANT    CancelSource = 5
	CancelSource_CANCEL_ORDER_MAKER CancelSource = 6
	CancelSource_CANCEL_SENDER      CancelSource = 7
	CancelSource_CANCEL_RECIPIENT   CancelSource = 8
	CancelSource_CANCEL_OTHER       CancelSource = 9
	CancelSource_CANCEL_SLS         CancelSource = 10
)

var CancelSource_name = map[int32]string{
	0:  "CANCEL_DEFAULT",
	1:  "CANCEL_BUYER",
	2:  "CANCEL_ADMIN",
	3:  "CANCEL_DRIVER",
	4:  "CANCEL_SYSTEM",
	5:  "CANCEL_MERCHANT",
	6:  "CANCEL_ORDER_MAKER",
	7:  "CANCEL_SENDER",
	8:  "CANCEL_RECIPIENT",
	9:  "CANCEL_OTHER",
	10: "CANCEL_SLS",
}

var CancelSource_value = map[string]int32{
	"CANCEL_DEFAULT":     0,
	"CANCEL_BUYER":       1,
	"CANCEL_ADMIN":       2,
	"CANCEL_DRIVER":      3,
	"CANCEL_SYSTEM":      4,
	"CANCEL_MERCHANT":    5,
	"CANCEL_ORDER_MAKER": 6,
	"CANCEL_SENDER":      7,
	"CANCEL_RECIPIENT":   8,
	"CANCEL_OTHER":       9,
	"CANCEL_SLS":         10,
}

func (x CancelSource) Enum() *CancelSource {
	p := new(CancelSource)
	*p = x
	return p
}

func (x CancelSource) String() string {
	return proto.EnumName(CancelSource_name, int32(x))
}

func (x *CancelSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CancelSource_value, data, "CancelSource")
	if err != nil {
		return err
	}
	*x = CancelSource(value)
	return nil
}

func (CancelSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{12}
}

// 改单的来源
type RewriteSource int32

const (
	RewriteSource_REWRITE_NONE RewriteSource = 0
	//  REWRITE_BUYER = 1;
	//  REWRITE_ADMIN = 2;
	RewriteSource_REWRITE_DRIVER RewriteSource = 3
	//  REWRITE_ROBOT = 4;
	RewriteSource_REWRITE_MERCHANT RewriteSource = 5
)

var RewriteSource_name = map[int32]string{
	0: "REWRITE_NONE",
	3: "REWRITE_DRIVER",
	5: "REWRITE_MERCHANT",
}

var RewriteSource_value = map[string]int32{
	"REWRITE_NONE":     0,
	"REWRITE_DRIVER":   3,
	"REWRITE_MERCHANT": 5,
}

func (x RewriteSource) Enum() *RewriteSource {
	p := new(RewriteSource)
	*p = x
	return p
}

func (x RewriteSource) String() string {
	return proto.EnumName(RewriteSource_name, int32(x))
}

func (x *RewriteSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewriteSource_value, data, "RewriteSource")
	if err != nil {
		return err
	}
	*x = RewriteSource(value)
	return nil
}

func (RewriteSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{13}
}

// ReturnSource和CancelSource的值要保持一致
type ReturnSource int32

const (
	ReturnSource_RETURN_BUYER    ReturnSource = 1
	ReturnSource_RETURN_ADMIN    ReturnSource = 2
	ReturnSource_RETURN_DRIVER   ReturnSource = 3
	ReturnSource_RETURN_SYSTEM   ReturnSource = 4
	ReturnSource_RETURN_MERCHANT ReturnSource = 5
)

var ReturnSource_name = map[int32]string{
	1: "RETURN_BUYER",
	2: "RETURN_ADMIN",
	3: "RETURN_DRIVER",
	4: "RETURN_SYSTEM",
	5: "RETURN_MERCHANT",
}

var ReturnSource_value = map[string]int32{
	"RETURN_BUYER":    1,
	"RETURN_ADMIN":    2,
	"RETURN_DRIVER":   3,
	"RETURN_SYSTEM":   4,
	"RETURN_MERCHANT": 5,
}

func (x ReturnSource) Enum() *ReturnSource {
	p := new(ReturnSource)
	*p = x
	return p
}

func (x ReturnSource) String() string {
	return proto.EnumName(ReturnSource_name, int32(x))
}

func (x *ReturnSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturnSource_value, data, "ReturnSource")
	if err != nil {
		return err
	}
	*x = ReturnSource(value)
	return nil
}

func (ReturnSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{14}
}

// https://confluence.shopee.io/display/SPFOODY/5.3.2.7+Order+System
// 1. 记得同步到ReturnReason
// 2. 记得修改returnReasonMap
type CancelReason int32

const (
	CancelReason_RESERVED CancelReason = 0
	//1~50 buyer
	CancelReason_BUYER_NOT_RECEIVE             CancelReason = 1
	CancelReason_BUYER_PLACED_WRONG_ORDER      CancelReason = 2
	CancelReason_BUYER_CHANGE_PAYMENT_METHOD   CancelReason = 3
	CancelReason_BUYER_HAS_CHANGED_PLAN        CancelReason = 4
	CancelReason_BUYER_WANT_CANCEL             CancelReason = 5
	CancelReason_BUYER_WANT_CANCEL_DRIVER_SAID CancelReason = 6
	CancelReason_BUYER_INPUT_WRONG_ADDRESS     CancelReason = 7
	CancelReason_BUYER_FORGET_USE_VOUCHER      CancelReason = 8
	CancelReason_BUYER_CHANGE_ORDER_PRICE      CancelReason = 9
	CancelReason_BUYER_LOST_CONTACT            CancelReason = 10
	CancelReason_BUYER_FAKE_ORDER              CancelReason = 11
	CancelReason_BUYER_DRIVER_ASKED            CancelReason = 12
	CancelReason_BUYER_DRIVER_LOST_CONTACT     CancelReason = 13
	CancelReason_BUYER_DRIVER_NO_ENOUGH_MONEY  CancelReason = 14
	CancelReason_BUYER_DRIVER_TOO_FAR          CancelReason = 15
	CancelReason_BUYER_WAITED_TOO_LONG         CancelReason = 16
	CancelReason_BUYER_ITEMS_UNAVAILABLE       CancelReason = 17
	CancelReason_BUYER_PRICE_CHANGED           CancelReason = 18
	CancelReason_BUYER_RESTAURANT_CLOSED       CancelReason = 19
	CancelReason_BUYER_OTHERS                  CancelReason = 50
	//51~100 merchant
	CancelReason_MERCHANT_OUT_OF_STOCK     CancelReason = 51
	CancelReason_MERCHANT_STORE_WAS_BUSY   CancelReason = 52
	CancelReason_MERCHANT_STORE_WAS_CLOSED CancelReason = 53
	CancelReason_MERCHANT_MISSED_ORDER     CancelReason = 54
	CancelReason_MERCHANT_REJECT_ORDER     CancelReason = 55
	CancelReason_MERCHANT_OTHERS           CancelReason = 100
	//101~150 driver
	CancelReason_DRIVER_LATE_DELIVERY                     CancelReason = 101
	CancelReason_DRIVER_CANNOT_DELIVERY                   CancelReason = 102
	CancelReason_DRIVER_FIND_NO_RESTAURANT                CancelReason = 103
	CancelReason_DRIVER_FIND_NO_BUYER                     CancelReason = 104
	CancelReason_DRIVER_LOW_DELIVERY_QUALITY              CancelReason = 105
	CancelReason_DRIVER_NO_ENOUGH_MONEY                   CancelReason = 106
	CancelReason_DRIVER_ACCIDENTALLY_TAKE_ORDER           CancelReason = 107
	CancelReason_DRIVER_BROKEN_VEHICLE                    CancelReason = 108
	CancelReason_DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED CancelReason = 109
	CancelReason_DRIVER_ITEMS_UNAVAILABLE                 CancelReason = 110
	CancelReason_DRIVER_BUYER_ASKED                       CancelReason = 111
	CancelReason_DRIVER_RESTAURANT_CLOSED                 CancelReason = 112
	CancelReason_DRIVER_RESTAURANT_REJECTED               CancelReason = 113
	CancelReason_DRIVER_FAKE_ORDER                        CancelReason = 114
	CancelReason_DRIVER_OTHERS                            CancelReason = 150
	//151~200 platform
	CancelReason_PLATFORM_CANNOT_MATCH_DRIVER              CancelReason = 151
	CancelReason_PLATFORM_PAYMENT_FAILED                   CancelReason = 152
	CancelReason_PLATFORM_ORDER_EXPIRED                    CancelReason = 153
	CancelReason_PLATFORM_ORDER_EXPIRED_UNCONFIRMED        CancelReason = 154
	CancelReason_PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED CancelReason = 156
	// SPX Order cancel reason
	// https://docs.google.com/spreadsheets/d/1lymx1sfZpp69ZRgvve_yrN61IzSarygDX_JkrRmZer8/edit#gid=338141721
	CancelReason_EXPRESS_OTHERS                                CancelReason = 1000
	CancelReason_EXPRESS_BAD_WEATHER                           CancelReason = 1001
	CancelReason_EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER        CancelReason = 1002
	CancelReason_EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER       CancelReason = 1003
	CancelReason_EXPRESS_DRIVER_COULD_NOT_FIND_SELLER          CancelReason = 1004
	CancelReason_EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT   CancelReason = 1005
	CancelReason_EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL  CancelReason = 1006
	CancelReason_EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR            CancelReason = 1007
	CancelReason_EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY     CancelReason = 1008
	CancelReason_EXPRESS_PKG_IS_NOT_WELL_PREPARED              CancelReason = 1009
	CancelReason_EXPRESS_PROHIBITED_ITEM                       CancelReason = 1010
	CancelReason_EXPRESS_STORE_WAS_CLOSED                      CancelReason = 1011
	CancelReason_EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD        CancelReason = 1012
	CancelReason_EXPRESS_CUSTOMER_HAS_CHANGE_PLAN              CancelReason = 1013
	CancelReason_EXPRESS_CUSTOMER_INPUT_WRONG_INFO             CancelReason = 1014
	CancelReason_EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER           CancelReason = 1015
	CancelReason_EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL       CancelReason = 1016
	CancelReason_EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER       CancelReason = 1017
	CancelReason_EXPRESS_DRIVER_IS_TOO_FAR                     CancelReason = 1018
	CancelReason_EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG          CancelReason = 1019
	CancelReason_EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT          CancelReason = 1020
	CancelReason_EXPRESS_DRIVER_REJECT_MY_ITEM                 CancelReason = 1021
	CancelReason_EXPRESS_CAN_NOT_MATCH_DRIVER                  CancelReason = 1022
	CancelReason_EXPRESS_PAYMENT_FAILED                        CancelReason = 1023
	CancelReason_EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD        CancelReason = 1024
	CancelReason_EXPRESS_FAILED_TO_DECODE_LOGLAT               CancelReason = 1025
	CancelReason_EXPRESS_LOST                                  CancelReason = 1026
	CancelReason_EXPRESS_DAMAGE                                CancelReason = 1027
	CancelReason_EXPRESS_REACHED_DRIVER_DROPPING_LIMIT         CancelReason = 1028
	CancelReason_EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM           CancelReason = 1029
	CancelReason_EXPRESS_DRIVER_VEHICLE_BROKEN                 CancelReason = 2000
	CancelReason_EXPRESS_INSISTS_CANCEL                        CancelReason = 2001
	CancelReason_EXPRESS_INSISTS_RETURN                        CancelReason = 2002
	CancelReason_EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG       CancelReason = 2003
	CancelReason_EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT            CancelReason = 2004
	CancelReason_EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME         CancelReason = 2005
	CancelReason_EXPRESS_RIOT                                  CancelReason = 2006
	CancelReason_EXPRESS_NATURAL_DISASTER                      CancelReason = 2007
	CancelReason_EXPRESS_DRIVER_REPORT_ROAD_BLOCKED            CancelReason = 2008
	CancelReason_EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT  CancelReason = 2009
	CancelReason_EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM CancelReason = 2010
	CancelReason_EXPRESS_INSISTS_TO_RETURN_ORDER               CancelReason = 2011
	CancelReason_EXPRESS_RECIPIENT_REPORT_FAKE_ORDER           CancelReason = 2012
	CancelReason_EXPRESS_ITEM_TAMPERED                         CancelReason = 2013
	CancelReason_EXPRESS_SENDER_NOT_ACCEPT_ITEM                CancelReason = 2014
	CancelReason_EXPRESS_CUSTOMER_CANNOT_CONTACT               CancelReason = 2015
	// Food Order cancel reason
	CancelReason_CUSTOMER_NOT_RECEIVE_FOOD                CancelReason = 10001
	CancelReason_CUSTOMER_PLACED_WRONG_ORDER              CancelReason = 10002
	CancelReason_CUSTOMER_CHANGE_PAYMENT_METHOD           CancelReason = 10003
	CancelReason_CUSTOMER_HAS_CHANGED_PLAN                CancelReason = 10004
	CancelReason_CUSTOMER_WANT_CANCEL                     CancelReason = 10005
	CancelReason_CUSTOMER_WANT_CANCEL_DRIVER_SAID         CancelReason = 10006
	CancelReason_CUSTOMER_INPUT_WRONG_ADDRESS             CancelReason = 10007
	CancelReason_CUSTOMER_FORGET_USE_VOUCHER              CancelReason = 10008
	CancelReason_ORDER_PRICE_CHANGED                      CancelReason = 10009
	CancelReason_CUSTOMER_LOST_CONTACT                    CancelReason = 10010
	CancelReason_FAKE_ORDER                               CancelReason = 10011
	CancelReason_DRIVER_ASK_TO_CANCEL                     CancelReason = 10012
	CancelReason_DRIVER_LOST_CONTACT                      CancelReason = 10013
	CancelReason_DRIVER_NO_HAVE_ENOUGH_MONEY              CancelReason = 10014
	CancelReason_DRIVER_TOO_FAR                           CancelReason = 10015
	CancelReason_CUSTOMER_WAITED_TOO_LONG                 CancelReason = 10016
	CancelReason_ITEMS_UNAVAILABLE                        CancelReason = 10017
	CancelReason_PRICE_CHANGED                            CancelReason = 10018
	CancelReason_RESTAURANT_IS_CLOSED                     CancelReason = 10019
	CancelReason_CUSTOMER_WANTS_TO_EDIT_ORDER             CancelReason = 10020
	CancelReason_CUSTOMER_REGRET_AFTER_SUBMIT             CancelReason = 10021
	CancelReason_OTHERS_REASON                            CancelReason = 10050
	CancelReason_RESTAURANT_WAS_BUSY                      CancelReason = 10052
	CancelReason_RESTAURANT_MISSED_ORDER                  CancelReason = 10054
	CancelReason_DRIVER_IS_UNRESPONSIVE                   CancelReason = 10057
	CancelReason_DRIVER_ASKED_TO_CANCEL                   CancelReason = 10058
	CancelReason_LATE_DELIVERY                            CancelReason = 10101
	CancelReason_DRIVER_CANNOT_CONTINUE_DELIVERY          CancelReason = 10102
	CancelReason_DRIVER_CANNOT_FIND_RESTAURANT            CancelReason = 10103
	CancelReason_DRIVER_CANNOT_CONTACT_BUYER              CancelReason = 10104
	CancelReason_LOW_DELIVERY_QUALITY                     CancelReason = 10105
	CancelReason_DRIVER_ACCIDENTALLY_TOOK_ORDER           CancelReason = 10107
	CancelReason_DRIVER_VEHICLE_BROKEN                    CancelReason = 10108
	CancelReason_DRIVER_REPORT_CUSTOMER_ASKED_CANCEL      CancelReason = 10111
	CancelReason_RESTAURANT_REJECT_ORDER                  CancelReason = 10113
	CancelReason_DRIVER_REPORT_FAKE_ORDER                 CancelReason = 10114
	CancelReason_DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT   CancelReason = 10115
	CancelReason_DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER      CancelReason = 10116
	CancelReason_DRIVER_LONG_QUEUE_IN_THE_RESTAURANT      CancelReason = 10117
	CancelReason_DRIVER_BAD_WEATHER                       CancelReason = 10118
	CancelReason_CANNOT_MATCH_DRIVER                      CancelReason = 10151
	CancelReason_PAYMENT_FAILURE                          CancelReason = 10152
	CancelReason_PAYMENT_TIMEOUT                          CancelReason = 10153
	CancelReason_ORDER_EXPIRED_UNCONFIRMED                CancelReason = 10154
	CancelReason_LOW_COMPLETED_RATE_PREDICATED            CancelReason = 10155
	CancelReason_SYSTEM_IS_NOT_RESPONDING                 CancelReason = 10160
	CancelReason_MERCHANT_IS_UNRESPONSIVE                 CancelReason = 10161
	CancelReason_DRIVER_DO_NOT_PICK_FOOD                  CancelReason = 10162
	CancelReason_RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD CancelReason = 10163
	CancelReason_FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP    CancelReason = 10164
	CancelReason_ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE  CancelReason = 10165
	CancelReason_CUSTOMER_ADDRESS_NOT_FOUND               CancelReason = 10166
	CancelReason_CUSTOMER_DO_NOT_ACCEPT_THE_ORDER         CancelReason = 10167
	CancelReason_IMPROPER_FOOD_HANDING_BY_DRIVER          CancelReason = 10168
)

var CancelReason_name = map[int32]string{
	0:     "RESERVED",
	1:     "BUYER_NOT_RECEIVE",
	2:     "BUYER_PLACED_WRONG_ORDER",
	3:     "BUYER_CHANGE_PAYMENT_METHOD",
	4:     "BUYER_HAS_CHANGED_PLAN",
	5:     "BUYER_WANT_CANCEL",
	6:     "BUYER_WANT_CANCEL_DRIVER_SAID",
	7:     "BUYER_INPUT_WRONG_ADDRESS",
	8:     "BUYER_FORGET_USE_VOUCHER",
	9:     "BUYER_CHANGE_ORDER_PRICE",
	10:    "BUYER_LOST_CONTACT",
	11:    "BUYER_FAKE_ORDER",
	12:    "BUYER_DRIVER_ASKED",
	13:    "BUYER_DRIVER_LOST_CONTACT",
	14:    "BUYER_DRIVER_NO_ENOUGH_MONEY",
	15:    "BUYER_DRIVER_TOO_FAR",
	16:    "BUYER_WAITED_TOO_LONG",
	17:    "BUYER_ITEMS_UNAVAILABLE",
	18:    "BUYER_PRICE_CHANGED",
	19:    "BUYER_RESTAURANT_CLOSED",
	50:    "BUYER_OTHERS",
	51:    "MERCHANT_OUT_OF_STOCK",
	52:    "MERCHANT_STORE_WAS_BUSY",
	53:    "MERCHANT_STORE_WAS_CLOSED",
	54:    "MERCHANT_MISSED_ORDER",
	55:    "MERCHANT_REJECT_ORDER",
	100:   "MERCHANT_OTHERS",
	101:   "DRIVER_LATE_DELIVERY",
	102:   "DRIVER_CANNOT_DELIVERY",
	103:   "DRIVER_FIND_NO_RESTAURANT",
	104:   "DRIVER_FIND_NO_BUYER",
	105:   "DRIVER_LOW_DELIVERY_QUALITY",
	106:   "DRIVER_NO_ENOUGH_MONEY",
	107:   "DRIVER_ACCIDENTALLY_TAKE_ORDER",
	108:   "DRIVER_BROKEN_VEHICLE",
	109:   "DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED",
	110:   "DRIVER_ITEMS_UNAVAILABLE",
	111:   "DRIVER_BUYER_ASKED",
	112:   "DRIVER_RESTAURANT_CLOSED",
	113:   "DRIVER_RESTAURANT_REJECTED",
	114:   "DRIVER_FAKE_ORDER",
	150:   "DRIVER_OTHERS",
	151:   "PLATFORM_CANNOT_MATCH_DRIVER",
	152:   "PLATFORM_PAYMENT_FAILED",
	153:   "PLATFORM_ORDER_EXPIRED",
	154:   "PLATFORM_ORDER_EXPIRED_UNCONFIRMED",
	156:   "PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED",
	1000:  "EXPRESS_OTHERS",
	1001:  "EXPRESS_BAD_WEATHER",
	1002:  "EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER",
	1003:  "EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER",
	1004:  "EXPRESS_DRIVER_COULD_NOT_FIND_SELLER",
	1005:  "EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT",
	1006:  "EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL",
	1007:  "EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR",
	1008:  "EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY",
	1009:  "EXPRESS_PKG_IS_NOT_WELL_PREPARED",
	1010:  "EXPRESS_PROHIBITED_ITEM",
	1011:  "EXPRESS_STORE_WAS_CLOSED",
	1012:  "EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD",
	1013:  "EXPRESS_CUSTOMER_HAS_CHANGE_PLAN",
	1014:  "EXPRESS_CUSTOMER_INPUT_WRONG_INFO",
	1015:  "EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER",
	1016:  "EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL",
	1017:  "EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER",
	1018:  "EXPRESS_DRIVER_IS_TOO_FAR",
	1019:  "EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG",
	1020:  "EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT",
	1021:  "EXPRESS_DRIVER_REJECT_MY_ITEM",
	1022:  "EXPRESS_CAN_NOT_MATCH_DRIVER",
	1023:  "EXPRESS_PAYMENT_FAILED",
	1024:  "EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD",
	1025:  "EXPRESS_FAILED_TO_DECODE_LOGLAT",
	1026:  "EXPRESS_LOST",
	1027:  "EXPRESS_DAMAGE",
	1028:  "EXPRESS_REACHED_DRIVER_DROPPING_LIMIT",
	1029:  "EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM",
	2000:  "EXPRESS_DRIVER_VEHICLE_BROKEN",
	2001:  "EXPRESS_INSISTS_CANCEL",
	2002:  "EXPRESS_INSISTS_RETURN",
	2003:  "EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG",
	2004:  "EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT",
	2005:  "EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME",
	2006:  "EXPRESS_RIOT",
	2007:  "EXPRESS_NATURAL_DISASTER",
	2008:  "EXPRESS_DRIVER_REPORT_ROAD_BLOCKED",
	2009:  "EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT",
	2010:  "EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM",
	2011:  "EXPRESS_INSISTS_TO_RETURN_ORDER",
	2012:  "EXPRESS_RECIPIENT_REPORT_FAKE_ORDER",
	2013:  "EXPRESS_ITEM_TAMPERED",
	2014:  "EXPRESS_SENDER_NOT_ACCEPT_ITEM",
	2015:  "EXPRESS_CUSTOMER_CANNOT_CONTACT",
	10001: "CUSTOMER_NOT_RECEIVE_FOOD",
	10002: "CUSTOMER_PLACED_WRONG_ORDER",
	10003: "CUSTOMER_CHANGE_PAYMENT_METHOD",
	10004: "CUSTOMER_HAS_CHANGED_PLAN",
	10005: "CUSTOMER_WANT_CANCEL",
	10006: "CUSTOMER_WANT_CANCEL_DRIVER_SAID",
	10007: "CUSTOMER_INPUT_WRONG_ADDRESS",
	10008: "CUSTOMER_FORGET_USE_VOUCHER",
	10009: "ORDER_PRICE_CHANGED",
	10010: "CUSTOMER_LOST_CONTACT",
	10011: "FAKE_ORDER",
	10012: "DRIVER_ASK_TO_CANCEL",
	10013: "DRIVER_LOST_CONTACT",
	10014: "DRIVER_NO_HAVE_ENOUGH_MONEY",
	10015: "DRIVER_TOO_FAR",
	10016: "CUSTOMER_WAITED_TOO_LONG",
	10017: "ITEMS_UNAVAILABLE",
	10018: "PRICE_CHANGED",
	10019: "RESTAURANT_IS_CLOSED",
	10020: "CUSTOMER_WANTS_TO_EDIT_ORDER",
	10021: "CUSTOMER_REGRET_AFTER_SUBMIT",
	10050: "OTHERS_REASON",
	10052: "RESTAURANT_WAS_BUSY",
	10054: "RESTAURANT_MISSED_ORDER",
	10057: "DRIVER_IS_UNRESPONSIVE",
	10058: "DRIVER_ASKED_TO_CANCEL",
	10101: "LATE_DELIVERY",
	10102: "DRIVER_CANNOT_CONTINUE_DELIVERY",
	10103: "DRIVER_CANNOT_FIND_RESTAURANT",
	10104: "DRIVER_CANNOT_CONTACT_BUYER",
	10105: "LOW_DELIVERY_QUALITY",
	10107: "DRIVER_ACCIDENTALLY_TOOK_ORDER",
	10108: "DRIVER_VEHICLE_BROKEN",
	10111: "DRIVER_REPORT_CUSTOMER_ASKED_CANCEL",
	10113: "RESTAURANT_REJECT_ORDER",
	10114: "DRIVER_REPORT_FAKE_ORDER",
	10115: "DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT",
	10116: "DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER",
	10117: "DRIVER_LONG_QUEUE_IN_THE_RESTAURANT",
	10118: "DRIVER_BAD_WEATHER",
	10151: "CANNOT_MATCH_DRIVER",
	10152: "PAYMENT_FAILURE",
	10153: "PAYMENT_TIMEOUT",
	10154: "ORDER_EXPIRED_UNCONFIRMED",
	10155: "LOW_COMPLETED_RATE_PREDICATED",
	10160: "SYSTEM_IS_NOT_RESPONDING",
	10161: "MERCHANT_IS_UNRESPONSIVE",
	10162: "DRIVER_DO_NOT_PICK_FOOD",
	10163: "RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD",
	10164: "FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP",
	10165: "ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE",
	10166: "CUSTOMER_ADDRESS_NOT_FOUND",
	10167: "CUSTOMER_DO_NOT_ACCEPT_THE_ORDER",
	10168: "IMPROPER_FOOD_HANDING_BY_DRIVER",
}

var CancelReason_value = map[string]int32{
	"RESERVED":                                      0,
	"BUYER_NOT_RECEIVE":                             1,
	"BUYER_PLACED_WRONG_ORDER":                      2,
	"BUYER_CHANGE_PAYMENT_METHOD":                   3,
	"BUYER_HAS_CHANGED_PLAN":                        4,
	"BUYER_WANT_CANCEL":                             5,
	"BUYER_WANT_CANCEL_DRIVER_SAID":                 6,
	"BUYER_INPUT_WRONG_ADDRESS":                     7,
	"BUYER_FORGET_USE_VOUCHER":                      8,
	"BUYER_CHANGE_ORDER_PRICE":                      9,
	"BUYER_LOST_CONTACT":                            10,
	"BUYER_FAKE_ORDER":                              11,
	"BUYER_DRIVER_ASKED":                            12,
	"BUYER_DRIVER_LOST_CONTACT":                     13,
	"BUYER_DRIVER_NO_ENOUGH_MONEY":                  14,
	"BUYER_DRIVER_TOO_FAR":                          15,
	"BUYER_WAITED_TOO_LONG":                         16,
	"BUYER_ITEMS_UNAVAILABLE":                       17,
	"BUYER_PRICE_CHANGED":                           18,
	"BUYER_RESTAURANT_CLOSED":                       19,
	"BUYER_OTHERS":                                  50,
	"MERCHANT_OUT_OF_STOCK":                         51,
	"MERCHANT_STORE_WAS_BUSY":                       52,
	"MERCHANT_STORE_WAS_CLOSED":                     53,
	"MERCHANT_MISSED_ORDER":                         54,
	"MERCHANT_REJECT_ORDER":                         55,
	"MERCHANT_OTHERS":                               100,
	"DRIVER_LATE_DELIVERY":                          101,
	"DRIVER_CANNOT_DELIVERY":                        102,
	"DRIVER_FIND_NO_RESTAURANT":                     103,
	"DRIVER_FIND_NO_BUYER":                          104,
	"DRIVER_LOW_DELIVERY_QUALITY":                   105,
	"DRIVER_NO_ENOUGH_MONEY":                        106,
	"DRIVER_ACCIDENTALLY_TAKE_ORDER":                107,
	"DRIVER_BROKEN_VEHICLE":                         108,
	"DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED":      109,
	"DRIVER_ITEMS_UNAVAILABLE":                      110,
	"DRIVER_BUYER_ASKED":                            111,
	"DRIVER_RESTAURANT_CLOSED":                      112,
	"DRIVER_RESTAURANT_REJECTED":                    113,
	"DRIVER_FAKE_ORDER":                             114,
	"DRIVER_OTHERS":                                 150,
	"PLATFORM_CANNOT_MATCH_DRIVER":                  151,
	"PLATFORM_PAYMENT_FAILED":                       152,
	"PLATFORM_ORDER_EXPIRED":                        153,
	"PLATFORM_ORDER_EXPIRED_UNCONFIRMED":            154,
	"PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED":     156,
	"EXPRESS_OTHERS":                                1000,
	"EXPRESS_BAD_WEATHER":                           1001,
	"EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER":        1002,
	"EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER":       1003,
	"EXPRESS_DRIVER_COULD_NOT_FIND_SELLER":          1004,
	"EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT":   1005,
	"EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL":  1006,
	"EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR":            1007,
	"EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY":     1008,
	"EXPRESS_PKG_IS_NOT_WELL_PREPARED":              1009,
	"EXPRESS_PROHIBITED_ITEM":                       1010,
	"EXPRESS_STORE_WAS_CLOSED":                      1011,
	"EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD":        1012,
	"EXPRESS_CUSTOMER_HAS_CHANGE_PLAN":              1013,
	"EXPRESS_CUSTOMER_INPUT_WRONG_INFO":             1014,
	"EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER":           1015,
	"EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL":       1016,
	"EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER":       1017,
	"EXPRESS_DRIVER_IS_TOO_FAR":                     1018,
	"EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG":          1019,
	"EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT":          1020,
	"EXPRESS_DRIVER_REJECT_MY_ITEM":                 1021,
	"EXPRESS_CAN_NOT_MATCH_DRIVER":                  1022,
	"EXPRESS_PAYMENT_FAILED":                        1023,
	"EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD":        1024,
	"EXPRESS_FAILED_TO_DECODE_LOGLAT":               1025,
	"EXPRESS_LOST":                                  1026,
	"EXPRESS_DAMAGE":                                1027,
	"EXPRESS_REACHED_DRIVER_DROPPING_LIMIT":         1028,
	"EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM":           1029,
	"EXPRESS_DRIVER_VEHICLE_BROKEN":                 2000,
	"EXPRESS_INSISTS_CANCEL":                        2001,
	"EXPRESS_INSISTS_RETURN":                        2002,
	"EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG":       2003,
	"EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT":            2004,
	"EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME":         2005,
	"EXPRESS_RIOT":                                  2006,
	"EXPRESS_NATURAL_DISASTER":                      2007,
	"EXPRESS_DRIVER_REPORT_ROAD_BLOCKED":            2008,
	"EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT":  2009,
	"EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM": 2010,
	"EXPRESS_INSISTS_TO_RETURN_ORDER":               2011,
	"EXPRESS_RECIPIENT_REPORT_FAKE_ORDER":           2012,
	"EXPRESS_ITEM_TAMPERED":                         2013,
	"EXPRESS_SENDER_NOT_ACCEPT_ITEM":                2014,
	"EXPRESS_CUSTOMER_CANNOT_CONTACT":               2015,
	"CUSTOMER_NOT_RECEIVE_FOOD":                     10001,
	"CUSTOMER_PLACED_WRONG_ORDER":                   10002,
	"CUSTOMER_CHANGE_PAYMENT_METHOD":                10003,
	"CUSTOMER_HAS_CHANGED_PLAN":                     10004,
	"CUSTOMER_WANT_CANCEL":                          10005,
	"CUSTOMER_WANT_CANCEL_DRIVER_SAID":              10006,
	"CUSTOMER_INPUT_WRONG_ADDRESS":                  10007,
	"CUSTOMER_FORGET_USE_VOUCHER":                   10008,
	"ORDER_PRICE_CHANGED":                           10009,
	"CUSTOMER_LOST_CONTACT":                         10010,
	"FAKE_ORDER":                                    10011,
	"DRIVER_ASK_TO_CANCEL":                          10012,
	"DRIVER_LOST_CONTACT":                           10013,
	"DRIVER_NO_HAVE_ENOUGH_MONEY":                   10014,
	"DRIVER_TOO_FAR":                                10015,
	"CUSTOMER_WAITED_TOO_LONG":                      10016,
	"ITEMS_UNAVAILABLE":                             10017,
	"PRICE_CHANGED":                                 10018,
	"RESTAURANT_IS_CLOSED":                          10019,
	"CUSTOMER_WANTS_TO_EDIT_ORDER":                  10020,
	"CUSTOMER_REGRET_AFTER_SUBMIT":                  10021,
	"OTHERS_REASON":                                 10050,
	"RESTAURANT_WAS_BUSY":                           10052,
	"RESTAURANT_MISSED_ORDER":                       10054,
	"DRIVER_IS_UNRESPONSIVE":                        10057,
	"DRIVER_ASKED_TO_CANCEL":                        10058,
	"LATE_DELIVERY":                                 10101,
	"DRIVER_CANNOT_CONTINUE_DELIVERY":               10102,
	"DRIVER_CANNOT_FIND_RESTAURANT":                 10103,
	"DRIVER_CANNOT_CONTACT_BUYER":                   10104,
	"LOW_DELIVERY_QUALITY":                          10105,
	"DRIVER_ACCIDENTALLY_TOOK_ORDER":                10107,
	"DRIVER_VEHICLE_BROKEN":                         10108,
	"DRIVER_REPORT_CUSTOMER_ASKED_CANCEL":           10111,
	"RESTAURANT_REJECT_ORDER":                       10113,
	"DRIVER_REPORT_FAKE_ORDER":                      10114,
	"DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT":        10115,
	"DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER":           10116,
	"DRIVER_LONG_QUEUE_IN_THE_RESTAURANT":           10117,
	"DRIVER_BAD_WEATHER":                            10118,
	"CANNOT_MATCH_DRIVER":                           10151,
	"PAYMENT_FAILURE":                               10152,
	"PAYMENT_TIMEOUT":                               10153,
	"ORDER_EXPIRED_UNCONFIRMED":                     10154,
	"LOW_COMPLETED_RATE_PREDICATED":                 10155,
	"SYSTEM_IS_NOT_RESPONDING":                      10160,
	"MERCHANT_IS_UNRESPONSIVE":                      10161,
	"DRIVER_DO_NOT_PICK_FOOD":                       10162,
	"RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD":      10163,
	"FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP":         10164,
	"ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE":       10165,
	"CUSTOMER_ADDRESS_NOT_FOUND":                    10166,
	"CUSTOMER_DO_NOT_ACCEPT_THE_ORDER":              10167,
	"IMPROPER_FOOD_HANDING_BY_DRIVER":               10168,
}

func (x CancelReason) Enum() *CancelReason {
	p := new(CancelReason)
	*p = x
	return p
}

func (x CancelReason) String() string {
	return proto.EnumName(CancelReason_name, int32(x))
}

func (x *CancelReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CancelReason_value, data, "CancelReason")
	if err != nil {
		return err
	}
	*x = CancelReason(value)
	return nil
}

func (CancelReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{15}
}

// 履约单状态
type DeliveryStatus int32

const (
	DeliveryStatus_DELIVERY_CREATED        DeliveryStatus = 1
	DeliveryStatus_DELIVERY_CONFIRMED      DeliveryStatus = 2
	DeliveryStatus_DELIVERY_PICKUP_ARRIVED DeliveryStatus = 3
	DeliveryStatus_DELIVERY_PICKED_UP      DeliveryStatus = 4
	DeliveryStatus_DELIVERY_COMPLETED      DeliveryStatus = 5
	DeliveryStatus_DELIVERY_CANCELED       DeliveryStatus = 6
	DeliveryStatus_DELIVERY_DROPPING       DeliveryStatus = 7
)

var DeliveryStatus_name = map[int32]string{
	1: "DELIVERY_CREATED",
	2: "DELIVERY_CONFIRMED",
	3: "DELIVERY_PICKUP_ARRIVED",
	4: "DELIVERY_PICKED_UP",
	5: "DELIVERY_COMPLETED",
	6: "DELIVERY_CANCELED",
	7: "DELIVERY_DROPPING",
}

var DeliveryStatus_value = map[string]int32{
	"DELIVERY_CREATED":        1,
	"DELIVERY_CONFIRMED":      2,
	"DELIVERY_PICKUP_ARRIVED": 3,
	"DELIVERY_PICKED_UP":      4,
	"DELIVERY_COMPLETED":      5,
	"DELIVERY_CANCELED":       6,
	"DELIVERY_DROPPING":       7,
}

func (x DeliveryStatus) Enum() *DeliveryStatus {
	p := new(DeliveryStatus)
	*p = x
	return p
}

func (x DeliveryStatus) String() string {
	return proto.EnumName(DeliveryStatus_name, int32(x))
}

func (x *DeliveryStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryStatus_value, data, "DeliveryStatus")
	if err != nil {
		return err
	}
	*x = DeliveryStatus(value)
	return nil
}

func (DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{16}
}

// 配送单状态
type DriverDeliveryStatus int32

const (
	DriverDeliveryStatus_DRIVER_DELIVERY_CONFIRMED DriverDeliveryStatus = 100
	DriverDeliveryStatus_DRIVER_DELIVERY_COMPLETED DriverDeliveryStatus = 200
	DriverDeliveryStatus_DRIVER_DELIVERY_CANCELED  DriverDeliveryStatus = 300
)

var DriverDeliveryStatus_name = map[int32]string{
	100: "DRIVER_DELIVERY_CONFIRMED",
	200: "DRIVER_DELIVERY_COMPLETED",
	300: "DRIVER_DELIVERY_CANCELED",
}

var DriverDeliveryStatus_value = map[string]int32{
	"DRIVER_DELIVERY_CONFIRMED": 100,
	"DRIVER_DELIVERY_COMPLETED": 200,
	"DRIVER_DELIVERY_CANCELED":  300,
}

func (x DriverDeliveryStatus) Enum() *DriverDeliveryStatus {
	p := new(DriverDeliveryStatus)
	*p = x
	return p
}

func (x DriverDeliveryStatus) String() string {
	return proto.EnumName(DriverDeliveryStatus_name, int32(x))
}

func (x *DriverDeliveryStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverDeliveryStatus_value, data, "DriverDeliveryStatus")
	if err != nil {
		return err
	}
	*x = DriverDeliveryStatus(value)
	return nil
}

func (DriverDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{17}
}

type PartnerType int32

const (
	PartnerType_PARTNER_LISTED PartnerType = 1
	PartnerType_PARTNER_NORMAL PartnerType = 2
	PartnerType_PARTNER_STAR   PartnerType = 3
	PartnerType_PARTNER_MALL   PartnerType = 4
	PartnerType_PARTNER_SUPER  PartnerType = 5
)

var PartnerType_name = map[int32]string{
	1: "PARTNER_LISTED",
	2: "PARTNER_NORMAL",
	3: "PARTNER_STAR",
	4: "PARTNER_MALL",
	5: "PARTNER_SUPER",
}

var PartnerType_value = map[string]int32{
	"PARTNER_LISTED": 1,
	"PARTNER_NORMAL": 2,
	"PARTNER_STAR":   3,
	"PARTNER_MALL":   4,
	"PARTNER_SUPER":  5,
}

func (x PartnerType) Enum() *PartnerType {
	p := new(PartnerType)
	*p = x
	return p
}

func (x PartnerType) String() string {
	return proto.EnumName(PartnerType_name, int32(x))
}

func (x *PartnerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PartnerType_value, data, "PartnerType")
	if err != nil {
		return err
	}
	*x = PartnerType(value)
	return nil
}

func (PartnerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{18}
}

type StoreStatus int32

const (
	StoreStatus_STORE_INACTIVE StoreStatus = 1
	StoreStatus_STORE_ACTIVE   StoreStatus = 2
)

var StoreStatus_name = map[int32]string{
	1: "STORE_INACTIVE",
	2: "STORE_ACTIVE",
}

var StoreStatus_value = map[string]int32{
	"STORE_INACTIVE": 1,
	"STORE_ACTIVE":   2,
}

func (x StoreStatus) Enum() *StoreStatus {
	p := new(StoreStatus)
	*p = x
	return p
}

func (x StoreStatus) String() string {
	return proto.EnumName(StoreStatus_name, int32(x))
}

func (x *StoreStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreStatus_value, data, "StoreStatus")
	if err != nil {
		return err
	}
	*x = StoreStatus(value)
	return nil
}

func (StoreStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{19}
}

type DisplayOpeningStatus int32

const (
	DisplayOpeningStatus_DisplayOpeningStatus_CLOSED DisplayOpeningStatus = 1
	DisplayOpeningStatus_DisplayOpeningStatus_OPEN   DisplayOpeningStatus = 2
	DisplayOpeningStatus_DisplayOpeningStatus_PAUSE  DisplayOpeningStatus = 3
)

var DisplayOpeningStatus_name = map[int32]string{
	1: "DisplayOpeningStatus_CLOSED",
	2: "DisplayOpeningStatus_OPEN",
	3: "DisplayOpeningStatus_PAUSE",
}

var DisplayOpeningStatus_value = map[string]int32{
	"DisplayOpeningStatus_CLOSED": 1,
	"DisplayOpeningStatus_OPEN":   2,
	"DisplayOpeningStatus_PAUSE":  3,
}

func (x DisplayOpeningStatus) Enum() *DisplayOpeningStatus {
	p := new(DisplayOpeningStatus)
	*p = x
	return p
}

func (x DisplayOpeningStatus) String() string {
	return proto.EnumName(DisplayOpeningStatus_name, int32(x))
}

func (x *DisplayOpeningStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DisplayOpeningStatus_value, data, "DisplayOpeningStatus")
	if err != nil {
		return err
	}
	*x = DisplayOpeningStatus(value)
	return nil
}

func (DisplayOpeningStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20}
}

type WalletStatus int32

const (
	WalletStatus_WALLET_NORMAL WalletStatus = 1
)

var WalletStatus_name = map[int32]string{
	1: "WALLET_NORMAL",
}

var WalletStatus_value = map[string]int32{
	"WALLET_NORMAL": 1,
}

func (x WalletStatus) Enum() *WalletStatus {
	p := new(WalletStatus)
	*p = x
	return p
}

func (x WalletStatus) String() string {
	return proto.EnumName(WalletStatus_name, int32(x))
}

func (x *WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletStatus_value, data, "WalletStatus")
	if err != nil {
		return err
	}
	*x = WalletStatus(value)
	return nil
}

func (WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21}
}

type PayoutMode int32

const (
	PayoutMode_PAYOUT_NONE PayoutMode = 0
	PayoutMode_MANUAL      PayoutMode = 1
	PayoutMode_SPM         PayoutMode = 2
)

var PayoutMode_name = map[int32]string{
	0: "PAYOUT_NONE",
	1: "MANUAL",
	2: "SPM",
}

var PayoutMode_value = map[string]int32{
	"PAYOUT_NONE": 0,
	"MANUAL":      1,
	"SPM":         2,
}

func (x PayoutMode) Enum() *PayoutMode {
	p := new(PayoutMode)
	*p = x
	return p
}

func (x PayoutMode) String() string {
	return proto.EnumName(PayoutMode_name, int32(x))
}

func (x *PayoutMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PayoutMode_value, data, "PayoutMode")
	if err != nil {
		return err
	}
	*x = PayoutMode(value)
	return nil
}

func (PayoutMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{22}
}

type WalletType int32

const (
	WalletType_WALLET_TYPE_DRIVER   WalletType = 1
	WalletType_WALLET_TYPE_MERCHANT WalletType = 2
)

var WalletType_name = map[int32]string{
	1: "WALLET_TYPE_DRIVER",
	2: "WALLET_TYPE_MERCHANT",
}

var WalletType_value = map[string]int32{
	"WALLET_TYPE_DRIVER":   1,
	"WALLET_TYPE_MERCHANT": 2,
}

func (x WalletType) Enum() *WalletType {
	p := new(WalletType)
	*p = x
	return p
}

func (x WalletType) String() string {
	return proto.EnumName(WalletType_name, int32(x))
}

func (x *WalletType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletType_value, data, "WalletType")
	if err != nil {
		return err
	}
	*x = WalletType(value)
	return nil
}

func (WalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{23}
}

type TransactionType int32

const (
	TransactionType_CREDIT_TOP_UP                           TransactionType = 1
	TransactionType_DEBIT_WITHDRAWAL                        TransactionType = 2
	TransactionType_CREDIT_WITHDRAWAL_REFUND                TransactionType = 3
	TransactionType_CREDIT_SHIPPING_FEE                     TransactionType = 4
	TransactionType_CREDIT_ORDER_ADJUSTMENT                 TransactionType = 5
	TransactionType_DEBIT_ORDER_ADJUSTMENT                  TransactionType = 6
	TransactionType_CREDIT_MANUAL_ADJUSTMENT                TransactionType = 7
	TransactionType_DEBIT_MANUAL_ADJUSTMENT                 TransactionType = 8
	TransactionType_DEBIT_ADVANCED_DEPOSIT                  TransactionType = 9
	TransactionType_CREDIT_DEPOSIT_REFUND                   TransactionType = 10
	TransactionType_DEBIT_INSTALLMENT                       TransactionType = 11
	TransactionType_CREDIT_TIP                              TransactionType = 12
	TransactionType_CREDIT_INCENTIVE_BONUS                  TransactionType = 13
	TransactionType_DEBIT_FINE                              TransactionType = 14
	TransactionType_CREDIT_FINE_REFUND                      TransactionType = 15
	TransactionType_CREDIT_FINE                             TransactionType = 16 // Deprecated: Do not use.
	TransactionType_DEBIT_FINE_REFUND                       TransactionType = 17 // Deprecated: Do not use.
	TransactionType_CREDIT_INCENTIVE_SETTLEMENT_BONUS       TransactionType = 18
	TransactionType_CREDIT_PARKING_FEE                      TransactionType = 19
	TransactionType_CREDIT_BAD_WEATHER_FEE                  TransactionType = 20
	TransactionType_CREDIT_HOLIDAY_SERVICE_FEE              TransactionType = 21
	TransactionType_CREDIT_LATE_NIGHT_FEE                   TransactionType = 22
	TransactionType_INSTANT_SHOPEE_CREDIT_SHIPPING_FEE      TransactionType = 101
	TransactionType_INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT TransactionType = 102
	TransactionType_INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT  TransactionType = 103
	TransactionType_INSTANT_SHOPEE_DEBIT_FINE               TransactionType = 104
	TransactionType_INSTANT_SHOPEE_CREDIT_FINE_REFUND       TransactionType = 105
	TransactionType_INSTANT_SHOPEE_CREDIT_TIP               TransactionType = 106
	TransactionType_INSTANT_DELIVERY_CREDIT_SHIPPING_FEE    TransactionType = 201
	TransactionType_INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT TransactionType = 202
	TransactionType_INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND  TransactionType = 203
	TransactionType_INSTANT_DELIVERY_CREDIT_ORDER_ADJUST    TransactionType = 204
	TransactionType_INSTANT_DELIVERY_DEBIT_ORDER_ADJUST     TransactionType = 205
	TransactionType_INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST   TransactionType = 206
	TransactionType_INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST    TransactionType = 207
	TransactionType_INSTANT_DELIVERY_DEBIT_FINE             TransactionType = 208
	TransactionType_INSTANT_DELIVERY_CREDIT_FINE_REFUND     TransactionType = 209
	TransactionType_INSTANT_DELIVERY_CREDIT_TIP             TransactionType = 210
)

var TransactionType_name = map[int32]string{
	1:   "CREDIT_TOP_UP",
	2:   "DEBIT_WITHDRAWAL",
	3:   "CREDIT_WITHDRAWAL_REFUND",
	4:   "CREDIT_SHIPPING_FEE",
	5:   "CREDIT_ORDER_ADJUSTMENT",
	6:   "DEBIT_ORDER_ADJUSTMENT",
	7:   "CREDIT_MANUAL_ADJUSTMENT",
	8:   "DEBIT_MANUAL_ADJUSTMENT",
	9:   "DEBIT_ADVANCED_DEPOSIT",
	10:  "CREDIT_DEPOSIT_REFUND",
	11:  "DEBIT_INSTALLMENT",
	12:  "CREDIT_TIP",
	13:  "CREDIT_INCENTIVE_BONUS",
	14:  "DEBIT_FINE",
	15:  "CREDIT_FINE_REFUND",
	16:  "CREDIT_FINE",
	17:  "DEBIT_FINE_REFUND",
	18:  "CREDIT_INCENTIVE_SETTLEMENT_BONUS",
	19:  "CREDIT_PARKING_FEE",
	20:  "CREDIT_BAD_WEATHER_FEE",
	21:  "CREDIT_HOLIDAY_SERVICE_FEE",
	22:  "CREDIT_LATE_NIGHT_FEE",
	101: "INSTANT_SHOPEE_CREDIT_SHIPPING_FEE",
	102: "INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT",
	103: "INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT",
	104: "INSTANT_SHOPEE_DEBIT_FINE",
	105: "INSTANT_SHOPEE_CREDIT_FINE_REFUND",
	106: "INSTANT_SHOPEE_CREDIT_TIP",
	201: "INSTANT_DELIVERY_CREDIT_SHIPPING_FEE",
	202: "INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT",
	203: "INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND",
	204: "INSTANT_DELIVERY_CREDIT_ORDER_ADJUST",
	205: "INSTANT_DELIVERY_DEBIT_ORDER_ADJUST",
	206: "INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST",
	207: "INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST",
	208: "INSTANT_DELIVERY_DEBIT_FINE",
	209: "INSTANT_DELIVERY_CREDIT_FINE_REFUND",
	210: "INSTANT_DELIVERY_CREDIT_TIP",
}

var TransactionType_value = map[string]int32{
	"CREDIT_TOP_UP":                           1,
	"DEBIT_WITHDRAWAL":                        2,
	"CREDIT_WITHDRAWAL_REFUND":                3,
	"CREDIT_SHIPPING_FEE":                     4,
	"CREDIT_ORDER_ADJUSTMENT":                 5,
	"DEBIT_ORDER_ADJUSTMENT":                  6,
	"CREDIT_MANUAL_ADJUSTMENT":                7,
	"DEBIT_MANUAL_ADJUSTMENT":                 8,
	"DEBIT_ADVANCED_DEPOSIT":                  9,
	"CREDIT_DEPOSIT_REFUND":                   10,
	"DEBIT_INSTALLMENT":                       11,
	"CREDIT_TIP":                              12,
	"CREDIT_INCENTIVE_BONUS":                  13,
	"DEBIT_FINE":                              14,
	"CREDIT_FINE_REFUND":                      15,
	"CREDIT_FINE":                             16,
	"DEBIT_FINE_REFUND":                       17,
	"CREDIT_INCENTIVE_SETTLEMENT_BONUS":       18,
	"CREDIT_PARKING_FEE":                      19,
	"CREDIT_BAD_WEATHER_FEE":                  20,
	"CREDIT_HOLIDAY_SERVICE_FEE":              21,
	"CREDIT_LATE_NIGHT_FEE":                   22,
	"INSTANT_SHOPEE_CREDIT_SHIPPING_FEE":      101,
	"INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT": 102,
	"INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT":  103,
	"INSTANT_SHOPEE_DEBIT_FINE":               104,
	"INSTANT_SHOPEE_CREDIT_FINE_REFUND":       105,
	"INSTANT_SHOPEE_CREDIT_TIP":               106,
	"INSTANT_DELIVERY_CREDIT_SHIPPING_FEE":    201,
	"INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT": 202,
	"INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND":  203,
	"INSTANT_DELIVERY_CREDIT_ORDER_ADJUST":    204,
	"INSTANT_DELIVERY_DEBIT_ORDER_ADJUST":     205,
	"INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST":   206,
	"INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST":    207,
	"INSTANT_DELIVERY_DEBIT_FINE":             208,
	"INSTANT_DELIVERY_CREDIT_FINE_REFUND":     209,
	"INSTANT_DELIVERY_CREDIT_TIP":             210,
}

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return proto.EnumName(TransactionType_name, int32(x))
}

func (x *TransactionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransactionType_value, data, "TransactionType")
	if err != nil {
		return err
	}
	*x = TransactionType(value)
	return nil
}

func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{24}
}

type RecordTag int32

const (
	RecordTag_TAG_FINE                                    RecordTag = 1
	RecordTag_TAG_FINE_REFUND                             RecordTag = 2
	RecordTag_TAG_FOMS_INSTALLMENT                        RecordTag = 3
	RecordTag_TAG_ADVANCE_DEPOSIT                         RecordTag = 4
	RecordTag_TAG_DEPOSIT_REFUND                          RecordTag = 5
	RecordTag_TAG_SHIPPING_FEE                            RecordTag = 6
	RecordTag_TAG_ORDER_ADJUSTMENT                        RecordTag = 7
	RecordTag_TAG_TIP                                     RecordTag = 8
	RecordTag_TAG_INCENTIVE_SETTLEMENT_BONUS              RecordTag = 9
	RecordTag_TAG_PARKING_FEE                             RecordTag = 10
	RecordTag_TAG_BAD_WEATHER_FEE                         RecordTag = 11
	RecordTag_TAG_HOLIDAY_SERVICE_FEE                     RecordTag = 12
	RecordTag_TAG_LATE_NIGHT_FEE                          RecordTag = 13
	RecordTag_TAG_INSTANT_SHOPEE_CREDIT_SHIPPING_FEE      RecordTag = 101
	RecordTag_TAG_INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT RecordTag = 102
	RecordTag_TAG_INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT  RecordTag = 103
	RecordTag_TAG_INSTANT_SHOPEE_DEBIT_FINE               RecordTag = 104
	RecordTag_TAG_INSTANT_SHOPEE_CREDIT_FINE_REFUND       RecordTag = 105
	RecordTag_TAG_INSTANT_SHOPEE_CREDIT_TIP               RecordTag = 106
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_SHIPPING_FEE    RecordTag = 201
	RecordTag_TAG_INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT RecordTag = 202
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND  RecordTag = 203
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_ORDER_ADJUST    RecordTag = 204
	RecordTag_TAG_INSTANT_DELIVERY_DEBIT_ORDER_ADJUST     RecordTag = 205
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST   RecordTag = 206
	RecordTag_TAG_INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST    RecordTag = 207
	RecordTag_TAG_INSTANT_DELIVERY_DEBIT_FINE             RecordTag = 208
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_FINE_REFUND     RecordTag = 209
	RecordTag_TAG_INSTANT_DELIVERY_CREDIT_TIP             RecordTag = 210
)

var RecordTag_name = map[int32]string{
	1:   "TAG_FINE",
	2:   "TAG_FINE_REFUND",
	3:   "TAG_FOMS_INSTALLMENT",
	4:   "TAG_ADVANCE_DEPOSIT",
	5:   "TAG_DEPOSIT_REFUND",
	6:   "TAG_SHIPPING_FEE",
	7:   "TAG_ORDER_ADJUSTMENT",
	8:   "TAG_TIP",
	9:   "TAG_INCENTIVE_SETTLEMENT_BONUS",
	10:  "TAG_PARKING_FEE",
	11:  "TAG_BAD_WEATHER_FEE",
	12:  "TAG_HOLIDAY_SERVICE_FEE",
	13:  "TAG_LATE_NIGHT_FEE",
	101: "TAG_INSTANT_SHOPEE_CREDIT_SHIPPING_FEE",
	102: "TAG_INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT",
	103: "TAG_INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT",
	104: "TAG_INSTANT_SHOPEE_DEBIT_FINE",
	105: "TAG_INSTANT_SHOPEE_CREDIT_FINE_REFUND",
	106: "TAG_INSTANT_SHOPEE_CREDIT_TIP",
	201: "TAG_INSTANT_DELIVERY_CREDIT_SHIPPING_FEE",
	202: "TAG_INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT",
	203: "TAG_INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND",
	204: "TAG_INSTANT_DELIVERY_CREDIT_ORDER_ADJUST",
	205: "TAG_INSTANT_DELIVERY_DEBIT_ORDER_ADJUST",
	206: "TAG_INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST",
	207: "TAG_INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST",
	208: "TAG_INSTANT_DELIVERY_DEBIT_FINE",
	209: "TAG_INSTANT_DELIVERY_CREDIT_FINE_REFUND",
	210: "TAG_INSTANT_DELIVERY_CREDIT_TIP",
}

var RecordTag_value = map[string]int32{
	"TAG_FINE":                                    1,
	"TAG_FINE_REFUND":                             2,
	"TAG_FOMS_INSTALLMENT":                        3,
	"TAG_ADVANCE_DEPOSIT":                         4,
	"TAG_DEPOSIT_REFUND":                          5,
	"TAG_SHIPPING_FEE":                            6,
	"TAG_ORDER_ADJUSTMENT":                        7,
	"TAG_TIP":                                     8,
	"TAG_INCENTIVE_SETTLEMENT_BONUS":              9,
	"TAG_PARKING_FEE":                             10,
	"TAG_BAD_WEATHER_FEE":                         11,
	"TAG_HOLIDAY_SERVICE_FEE":                     12,
	"TAG_LATE_NIGHT_FEE":                          13,
	"TAG_INSTANT_SHOPEE_CREDIT_SHIPPING_FEE":      101,
	"TAG_INSTANT_SHOPEE_CREDIT_MANUAL_ADJUSTMENT": 102,
	"TAG_INSTANT_SHOPEE_DEBIT_MANUAL_ADJUSTMENT":  103,
	"TAG_INSTANT_SHOPEE_DEBIT_FINE":               104,
	"TAG_INSTANT_SHOPEE_CREDIT_FINE_REFUND":       105,
	"TAG_INSTANT_SHOPEE_CREDIT_TIP":               106,
	"TAG_INSTANT_DELIVERY_CREDIT_SHIPPING_FEE":    201,
	"TAG_INSTANT_DELIVERY_DEBIT_ADVANCED_DEPOSIT": 202,
	"TAG_INSTANT_DELIVERY_CREDIT_DEPOSIT_REFUND":  203,
	"TAG_INSTANT_DELIVERY_CREDIT_ORDER_ADJUST":    204,
	"TAG_INSTANT_DELIVERY_DEBIT_ORDER_ADJUST":     205,
	"TAG_INSTANT_DELIVERY_CREDIT_MANUAL_ADJUST":   206,
	"TAG_INSTANT_DELIVERY_DEBIT_MANUAL_ADJUST":    207,
	"TAG_INSTANT_DELIVERY_DEBIT_FINE":             208,
	"TAG_INSTANT_DELIVERY_CREDIT_FINE_REFUND":     209,
	"TAG_INSTANT_DELIVERY_CREDIT_TIP":             210,
}

func (x RecordTag) Enum() *RecordTag {
	p := new(RecordTag)
	*p = x
	return p
}

func (x RecordTag) String() string {
	return proto.EnumName(RecordTag_name, int32(x))
}

func (x *RecordTag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecordTag_value, data, "RecordTag")
	if err != nil {
		return err
	}
	*x = RecordTag(value)
	return nil
}

func (RecordTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{25}
}

type SettlementSource int32

const (
	SettlementSource_SOURCE_ALL                                SettlementSource = 0
	SettlementSource_SOURCE_DRIVER_DELIVERY_ORDER_SHIPPING_FEE SettlementSource = 1
	SettlementSource_SOURCE_ORDER                              SettlementSource = 2
	SettlementSource_SOURCE_DELIVERY_ORDER_PARKING_FEE         SettlementSource = 3
	SettlementSource_SOURCE_ORDER_BAD_WEATHER_FEE              SettlementSource = 4
	SettlementSource_SOURCE_ORDER_HOLIDAY_SERVICE_FEE          SettlementSource = 5
	SettlementSource_SOURCE_ORDER_LATE_NIGHT_FEE               SettlementSource = 6
)

var SettlementSource_name = map[int32]string{
	0: "SOURCE_ALL",
	1: "SOURCE_DRIVER_DELIVERY_ORDER_SHIPPING_FEE",
	2: "SOURCE_ORDER",
	3: "SOURCE_DELIVERY_ORDER_PARKING_FEE",
	4: "SOURCE_ORDER_BAD_WEATHER_FEE",
	5: "SOURCE_ORDER_HOLIDAY_SERVICE_FEE",
	6: "SOURCE_ORDER_LATE_NIGHT_FEE",
}

var SettlementSource_value = map[string]int32{
	"SOURCE_ALL": 0,
	"SOURCE_DRIVER_DELIVERY_ORDER_SHIPPING_FEE": 1,
	"SOURCE_ORDER":                      2,
	"SOURCE_DELIVERY_ORDER_PARKING_FEE": 3,
	"SOURCE_ORDER_BAD_WEATHER_FEE":      4,
	"SOURCE_ORDER_HOLIDAY_SERVICE_FEE":  5,
	"SOURCE_ORDER_LATE_NIGHT_FEE":       6,
}

func (x SettlementSource) Enum() *SettlementSource {
	p := new(SettlementSource)
	*p = x
	return p
}

func (x SettlementSource) String() string {
	return proto.EnumName(SettlementSource_name, int32(x))
}

func (x *SettlementSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementSource_value, data, "SettlementSource")
	if err != nil {
		return err
	}
	*x = SettlementSource(value)
	return nil
}

func (SettlementSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{26}
}

//调shopee pay 接口返回的错误码
type SettlementErrorCode int32

const (
	SettlementErrorCode_SSP_SERVER_ERROR                 SettlementErrorCode = -1
	SettlementErrorCode_SSP_SUCCESS                      SettlementErrorCode = 0
	SettlementErrorCode_SSP_PERMISSION_DENIED            SettlementErrorCode = 2
	SettlementErrorCode_SSP_MERCHANT_EXT_ID_EMPTY        SettlementErrorCode = 450
	SettlementErrorCode_SSP_STORE_EXT_ID_EMPTY           SettlementErrorCode = 451
	SettlementErrorCode_SSP_REFERENCE_ID_EMPTY           SettlementErrorCode = 452
	SettlementErrorCode_SSP_AMOUNT_FORMAT_ERROR          SettlementErrorCode = 453
	SettlementErrorCode_SSP_MERCHANT_EXT_ID_NOT_FIND     SettlementErrorCode = 502
	SettlementErrorCode_SSP_STORE_EXT_ID_NOT_FIND        SettlementErrorCode = 503
	SettlementErrorCode_SSP_REFERENCE_ID_DUPLICATE       SettlementErrorCode = 504
	SettlementErrorCode_SSP_CLIENT_ID_ERROR              SettlementErrorCode = 505
	SettlementErrorCode_ESCROW_MERCHANT_SETTLEMENT_ERROR SettlementErrorCode = 1001
)

var SettlementErrorCode_name = map[int32]string{
	-1:   "SSP_SERVER_ERROR",
	0:    "SSP_SUCCESS",
	2:    "SSP_PERMISSION_DENIED",
	450:  "SSP_MERCHANT_EXT_ID_EMPTY",
	451:  "SSP_STORE_EXT_ID_EMPTY",
	452:  "SSP_REFERENCE_ID_EMPTY",
	453:  "SSP_AMOUNT_FORMAT_ERROR",
	502:  "SSP_MERCHANT_EXT_ID_NOT_FIND",
	503:  "SSP_STORE_EXT_ID_NOT_FIND",
	504:  "SSP_REFERENCE_ID_DUPLICATE",
	505:  "SSP_CLIENT_ID_ERROR",
	1001: "ESCROW_MERCHANT_SETTLEMENT_ERROR",
}

var SettlementErrorCode_value = map[string]int32{
	"SSP_SERVER_ERROR":                 -1,
	"SSP_SUCCESS":                      0,
	"SSP_PERMISSION_DENIED":            2,
	"SSP_MERCHANT_EXT_ID_EMPTY":        450,
	"SSP_STORE_EXT_ID_EMPTY":           451,
	"SSP_REFERENCE_ID_EMPTY":           452,
	"SSP_AMOUNT_FORMAT_ERROR":          453,
	"SSP_MERCHANT_EXT_ID_NOT_FIND":     502,
	"SSP_STORE_EXT_ID_NOT_FIND":        503,
	"SSP_REFERENCE_ID_DUPLICATE":       504,
	"SSP_CLIENT_ID_ERROR":              505,
	"ESCROW_MERCHANT_SETTLEMENT_ERROR": 1001,
}

func (x SettlementErrorCode) Enum() *SettlementErrorCode {
	p := new(SettlementErrorCode)
	*p = x
	return p
}

func (x SettlementErrorCode) String() string {
	return proto.EnumName(SettlementErrorCode_name, int32(x))
}

func (x *SettlementErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementErrorCode_value, data, "SettlementErrorCode")
	if err != nil {
		return err
	}
	*x = SettlementErrorCode(value)
	return nil
}

func (SettlementErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27}
}

type SettlementMode int32

const (
	SettlementMode_MODE_WALLET  SettlementMode = 1
	SettlementMode_MODE_OFFLINE SettlementMode = 2
)

var SettlementMode_name = map[int32]string{
	1: "MODE_WALLET",
	2: "MODE_OFFLINE",
}

var SettlementMode_value = map[string]int32{
	"MODE_WALLET":  1,
	"MODE_OFFLINE": 2,
}

func (x SettlementMode) Enum() *SettlementMode {
	p := new(SettlementMode)
	*p = x
	return p
}

func (x SettlementMode) String() string {
	return proto.EnumName(SettlementMode_name, int32(x))
}

func (x *SettlementMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementMode_value, data, "SettlementMode")
	if err != nil {
		return err
	}
	*x = SettlementMode(value)
	return nil
}

func (SettlementMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28}
}

type SettlementStatus int32

const (
	SettlementStatus_SETTLEMENT_CREATED   SettlementStatus = 10
	SettlementStatus_SETTLEMENT_PENDING   SettlementStatus = 1
	SettlementStatus_SETTLEMENT_COMPLETED SettlementStatus = 2
	SettlementStatus_SETTLEMENT_EXCEPTION SettlementStatus = 3
	SettlementStatus_SETTLEMENT_CANCELED  SettlementStatus = 4
)

var SettlementStatus_name = map[int32]string{
	10: "SETTLEMENT_CREATED",
	1:  "SETTLEMENT_PENDING",
	2:  "SETTLEMENT_COMPLETED",
	3:  "SETTLEMENT_EXCEPTION",
	4:  "SETTLEMENT_CANCELED",
}

var SettlementStatus_value = map[string]int32{
	"SETTLEMENT_CREATED":   10,
	"SETTLEMENT_PENDING":   1,
	"SETTLEMENT_COMPLETED": 2,
	"SETTLEMENT_EXCEPTION": 3,
	"SETTLEMENT_CANCELED":  4,
}

func (x SettlementStatus) Enum() *SettlementStatus {
	p := new(SettlementStatus)
	*p = x
	return p
}

func (x SettlementStatus) String() string {
	return proto.EnumName(SettlementStatus_name, int32(x))
}

func (x *SettlementStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementStatus_value, data, "SettlementStatus")
	if err != nil {
		return err
	}
	*x = SettlementStatus(value)
	return nil
}

func (SettlementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{29}
}

type SettlementCancelReason int32

const (
	SettlementCancelReason_CANCEL_RESERVED SettlementCancelReason = 0
)

var SettlementCancelReason_name = map[int32]string{
	0: "CANCEL_RESERVED",
}

var SettlementCancelReason_value = map[string]int32{
	"CANCEL_RESERVED": 0,
}

func (x SettlementCancelReason) Enum() *SettlementCancelReason {
	p := new(SettlementCancelReason)
	*p = x
	return p
}

func (x SettlementCancelReason) String() string {
	return proto.EnumName(SettlementCancelReason_name, int32(x))
}

func (x *SettlementCancelReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementCancelReason_value, data, "SettlementCancelReason")
	if err != nil {
		return err
	}
	*x = SettlementCancelReason(value)
	return nil
}

func (SettlementCancelReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30}
}

type SettlementType int32

const (
	SettlementType_TYPE_SHIPPING_FEE     SettlementType = 1
	SettlementType_TYPE_ORDER_ADJUSTMENT SettlementType = 2
)

var SettlementType_name = map[int32]string{
	1: "TYPE_SHIPPING_FEE",
	2: "TYPE_ORDER_ADJUSTMENT",
}

var SettlementType_value = map[string]int32{
	"TYPE_SHIPPING_FEE":     1,
	"TYPE_ORDER_ADJUSTMENT": 2,
}

func (x SettlementType) Enum() *SettlementType {
	p := new(SettlementType)
	*p = x
	return p
}

func (x SettlementType) String() string {
	return proto.EnumName(SettlementType_name, int32(x))
}

func (x *SettlementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementType_value, data, "SettlementType")
	if err != nil {
		return err
	}
	*x = SettlementType(value)
	return nil
}

func (SettlementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{31}
}

type ReferenceType int32

const (
	ReferenceType_RELATED_SETTLEMENT                 ReferenceType = 1
	ReferenceType_RELATED_DRIVER_APPLICATION         ReferenceType = 2
	ReferenceType_RELATED_DRIVER_ADJUSTMENT          ReferenceType = 3
	ReferenceType_RELATED_DELIVERY_ORDER             ReferenceType = 4
	ReferenceType_RELATED_ORDER                      ReferenceType = 5
	ReferenceType_RELATED_AFTER_SALE_ORDER           ReferenceType = 6
	ReferenceType_RELATED_MERCHANT_WALLET_ADJUSTMENT ReferenceType = 7
	ReferenceType_RELATED_EXPRESS                    ReferenceType = 8
	ReferenceType_RELATED_DRIVER_DELIVERY_ORDER      ReferenceType = 9
)

var ReferenceType_name = map[int32]string{
	1: "RELATED_SETTLEMENT",
	2: "RELATED_DRIVER_APPLICATION",
	3: "RELATED_DRIVER_ADJUSTMENT",
	4: "RELATED_DELIVERY_ORDER",
	5: "RELATED_ORDER",
	6: "RELATED_AFTER_SALE_ORDER",
	7: "RELATED_MERCHANT_WALLET_ADJUSTMENT",
	8: "RELATED_EXPRESS",
	9: "RELATED_DRIVER_DELIVERY_ORDER",
}

var ReferenceType_value = map[string]int32{
	"RELATED_SETTLEMENT":                 1,
	"RELATED_DRIVER_APPLICATION":         2,
	"RELATED_DRIVER_ADJUSTMENT":          3,
	"RELATED_DELIVERY_ORDER":             4,
	"RELATED_ORDER":                      5,
	"RELATED_AFTER_SALE_ORDER":           6,
	"RELATED_MERCHANT_WALLET_ADJUSTMENT": 7,
	"RELATED_EXPRESS":                    8,
	"RELATED_DRIVER_DELIVERY_ORDER":      9,
}

func (x ReferenceType) Enum() *ReferenceType {
	p := new(ReferenceType)
	*p = x
	return p
}

func (x ReferenceType) String() string {
	return proto.EnumName(ReferenceType_name, int32(x))
}

func (x *ReferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReferenceType_value, data, "ReferenceType")
	if err != nil {
		return err
	}
	*x = ReferenceType(value)
	return nil
}

func (ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{32}
}

type ServiceType int32

const (
	ServiceType_TYPE_UNKNOWN              ServiceType = 0
	ServiceType_TYPE_FOOD                 ServiceType = 1
	ServiceType_TYPE_SPX_INSTANT_SHOPEE   ServiceType = 2
	ServiceType_TYPE_SPX_INSTANT_DELIVERY ServiceType = 3
)

var ServiceType_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "TYPE_FOOD",
	2: "TYPE_SPX_INSTANT_SHOPEE",
	3: "TYPE_SPX_INSTANT_DELIVERY",
}

var ServiceType_value = map[string]int32{
	"TYPE_UNKNOWN":              0,
	"TYPE_FOOD":                 1,
	"TYPE_SPX_INSTANT_SHOPEE":   2,
	"TYPE_SPX_INSTANT_DELIVERY": 3,
}

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (x *ServiceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceType_value, data, "ServiceType")
	if err != nil {
		return err
	}
	*x = ServiceType(value)
	return nil
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{33}
}

type RelationType int32

const (
	RelationType_DEFAULT_RELATION RelationType = 0
	RelationType_PARENT           RelationType = 1
	RelationType_SPOUSE           RelationType = 2
	RelationType_CHILD            RelationType = 3
	RelationType_FRIEND           RelationType = 4
	RelationType_SIBLING          RelationType = 5
	RelationType_RELATIVE         RelationType = 6
	RelationType_OTHER            RelationType = 7
	RelationType_MOTHER           RelationType = 8
	RelationType_FATHER           RelationType = 9
)

var RelationType_name = map[int32]string{
	0: "DEFAULT_RELATION",
	1: "PARENT",
	2: "SPOUSE",
	3: "CHILD",
	4: "FRIEND",
	5: "SIBLING",
	6: "RELATIVE",
	7: "OTHER",
	8: "MOTHER",
	9: "FATHER",
}

var RelationType_value = map[string]int32{
	"DEFAULT_RELATION": 0,
	"PARENT":           1,
	"SPOUSE":           2,
	"CHILD":            3,
	"FRIEND":           4,
	"SIBLING":          5,
	"RELATIVE":         6,
	"OTHER":            7,
	"MOTHER":           8,
	"FATHER":           9,
}

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return proto.EnumName(RelationType_name, int32(x))
}

func (x *RelationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RelationType_value, data, "RelationType")
	if err != nil {
		return err
	}
	*x = RelationType(value)
	return nil
}

func (RelationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{34}
}

type Source int32

const (
	Source_SOURCE_UNKOWN     Source = 0
	Source_SOURCE_ADMIN      Source = 1
	Source_SOURCE_MERCHANT   Source = 2
	Source_SOURCE_BUYER      Source = 3
	Source_SOURCE_DRIVER     Source = 4
	Source_SOURCE_CRONTAB    Source = 5
	Source_SOURCE_SPM        Source = 6
	Source_SOURCE_EVENT      Source = 7
	Source_SOURCE_STATISTICS Source = 8
	Source_SOURCE_ToBAccount Source = 9
	Source_SOURCE_FOMS       Source = 10
	Source_SOURCE_VENDOR     Source = 11
	Source_SOURCE_SYSTEM     Source = 12
	Source_SOURCE_UserCredit Source = 13
	Source_SOURCE_PARTNERWeb Source = 14
)

var Source_name = map[int32]string{
	0:  "SOURCE_UNKOWN",
	1:  "SOURCE_ADMIN",
	2:  "SOURCE_MERCHANT",
	3:  "SOURCE_BUYER",
	4:  "SOURCE_DRIVER",
	5:  "SOURCE_CRONTAB",
	6:  "SOURCE_SPM",
	7:  "SOURCE_EVENT",
	8:  "SOURCE_STATISTICS",
	9:  "SOURCE_ToBAccount",
	10: "SOURCE_FOMS",
	11: "SOURCE_VENDOR",
	12: "SOURCE_SYSTEM",
	13: "SOURCE_UserCredit",
	14: "SOURCE_PARTNERWeb",
}

var Source_value = map[string]int32{
	"SOURCE_UNKOWN":     0,
	"SOURCE_ADMIN":      1,
	"SOURCE_MERCHANT":   2,
	"SOURCE_BUYER":      3,
	"SOURCE_DRIVER":     4,
	"SOURCE_CRONTAB":    5,
	"SOURCE_SPM":        6,
	"SOURCE_EVENT":      7,
	"SOURCE_STATISTICS": 8,
	"SOURCE_ToBAccount": 9,
	"SOURCE_FOMS":       10,
	"SOURCE_VENDOR":     11,
	"SOURCE_SYSTEM":     12,
	"SOURCE_UserCredit": 13,
	"SOURCE_PARTNERWeb": 14,
}

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}

func (x *Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Source_value, data, "Source")
	if err != nil {
		return err
	}
	*x = Source(value)
	return nil
}

func (Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{35}
}

type Responsibility int32

const (
	Responsibility_UNKNOWN  Responsibility = 0
	Responsibility_BUYER    Responsibility = 1
	Responsibility_DRIVER   Responsibility = 2
	Responsibility_MERCHANT Responsibility = 3
	Responsibility_PLATFORM Responsibility = 4
)

var Responsibility_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUYER",
	2: "DRIVER",
	3: "MERCHANT",
	4: "PLATFORM",
}

var Responsibility_value = map[string]int32{
	"UNKNOWN":  0,
	"BUYER":    1,
	"DRIVER":   2,
	"MERCHANT": 3,
	"PLATFORM": 4,
}

func (x Responsibility) Enum() *Responsibility {
	p := new(Responsibility)
	*p = x
	return p
}

func (x Responsibility) String() string {
	return proto.EnumName(Responsibility_name, int32(x))
}

func (x *Responsibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Responsibility_value, data, "Responsibility")
	if err != nil {
		return err
	}
	*x = Responsibility(value)
	return nil
}

func (Responsibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{36}
}

type Proposer int32

const (
	Proposer_PROPOSER_UNKNOWN     Proposer = 0
	Proposer_PROPOSER_BUYER       Proposer = 1
	Proposer_PROPOSER_DRIVER      Proposer = 2
	Proposer_PROPOSER_MERCHANT    Proposer = 3
	Proposer_PROPOSER_PLATFORM    Proposer = 4
	Proposer_PROPOSER_ORDER_MAKER Proposer = 5
	Proposer_PROPOSER_SENDER      Proposer = 6
	Proposer_PROPOSER_RECIPIENT   Proposer = 7
	Proposer_PROPOSER_OTHER       Proposer = 8
	Proposer_PROPOSER_SLS         Proposer = 9
	Proposer_PROPOSER_ADMIN       Proposer = 10
)

var Proposer_name = map[int32]string{
	0:  "PROPOSER_UNKNOWN",
	1:  "PROPOSER_BUYER",
	2:  "PROPOSER_DRIVER",
	3:  "PROPOSER_MERCHANT",
	4:  "PROPOSER_PLATFORM",
	5:  "PROPOSER_ORDER_MAKER",
	6:  "PROPOSER_SENDER",
	7:  "PROPOSER_RECIPIENT",
	8:  "PROPOSER_OTHER",
	9:  "PROPOSER_SLS",
	10: "PROPOSER_ADMIN",
}

var Proposer_value = map[string]int32{
	"PROPOSER_UNKNOWN":     0,
	"PROPOSER_BUYER":       1,
	"PROPOSER_DRIVER":      2,
	"PROPOSER_MERCHANT":    3,
	"PROPOSER_PLATFORM":    4,
	"PROPOSER_ORDER_MAKER": 5,
	"PROPOSER_SENDER":      6,
	"PROPOSER_RECIPIENT":   7,
	"PROPOSER_OTHER":       8,
	"PROPOSER_SLS":         9,
	"PROPOSER_ADMIN":       10,
}

func (x Proposer) Enum() *Proposer {
	p := new(Proposer)
	*p = x
	return p
}

func (x Proposer) String() string {
	return proto.EnumName(Proposer_name, int32(x))
}

func (x *Proposer) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Proposer_value, data, "Proposer")
	if err != nil {
		return err
	}
	*x = Proposer(value)
	return nil
}

func (Proposer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{37}
}

type EntityType int32

const (
	EntityType_ENTITY_TYPE_STORE                        EntityType = 1
	EntityType_ENTITY_TYPE_CATALOG                      EntityType = 2
	EntityType_ENTITY_TYPE_DISH                         EntityType = 3
	EntityType_ENTITY_TYPE_OPTION_GROUP                 EntityType = 4
	EntityType_ENTITY_TYPE_OPTION                       EntityType = 5
	EntityType_ENTITY_TYPE_MERCHANT                     EntityType = 6
	EntityType_ENTITY_TYPE_DRIVER                       EntityType = 7
	EntityType_ENTITY_TYPE_ORDER                        EntityType = 8
	EntityType_ENTITY_TYPE_STORE_SETTLEMENT             EntityType = 9
	EntityType_ENTITY_TYPE_DRIVER_SETTLEMENT            EntityType = 10
	EntityType_ENTITY_TYPE_ITEMDISCOUNT                 EntityType = 11
	EntityType_ENTITY_TYPE_DELIVERY                     EntityType = 12
	EntityType_ENTITY_TYPE_DELIVERY_CHECK_FAILURE       EntityType = 13
	EntityType_ENTITY_TYPE_DELIVERY_ASSIGNMENT          EntityType = 14
	EntityType_ENTITY_TYPE_DRIVER_INCENTIVE             EntityType = 15
	EntityType_ENTITY_TYPE_CONTENT                      EntityType = 16
	EntityType_ENTITY_TYPE_TAG_TYPE                     EntityType = 17
	EntityType_ENTITY_TYPE_TAG                          EntityType = 18
	EntityType_ENTITY_TYPE_ITEM_SCHEDULE                EntityType = 19
	EntityType_ENTITY_TYPE_DRIVER_RATING                EntityType = 20
	EntityType_ENTITY_TYPE_DISH_RATING                  EntityType = 21
	EntityType_ENTITY_TYPE_STORE_RATING                 EntityType = 22
	EntityType_ENTITY_TYPE_PREDEFINED_KEYWORD           EntityType = 23
	EntityType_ENTITY_TYPE_AREA                         EntityType = 24
	EntityType_ENTITY_TYPE_LOCATION_GROUP               EntityType = 25
	EntityType_ENTITY_TYPE_ALGO_PARAMETER_CONFIG        EntityType = 26
	EntityType_ENTITY_TYPE_OVERLAY                      EntityType = 27
	EntityType_ENTITY_TYPE_DRIVER_APPLICANT             EntityType = 28
	EntityType_ENTITY_TYPE_KYC_REQUEST                  EntityType = 29
	EntityType_ENTITY_TYPE_DRIVERQUALITY_QUALITY        EntityType = 30
	EntityType_ENTITY_TYPE_DRIVERQUALITY_VIOLATION      EntityType = 31
	EntityType_ENTITY_TYPE_DRIVERQUALITY_PENALTY        EntityType = 32
	EntityType_ENTITY_TYPE_DRIVERCENTER                 EntityType = 33
	EntityType_ENTITY_TYPE_DRIVER_AGENT                 EntityType = 34
	EntityType_ENTITY_TYPE_SPX_DRIVER_SETTLEMENT        EntityType = 35
	EntityType_ENTITY_TYPE_PARTNER_APP_CONFIGURATION    EntityType = 36
	EntityType_ENTITY_TYPE_SPX_ORDER                    EntityType = 37
	EntityType_ENTITY_TYPE_DRIVERQUALITY_RULE_GROUP     EntityType = 40
	EntityType_ENTITY_TYPE_DRIVERQUALITY_RULE           EntityType = 41
	EntityType_ENTITY_TYPE_FLASH_SALE_CAMPAIGN          EntityType = 42
	EntityType_ENTITY_TYPE_FLASH_SALE_TIMESLOT          EntityType = 43
	EntityType_ENTITY_TYPE_FLASH_SALE_STORE             EntityType = 44
	EntityType_ENTITY_TYPE_FLASH_DISH_DISCOUNT          EntityType = 45
	EntityType_ENTITY_TYPE_VOUCHER                      EntityType = 46
	EntityType_ENTITY_TYPE_STORE_CHARGEBACK             EntityType = 47
	EntityType_ENTITY_TYPE_SPX_EXPRESS                  EntityType = 48
	EntityType_ENTITY_TYPE_CASH_CONVERSION_RULE         EntityType = 49
	EntityType_ENTITY_TYPE_INCENTIVE_TASK               EntityType = 50
	EntityType_ENTITY_TYPE_QUALITY_RULE                 EntityType = 54
	EntityType_ENTITY_TYPE_QUALITY_RULE_GROUP           EntityType = 55
	EntityType_ENTITY_TYPE_QUALITY_POINTS               EntityType = 56
	EntityType_ENTITY_TYPE_ORDER_SERVICE_FEE_CONFIG     EntityType = 63
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_PRODUCT     EntityType = 64
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_PACKAGE     EntityType = 65
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_ATTRIBUTE   EntityType = 66
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_ORDER       EntityType = 67
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_FULFILLMENT EntityType = 68
	EntityType_ENTITY_TYPE_DRIVER_ATTRIBUTE_INSTALLMENT EntityType = 69
	EntityType_ENTITY_TYPE_RECRUITMENT_SESSION          EntityType = 70
	EntityType_ENTITY_TYPE_RECRUITMENT_SESSION_MATERIAL EntityType = 71
	EntityType_ENTITY_TYPE_OCCASION_MODE                EntityType = 72
	EntityType_ENTITY_TYPE_OCCASION_FEE                 EntityType = 73
	EntityType_ENTITY_TYPE_RECRUITMENT_SESSION_MERCHANT EntityType = 74
	EntityType_ENTITY_TYPE_STORE_GROUP                  EntityType = 75
	EntityType_ENTITY_TYPE_ITEM_DISCOUNT_CAMPAIGN       EntityType = 76
	EntityType_ENTITY_TYPE_OPENAPI_STORE_BIND           EntityType = 77
	EntityType_ENTITY_TYPE_OPENAPI_Vendor_CONFIG        EntityType = 78
	EntityType_ENTITY_TYPE_TAGCENTER_TAG_TYPE           EntityType = 79
	EntityType_ENTITY_TYPE_TAGCENTER_TAG                EntityType = 80
)

var EntityType_name = map[int32]string{
	1:  "ENTITY_TYPE_STORE",
	2:  "ENTITY_TYPE_CATALOG",
	3:  "ENTITY_TYPE_DISH",
	4:  "ENTITY_TYPE_OPTION_GROUP",
	5:  "ENTITY_TYPE_OPTION",
	6:  "ENTITY_TYPE_MERCHANT",
	7:  "ENTITY_TYPE_DRIVER",
	8:  "ENTITY_TYPE_ORDER",
	9:  "ENTITY_TYPE_STORE_SETTLEMENT",
	10: "ENTITY_TYPE_DRIVER_SETTLEMENT",
	11: "ENTITY_TYPE_ITEMDISCOUNT",
	12: "ENTITY_TYPE_DELIVERY",
	13: "ENTITY_TYPE_DELIVERY_CHECK_FAILURE",
	14: "ENTITY_TYPE_DELIVERY_ASSIGNMENT",
	15: "ENTITY_TYPE_DRIVER_INCENTIVE",
	16: "ENTITY_TYPE_CONTENT",
	17: "ENTITY_TYPE_TAG_TYPE",
	18: "ENTITY_TYPE_TAG",
	19: "ENTITY_TYPE_ITEM_SCHEDULE",
	20: "ENTITY_TYPE_DRIVER_RATING",
	21: "ENTITY_TYPE_DISH_RATING",
	22: "ENTITY_TYPE_STORE_RATING",
	23: "ENTITY_TYPE_PREDEFINED_KEYWORD",
	24: "ENTITY_TYPE_AREA",
	25: "ENTITY_TYPE_LOCATION_GROUP",
	26: "ENTITY_TYPE_ALGO_PARAMETER_CONFIG",
	27: "ENTITY_TYPE_OVERLAY",
	28: "ENTITY_TYPE_DRIVER_APPLICANT",
	29: "ENTITY_TYPE_KYC_REQUEST",
	30: "ENTITY_TYPE_DRIVERQUALITY_QUALITY",
	31: "ENTITY_TYPE_DRIVERQUALITY_VIOLATION",
	32: "ENTITY_TYPE_DRIVERQUALITY_PENALTY",
	33: "ENTITY_TYPE_DRIVERCENTER",
	34: "ENTITY_TYPE_DRIVER_AGENT",
	35: "ENTITY_TYPE_SPX_DRIVER_SETTLEMENT",
	36: "ENTITY_TYPE_PARTNER_APP_CONFIGURATION",
	37: "ENTITY_TYPE_SPX_ORDER",
	40: "ENTITY_TYPE_DRIVERQUALITY_RULE_GROUP",
	41: "ENTITY_TYPE_DRIVERQUALITY_RULE",
	42: "ENTITY_TYPE_FLASH_SALE_CAMPAIGN",
	43: "ENTITY_TYPE_FLASH_SALE_TIMESLOT",
	44: "ENTITY_TYPE_FLASH_SALE_STORE",
	45: "ENTITY_TYPE_FLASH_DISH_DISCOUNT",
	46: "ENTITY_TYPE_VOUCHER",
	47: "ENTITY_TYPE_STORE_CHARGEBACK",
	48: "ENTITY_TYPE_SPX_EXPRESS",
	49: "ENTITY_TYPE_CASH_CONVERSION_RULE",
	50: "ENTITY_TYPE_INCENTIVE_TASK",
	54: "ENTITY_TYPE_QUALITY_RULE",
	55: "ENTITY_TYPE_QUALITY_RULE_GROUP",
	56: "ENTITY_TYPE_QUALITY_POINTS",
	63: "ENTITY_TYPE_ORDER_SERVICE_FEE_CONFIG",
	64: "ENTITY_TYPE_DRIVER_ATTRIBUTE_PRODUCT",
	65: "ENTITY_TYPE_DRIVER_ATTRIBUTE_PACKAGE",
	66: "ENTITY_TYPE_DRIVER_ATTRIBUTE_ATTRIBUTE",
	67: "ENTITY_TYPE_DRIVER_ATTRIBUTE_ORDER",
	68: "ENTITY_TYPE_DRIVER_ATTRIBUTE_FULFILLMENT",
	69: "ENTITY_TYPE_DRIVER_ATTRIBUTE_INSTALLMENT",
	70: "ENTITY_TYPE_RECRUITMENT_SESSION",
	71: "ENTITY_TYPE_RECRUITMENT_SESSION_MATERIAL",
	72: "ENTITY_TYPE_OCCASION_MODE",
	73: "ENTITY_TYPE_OCCASION_FEE",
	74: "ENTITY_TYPE_RECRUITMENT_SESSION_MERCHANT",
	75: "ENTITY_TYPE_STORE_GROUP",
	76: "ENTITY_TYPE_ITEM_DISCOUNT_CAMPAIGN",
	77: "ENTITY_TYPE_OPENAPI_STORE_BIND",
	78: "ENTITY_TYPE_OPENAPI_Vendor_CONFIG",
	79: "ENTITY_TYPE_TAGCENTER_TAG_TYPE",
	80: "ENTITY_TYPE_TAGCENTER_TAG",
}

var EntityType_value = map[string]int32{
	"ENTITY_TYPE_STORE":                        1,
	"ENTITY_TYPE_CATALOG":                      2,
	"ENTITY_TYPE_DISH":                         3,
	"ENTITY_TYPE_OPTION_GROUP":                 4,
	"ENTITY_TYPE_OPTION":                       5,
	"ENTITY_TYPE_MERCHANT":                     6,
	"ENTITY_TYPE_DRIVER":                       7,
	"ENTITY_TYPE_ORDER":                        8,
	"ENTITY_TYPE_STORE_SETTLEMENT":             9,
	"ENTITY_TYPE_DRIVER_SETTLEMENT":            10,
	"ENTITY_TYPE_ITEMDISCOUNT":                 11,
	"ENTITY_TYPE_DELIVERY":                     12,
	"ENTITY_TYPE_DELIVERY_CHECK_FAILURE":       13,
	"ENTITY_TYPE_DELIVERY_ASSIGNMENT":          14,
	"ENTITY_TYPE_DRIVER_INCENTIVE":             15,
	"ENTITY_TYPE_CONTENT":                      16,
	"ENTITY_TYPE_TAG_TYPE":                     17,
	"ENTITY_TYPE_TAG":                          18,
	"ENTITY_TYPE_ITEM_SCHEDULE":                19,
	"ENTITY_TYPE_DRIVER_RATING":                20,
	"ENTITY_TYPE_DISH_RATING":                  21,
	"ENTITY_TYPE_STORE_RATING":                 22,
	"ENTITY_TYPE_PREDEFINED_KEYWORD":           23,
	"ENTITY_TYPE_AREA":                         24,
	"ENTITY_TYPE_LOCATION_GROUP":               25,
	"ENTITY_TYPE_ALGO_PARAMETER_CONFIG":        26,
	"ENTITY_TYPE_OVERLAY":                      27,
	"ENTITY_TYPE_DRIVER_APPLICANT":             28,
	"ENTITY_TYPE_KYC_REQUEST":                  29,
	"ENTITY_TYPE_DRIVERQUALITY_QUALITY":        30,
	"ENTITY_TYPE_DRIVERQUALITY_VIOLATION":      31,
	"ENTITY_TYPE_DRIVERQUALITY_PENALTY":        32,
	"ENTITY_TYPE_DRIVERCENTER":                 33,
	"ENTITY_TYPE_DRIVER_AGENT":                 34,
	"ENTITY_TYPE_SPX_DRIVER_SETTLEMENT":        35,
	"ENTITY_TYPE_PARTNER_APP_CONFIGURATION":    36,
	"ENTITY_TYPE_SPX_ORDER":                    37,
	"ENTITY_TYPE_DRIVERQUALITY_RULE_GROUP":     40,
	"ENTITY_TYPE_DRIVERQUALITY_RULE":           41,
	"ENTITY_TYPE_FLASH_SALE_CAMPAIGN":          42,
	"ENTITY_TYPE_FLASH_SALE_TIMESLOT":          43,
	"ENTITY_TYPE_FLASH_SALE_STORE":             44,
	"ENTITY_TYPE_FLASH_DISH_DISCOUNT":          45,
	"ENTITY_TYPE_VOUCHER":                      46,
	"ENTITY_TYPE_STORE_CHARGEBACK":             47,
	"ENTITY_TYPE_SPX_EXPRESS":                  48,
	"ENTITY_TYPE_CASH_CONVERSION_RULE":         49,
	"ENTITY_TYPE_INCENTIVE_TASK":               50,
	"ENTITY_TYPE_QUALITY_RULE":                 54,
	"ENTITY_TYPE_QUALITY_RULE_GROUP":           55,
	"ENTITY_TYPE_QUALITY_POINTS":               56,
	"ENTITY_TYPE_ORDER_SERVICE_FEE_CONFIG":     63,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_PRODUCT":     64,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_PACKAGE":     65,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_ATTRIBUTE":   66,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_ORDER":       67,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_FULFILLMENT": 68,
	"ENTITY_TYPE_DRIVER_ATTRIBUTE_INSTALLMENT": 69,
	"ENTITY_TYPE_RECRUITMENT_SESSION":          70,
	"ENTITY_TYPE_RECRUITMENT_SESSION_MATERIAL": 71,
	"ENTITY_TYPE_OCCASION_MODE":                72,
	"ENTITY_TYPE_OCCASION_FEE":                 73,
	"ENTITY_TYPE_RECRUITMENT_SESSION_MERCHANT": 74,
	"ENTITY_TYPE_STORE_GROUP":                  75,
	"ENTITY_TYPE_ITEM_DISCOUNT_CAMPAIGN":       76,
	"ENTITY_TYPE_OPENAPI_STORE_BIND":           77,
	"ENTITY_TYPE_OPENAPI_Vendor_CONFIG":        78,
	"ENTITY_TYPE_TAGCENTER_TAG_TYPE":           79,
	"ENTITY_TYPE_TAGCENTER_TAG":                80,
}

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}

func (x *EntityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityType_value, data, "EntityType")
	if err != nil {
		return err
	}
	*x = EntityType(value)
	return nil
}

func (EntityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{38}
}

type ChangeType int32

const (
	ChangeType_CHANGE_TYPE_CREATE ChangeType = 1
	ChangeType_CHANGE_TYPE_UPDATE ChangeType = 2
	ChangeType_CHANGE_TYPE_DELETE ChangeType = 3
	ChangeType_CHANGE_TYPE_START  ChangeType = 4
)

var ChangeType_name = map[int32]string{
	1: "CHANGE_TYPE_CREATE",
	2: "CHANGE_TYPE_UPDATE",
	3: "CHANGE_TYPE_DELETE",
	4: "CHANGE_TYPE_START",
}

var ChangeType_value = map[string]int32{
	"CHANGE_TYPE_CREATE": 1,
	"CHANGE_TYPE_UPDATE": 2,
	"CHANGE_TYPE_DELETE": 3,
	"CHANGE_TYPE_START":  4,
}

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return proto.EnumName(ChangeType_name, int32(x))
}

func (x *ChangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChangeType_value, data, "ChangeType")
	if err != nil {
		return err
	}
	*x = ChangeType(value)
	return nil
}

func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{39}
}

//设备操作系统
type OS int32

const (
	OS_ANDROID OS = 1
	OS_IOS     OS = 2
)

var OS_name = map[int32]string{
	1: "ANDROID",
	2: "IOS",
}

var OS_value = map[string]int32{
	"ANDROID": 1,
	"IOS":     2,
}

func (x OS) Enum() *OS {
	p := new(OS)
	*p = x
	return p
}

func (x OS) String() string {
	return proto.EnumName(OS_name, int32(x))
}

func (x *OS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OS_value, data, "OS")
	if err != nil {
		return err
	}
	*x = OS(value)
	return nil
}

func (OS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40}
}

//推送类型
type PushType int32

const (
	PushType_FCM  PushType = 1
	PushType_APNS PushType = 2
)

var PushType_name = map[int32]string{
	1: "FCM",
	2: "APNS",
}

var PushType_value = map[string]int32{
	"FCM":  1,
	"APNS": 2,
}

func (x PushType) Enum() *PushType {
	p := new(PushType)
	*p = x
	return p
}

func (x PushType) String() string {
	return proto.EnumName(PushType_name, int32(x))
}

func (x *PushType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PushType_value, data, "PushType")
	if err != nil {
		return err
	}
	*x = PushType(value)
	return nil
}

func (PushType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{41}
}

type MassType int32

const (
	MassType_MASS_TYPE_STORE_BUSINESS_INFO                    MassType = 1
	MassType_MASS_TYPE_STORE_MENU                             MassType = 2
	MassType_MASS_TYPE_STORE_OPTION                           MassType = 3
	MassType_MASS_TYPE_STORE_OPEN_STATUS                      MassType = 4
	MassType_MASS_TYPE_STORE_REGULAR_HOURS                    MassType = 5
	MassType_MASS_TYPE_STORE_SPECIAL_HOURS                    MassType = 6
	MassType_MASS_TYPE_DRIVER_EMPLOYMENT_STATUS               MassType = 7
	MassType_MASS_TYPE_DRIVER_WALLET_ADJUST                   MassType = 8
	MassType_MASS_TYPE_DRIVER_WALLET_WITHDRAW                 MassType = 9
	MassType_MASS_TYPE_BUYER_REFUND_UPDATE                    MassType = 10
	MassType_MASS_TYPE_STORE_CHARGE_BACK                      MassType = 11
	MassType_MASS_TYPE_QMS_VIOLATION                          MassType = 12
	MassType_MASS_TYPE_DRIVER_WALLET_WITHDRAW_APPROVE         MassType = 13
	MassType_MASS_TYPE_STORE_DISH                             MassType = 14
	MassType_MASS_TYPE_STORE_CATALOG                          MassType = 15
	MassType_MASS_TYPE_STORE_WHITELIST                        MassType = 16
	MassType_MASS_TYPE_DRIVER_SHOPEE_USERNAME                 MassType = 17
	MassType_MASS_TYPE_STORE_SCHEDULED_COMMISSIONS            MassType = 18
	MassType_MASS_TYPE_PROMOTION_ITEM_DISCOUNT_CAMPAIGN       MassType = 19
	MassType_MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT             MassType = 20
	MassType_MASS_TYPE_DRIVER_ADDRESS                         MassType = 21
	MassType_MASS_TYPE_DRIVER_SERVICE_TYPE                    MassType = 22
	MassType_MASS_TYPE_DRIVER_COVID19_VACCINATION_STATUS      MassType = 23
	MassType_MASS_TYPE_DRIVER_BULK_CREATION                   MassType = 24
	MassType_MASS_TYPE_STORE_CATEGORY                         MassType = 25
	MassType_MASS_TYPE_MERCHANT_QUALITY_PENALTY               MassType = 26
	MassType_MASS_TYPE_DRIVER_BULK_ADD_ORDER_STACK_WHITELIST  MassType = 27
	MassType_MASS_TYPE_DRIVER_BULK_RMV_ORDER_STACK_WHITELIST  MassType = 28
	MassType_MASS_TYPE_MERCHANT_QUALITY_EXCLUDE_VOUCHER       MassType = 29
	MassType_MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT_AUDIT       MassType = 30
	MassType_MASS_TYPE_MERCHANT_WALLET_WITHDRAWAL_MANUAL_NOTI MassType = 31
	MassType_MASS_TYPE_MERCHANT_QUALITY_BULK_REVOKE_VIOLATION MassType = 32
	MassType_MASS_TYPE_MERCHANT_QUALITY_EXCLUSION_LIST        MassType = 36
	MassType_MASS_TYPE_STORE_GROUP                            MassType = 40
)

var MassType_name = map[int32]string{
	1:  "MASS_TYPE_STORE_BUSINESS_INFO",
	2:  "MASS_TYPE_STORE_MENU",
	3:  "MASS_TYPE_STORE_OPTION",
	4:  "MASS_TYPE_STORE_OPEN_STATUS",
	5:  "MASS_TYPE_STORE_REGULAR_HOURS",
	6:  "MASS_TYPE_STORE_SPECIAL_HOURS",
	7:  "MASS_TYPE_DRIVER_EMPLOYMENT_STATUS",
	8:  "MASS_TYPE_DRIVER_WALLET_ADJUST",
	9:  "MASS_TYPE_DRIVER_WALLET_WITHDRAW",
	10: "MASS_TYPE_BUYER_REFUND_UPDATE",
	11: "MASS_TYPE_STORE_CHARGE_BACK",
	12: "MASS_TYPE_QMS_VIOLATION",
	13: "MASS_TYPE_DRIVER_WALLET_WITHDRAW_APPROVE",
	14: "MASS_TYPE_STORE_DISH",
	15: "MASS_TYPE_STORE_CATALOG",
	16: "MASS_TYPE_STORE_WHITELIST",
	17: "MASS_TYPE_DRIVER_SHOPEE_USERNAME",
	18: "MASS_TYPE_STORE_SCHEDULED_COMMISSIONS",
	19: "MASS_TYPE_PROMOTION_ITEM_DISCOUNT_CAMPAIGN",
	20: "MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT",
	21: "MASS_TYPE_DRIVER_ADDRESS",
	22: "MASS_TYPE_DRIVER_SERVICE_TYPE",
	23: "MASS_TYPE_DRIVER_COVID19_VACCINATION_STATUS",
	24: "MASS_TYPE_DRIVER_BULK_CREATION",
	25: "MASS_TYPE_STORE_CATEGORY",
	26: "MASS_TYPE_MERCHANT_QUALITY_PENALTY",
	27: "MASS_TYPE_DRIVER_BULK_ADD_ORDER_STACK_WHITELIST",
	28: "MASS_TYPE_DRIVER_BULK_RMV_ORDER_STACK_WHITELIST",
	29: "MASS_TYPE_MERCHANT_QUALITY_EXCLUDE_VOUCHER",
	30: "MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT_AUDIT",
	31: "MASS_TYPE_MERCHANT_WALLET_WITHDRAWAL_MANUAL_NOTI",
	32: "MASS_TYPE_MERCHANT_QUALITY_BULK_REVOKE_VIOLATION",
	36: "MASS_TYPE_MERCHANT_QUALITY_EXCLUSION_LIST",
	40: "MASS_TYPE_STORE_GROUP",
}

var MassType_value = map[string]int32{
	"MASS_TYPE_STORE_BUSINESS_INFO":                    1,
	"MASS_TYPE_STORE_MENU":                             2,
	"MASS_TYPE_STORE_OPTION":                           3,
	"MASS_TYPE_STORE_OPEN_STATUS":                      4,
	"MASS_TYPE_STORE_REGULAR_HOURS":                    5,
	"MASS_TYPE_STORE_SPECIAL_HOURS":                    6,
	"MASS_TYPE_DRIVER_EMPLOYMENT_STATUS":               7,
	"MASS_TYPE_DRIVER_WALLET_ADJUST":                   8,
	"MASS_TYPE_DRIVER_WALLET_WITHDRAW":                 9,
	"MASS_TYPE_BUYER_REFUND_UPDATE":                    10,
	"MASS_TYPE_STORE_CHARGE_BACK":                      11,
	"MASS_TYPE_QMS_VIOLATION":                          12,
	"MASS_TYPE_DRIVER_WALLET_WITHDRAW_APPROVE":         13,
	"MASS_TYPE_STORE_DISH":                             14,
	"MASS_TYPE_STORE_CATALOG":                          15,
	"MASS_TYPE_STORE_WHITELIST":                        16,
	"MASS_TYPE_DRIVER_SHOPEE_USERNAME":                 17,
	"MASS_TYPE_STORE_SCHEDULED_COMMISSIONS":            18,
	"MASS_TYPE_PROMOTION_ITEM_DISCOUNT_CAMPAIGN":       19,
	"MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT":             20,
	"MASS_TYPE_DRIVER_ADDRESS":                         21,
	"MASS_TYPE_DRIVER_SERVICE_TYPE":                    22,
	"MASS_TYPE_DRIVER_COVID19_VACCINATION_STATUS":      23,
	"MASS_TYPE_DRIVER_BULK_CREATION":                   24,
	"MASS_TYPE_STORE_CATEGORY":                         25,
	"MASS_TYPE_MERCHANT_QUALITY_PENALTY":               26,
	"MASS_TYPE_DRIVER_BULK_ADD_ORDER_STACK_WHITELIST":  27,
	"MASS_TYPE_DRIVER_BULK_RMV_ORDER_STACK_WHITELIST":  28,
	"MASS_TYPE_MERCHANT_QUALITY_EXCLUDE_VOUCHER":       29,
	"MASS_TYPE_MERCHANT_WALLET_ADJUSTMENT_AUDIT":       30,
	"MASS_TYPE_MERCHANT_WALLET_WITHDRAWAL_MANUAL_NOTI": 31,
	"MASS_TYPE_MERCHANT_QUALITY_BULK_REVOKE_VIOLATION": 32,
	"MASS_TYPE_MERCHANT_QUALITY_EXCLUSION_LIST":        36,
	"MASS_TYPE_STORE_GROUP":                            40,
}

func (x MassType) Enum() *MassType {
	p := new(MassType)
	*p = x
	return p
}

func (x MassType) String() string {
	return proto.EnumName(MassType_name, int32(x))
}

func (x *MassType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MassType_value, data, "MassType")
	if err != nil {
		return err
	}
	*x = MassType(value)
	return nil
}

func (MassType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{42}
}

type MassChangeLogType int32

const (
	MassChangeLogType_MASS_CHANGE_LOG_FILE    MassChangeLogType = 0
	MassChangeLogType_MASS_CHANGE_LOG_CONTENT MassChangeLogType = 1
	MassChangeLogType_MASS_CHANGE_LOG_ALL     MassChangeLogType = 2
)

var MassChangeLogType_name = map[int32]string{
	0: "MASS_CHANGE_LOG_FILE",
	1: "MASS_CHANGE_LOG_CONTENT",
	2: "MASS_CHANGE_LOG_ALL",
}

var MassChangeLogType_value = map[string]int32{
	"MASS_CHANGE_LOG_FILE":    0,
	"MASS_CHANGE_LOG_CONTENT": 1,
	"MASS_CHANGE_LOG_ALL":     2,
}

func (x MassChangeLogType) Enum() *MassChangeLogType {
	p := new(MassChangeLogType)
	*p = x
	return p
}

func (x MassChangeLogType) String() string {
	return proto.EnumName(MassChangeLogType_name, int32(x))
}

func (x *MassChangeLogType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MassChangeLogType_value, data, "MassChangeLogType")
	if err != nil {
		return err
	}
	*x = MassChangeLogType(value)
	return nil
}

func (MassChangeLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{43}
}

type Enabled int32

const (
	Enabled_DISABLED Enabled = 0
	Enabled_ENABLED  Enabled = 1
)

var Enabled_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var Enabled_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x Enabled) Enum() *Enabled {
	p := new(Enabled)
	*p = x
	return p
}

func (x Enabled) String() string {
	return proto.EnumName(Enabled_name, int32(x))
}

func (x *Enabled) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Enabled_value, data, "Enabled")
	if err != nil {
		return err
	}
	*x = Enabled(value)
	return nil
}

func (Enabled) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44}
}

type ChargebackStatus int32

const (
	ChargebackStatus_CHARGEBACK_CREATED    ChargebackStatus = 1
	ChargebackStatus_CHARGEBACK_COMPLETED  ChargebackStatus = 2
	ChargebackStatus_CHARGEBACK_CANCEL     ChargebackStatus = 3
	ChargebackStatus_CHARGEBACK_PROCESSING ChargebackStatus = 4
	ChargebackStatus_CHARGEBACK_ON_HOLD    ChargebackStatus = 5
)

var ChargebackStatus_name = map[int32]string{
	1: "CHARGEBACK_CREATED",
	2: "CHARGEBACK_COMPLETED",
	3: "CHARGEBACK_CANCEL",
	4: "CHARGEBACK_PROCESSING",
	5: "CHARGEBACK_ON_HOLD",
}

var ChargebackStatus_value = map[string]int32{
	"CHARGEBACK_CREATED":    1,
	"CHARGEBACK_COMPLETED":  2,
	"CHARGEBACK_CANCEL":     3,
	"CHARGEBACK_PROCESSING": 4,
	"CHARGEBACK_ON_HOLD":    5,
}

func (x ChargebackStatus) Enum() *ChargebackStatus {
	p := new(ChargebackStatus)
	*p = x
	return p
}

func (x ChargebackStatus) String() string {
	return proto.EnumName(ChargebackStatus_name, int32(x))
}

func (x *ChargebackStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChargebackStatus_value, data, "ChargebackStatus")
	if err != nil {
		return err
	}
	*x = ChargebackStatus(value)
	return nil
}

func (ChargebackStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{45}
}

type StoreChargebackMethod int32

const (
	StoreChargebackMethod_CHARGEBACK_METHOD_DEFAULT                StoreChargebackMethod = 0
	StoreChargebackMethod_CHARGEBACK_METHOD_WALLET_ADJUSTMENT      StoreChargebackMethod = 1
	StoreChargebackMethod_CHARGEBACK_METHOD_INVOICE                StoreChargebackMethod = 2
	StoreChargebackMethod_CHARGEBACK_METHOD_WALLET_ADJUSTMENT_AUTO StoreChargebackMethod = 3
)

var StoreChargebackMethod_name = map[int32]string{
	0: "CHARGEBACK_METHOD_DEFAULT",
	1: "CHARGEBACK_METHOD_WALLET_ADJUSTMENT",
	2: "CHARGEBACK_METHOD_INVOICE",
	3: "CHARGEBACK_METHOD_WALLET_ADJUSTMENT_AUTO",
}

var StoreChargebackMethod_value = map[string]int32{
	"CHARGEBACK_METHOD_DEFAULT":                0,
	"CHARGEBACK_METHOD_WALLET_ADJUSTMENT":      1,
	"CHARGEBACK_METHOD_INVOICE":                2,
	"CHARGEBACK_METHOD_WALLET_ADJUSTMENT_AUTO": 3,
}

func (x StoreChargebackMethod) Enum() *StoreChargebackMethod {
	p := new(StoreChargebackMethod)
	*p = x
	return p
}

func (x StoreChargebackMethod) String() string {
	return proto.EnumName(StoreChargebackMethod_name, int32(x))
}

func (x *StoreChargebackMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreChargebackMethod_value, data, "StoreChargebackMethod")
	if err != nil {
		return err
	}
	*x = StoreChargebackMethod(value)
	return nil
}

func (StoreChargebackMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{46}
}

type StoreChargeBackType int32

const (
	StoreChargeBackType_CHARGEBACK_TYPE_NONE StoreChargeBackType = 1
	StoreChargeBackType_CHARGEBACK_TYPE_FULL StoreChargeBackType = 2
	StoreChargeBackType_CHARGEBACK_TYPE_PART StoreChargeBackType = 3
)

var StoreChargeBackType_name = map[int32]string{
	1: "CHARGEBACK_TYPE_NONE",
	2: "CHARGEBACK_TYPE_FULL",
	3: "CHARGEBACK_TYPE_PART",
}

var StoreChargeBackType_value = map[string]int32{
	"CHARGEBACK_TYPE_NONE": 1,
	"CHARGEBACK_TYPE_FULL": 2,
	"CHARGEBACK_TYPE_PART": 3,
}

func (x StoreChargeBackType) Enum() *StoreChargeBackType {
	p := new(StoreChargeBackType)
	*p = x
	return p
}

func (x StoreChargeBackType) String() string {
	return proto.EnumName(StoreChargeBackType_name, int32(x))
}

func (x *StoreChargeBackType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreChargeBackType_value, data, "StoreChargeBackType")
	if err != nil {
		return err
	}
	*x = StoreChargeBackType(value)
	return nil
}

func (StoreChargeBackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{47}
}

type QualitySource int32

const (
	QualitySource_QUALITY_SOURCE_UNKNOWN QualitySource = 0
	QualitySource_SYSTEM_FOOD            QualitySource = 1
	QualitySource_SYSTEM_FRAUD           QualitySource = 2
	QualitySource_SQL                    QualitySource = 3
	QualitySource_CS                     QualitySource = 4
)

var QualitySource_name = map[int32]string{
	0: "QUALITY_SOURCE_UNKNOWN",
	1: "SYSTEM_FOOD",
	2: "SYSTEM_FRAUD",
	3: "SQL",
	4: "CS",
}

var QualitySource_value = map[string]int32{
	"QUALITY_SOURCE_UNKNOWN": 0,
	"SYSTEM_FOOD":            1,
	"SYSTEM_FRAUD":           2,
	"SQL":                    3,
	"CS":                     4,
}

func (x QualitySource) Enum() *QualitySource {
	p := new(QualitySource)
	*p = x
	return p
}

func (x QualitySource) String() string {
	return proto.EnumName(QualitySource_name, int32(x))
}

func (x *QualitySource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QualitySource_value, data, "QualitySource")
	if err != nil {
		return err
	}
	*x = QualitySource(value)
	return nil
}

func (QualitySource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{48}
}

type DishListingStatus int32

const (
	DishListingStatus_INACTIVE DishListingStatus = 0
	DishListingStatus_ACTIVE   DishListingStatus = 1
)

var DishListingStatus_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var DishListingStatus_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x DishListingStatus) Enum() *DishListingStatus {
	p := new(DishListingStatus)
	*p = x
	return p
}

func (x DishListingStatus) String() string {
	return proto.EnumName(DishListingStatus_name, int32(x))
}

func (x *DishListingStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DishListingStatus_value, data, "DishListingStatus")
	if err != nil {
		return err
	}
	*x = DishListingStatus(value)
	return nil
}

func (DishListingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{49}
}

type DishSaleStatus int32

const (
	DishSaleStatus_NOT_FOR_SALE DishSaleStatus = 0
	DishSaleStatus_FOR_SALE     DishSaleStatus = 1
)

var DishSaleStatus_name = map[int32]string{
	0: "NOT_FOR_SALE",
	1: "FOR_SALE",
}

var DishSaleStatus_value = map[string]int32{
	"NOT_FOR_SALE": 0,
	"FOR_SALE":     1,
}

func (x DishSaleStatus) Enum() *DishSaleStatus {
	p := new(DishSaleStatus)
	*p = x
	return p
}

func (x DishSaleStatus) String() string {
	return proto.EnumName(DishSaleStatus_name, int32(x))
}

func (x *DishSaleStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DishSaleStatus_value, data, "DishSaleStatus")
	if err != nil {
		return err
	}
	*x = DishSaleStatus(value)
	return nil
}

func (DishSaleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{50}
}

type StoreListingSource int32

const (
	StoreListingSource_OTHER_SOURCE    StoreListingSource = 0
	StoreListingSource_HOME_COLLECTION StoreListingSource = 1
	StoreListingSource_HOME_CIRCLE     StoreListingSource = 2
	StoreListingSource_BANNER          StoreListingSource = 3
	StoreListingSource_POP_UP_BANNER   StoreListingSource = 4
	StoreListingSource_DL_INDEX        StoreListingSource = 5
	StoreListingSource_DL_OUTLET       StoreListingSource = 6
	StoreListingSource_DL_BANNER       StoreListingSource = 7
)

var StoreListingSource_name = map[int32]string{
	0: "OTHER_SOURCE",
	1: "HOME_COLLECTION",
	2: "HOME_CIRCLE",
	3: "BANNER",
	4: "POP_UP_BANNER",
	5: "DL_INDEX",
	6: "DL_OUTLET",
	7: "DL_BANNER",
}

var StoreListingSource_value = map[string]int32{
	"OTHER_SOURCE":    0,
	"HOME_COLLECTION": 1,
	"HOME_CIRCLE":     2,
	"BANNER":          3,
	"POP_UP_BANNER":   4,
	"DL_INDEX":        5,
	"DL_OUTLET":       6,
	"DL_BANNER":       7,
}

func (x StoreListingSource) Enum() *StoreListingSource {
	p := new(StoreListingSource)
	*p = x
	return p
}

func (x StoreListingSource) String() string {
	return proto.EnumName(StoreListingSource_name, int32(x))
}

func (x *StoreListingSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreListingSource_value, data, "StoreListingSource")
	if err != nil {
		return err
	}
	*x = StoreListingSource(value)
	return nil
}

func (StoreListingSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{51}
}

type VoucherPaymentType int32

const (
	VoucherPaymentType_CREDIT_CARD_NO_INSTALLMENT VoucherPaymentType = 1
	VoucherPaymentType_CREDIT_CARD_INSTALLMENT    VoucherPaymentType = 2
	VoucherPaymentType_COD                        VoucherPaymentType = 3
)

var VoucherPaymentType_name = map[int32]string{
	1: "CREDIT_CARD_NO_INSTALLMENT",
	2: "CREDIT_CARD_INSTALLMENT",
	3: "COD",
}

var VoucherPaymentType_value = map[string]int32{
	"CREDIT_CARD_NO_INSTALLMENT": 1,
	"CREDIT_CARD_INSTALLMENT":    2,
	"COD":                        3,
}

func (x VoucherPaymentType) Enum() *VoucherPaymentType {
	p := new(VoucherPaymentType)
	*p = x
	return p
}

func (x VoucherPaymentType) String() string {
	return proto.EnumName(VoucherPaymentType_name, int32(x))
}

func (x *VoucherPaymentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherPaymentType_value, data, "VoucherPaymentType")
	if err != nil {
		return err
	}
	*x = VoucherPaymentType(value)
	return nil
}

func (VoucherPaymentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{52}
}

// 配送方式
type DeliveryMode int32

const (
	DeliveryMode_UNKNOWN_DELIVERY  DeliveryMode = 0
	DeliveryMode_PLATFORM_DELIVERY DeliveryMode = 1
	DeliveryMode_MERCHANT_DELIVERY DeliveryMode = 2
)

var DeliveryMode_name = map[int32]string{
	0: "UNKNOWN_DELIVERY",
	1: "PLATFORM_DELIVERY",
	2: "MERCHANT_DELIVERY",
}

var DeliveryMode_value = map[string]int32{
	"UNKNOWN_DELIVERY":  0,
	"PLATFORM_DELIVERY": 1,
	"MERCHANT_DELIVERY": 2,
}

func (x DeliveryMode) Enum() *DeliveryMode {
	p := new(DeliveryMode)
	*p = x
	return p
}

func (x DeliveryMode) String() string {
	return proto.EnumName(DeliveryMode_name, int32(x))
}

func (x *DeliveryMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryMode_value, data, "DeliveryMode")
	if err != nil {
		return err
	}
	*x = DeliveryMode(value)
	return nil
}

func (DeliveryMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{53}
}

type CategoryType int32

const (
	CategoryType_CategoryType_ShopeeFood CategoryType = 1001
	CategoryType_CategoryType_ShopeeMart CategoryType = 1002
)

var CategoryType_name = map[int32]string{
	1001: "CategoryType_ShopeeFood",
	1002: "CategoryType_ShopeeMart",
}

var CategoryType_value = map[string]int32{
	"CategoryType_ShopeeFood": 1001,
	"CategoryType_ShopeeMart": 1002,
}

func (x CategoryType) Enum() *CategoryType {
	p := new(CategoryType)
	*p = x
	return p
}

func (x CategoryType) String() string {
	return proto.EnumName(CategoryType_name, int32(x))
}

func (x *CategoryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CategoryType_value, data, "CategoryType")
	if err != nil {
		return err
	}
	*x = CategoryType(value)
	return nil
}

func (CategoryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{54}
}

type StoreCategoryFirstLevel int32

const (
	StoreCategoryFirstLevel_FIRST_LEVEL_UNKNOWN StoreCategoryFirstLevel = 0
)

var StoreCategoryFirstLevel_name = map[int32]string{
	0: "FIRST_LEVEL_UNKNOWN",
}

var StoreCategoryFirstLevel_value = map[string]int32{
	"FIRST_LEVEL_UNKNOWN": 0,
}

func (x StoreCategoryFirstLevel) Enum() *StoreCategoryFirstLevel {
	p := new(StoreCategoryFirstLevel)
	*p = x
	return p
}

func (x StoreCategoryFirstLevel) String() string {
	return proto.EnumName(StoreCategoryFirstLevel_name, int32(x))
}

func (x *StoreCategoryFirstLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreCategoryFirstLevel_value, data, "StoreCategoryFirstLevel")
	if err != nil {
		return err
	}
	*x = StoreCategoryFirstLevel(value)
	return nil
}

func (StoreCategoryFirstLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{55}
}

type StoreCategorySecondLevel int32

const (
	StoreCategorySecondLevel_SECOND_LEVEL_UNKNOWN StoreCategorySecondLevel = 0
)

var StoreCategorySecondLevel_name = map[int32]string{
	0: "SECOND_LEVEL_UNKNOWN",
}

var StoreCategorySecondLevel_value = map[string]int32{
	"SECOND_LEVEL_UNKNOWN": 0,
}

func (x StoreCategorySecondLevel) Enum() *StoreCategorySecondLevel {
	p := new(StoreCategorySecondLevel)
	*p = x
	return p
}

func (x StoreCategorySecondLevel) String() string {
	return proto.EnumName(StoreCategorySecondLevel_name, int32(x))
}

func (x *StoreCategorySecondLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreCategorySecondLevel_value, data, "StoreCategorySecondLevel")
	if err != nil {
		return err
	}
	*x = StoreCategorySecondLevel(value)
	return nil
}

func (StoreCategorySecondLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{56}
}

type BankAccountStatus int32

const (
	BankAccountStatus_BANK_STATUS_NONE     BankAccountStatus = 0
	BankAccountStatus_BANK_STATUS_CHECKED  BankAccountStatus = 1
	BankAccountStatus_BANK_STATUS_PENDING  BankAccountStatus = 2
	BankAccountStatus_BANK_STATUS_REJECTED BankAccountStatus = 3
	BankAccountStatus_BANK_STATUS_VERIFIED BankAccountStatus = 4
	BankAccountStatus_BANK_STATUS_BANNED   BankAccountStatus = 5
	BankAccountStatus_BANK_STATUS_DELETED  BankAccountStatus = 6
)

var BankAccountStatus_name = map[int32]string{
	0: "BANK_STATUS_NONE",
	1: "BANK_STATUS_CHECKED",
	2: "BANK_STATUS_PENDING",
	3: "BANK_STATUS_REJECTED",
	4: "BANK_STATUS_VERIFIED",
	5: "BANK_STATUS_BANNED",
	6: "BANK_STATUS_DELETED",
}

var BankAccountStatus_value = map[string]int32{
	"BANK_STATUS_NONE":     0,
	"BANK_STATUS_CHECKED":  1,
	"BANK_STATUS_PENDING":  2,
	"BANK_STATUS_REJECTED": 3,
	"BANK_STATUS_VERIFIED": 4,
	"BANK_STATUS_BANNED":   5,
	"BANK_STATUS_DELETED":  6,
}

func (x BankAccountStatus) Enum() *BankAccountStatus {
	p := new(BankAccountStatus)
	*p = x
	return p
}

func (x BankAccountStatus) String() string {
	return proto.EnumName(BankAccountStatus_name, int32(x))
}

func (x *BankAccountStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BankAccountStatus_value, data, "BankAccountStatus")
	if err != nil {
		return err
	}
	*x = BankAccountStatus(value)
	return nil
}

func (BankAccountStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{57}
}

type SettlementMethod int32

const (
	SettlementMethod_SETTLEMENT_METHOD_NONE     SettlementMethod = 0
	SettlementMethod_SETTLEMENT_METHOD_T0       SettlementMethod = 1
	SettlementMethod_SETTLEMENT_METHOD_T1       SettlementMethod = 2
	SettlementMethod_SETTLEMENT_METHOD_WEEKLY   SettlementMethod = 3
	SettlementMethod_SETTLEMENT_METHOD_MONTHLY  SettlementMethod = 4
	SettlementMethod_SETTLEMENT_METHOD_BIWEEKLY SettlementMethod = 5
)

var SettlementMethod_name = map[int32]string{
	0: "SETTLEMENT_METHOD_NONE",
	1: "SETTLEMENT_METHOD_T0",
	2: "SETTLEMENT_METHOD_T1",
	3: "SETTLEMENT_METHOD_WEEKLY",
	4: "SETTLEMENT_METHOD_MONTHLY",
	5: "SETTLEMENT_METHOD_BIWEEKLY",
}

var SettlementMethod_value = map[string]int32{
	"SETTLEMENT_METHOD_NONE":     0,
	"SETTLEMENT_METHOD_T0":       1,
	"SETTLEMENT_METHOD_T1":       2,
	"SETTLEMENT_METHOD_WEEKLY":   3,
	"SETTLEMENT_METHOD_MONTHLY":  4,
	"SETTLEMENT_METHOD_BIWEEKLY": 5,
}

func (x SettlementMethod) Enum() *SettlementMethod {
	p := new(SettlementMethod)
	*p = x
	return p
}

func (x SettlementMethod) String() string {
	return proto.EnumName(SettlementMethod_name, int32(x))
}

func (x *SettlementMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementMethod_value, data, "SettlementMethod")
	if err != nil {
		return err
	}
	*x = SettlementMethod(value)
	return nil
}

func (SettlementMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{58}
}

type PaymentWay int32

const (
	PaymentWay_PAYMENT_UNKNOWN PaymentWay = 0
	PaymentWay_PAYMENT_MANUAL  PaymentWay = 1
	PaymentWay_PAYMENT_AUTO    PaymentWay = 2
)

var PaymentWay_name = map[int32]string{
	0: "PAYMENT_UNKNOWN",
	1: "PAYMENT_MANUAL",
	2: "PAYMENT_AUTO",
}

var PaymentWay_value = map[string]int32{
	"PAYMENT_UNKNOWN": 0,
	"PAYMENT_MANUAL":  1,
	"PAYMENT_AUTO":    2,
}

func (x PaymentWay) Enum() *PaymentWay {
	p := new(PaymentWay)
	*p = x
	return p
}

func (x PaymentWay) String() string {
	return proto.EnumName(PaymentWay_name, int32(x))
}

func (x *PaymentWay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentWay_value, data, "PaymentWay")
	if err != nil {
		return err
	}
	*x = PaymentWay(value)
	return nil
}

func (PaymentWay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{59}
}

type Vat int32

const (
	Vat_VAT_UNKNOWN Vat = 0
	Vat_VAT_YES     Vat = 1
	Vat_VAT_NO      Vat = 2
)

var Vat_name = map[int32]string{
	0: "VAT_UNKNOWN",
	1: "VAT_YES",
	2: "VAT_NO",
}

var Vat_value = map[string]int32{
	"VAT_UNKNOWN": 0,
	"VAT_YES":     1,
	"VAT_NO":      2,
}

func (x Vat) Enum() *Vat {
	p := new(Vat)
	*p = x
	return p
}

func (x Vat) String() string {
	return proto.EnumName(Vat_name, int32(x))
}

func (x *Vat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Vat_value, data, "Vat")
	if err != nil {
		return err
	}
	*x = Vat(value)
	return nil
}

func (Vat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{60}
}

type Wht int32

const (
	Wht_WHT_UNKNOWN Wht = 0
	Wht_WHT_YES     Wht = 1
	Wht_WHT_NO      Wht = 2
	Wht_WHT_BEHALF  Wht = 3
	Wht_WHT_MANUAL  Wht = 4
)

var Wht_name = map[int32]string{
	0: "WHT_UNKNOWN",
	1: "WHT_YES",
	2: "WHT_NO",
	3: "WHT_BEHALF",
	4: "WHT_MANUAL",
}

var Wht_value = map[string]int32{
	"WHT_UNKNOWN": 0,
	"WHT_YES":     1,
	"WHT_NO":      2,
	"WHT_BEHALF":  3,
	"WHT_MANUAL":  4,
}

func (x Wht) Enum() *Wht {
	p := new(Wht)
	*p = x
	return p
}

func (x Wht) String() string {
	return proto.EnumName(Wht_name, int32(x))
}

func (x *Wht) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Wht_value, data, "Wht")
	if err != nil {
		return err
	}
	*x = Wht(value)
	return nil
}

func (Wht) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{61}
}

type VatCalculate int32

const (
	VatCalculate_VAT_CALCULATE_UNKNOWN   VatCalculate = 0
	VatCalculate_VAT_CALCULATE_EXCLUSIVE VatCalculate = 1
	VatCalculate_VAT_CALCULATE_INCLUSIVE VatCalculate = 2
)

var VatCalculate_name = map[int32]string{
	0: "VAT_CALCULATE_UNKNOWN",
	1: "VAT_CALCULATE_EXCLUSIVE",
	2: "VAT_CALCULATE_INCLUSIVE",
}

var VatCalculate_value = map[string]int32{
	"VAT_CALCULATE_UNKNOWN":   0,
	"VAT_CALCULATE_EXCLUSIVE": 1,
	"VAT_CALCULATE_INCLUSIVE": 2,
}

func (x VatCalculate) Enum() *VatCalculate {
	p := new(VatCalculate)
	*p = x
	return p
}

func (x VatCalculate) String() string {
	return proto.EnumName(VatCalculate_name, int32(x))
}

func (x *VatCalculate) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VatCalculate_value, data, "VatCalculate")
	if err != nil {
		return err
	}
	*x = VatCalculate(value)
	return nil
}

func (VatCalculate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{62}
}

type PayoutMethod int32

const (
	PayoutMethod_PAYOUT_METHOD_NONE             PayoutMethod = 0
	PayoutMethod_PAYOUT_METHOD_AIRPAY_WALLET    PayoutMethod = 1
	PayoutMethod_PAYOUT_METHOD_BANK_ACCOUNT     PayoutMethod = 2
	PayoutMethod_PAYOUT_METHOD_CC               PayoutMethod = 3
	PayoutMethod_PAYOUT_METHOD_NO_PAYOUT        PayoutMethod = 4
	PayoutMethod_PAYOUT_METHOD_SHOPEEPAY_WALLET PayoutMethod = 5
)

var PayoutMethod_name = map[int32]string{
	0: "PAYOUT_METHOD_NONE",
	1: "PAYOUT_METHOD_AIRPAY_WALLET",
	2: "PAYOUT_METHOD_BANK_ACCOUNT",
	3: "PAYOUT_METHOD_CC",
	4: "PAYOUT_METHOD_NO_PAYOUT",
	5: "PAYOUT_METHOD_SHOPEEPAY_WALLET",
}

var PayoutMethod_value = map[string]int32{
	"PAYOUT_METHOD_NONE":             0,
	"PAYOUT_METHOD_AIRPAY_WALLET":    1,
	"PAYOUT_METHOD_BANK_ACCOUNT":     2,
	"PAYOUT_METHOD_CC":               3,
	"PAYOUT_METHOD_NO_PAYOUT":        4,
	"PAYOUT_METHOD_SHOPEEPAY_WALLET": 5,
}

func (x PayoutMethod) Enum() *PayoutMethod {
	p := new(PayoutMethod)
	*p = x
	return p
}

func (x PayoutMethod) String() string {
	return proto.EnumName(PayoutMethod_name, int32(x))
}

func (x *PayoutMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PayoutMethod_value, data, "PayoutMethod")
	if err != nil {
		return err
	}
	*x = PayoutMethod(value)
	return nil
}

func (PayoutMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{63}
}

type CrossMonthSettlement int32

const (
	CrossMonthSettlement_CROSS_MONTH_NONE                 CrossMonthSettlement = 0
	CrossMonthSettlement_CROSS_MONTH_NO_SPLIT             CrossMonthSettlement = 1
	CrossMonthSettlement_CROSS_MONTH_SPLIT_TWO_SETTLEMENT CrossMonthSettlement = 2
)

var CrossMonthSettlement_name = map[int32]string{
	0: "CROSS_MONTH_NONE",
	1: "CROSS_MONTH_NO_SPLIT",
	2: "CROSS_MONTH_SPLIT_TWO_SETTLEMENT",
}

var CrossMonthSettlement_value = map[string]int32{
	"CROSS_MONTH_NONE":                 0,
	"CROSS_MONTH_NO_SPLIT":             1,
	"CROSS_MONTH_SPLIT_TWO_SETTLEMENT": 2,
}

func (x CrossMonthSettlement) Enum() *CrossMonthSettlement {
	p := new(CrossMonthSettlement)
	*p = x
	return p
}

func (x CrossMonthSettlement) String() string {
	return proto.EnumName(CrossMonthSettlement_name, int32(x))
}

func (x *CrossMonthSettlement) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CrossMonthSettlement_value, data, "CrossMonthSettlement")
	if err != nil {
		return err
	}
	*x = CrossMonthSettlement(value)
	return nil
}

func (CrossMonthSettlement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{64}
}

type StoreWhitelistType int32

const (
	StoreWhitelistType_DECLINE_OVERTIME_ORDER         StoreWhitelistType = 0
	StoreWhitelistType_SUPER_MENU                     StoreWhitelistType = 1
	StoreWhitelistType_HIDE_NOTE                      StoreWhitelistType = 4
	StoreWhitelistType_CONFIRM_OVERTIME_ORDER         StoreWhitelistType = 5
	StoreWhitelistType_HIDE_PROCESSING_FEE            StoreWhitelistType = 6
	StoreWhitelistType_SPECIAL_MODE_STORE_CLOSE       StoreWhitelistType = 7
	StoreWhitelistType_SPECIAL_MODE_DELIVERY_DISTANCE StoreWhitelistType = 8
	StoreWhitelistType_SPECIAL_MODE_DFF               StoreWhitelistType = 9
)

var StoreWhitelistType_name = map[int32]string{
	0: "DECLINE_OVERTIME_ORDER",
	1: "SUPER_MENU",
	4: "HIDE_NOTE",
	5: "CONFIRM_OVERTIME_ORDER",
	6: "HIDE_PROCESSING_FEE",
	7: "SPECIAL_MODE_STORE_CLOSE",
	8: "SPECIAL_MODE_DELIVERY_DISTANCE",
	9: "SPECIAL_MODE_DFF",
}

var StoreWhitelistType_value = map[string]int32{
	"DECLINE_OVERTIME_ORDER":         0,
	"SUPER_MENU":                     1,
	"HIDE_NOTE":                      4,
	"CONFIRM_OVERTIME_ORDER":         5,
	"HIDE_PROCESSING_FEE":            6,
	"SPECIAL_MODE_STORE_CLOSE":       7,
	"SPECIAL_MODE_DELIVERY_DISTANCE": 8,
	"SPECIAL_MODE_DFF":               9,
}

func (x StoreWhitelistType) Enum() *StoreWhitelistType {
	p := new(StoreWhitelistType)
	*p = x
	return p
}

func (x StoreWhitelistType) String() string {
	return proto.EnumName(StoreWhitelistType_name, int32(x))
}

func (x *StoreWhitelistType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreWhitelistType_value, data, "StoreWhitelistType")
	if err != nil {
		return err
	}
	*x = StoreWhitelistType(value)
	return nil
}

func (StoreWhitelistType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{65}
}

// ==================骑手相关start=====================
type WithdrawalChannelType int32

const (
	WithdrawalChannelType_BANK_CHANNEL       WithdrawalChannelType = 0
	WithdrawalChannelType_SHOPEE_PAY_CHANNEL WithdrawalChannelType = 1
)

var WithdrawalChannelType_name = map[int32]string{
	0: "BANK_CHANNEL",
	1: "SHOPEE_PAY_CHANNEL",
}

var WithdrawalChannelType_value = map[string]int32{
	"BANK_CHANNEL":       0,
	"SHOPEE_PAY_CHANNEL": 1,
}

func (x WithdrawalChannelType) Enum() *WithdrawalChannelType {
	p := new(WithdrawalChannelType)
	*p = x
	return p
}

func (x WithdrawalChannelType) String() string {
	return proto.EnumName(WithdrawalChannelType_name, int32(x))
}

func (x *WithdrawalChannelType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WithdrawalChannelType_value, data, "WithdrawalChannelType")
	if err != nil {
		return err
	}
	*x = WithdrawalChannelType(value)
	return nil
}

func (WithdrawalChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{66}
}

type VoucherStatus int32

const (
	VoucherStatus_VOUCHER_STATUS_DISABLED VoucherStatus = 0
	VoucherStatus_VOUCHER_STATUS_ENABLED  VoucherStatus = 1
	VoucherStatus_VOUCHER_STATUS_DELETED  VoucherStatus = 2
)

var VoucherStatus_name = map[int32]string{
	0: "VOUCHER_STATUS_DISABLED",
	1: "VOUCHER_STATUS_ENABLED",
	2: "VOUCHER_STATUS_DELETED",
}

var VoucherStatus_value = map[string]int32{
	"VOUCHER_STATUS_DISABLED": 0,
	"VOUCHER_STATUS_ENABLED":  1,
	"VOUCHER_STATUS_DELETED":  2,
}

func (x VoucherStatus) Enum() *VoucherStatus {
	p := new(VoucherStatus)
	*p = x
	return p
}

func (x VoucherStatus) String() string {
	return proto.EnumName(VoucherStatus_name, int32(x))
}

func (x *VoucherStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherStatus_value, data, "VoucherStatus")
	if err != nil {
		return err
	}
	*x = VoucherStatus(value)
	return nil
}

func (VoucherStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{67}
}

// bitmask
type VoucherDistributionMethod int32

const (
	VoucherDistributionMethod_VOUCHER_DISTRIBUTION_METHOD_ALL           VoucherDistributionMethod = 0
	VoucherDistributionMethod_VOUCHER_DISTRIBUTION_METHOD_CLAIM         VoucherDistributionMethod = 1
	VoucherDistributionMethod_VOUCHER_DISTRIBUTION_METHOD_DISPATCH      VoucherDistributionMethod = 2
	VoucherDistributionMethod_VOUCHER_DISTRIBUTION_METHOD_CLAIM_BY_CODE VoucherDistributionMethod = 4
)

var VoucherDistributionMethod_name = map[int32]string{
	0: "VOUCHER_DISTRIBUTION_METHOD_ALL",
	1: "VOUCHER_DISTRIBUTION_METHOD_CLAIM",
	2: "VOUCHER_DISTRIBUTION_METHOD_DISPATCH",
	4: "VOUCHER_DISTRIBUTION_METHOD_CLAIM_BY_CODE",
}

var VoucherDistributionMethod_value = map[string]int32{
	"VOUCHER_DISTRIBUTION_METHOD_ALL":           0,
	"VOUCHER_DISTRIBUTION_METHOD_CLAIM":         1,
	"VOUCHER_DISTRIBUTION_METHOD_DISPATCH":      2,
	"VOUCHER_DISTRIBUTION_METHOD_CLAIM_BY_CODE": 4,
}

func (x VoucherDistributionMethod) Enum() *VoucherDistributionMethod {
	p := new(VoucherDistributionMethod)
	*p = x
	return p
}

func (x VoucherDistributionMethod) String() string {
	return proto.EnumName(VoucherDistributionMethod_name, int32(x))
}

func (x *VoucherDistributionMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherDistributionMethod_value, data, "VoucherDistributionMethod")
	if err != nil {
		return err
	}
	*x = VoucherDistributionMethod(value)
	return nil
}

func (VoucherDistributionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{68}
}

type VoucherQuotaStatus int32

const (
	VoucherQuotaStatus_VOUCHER_QUOTA_STATUS_HAS_QUOTA VoucherQuotaStatus = 0
	VoucherQuotaStatus_VOUCHER_QUOTA_STATUS_NO_QUOTA  VoucherQuotaStatus = 1
)

var VoucherQuotaStatus_name = map[int32]string{
	0: "VOUCHER_QUOTA_STATUS_HAS_QUOTA",
	1: "VOUCHER_QUOTA_STATUS_NO_QUOTA",
}

var VoucherQuotaStatus_value = map[string]int32{
	"VOUCHER_QUOTA_STATUS_HAS_QUOTA": 0,
	"VOUCHER_QUOTA_STATUS_NO_QUOTA":  1,
}

func (x VoucherQuotaStatus) Enum() *VoucherQuotaStatus {
	p := new(VoucherQuotaStatus)
	*p = x
	return p
}

func (x VoucherQuotaStatus) String() string {
	return proto.EnumName(VoucherQuotaStatus_name, int32(x))
}

func (x *VoucherQuotaStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherQuotaStatus_value, data, "VoucherQuotaStatus")
	if err != nil {
		return err
	}
	*x = VoucherQuotaStatus(value)
	return nil
}

func (VoucherQuotaStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{69}
}

type VoucherTimeStatus int32

const (
	VoucherTimeStatus_VOUCHER_TIME_STATUS_UPCOMING VoucherTimeStatus = 0
	VoucherTimeStatus_VOUCHER_TIME_STATUS_ONGOING  VoucherTimeStatus = 1
	VoucherTimeStatus_VOUCHER_TIME_STATUS_EXPIRED  VoucherTimeStatus = 2
)

var VoucherTimeStatus_name = map[int32]string{
	0: "VOUCHER_TIME_STATUS_UPCOMING",
	1: "VOUCHER_TIME_STATUS_ONGOING",
	2: "VOUCHER_TIME_STATUS_EXPIRED",
}

var VoucherTimeStatus_value = map[string]int32{
	"VOUCHER_TIME_STATUS_UPCOMING": 0,
	"VOUCHER_TIME_STATUS_ONGOING":  1,
	"VOUCHER_TIME_STATUS_EXPIRED":  2,
}

func (x VoucherTimeStatus) Enum() *VoucherTimeStatus {
	p := new(VoucherTimeStatus)
	*p = x
	return p
}

func (x VoucherTimeStatus) String() string {
	return proto.EnumName(VoucherTimeStatus_name, int32(x))
}

func (x *VoucherTimeStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherTimeStatus_value, data, "VoucherTimeStatus")
	if err != nil {
		return err
	}
	*x = VoucherTimeStatus(value)
	return nil
}

func (VoucherTimeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{70}
}

type VoucherRewardType int32

const (
	VoucherRewardType_VOUCHER_REWARD_PRODUCT_DISCOUNT           VoucherRewardType = 0
	VoucherRewardType_VOUCHER_REWARD_COIN_CASHBACK              VoucherRewardType = 1
	VoucherRewardType_VOUCHER_REWARD_FREE_SHIPPING              VoucherRewardType = 2
	VoucherRewardType_VOUCHER_REWARD_PREPAID_CASHBACK           VoucherRewardType = 3
	VoucherRewardType_VOUCHER_REWARD_PREPAID_COIN_CASHBACK      VoucherRewardType = 4
	VoucherRewardType_VOUCHER_REWARD_PREPAID_DISCOUNT           VoucherRewardType = 5
	VoucherRewardType_VOUCHER_REWARD_SHIPPING_FEE               VoucherRewardType = 6
	VoucherRewardType_VOUCHER_REWARD_ADMIN_FEE_DISCOUNT         VoucherRewardType = 7
	VoucherRewardType_VOUCHER_REWARD_INTEREST_RATE_FEE_DISCOUNT VoucherRewardType = 8
)

var VoucherRewardType_name = map[int32]string{
	0: "VOUCHER_REWARD_PRODUCT_DISCOUNT",
	1: "VOUCHER_REWARD_COIN_CASHBACK",
	2: "VOUCHER_REWARD_FREE_SHIPPING",
	3: "VOUCHER_REWARD_PREPAID_CASHBACK",
	4: "VOUCHER_REWARD_PREPAID_COIN_CASHBACK",
	5: "VOUCHER_REWARD_PREPAID_DISCOUNT",
	6: "VOUCHER_REWARD_SHIPPING_FEE",
	7: "VOUCHER_REWARD_ADMIN_FEE_DISCOUNT",
	8: "VOUCHER_REWARD_INTEREST_RATE_FEE_DISCOUNT",
}

var VoucherRewardType_value = map[string]int32{
	"VOUCHER_REWARD_PRODUCT_DISCOUNT":           0,
	"VOUCHER_REWARD_COIN_CASHBACK":              1,
	"VOUCHER_REWARD_FREE_SHIPPING":              2,
	"VOUCHER_REWARD_PREPAID_CASHBACK":           3,
	"VOUCHER_REWARD_PREPAID_COIN_CASHBACK":      4,
	"VOUCHER_REWARD_PREPAID_DISCOUNT":           5,
	"VOUCHER_REWARD_SHIPPING_FEE":               6,
	"VOUCHER_REWARD_ADMIN_FEE_DISCOUNT":         7,
	"VOUCHER_REWARD_INTEREST_RATE_FEE_DISCOUNT": 8,
}

func (x VoucherRewardType) Enum() *VoucherRewardType {
	p := new(VoucherRewardType)
	*p = x
	return p
}

func (x VoucherRewardType) String() string {
	return proto.EnumName(VoucherRewardType_name, int32(x))
}

func (x *VoucherRewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherRewardType_value, data, "VoucherRewardType")
	if err != nil {
		return err
	}
	*x = VoucherRewardType(value)
	return nil
}

func (VoucherRewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{71}
}

type Voucher_Source int32

const (
	Voucher_Source_CAMPAIGN Voucher_Source = 1
	Voucher_Source_ADMIN    Voucher_Source = 2
)

var Voucher_Source_name = map[int32]string{
	1: "CAMPAIGN",
	2: "ADMIN",
}

var Voucher_Source_value = map[string]int32{
	"CAMPAIGN": 1,
	"ADMIN":    2,
}

func (x Voucher_Source) Enum() *Voucher_Source {
	p := new(Voucher_Source)
	*p = x
	return p
}

func (x Voucher_Source) String() string {
	return proto.EnumName(Voucher_Source_name, int32(x))
}

func (x *Voucher_Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Voucher_Source_value, data, "Voucher_Source")
	if err != nil {
		return err
	}
	*x = Voucher_Source(value)
	return nil
}

func (Voucher_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{72}
}

type Voucher_Type int32

const (
	Voucher_Type_VOUCHER_SPX   Voucher_Type = 1
	Voucher_Type_VOUCHER_FOODY Voucher_Type = 0
)

var Voucher_Type_name = map[int32]string{
	1: "VOUCHER_SPX",
	0: "VOUCHER_FOODY",
}

var Voucher_Type_value = map[string]int32{
	"VOUCHER_SPX":   1,
	"VOUCHER_FOODY": 0,
}

func (x Voucher_Type) Enum() *Voucher_Type {
	p := new(Voucher_Type)
	*p = x
	return p
}

func (x Voucher_Type) String() string {
	return proto.EnumName(Voucher_Type_name, int32(x))
}

func (x *Voucher_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Voucher_Type_value, data, "Voucher_Type")
	if err != nil {
		return err
	}
	*x = Voucher_Type(value)
	return nil
}

func (Voucher_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{73}
}

type VoucherTaskType int32

const (
	VoucherTaskType_TASK_TYPE_DISPATCH_VOUCHER_BY_USER_ID  VoucherTaskType = 1
	VoucherTaskType_TASK_TYPE_MANIPULATE_VOUCHER_LABEL     VoucherTaskType = 2
	VoucherTaskType_TASK_TYPE_DISPATCH_VOUCHER_BY_USER_TAG VoucherTaskType = 3
)

var VoucherTaskType_name = map[int32]string{
	1: "TASK_TYPE_DISPATCH_VOUCHER_BY_USER_ID",
	2: "TASK_TYPE_MANIPULATE_VOUCHER_LABEL",
	3: "TASK_TYPE_DISPATCH_VOUCHER_BY_USER_TAG",
}

var VoucherTaskType_value = map[string]int32{
	"TASK_TYPE_DISPATCH_VOUCHER_BY_USER_ID":  1,
	"TASK_TYPE_MANIPULATE_VOUCHER_LABEL":     2,
	"TASK_TYPE_DISPATCH_VOUCHER_BY_USER_TAG": 3,
}

func (x VoucherTaskType) Enum() *VoucherTaskType {
	p := new(VoucherTaskType)
	*p = x
	return p
}

func (x VoucherTaskType) String() string {
	return proto.EnumName(VoucherTaskType_name, int32(x))
}

func (x *VoucherTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherTaskType_value, data, "VoucherTaskType")
	if err != nil {
		return err
	}
	*x = VoucherTaskType(value)
	return nil
}

func (VoucherTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{74}
}

type VoucherTaskStatus int32

const (
	VoucherTaskStatus_TASK_STATUS_PENDING    VoucherTaskStatus = 0
	VoucherTaskStatus_TASK_STATUS_PROCESSING VoucherTaskStatus = 1
	VoucherTaskStatus_TASK_STATUS_FINISHED   VoucherTaskStatus = 2
	VoucherTaskStatus_TASK_STATUS_STOPPED    VoucherTaskStatus = 3
)

var VoucherTaskStatus_name = map[int32]string{
	0: "TASK_STATUS_PENDING",
	1: "TASK_STATUS_PROCESSING",
	2: "TASK_STATUS_FINISHED",
	3: "TASK_STATUS_STOPPED",
}

var VoucherTaskStatus_value = map[string]int32{
	"TASK_STATUS_PENDING":    0,
	"TASK_STATUS_PROCESSING": 1,
	"TASK_STATUS_FINISHED":   2,
	"TASK_STATUS_STOPPED":    3,
}

func (x VoucherTaskStatus) Enum() *VoucherTaskStatus {
	p := new(VoucherTaskStatus)
	*p = x
	return p
}

func (x VoucherTaskStatus) String() string {
	return proto.EnumName(VoucherTaskStatus_name, int32(x))
}

func (x *VoucherTaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherTaskStatus_value, data, "VoucherTaskStatus")
	if err != nil {
		return err
	}
	*x = VoucherTaskStatus(value)
	return nil
}

func (VoucherTaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{75}
}

type ItemDiscountCreatorSource int32

const (
	ItemDiscountCreatorSource_CREATOR_ADMIN    ItemDiscountCreatorSource = 0
	ItemDiscountCreatorSource_CREATOR_MERCHANT ItemDiscountCreatorSource = 1
)

var ItemDiscountCreatorSource_name = map[int32]string{
	0: "CREATOR_ADMIN",
	1: "CREATOR_MERCHANT",
}

var ItemDiscountCreatorSource_value = map[string]int32{
	"CREATOR_ADMIN":    0,
	"CREATOR_MERCHANT": 1,
}

func (x ItemDiscountCreatorSource) Enum() *ItemDiscountCreatorSource {
	p := new(ItemDiscountCreatorSource)
	*p = x
	return p
}

func (x ItemDiscountCreatorSource) String() string {
	return proto.EnumName(ItemDiscountCreatorSource_name, int32(x))
}

func (x *ItemDiscountCreatorSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscountCreatorSource_value, data, "ItemDiscountCreatorSource")
	if err != nil {
		return err
	}
	*x = ItemDiscountCreatorSource(value)
	return nil
}

func (ItemDiscountCreatorSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{76}
}

type DiscountType int32

const (
	DiscountType_PRICE      DiscountType = 0
	DiscountType_PERCENTAGE DiscountType = 1
	DiscountType_AMOUNT     DiscountType = 2
)

var DiscountType_name = map[int32]string{
	0: "PRICE",
	1: "PERCENTAGE",
	2: "AMOUNT",
}

var DiscountType_value = map[string]int32{
	"PRICE":      0,
	"PERCENTAGE": 1,
	"AMOUNT":     2,
}

func (x DiscountType) Enum() *DiscountType {
	p := new(DiscountType)
	*p = x
	return p
}

func (x DiscountType) String() string {
	return proto.EnumName(DiscountType_name, int32(x))
}

func (x *DiscountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DiscountType_value, data, "DiscountType")
	if err != nil {
		return err
	}
	*x = DiscountType(value)
	return nil
}

func (DiscountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{77}
}

type ItemDiscountType int32

const (
	ItemDiscountType_None       ItemDiscountType = 0
	ItemDiscountType_PriceSlash ItemDiscountType = 1
	ItemDiscountType_FlashSale  ItemDiscountType = 2
)

var ItemDiscountType_name = map[int32]string{
	0: "None",
	1: "PriceSlash",
	2: "FlashSale",
}

var ItemDiscountType_value = map[string]int32{
	"None":       0,
	"PriceSlash": 1,
	"FlashSale":  2,
}

func (x ItemDiscountType) Enum() *ItemDiscountType {
	p := new(ItemDiscountType)
	*p = x
	return p
}

func (x ItemDiscountType) String() string {
	return proto.EnumName(ItemDiscountType_name, int32(x))
}

func (x *ItemDiscountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscountType_value, data, "ItemDiscountType")
	if err != nil {
		return err
	}
	*x = ItemDiscountType(value)
	return nil
}

func (ItemDiscountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{78}
}

type ContentRuleLogic int32

const (
	ContentRuleLogic_RULE_LOGIC_OR  ContentRuleLogic = 1
	ContentRuleLogic_RULE_LOGIC_AND ContentRuleLogic = 2
)

var ContentRuleLogic_name = map[int32]string{
	1: "RULE_LOGIC_OR",
	2: "RULE_LOGIC_AND",
}

var ContentRuleLogic_value = map[string]int32{
	"RULE_LOGIC_OR":  1,
	"RULE_LOGIC_AND": 2,
}

func (x ContentRuleLogic) Enum() *ContentRuleLogic {
	p := new(ContentRuleLogic)
	*p = x
	return p
}

func (x ContentRuleLogic) String() string {
	return proto.EnumName(ContentRuleLogic_name, int32(x))
}

func (x *ContentRuleLogic) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContentRuleLogic_value, data, "ContentRuleLogic")
	if err != nil {
		return err
	}
	*x = ContentRuleLogic(value)
	return nil
}

func (ContentRuleLogic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{79}
}

type SellerAuthority int32

const (
	SellerAuthority_EDIT_MENU      SellerAuthority = 1
	SellerAuthority_EDIT_PROMOTION SellerAuthority = 2
)

var SellerAuthority_name = map[int32]string{
	1: "EDIT_MENU",
	2: "EDIT_PROMOTION",
}

var SellerAuthority_value = map[string]int32{
	"EDIT_MENU":      1,
	"EDIT_PROMOTION": 2,
}

func (x SellerAuthority) Enum() *SellerAuthority {
	p := new(SellerAuthority)
	*p = x
	return p
}

func (x SellerAuthority) String() string {
	return proto.EnumName(SellerAuthority_name, int32(x))
}

func (x *SellerAuthority) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SellerAuthority_value, data, "SellerAuthority")
	if err != nil {
		return err
	}
	*x = SellerAuthority(value)
	return nil
}

func (SellerAuthority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80}
}

type MerchantWalletType int32

const (
	MerchantWalletType_UNKNOWN_WALLET  MerchantWalletType = 0
	MerchantWalletType_MERCHANT_WALLET MerchantWalletType = 1
	MerchantWalletType_STORE_WALLET    MerchantWalletType = 2
)

var MerchantWalletType_name = map[int32]string{
	0: "UNKNOWN_WALLET",
	1: "MERCHANT_WALLET",
	2: "STORE_WALLET",
}

var MerchantWalletType_value = map[string]int32{
	"UNKNOWN_WALLET":  0,
	"MERCHANT_WALLET": 1,
	"STORE_WALLET":    2,
}

func (x MerchantWalletType) Enum() *MerchantWalletType {
	p := new(MerchantWalletType)
	*p = x
	return p
}

func (x MerchantWalletType) String() string {
	return proto.EnumName(MerchantWalletType_name, int32(x))
}

func (x *MerchantWalletType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletType_value, data, "MerchantWalletType")
	if err != nil {
		return err
	}
	*x = MerchantWalletType(value)
	return nil
}

func (MerchantWalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{81}
}

type ExpressStatus int32

const (
	ExpressStatus_EXPRESS_CREATED   ExpressStatus = 100
	ExpressStatus_EXPRESS_ASSIGNED  ExpressStatus = 200
	ExpressStatus_EXPRESS_ARRIVED   ExpressStatus = 300
	ExpressStatus_EXPRESS_PICKED_UP ExpressStatus = 400
	ExpressStatus_EXPRESS_RETURNED  ExpressStatus = 500
	ExpressStatus_EXPRESS_COMPLETED ExpressStatus = 600
	ExpressStatus_EXPRESS_CANCELED  ExpressStatus = 700
)

var ExpressStatus_name = map[int32]string{
	100: "EXPRESS_CREATED",
	200: "EXPRESS_ASSIGNED",
	300: "EXPRESS_ARRIVED",
	400: "EXPRESS_PICKED_UP",
	500: "EXPRESS_RETURNED",
	600: "EXPRESS_COMPLETED",
	700: "EXPRESS_CANCELED",
}

var ExpressStatus_value = map[string]int32{
	"EXPRESS_CREATED":   100,
	"EXPRESS_ASSIGNED":  200,
	"EXPRESS_ARRIVED":   300,
	"EXPRESS_PICKED_UP": 400,
	"EXPRESS_RETURNED":  500,
	"EXPRESS_COMPLETED": 600,
	"EXPRESS_CANCELED":  700,
}

func (x ExpressStatus) Enum() *ExpressStatus {
	p := new(ExpressStatus)
	*p = x
	return p
}

func (x ExpressStatus) String() string {
	return proto.EnumName(ExpressStatus_name, int32(x))
}

func (x *ExpressStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressStatus_value, data, "ExpressStatus")
	if err != nil {
		return err
	}
	*x = ExpressStatus(value)
	return nil
}

func (ExpressStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82}
}

type ExpressAssignmentStatus int32

const (
	ExpressAssignmentStatus_EXPRESS_ASSIGNMENT_CREATED   ExpressAssignmentStatus = 100
	ExpressAssignmentStatus_EXPRESS_ASSIGNMENT_ASSIGNED  ExpressAssignmentStatus = 200
	ExpressAssignmentStatus_EXPRESS_ASSIGNMENT_COMPLETED ExpressAssignmentStatus = 300
	ExpressAssignmentStatus_EXPRESS_ASSIGNMENT_CANCELED  ExpressAssignmentStatus = 400
)

var ExpressAssignmentStatus_name = map[int32]string{
	100: "EXPRESS_ASSIGNMENT_CREATED",
	200: "EXPRESS_ASSIGNMENT_ASSIGNED",
	300: "EXPRESS_ASSIGNMENT_COMPLETED",
	400: "EXPRESS_ASSIGNMENT_CANCELED",
}

var ExpressAssignmentStatus_value = map[string]int32{
	"EXPRESS_ASSIGNMENT_CREATED":   100,
	"EXPRESS_ASSIGNMENT_ASSIGNED":  200,
	"EXPRESS_ASSIGNMENT_COMPLETED": 300,
	"EXPRESS_ASSIGNMENT_CANCELED":  400,
}

func (x ExpressAssignmentStatus) Enum() *ExpressAssignmentStatus {
	p := new(ExpressAssignmentStatus)
	*p = x
	return p
}

func (x ExpressAssignmentStatus) String() string {
	return proto.EnumName(ExpressAssignmentStatus_name, int32(x))
}

func (x *ExpressAssignmentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressAssignmentStatus_value, data, "ExpressAssignmentStatus")
	if err != nil {
		return err
	}
	*x = ExpressAssignmentStatus(value)
	return nil
}

func (ExpressAssignmentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{83}
}

type ExpressDeliveryStatus int32

const (
	ExpressDeliveryStatus_EXPRESS_DELIVERY_CREATED   ExpressDeliveryStatus = 100
	ExpressDeliveryStatus_EXPRESS_DELIVERY_ARRIVED   ExpressDeliveryStatus = 200
	ExpressDeliveryStatus_EXPRESS_DELIVERY_PICKED_UP ExpressDeliveryStatus = 300
	ExpressDeliveryStatus_EXPRESS_DELIVERY_RETURNING ExpressDeliveryStatus = 400
	ExpressDeliveryStatus_EXPRESS_DELIVERY_RETURNED  ExpressDeliveryStatus = 401
	ExpressDeliveryStatus_EXPRESS_DELIVERY_COMPLETED ExpressDeliveryStatus = 500
	ExpressDeliveryStatus_EXPRESS_DELIVERY_CANCELED  ExpressDeliveryStatus = 600
)

var ExpressDeliveryStatus_name = map[int32]string{
	100: "EXPRESS_DELIVERY_CREATED",
	200: "EXPRESS_DELIVERY_ARRIVED",
	300: "EXPRESS_DELIVERY_PICKED_UP",
	400: "EXPRESS_DELIVERY_RETURNING",
	401: "EXPRESS_DELIVERY_RETURNED",
	500: "EXPRESS_DELIVERY_COMPLETED",
	600: "EXPRESS_DELIVERY_CANCELED",
}

var ExpressDeliveryStatus_value = map[string]int32{
	"EXPRESS_DELIVERY_CREATED":   100,
	"EXPRESS_DELIVERY_ARRIVED":   200,
	"EXPRESS_DELIVERY_PICKED_UP": 300,
	"EXPRESS_DELIVERY_RETURNING": 400,
	"EXPRESS_DELIVERY_RETURNED":  401,
	"EXPRESS_DELIVERY_COMPLETED": 500,
	"EXPRESS_DELIVERY_CANCELED":  600,
}

func (x ExpressDeliveryStatus) Enum() *ExpressDeliveryStatus {
	p := new(ExpressDeliveryStatus)
	*p = x
	return p
}

func (x ExpressDeliveryStatus) String() string {
	return proto.EnumName(ExpressDeliveryStatus_name, int32(x))
}

func (x *ExpressDeliveryStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressDeliveryStatus_value, data, "ExpressDeliveryStatus")
	if err != nil {
		return err
	}
	*x = ExpressDeliveryStatus(value)
	return nil
}

func (ExpressDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84}
}

type ExpressPackageStatus int32

const (
	ExpressPackageStatus_EXPRESS_PACKAGE_CREATED   ExpressPackageStatus = 100
	ExpressPackageStatus_EXPRESS_PACKAGE_RETURNED  ExpressPackageStatus = 200
	ExpressPackageStatus_EXPRESS_PACKAGE_COMPLETED ExpressPackageStatus = 300
	ExpressPackageStatus_EXPRESS_PACKAGE_CANCELED  ExpressPackageStatus = 400
)

var ExpressPackageStatus_name = map[int32]string{
	100: "EXPRESS_PACKAGE_CREATED",
	200: "EXPRESS_PACKAGE_RETURNED",
	300: "EXPRESS_PACKAGE_COMPLETED",
	400: "EXPRESS_PACKAGE_CANCELED",
}

var ExpressPackageStatus_value = map[string]int32{
	"EXPRESS_PACKAGE_CREATED":   100,
	"EXPRESS_PACKAGE_RETURNED":  200,
	"EXPRESS_PACKAGE_COMPLETED": 300,
	"EXPRESS_PACKAGE_CANCELED":  400,
}

func (x ExpressPackageStatus) Enum() *ExpressPackageStatus {
	p := new(ExpressPackageStatus)
	*p = x
	return p
}

func (x ExpressPackageStatus) String() string {
	return proto.EnumName(ExpressPackageStatus_name, int32(x))
}

func (x *ExpressPackageStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressPackageStatus_value, data, "ExpressPackageStatus")
	if err != nil {
		return err
	}
	*x = ExpressPackageStatus(value)
	return nil
}

func (ExpressPackageStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85}
}

type PackageCategory int32

const (
	PackageCategory_EXPRESS_PACKAGE_FILE        PackageCategory = 1
	PackageCategory_EXPRESS_PACKAGE_FOOD        PackageCategory = 2
	PackageCategory_EXPRESS_PACKAGE_CLOTHING    PackageCategory = 3
	PackageCategory_EXPRESS_PACKAGE_ELECTRONICS PackageCategory = 4
	PackageCategory_EXPRESS_PACKAGE_MEDICAL     PackageCategory = 5
	PackageCategory_EXPRESS_PACKAGE_OTHERS      PackageCategory = 6
)

var PackageCategory_name = map[int32]string{
	1: "EXPRESS_PACKAGE_FILE",
	2: "EXPRESS_PACKAGE_FOOD",
	3: "EXPRESS_PACKAGE_CLOTHING",
	4: "EXPRESS_PACKAGE_ELECTRONICS",
	5: "EXPRESS_PACKAGE_MEDICAL",
	6: "EXPRESS_PACKAGE_OTHERS",
}

var PackageCategory_value = map[string]int32{
	"EXPRESS_PACKAGE_FILE":        1,
	"EXPRESS_PACKAGE_FOOD":        2,
	"EXPRESS_PACKAGE_CLOTHING":    3,
	"EXPRESS_PACKAGE_ELECTRONICS": 4,
	"EXPRESS_PACKAGE_MEDICAL":     5,
	"EXPRESS_PACKAGE_OTHERS":      6,
}

func (x PackageCategory) Enum() *PackageCategory {
	p := new(PackageCategory)
	*p = x
	return p
}

func (x PackageCategory) String() string {
	return proto.EnumName(PackageCategory_name, int32(x))
}

func (x *PackageCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PackageCategory_value, data, "PackageCategory")
	if err != nil {
		return err
	}
	*x = PackageCategory(value)
	return nil
}

func (PackageCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86}
}

type PayType int32

const (
	PayType_COD_ON_SENDER    PayType = 1
	PayType_COD_ON_RECIPIENT PayType = 2
)

var PayType_name = map[int32]string{
	1: "COD_ON_SENDER",
	2: "COD_ON_RECIPIENT",
}

var PayType_value = map[string]int32{
	"COD_ON_SENDER":    1,
	"COD_ON_RECIPIENT": 2,
}

func (x PayType) Enum() *PayType {
	p := new(PayType)
	*p = x
	return p
}

func (x PayType) String() string {
	return proto.EnumName(PayType_name, int32(x))
}

func (x *PayType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PayType_value, data, "PayType")
	if err != nil {
		return err
	}
	*x = PayType(value)
	return nil
}

func (PayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{87}
}

// TODO 在API接口校验所选的reason是否符合, 新增的reason需要注意是否会被校验条件过滤掉
// 文档：https://docs.google.com/spreadsheets/d/1lymx1sfZpp69ZRgvve_yrN61IzSarygDX_JkrRmZer8/edit#gid=483702925
type SPXCancelReason int32

const (
	SPXCancelReason_SPX_RESERVED                              SPXCancelReason = 0
	SPXCancelReason_SPX_ORDER_CANCEL_DEFAULT                  SPXCancelReason = 1
	SPXCancelReason_SPX_OTHERS                                SPXCancelReason = 1000
	SPXCancelReason_SPX_BAD_WEATHER                           SPXCancelReason = 1001
	SPXCancelReason_SPX_DRIVER_ACCIDENTALLY_TOOK_ORDER        SPXCancelReason = 1002
	SPXCancelReason_SPX_DRIVER_VEHICLE_BROKEN_TO_SELLER       SPXCancelReason = 1003
	SPXCancelReason_SPX_DRIVER_COULD_NOT_FIND_SELLER          SPXCancelReason = 1004
	SPXCancelReason_SPX_DRIVER_REPORT_SELLER_CANNOT_CONTACT   SPXCancelReason = 1005
	SPXCancelReason_SPX_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL  SPXCancelReason = 1006
	SPXCancelReason_SPX_PICK_UP_ADDRESS_IS_TOO_FAR            SPXCancelReason = 1007
	SPXCancelReason_SPX_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY     SPXCancelReason = 1008
	SPXCancelReason_SPX_PKG_IS_NOT_WELL_PREPARED              SPXCancelReason = 1009
	SPXCancelReason_SPX_PROHIBITED_ITEM                       SPXCancelReason = 1010
	SPXCancelReason_SPX_STORE_WAS_CLOSED                      SPXCancelReason = 1011
	SPXCancelReason_SPX_CUSTOMER_CHANGE_PAYMENT_METHOD        SPXCancelReason = 1012
	SPXCancelReason_SPX_CUSTOMER_HAS_CHANGE_PLAN              SPXCancelReason = 1013
	SPXCancelReason_SPX_CUSTOMER_INPUT_WRONG_INFO             SPXCancelReason = 1014
	SPXCancelReason_SPX_CUSTOMER_FORGOT_USE_VOUCHER           SPXCancelReason = 1015
	SPXCancelReason_SPX_DRIVER_ASKED_CUSTOMER_TO_CANCEL       SPXCancelReason = 1016
	SPXCancelReason_SPX_CUSTOMER_CAN_NOT_CONTACT_DRIVER       SPXCancelReason = 1017
	SPXCancelReason_SPX_DRIVER_IS_TOO_FAR                     SPXCancelReason = 1018
	SPXCancelReason_SPX_CUSTOMER_HAS_WAITED_TOO_LONG          SPXCancelReason = 1019
	SPXCancelReason_SPX_CUSTOMER_REGRET_AFTER_SUBMIT          SPXCancelReason = 1020
	SPXCancelReason_SPX_DRIVER_REJECT_MY_ITEM                 SPXCancelReason = 1021
	SPXCancelReason_SPX_CAN_NOT_MATCH_DRIVER                  SPXCancelReason = 1022
	SPXCancelReason_SPX_PAYMENT_FAILED                        SPXCancelReason = 1023
	SPXCancelReason_SPX_SHOPEE_INDICATES_THIS_IS_FRAUD        SPXCancelReason = 1024
	SPXCancelReason_SPX_FAILED_TO_DECODE_LOGLAT               SPXCancelReason = 1025
	SPXCancelReason_SPX_LOST                                  SPXCancelReason = 1026
	SPXCancelReason_SPX_DAMAGE                                SPXCancelReason = 1027
	SPXCancelReason_SPX_REACHED_DRIVER_DROPPING_LIMIT         SPXCancelReason = 1028
	SPXCancelReason_SPX_CANCELED_BY_UPSTREAM_SYSTEM           SPXCancelReason = 1029
	SPXCancelReason_SPX_DRIVER_VEHICLE_BROKEN                 SPXCancelReason = 2000
	SPXCancelReason_SPX_INSISTS_CANCEL                        SPXCancelReason = 2001
	SPXCancelReason_SPX_INSISTS_RETURN                        SPXCancelReason = 2002
	SPXCancelReason_SPX_CUSTOMER_REPORT_RETURN_TOO_LONG       SPXCancelReason = 2003
	SPXCancelReason_SPX_DRIVER_IN_TRAFFIC_ACCIDENT            SPXCancelReason = 2004
	SPXCancelReason_SPX_DRIVER_BECOME_VICTIM_OF_CRIME         SPXCancelReason = 2005
	SPXCancelReason_SPX_RIOT                                  SPXCancelReason = 2006
	SPXCancelReason_SPX_NATURAL_DISASTER                      SPXCancelReason = 2007
	SPXCancelReason_SPX_DRIVER_REPORT_ROAD_BLOCKED            SPXCancelReason = 2008
	SPXCancelReason_SPX_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT  SPXCancelReason = 2009
	SPXCancelReason_SPX_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM SPXCancelReason = 2010
	SPXCancelReason_SPX_INSISTS_TO_RETURN_ORDER               SPXCancelReason = 2011
	SPXCancelReason_SPX_RECIPIENT_REPORT_FAKE_ORDER           SPXCancelReason = 2012
	SPXCancelReason_SPX_ITEM_TAMPERED                         SPXCancelReason = 2013
	SPXCancelReason_SPX_SENDER_NOT_ACCEPT_ITEM                SPXCancelReason = 2014
	SPXCancelReason_SPX_CUSTOMER_CANNOT_CONTACT               SPXCancelReason = 2015
)

var SPXCancelReason_name = map[int32]string{
	0:    "SPX_RESERVED",
	1:    "SPX_ORDER_CANCEL_DEFAULT",
	1000: "SPX_OTHERS",
	1001: "SPX_BAD_WEATHER",
	1002: "SPX_DRIVER_ACCIDENTALLY_TOOK_ORDER",
	1003: "SPX_DRIVER_VEHICLE_BROKEN_TO_SELLER",
	1004: "SPX_DRIVER_COULD_NOT_FIND_SELLER",
	1005: "SPX_DRIVER_REPORT_SELLER_CANNOT_CONTACT",
	1006: "SPX_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL",
	1007: "SPX_PICK_UP_ADDRESS_IS_TOO_FAR",
	1008: "SPX_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY",
	1009: "SPX_PKG_IS_NOT_WELL_PREPARED",
	1010: "SPX_PROHIBITED_ITEM",
	1011: "SPX_STORE_WAS_CLOSED",
	1012: "SPX_CUSTOMER_CHANGE_PAYMENT_METHOD",
	1013: "SPX_CUSTOMER_HAS_CHANGE_PLAN",
	1014: "SPX_CUSTOMER_INPUT_WRONG_INFO",
	1015: "SPX_CUSTOMER_FORGOT_USE_VOUCHER",
	1016: "SPX_DRIVER_ASKED_CUSTOMER_TO_CANCEL",
	1017: "SPX_CUSTOMER_CAN_NOT_CONTACT_DRIVER",
	1018: "SPX_DRIVER_IS_TOO_FAR",
	1019: "SPX_CUSTOMER_HAS_WAITED_TOO_LONG",
	1020: "SPX_CUSTOMER_REGRET_AFTER_SUBMIT",
	1021: "SPX_DRIVER_REJECT_MY_ITEM",
	1022: "SPX_CAN_NOT_MATCH_DRIVER",
	1023: "SPX_PAYMENT_FAILED",
	1024: "SPX_SHOPEE_INDICATES_THIS_IS_FRAUD",
	1025: "SPX_FAILED_TO_DECODE_LOGLAT",
	1026: "SPX_LOST",
	1027: "SPX_DAMAGE",
	1028: "SPX_REACHED_DRIVER_DROPPING_LIMIT",
	1029: "SPX_CANCELED_BY_UPSTREAM_SYSTEM",
	2000: "SPX_DRIVER_VEHICLE_BROKEN",
	2001: "SPX_INSISTS_CANCEL",
	2002: "SPX_INSISTS_RETURN",
	2003: "SPX_CUSTOMER_REPORT_RETURN_TOO_LONG",
	2004: "SPX_DRIVER_IN_TRAFFIC_ACCIDENT",
	2005: "SPX_DRIVER_BECOME_VICTIM_OF_CRIME",
	2006: "SPX_RIOT",
	2007: "SPX_NATURAL_DISASTER",
	2008: "SPX_DRIVER_REPORT_ROAD_BLOCKED",
	2009: "SPX_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT",
	2010: "SPX_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM",
	2011: "SPX_INSISTS_TO_RETURN_ORDER",
	2012: "SPX_RECIPIENT_REPORT_FAKE_ORDER",
	2013: "SPX_ITEM_TAMPERED",
	2014: "SPX_SENDER_NOT_ACCEPT_ITEM",
	2015: "SPX_CUSTOMER_CANNOT_CONTACT",
}

var SPXCancelReason_value = map[string]int32{
	"SPX_RESERVED":                              0,
	"SPX_ORDER_CANCEL_DEFAULT":                  1,
	"SPX_OTHERS":                                1000,
	"SPX_BAD_WEATHER":                           1001,
	"SPX_DRIVER_ACCIDENTALLY_TOOK_ORDER":        1002,
	"SPX_DRIVER_VEHICLE_BROKEN_TO_SELLER":       1003,
	"SPX_DRIVER_COULD_NOT_FIND_SELLER":          1004,
	"SPX_DRIVER_REPORT_SELLER_CANNOT_CONTACT":   1005,
	"SPX_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL":  1006,
	"SPX_PICK_UP_ADDRESS_IS_TOO_FAR":            1007,
	"SPX_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY":     1008,
	"SPX_PKG_IS_NOT_WELL_PREPARED":              1009,
	"SPX_PROHIBITED_ITEM":                       1010,
	"SPX_STORE_WAS_CLOSED":                      1011,
	"SPX_CUSTOMER_CHANGE_PAYMENT_METHOD":        1012,
	"SPX_CUSTOMER_HAS_CHANGE_PLAN":              1013,
	"SPX_CUSTOMER_INPUT_WRONG_INFO":             1014,
	"SPX_CUSTOMER_FORGOT_USE_VOUCHER":           1015,
	"SPX_DRIVER_ASKED_CUSTOMER_TO_CANCEL":       1016,
	"SPX_CUSTOMER_CAN_NOT_CONTACT_DRIVER":       1017,
	"SPX_DRIVER_IS_TOO_FAR":                     1018,
	"SPX_CUSTOMER_HAS_WAITED_TOO_LONG":          1019,
	"SPX_CUSTOMER_REGRET_AFTER_SUBMIT":          1020,
	"SPX_DRIVER_REJECT_MY_ITEM":                 1021,
	"SPX_CAN_NOT_MATCH_DRIVER":                  1022,
	"SPX_PAYMENT_FAILED":                        1023,
	"SPX_SHOPEE_INDICATES_THIS_IS_FRAUD":        1024,
	"SPX_FAILED_TO_DECODE_LOGLAT":               1025,
	"SPX_LOST":                                  1026,
	"SPX_DAMAGE":                                1027,
	"SPX_REACHED_DRIVER_DROPPING_LIMIT":         1028,
	"SPX_CANCELED_BY_UPSTREAM_SYSTEM":           1029,
	"SPX_DRIVER_VEHICLE_BROKEN":                 2000,
	"SPX_INSISTS_CANCEL":                        2001,
	"SPX_INSISTS_RETURN":                        2002,
	"SPX_CUSTOMER_REPORT_RETURN_TOO_LONG":       2003,
	"SPX_DRIVER_IN_TRAFFIC_ACCIDENT":            2004,
	"SPX_DRIVER_BECOME_VICTIM_OF_CRIME":         2005,
	"SPX_RIOT":                                  2006,
	"SPX_NATURAL_DISASTER":                      2007,
	"SPX_DRIVER_REPORT_ROAD_BLOCKED":            2008,
	"SPX_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT":  2009,
	"SPX_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM": 2010,
	"SPX_INSISTS_TO_RETURN_ORDER":               2011,
	"SPX_RECIPIENT_REPORT_FAKE_ORDER":           2012,
	"SPX_ITEM_TAMPERED":                         2013,
	"SPX_SENDER_NOT_ACCEPT_ITEM":                2014,
	"SPX_CUSTOMER_CANNOT_CONTACT":               2015,
}

func (x SPXCancelReason) Enum() *SPXCancelReason {
	p := new(SPXCancelReason)
	*p = x
	return p
}

func (x SPXCancelReason) String() string {
	return proto.EnumName(SPXCancelReason_name, int32(x))
}

func (x *SPXCancelReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXCancelReason_value, data, "SPXCancelReason")
	if err != nil {
		return err
	}
	*x = SPXCancelReason(value)
	return nil
}

func (SPXCancelReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{88}
}

type SPXCancelOrderType int32

const (
	SPXCancelOrderType_SPX_EXPRESS_CANCEL_TYPE  SPXCancelOrderType = 1
	SPXCancelOrderType_SPX_EXCEPTION_AUDIT_TYPE SPXCancelOrderType = 2
)

var SPXCancelOrderType_name = map[int32]string{
	1: "SPX_EXPRESS_CANCEL_TYPE",
	2: "SPX_EXCEPTION_AUDIT_TYPE",
}

var SPXCancelOrderType_value = map[string]int32{
	"SPX_EXPRESS_CANCEL_TYPE":  1,
	"SPX_EXCEPTION_AUDIT_TYPE": 2,
}

func (x SPXCancelOrderType) Enum() *SPXCancelOrderType {
	p := new(SPXCancelOrderType)
	*p = x
	return p
}

func (x SPXCancelOrderType) String() string {
	return proto.EnumName(SPXCancelOrderType_name, int32(x))
}

func (x *SPXCancelOrderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXCancelOrderType_value, data, "SPXCancelOrderType")
	if err != nil {
		return err
	}
	*x = SPXCancelOrderType(value)
	return nil
}

func (SPXCancelOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{89}
}

type ExpressCompleteReason int32

const (
	ExpressCompleteReason_EXPRESS_DELIVERED_VEHICLE_BROKE              ExpressCompleteReason = 1
	ExpressCompleteReason_EXPRESS_DELIVERED_TRAFFIC_ACCIDENT           ExpressCompleteReason = 2
	ExpressCompleteReason_EXPRESS_DELIVERED_VICTIM_OF_CRIME            ExpressCompleteReason = 3
	ExpressCompleteReason_EXPRESS_DELIVERED_VICTIM_OF_RIOT             ExpressCompleteReason = 4
	ExpressCompleteReason_EXPRESS_DELIVERED_VICTIM_OF_NATURAL_DISASTER ExpressCompleteReason = 5
	ExpressCompleteReason_EXPRESS_DELIVERED_OTHERS                     ExpressCompleteReason = 6
)

var ExpressCompleteReason_name = map[int32]string{
	1: "EXPRESS_DELIVERED_VEHICLE_BROKE",
	2: "EXPRESS_DELIVERED_TRAFFIC_ACCIDENT",
	3: "EXPRESS_DELIVERED_VICTIM_OF_CRIME",
	4: "EXPRESS_DELIVERED_VICTIM_OF_RIOT",
	5: "EXPRESS_DELIVERED_VICTIM_OF_NATURAL_DISASTER",
	6: "EXPRESS_DELIVERED_OTHERS",
}

var ExpressCompleteReason_value = map[string]int32{
	"EXPRESS_DELIVERED_VEHICLE_BROKE":              1,
	"EXPRESS_DELIVERED_TRAFFIC_ACCIDENT":           2,
	"EXPRESS_DELIVERED_VICTIM_OF_CRIME":            3,
	"EXPRESS_DELIVERED_VICTIM_OF_RIOT":             4,
	"EXPRESS_DELIVERED_VICTIM_OF_NATURAL_DISASTER": 5,
	"EXPRESS_DELIVERED_OTHERS":                     6,
}

func (x ExpressCompleteReason) Enum() *ExpressCompleteReason {
	p := new(ExpressCompleteReason)
	*p = x
	return p
}

func (x ExpressCompleteReason) String() string {
	return proto.EnumName(ExpressCompleteReason_name, int32(x))
}

func (x *ExpressCompleteReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressCompleteReason_value, data, "ExpressCompleteReason")
	if err != nil {
		return err
	}
	*x = ExpressCompleteReason(value)
	return nil
}

func (ExpressCompleteReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{90}
}

type ExpressReturnReason int32

const (
	ExpressReturnReason_EXPRESS_RETURNED_VEHICLE_BROKE              ExpressReturnReason = 1
	ExpressReturnReason_EXPRESS_RETURNED_TRAFFIC_ACCIDENT           ExpressReturnReason = 2
	ExpressReturnReason_EXPRESS_RETURNED_VICTIM_OF_CRIME            ExpressReturnReason = 3
	ExpressReturnReason_EXPRESS_RETURNED_VICTIM_OF_RIOT             ExpressReturnReason = 4
	ExpressReturnReason_EXPRESS_RETURNED_VICTIM_OF_NATURAL_DISASTER ExpressReturnReason = 5
	ExpressReturnReason_EXPRESS_RETURNED_OTHERS                     ExpressReturnReason = 6
)

var ExpressReturnReason_name = map[int32]string{
	1: "EXPRESS_RETURNED_VEHICLE_BROKE",
	2: "EXPRESS_RETURNED_TRAFFIC_ACCIDENT",
	3: "EXPRESS_RETURNED_VICTIM_OF_CRIME",
	4: "EXPRESS_RETURNED_VICTIM_OF_RIOT",
	5: "EXPRESS_RETURNED_VICTIM_OF_NATURAL_DISASTER",
	6: "EXPRESS_RETURNED_OTHERS",
}

var ExpressReturnReason_value = map[string]int32{
	"EXPRESS_RETURNED_VEHICLE_BROKE":              1,
	"EXPRESS_RETURNED_TRAFFIC_ACCIDENT":           2,
	"EXPRESS_RETURNED_VICTIM_OF_CRIME":            3,
	"EXPRESS_RETURNED_VICTIM_OF_RIOT":             4,
	"EXPRESS_RETURNED_VICTIM_OF_NATURAL_DISASTER": 5,
	"EXPRESS_RETURNED_OTHERS":                     6,
}

func (x ExpressReturnReason) Enum() *ExpressReturnReason {
	p := new(ExpressReturnReason)
	*p = x
	return p
}

func (x ExpressReturnReason) String() string {
	return proto.EnumName(ExpressReturnReason_name, int32(x))
}

func (x *ExpressReturnReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressReturnReason_value, data, "ExpressReturnReason")
	if err != nil {
		return err
	}
	*x = ExpressReturnReason(value)
	return nil
}

func (ExpressReturnReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91}
}

// SPX promotion
type UseStatus int32

const (
	UseStatus_UNINITIALIZED UseStatus = 0
	UseStatus_CREATED       UseStatus = 1
	UseStatus_CONFIRMED     UseStatus = 2
	UseStatus_COMPLETED     UseStatus = 3
	UseStatus_FAILED        UseStatus = 4
)

var UseStatus_name = map[int32]string{
	0: "UNINITIALIZED",
	1: "CREATED",
	2: "CONFIRMED",
	3: "COMPLETED",
	4: "FAILED",
}

var UseStatus_value = map[string]int32{
	"UNINITIALIZED": 0,
	"CREATED":       1,
	"CONFIRMED":     2,
	"COMPLETED":     3,
	"FAILED":        4,
}

func (x UseStatus) Enum() *UseStatus {
	p := new(UseStatus)
	*p = x
	return p
}

func (x UseStatus) String() string {
	return proto.EnumName(UseStatus_name, int32(x))
}

func (x *UseStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UseStatus_value, data, "UseStatus")
	if err != nil {
		return err
	}
	*x = UseStatus(value)
	return nil
}

func (UseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{92}
}

type SPXOrderTracingStatus int32

const (
	SPXOrderTracingStatus_SPX_ORDER_TRACING_EXPRESS_CREATED  SPXOrderTracingStatus = 100
	SPXOrderTracingStatus_SPX_ORDER_TRACING_ASSIGNED         SPXOrderTracingStatus = 200
	SPXOrderTracingStatus_SPX_ORDER_TRACING_PICKED_UP        SPXOrderTracingStatus = 300
	SPXOrderTracingStatus_SPX_ORDER_TRACING_DELIVERY_ON_HOLD SPXOrderTracingStatus = 310
	SPXOrderTracingStatus_SPX_ORDER_TRACING_RETURNING        SPXOrderTracingStatus = 320
	SPXOrderTracingStatus_SPX_ORDER_TRACING_RETURNED         SPXOrderTracingStatus = 500
	SPXOrderTracingStatus_SPX_ORDER_TRACING_COMPLETED        SPXOrderTracingStatus = 600
	SPXOrderTracingStatus_SPX_ORDER_TRACING_CANCELED         SPXOrderTracingStatus = 700
)

var SPXOrderTracingStatus_name = map[int32]string{
	100: "SPX_ORDER_TRACING_EXPRESS_CREATED",
	200: "SPX_ORDER_TRACING_ASSIGNED",
	300: "SPX_ORDER_TRACING_PICKED_UP",
	310: "SPX_ORDER_TRACING_DELIVERY_ON_HOLD",
	320: "SPX_ORDER_TRACING_RETURNING",
	500: "SPX_ORDER_TRACING_RETURNED",
	600: "SPX_ORDER_TRACING_COMPLETED",
	700: "SPX_ORDER_TRACING_CANCELED",
}

var SPXOrderTracingStatus_value = map[string]int32{
	"SPX_ORDER_TRACING_EXPRESS_CREATED":  100,
	"SPX_ORDER_TRACING_ASSIGNED":         200,
	"SPX_ORDER_TRACING_PICKED_UP":        300,
	"SPX_ORDER_TRACING_DELIVERY_ON_HOLD": 310,
	"SPX_ORDER_TRACING_RETURNING":        320,
	"SPX_ORDER_TRACING_RETURNED":         500,
	"SPX_ORDER_TRACING_COMPLETED":        600,
	"SPX_ORDER_TRACING_CANCELED":         700,
}

func (x SPXOrderTracingStatus) Enum() *SPXOrderTracingStatus {
	p := new(SPXOrderTracingStatus)
	*p = x
	return p
}

func (x SPXOrderTracingStatus) String() string {
	return proto.EnumName(SPXOrderTracingStatus_name, int32(x))
}

func (x *SPXOrderTracingStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXOrderTracingStatus_value, data, "SPXOrderTracingStatus")
	if err != nil {
		return err
	}
	*x = SPXOrderTracingStatus(value)
	return nil
}

func (SPXOrderTracingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{93}
}

type FlashSaleDishStatus int32

const (
	FlashSaleDishStatus_Active    FlashSaleDishStatus = 1
	FlashSaleDishStatus_Inactive  FlashSaleDishStatus = 2
	FlashSaleDishStatus_Completed FlashSaleDishStatus = 3
)

var FlashSaleDishStatus_name = map[int32]string{
	1: "Active",
	2: "Inactive",
	3: "Completed",
}

var FlashSaleDishStatus_value = map[string]int32{
	"Active":    1,
	"Inactive":  2,
	"Completed": 3,
}

func (x FlashSaleDishStatus) Enum() *FlashSaleDishStatus {
	p := new(FlashSaleDishStatus)
	*p = x
	return p
}

func (x FlashSaleDishStatus) String() string {
	return proto.EnumName(FlashSaleDishStatus_name, int32(x))
}

func (x *FlashSaleDishStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlashSaleDishStatus_value, data, "FlashSaleDishStatus")
	if err != nil {
		return err
	}
	*x = FlashSaleDishStatus(value)
	return nil
}

func (FlashSaleDishStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{94}
}

type SettleTo int32

const (
	SettleTo_SETTLE_TO_UNKNOWN       SettleTo = 0
	SettleTo_SETTLE_TO_MERCHANT      SettleTo = 1
	SettleTo_SETTLE_TO_STORE         SettleTo = 2
	SettleTo_SETTLE_TO_MERCHANT_HOST SettleTo = 3
)

var SettleTo_name = map[int32]string{
	0: "SETTLE_TO_UNKNOWN",
	1: "SETTLE_TO_MERCHANT",
	2: "SETTLE_TO_STORE",
	3: "SETTLE_TO_MERCHANT_HOST",
}

var SettleTo_value = map[string]int32{
	"SETTLE_TO_UNKNOWN":       0,
	"SETTLE_TO_MERCHANT":      1,
	"SETTLE_TO_STORE":         2,
	"SETTLE_TO_MERCHANT_HOST": 3,
}

func (x SettleTo) Enum() *SettleTo {
	p := new(SettleTo)
	*p = x
	return p
}

func (x SettleTo) String() string {
	return proto.EnumName(SettleTo_name, int32(x))
}

func (x *SettleTo) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettleTo_value, data, "SettleTo")
	if err != nil {
		return err
	}
	*x = SettleTo(value)
	return nil
}

func (SettleTo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{95}
}

type ItemDiscountCampaignGoingStatus int32

const (
	ItemDiscountCampaignGoingStatus_ONGOING  ItemDiscountCampaignGoingStatus = 0
	ItemDiscountCampaignGoingStatus_UPCOMING ItemDiscountCampaignGoingStatus = 1
	ItemDiscountCampaignGoingStatus_EXPIRED  ItemDiscountCampaignGoingStatus = 2
)

var ItemDiscountCampaignGoingStatus_name = map[int32]string{
	0: "ONGOING",
	1: "UPCOMING",
	2: "EXPIRED",
}

var ItemDiscountCampaignGoingStatus_value = map[string]int32{
	"ONGOING":  0,
	"UPCOMING": 1,
	"EXPIRED":  2,
}

func (x ItemDiscountCampaignGoingStatus) Enum() *ItemDiscountCampaignGoingStatus {
	p := new(ItemDiscountCampaignGoingStatus)
	*p = x
	return p
}

func (x ItemDiscountCampaignGoingStatus) String() string {
	return proto.EnumName(ItemDiscountCampaignGoingStatus_name, int32(x))
}

func (x *ItemDiscountCampaignGoingStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscountCampaignGoingStatus_value, data, "ItemDiscountCampaignGoingStatus")
	if err != nil {
		return err
	}
	*x = ItemDiscountCampaignGoingStatus(value)
	return nil
}

func (ItemDiscountCampaignGoingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{96}
}

type StoreSessionStatus int32

const (
	StoreSessionStatus_INVITED    StoreSessionStatus = 1
	StoreSessionStatus_UNINVITED  StoreSessionStatus = 2
	StoreSessionStatus_JOINED     StoreSessionStatus = 3
	StoreSessionStatus_TERMINATED StoreSessionStatus = 4
	StoreSessionStatus_WITHDRAWN  StoreSessionStatus = 5
)

var StoreSessionStatus_name = map[int32]string{
	1: "INVITED",
	2: "UNINVITED",
	3: "JOINED",
	4: "TERMINATED",
	5: "WITHDRAWN",
}

var StoreSessionStatus_value = map[string]int32{
	"INVITED":    1,
	"UNINVITED":  2,
	"JOINED":     3,
	"TERMINATED": 4,
	"WITHDRAWN":  5,
}

func (x StoreSessionStatus) Enum() *StoreSessionStatus {
	p := new(StoreSessionStatus)
	*p = x
	return p
}

func (x StoreSessionStatus) String() string {
	return proto.EnumName(StoreSessionStatus_name, int32(x))
}

func (x *StoreSessionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreSessionStatus_value, data, "StoreSessionStatus")
	if err != nil {
		return err
	}
	*x = StoreSessionStatus(value)
	return nil
}

func (StoreSessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{97}
}

type SessionTermsStatus int32

const (
	SessionTermsStatus_UNREAD   SessionTermsStatus = 0
	SessionTermsStatus_ACCEPTED SessionTermsStatus = 1
	SessionTermsStatus_REJECT   SessionTermsStatus = 2
)

var SessionTermsStatus_name = map[int32]string{
	0: "UNREAD",
	1: "ACCEPTED",
	2: "REJECT",
}

var SessionTermsStatus_value = map[string]int32{
	"UNREAD":   0,
	"ACCEPTED": 1,
	"REJECT":   2,
}

func (x SessionTermsStatus) Enum() *SessionTermsStatus {
	p := new(SessionTermsStatus)
	*p = x
	return p
}

func (x SessionTermsStatus) String() string {
	return proto.EnumName(SessionTermsStatus_name, int32(x))
}

func (x *SessionTermsStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SessionTermsStatus_value, data, "SessionTermsStatus")
	if err != nil {
		return err
	}
	*x = SessionTermsStatus(value)
	return nil
}

func (SessionTermsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{98}
}

type MaterialType int32

const (
	MaterialType_STORE MaterialType = 1
)

var MaterialType_name = map[int32]string{
	1: "STORE",
}

var MaterialType_value = map[string]int32{
	"STORE": 1,
}

func (x MaterialType) Enum() *MaterialType {
	p := new(MaterialType)
	*p = x
	return p
}

func (x MaterialType) String() string {
	return proto.EnumName(MaterialType_name, int32(x))
}

func (x *MaterialType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MaterialType_value, data, "MaterialType")
	if err != nil {
		return err
	}
	*x = MaterialType(value)
	return nil
}

func (MaterialType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{99}
}

type AsyncTask_Type int32

const (
	AsyncTask_STORE_TAG_BINDING_ATTACH AsyncTask_Type = 1
	AsyncTask_STORE_TAG_BINDING_REMOVE AsyncTask_Type = 2
)

var AsyncTask_Type_name = map[int32]string{
	1: "STORE_TAG_BINDING_ATTACH",
	2: "STORE_TAG_BINDING_REMOVE",
}

var AsyncTask_Type_value = map[string]int32{
	"STORE_TAG_BINDING_ATTACH": 1,
	"STORE_TAG_BINDING_REMOVE": 2,
}

func (x AsyncTask_Type) Enum() *AsyncTask_Type {
	p := new(AsyncTask_Type)
	*p = x
	return p
}

func (x AsyncTask_Type) String() string {
	return proto.EnumName(AsyncTask_Type_name, int32(x))
}

func (x *AsyncTask_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AsyncTask_Type_value, data, "AsyncTask_Type")
	if err != nil {
		return err
	}
	*x = AsyncTask_Type(value)
	return nil
}

func (AsyncTask_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{1, 0}
}

type AsyncTask_Status int32

const (
	AsyncTask_CREATED    AsyncTask_Status = 1
	AsyncTask_PROCESSING AsyncTask_Status = 2
	AsyncTask_COMPLETED  AsyncTask_Status = 3
	AsyncTask_FAILED     AsyncTask_Status = 4
)

var AsyncTask_Status_name = map[int32]string{
	1: "CREATED",
	2: "PROCESSING",
	3: "COMPLETED",
	4: "FAILED",
}

var AsyncTask_Status_value = map[string]int32{
	"CREATED":    1,
	"PROCESSING": 2,
	"COMPLETED":  3,
	"FAILED":     4,
}

func (x AsyncTask_Status) Enum() *AsyncTask_Status {
	p := new(AsyncTask_Status)
	*p = x
	return p
}

func (x AsyncTask_Status) String() string {
	return proto.EnumName(AsyncTask_Status_name, int32(x))
}

func (x *AsyncTask_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AsyncTask_Status_value, data, "AsyncTask_Status")
	if err != nil {
		return err
	}
	*x = AsyncTask_Status(value)
	return nil
}

func (AsyncTask_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{1, 1}
}

// the flag bit pos in db flag field
type Dish_FlagBit int32

const (
	Dish_ALCOHOLIC    Dish_FlagBit = 0
	Dish_IS_QC_FROZEN Dish_FlagBit = 1
)

var Dish_FlagBit_name = map[int32]string{
	0: "ALCOHOLIC",
	1: "IS_QC_FROZEN",
}

var Dish_FlagBit_value = map[string]int32{
	"ALCOHOLIC":    0,
	"IS_QC_FROZEN": 1,
}

func (x Dish_FlagBit) Enum() *Dish_FlagBit {
	p := new(Dish_FlagBit)
	*p = x
	return p
}

func (x Dish_FlagBit) String() string {
	return proto.EnumName(Dish_FlagBit_name, int32(x))
}

func (x *Dish_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Dish_FlagBit_value, data, "Dish_FlagBit")
	if err != nil {
		return err
	}
	*x = Dish_FlagBit(value)
	return nil
}

func (Dish_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3, 0}
}

type OptionGroup_Flag_Bit int32

const (
	OptionGroup_Flag_IS_QC_FROZEN OptionGroup_Flag_Bit = 0
)

var OptionGroup_Flag_Bit_name = map[int32]string{
	0: "IS_QC_FROZEN",
}

var OptionGroup_Flag_Bit_value = map[string]int32{
	"IS_QC_FROZEN": 0,
}

func (x OptionGroup_Flag_Bit) Enum() *OptionGroup_Flag_Bit {
	p := new(OptionGroup_Flag_Bit)
	*p = x
	return p
}

func (x OptionGroup_Flag_Bit) String() string {
	return proto.EnumName(OptionGroup_Flag_Bit_name, int32(x))
}

func (x *OptionGroup_Flag_Bit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OptionGroup_Flag_Bit_value, data, "OptionGroup_Flag_Bit")
	if err != nil {
		return err
	}
	*x = OptionGroup_Flag_Bit(value)
	return nil
}

func (OptionGroup_Flag_Bit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{5, 0, 0}
}

type CartItemDetail_DiscountType int32

const (
	CartItemDetail_NoDiscount        CartItemDetail_DiscountType = 0
	CartItemDetail_ItemDiscount      CartItemDetail_DiscountType = 1
	CartItemDetail_FlashSaleDiscount CartItemDetail_DiscountType = 2
)

var CartItemDetail_DiscountType_name = map[int32]string{
	0: "NoDiscount",
	1: "ItemDiscount",
	2: "FlashSaleDiscount",
}

var CartItemDetail_DiscountType_value = map[string]int32{
	"NoDiscount":        0,
	"ItemDiscount":      1,
	"FlashSaleDiscount": 2,
}

func (x CartItemDetail_DiscountType) Enum() *CartItemDetail_DiscountType {
	p := new(CartItemDetail_DiscountType)
	*p = x
	return p
}

func (x CartItemDetail_DiscountType) String() string {
	return proto.EnumName(CartItemDetail_DiscountType_name, int32(x))
}

func (x *CartItemDetail_DiscountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CartItemDetail_DiscountType_value, data, "CartItemDetail_DiscountType")
	if err != nil {
		return err
	}
	*x = CartItemDetail_DiscountType(value)
	return nil
}

func (CartItemDetail_DiscountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{16, 0}
}

type Order_OrderItemStatus int32

const (
	Order_ITEM_ORIGIN            Order_OrderItemStatus = 0
	Order_ITEM_PRICE_MODIFIED    Order_OrderItemStatus = 1
	Order_ITEM_QUANTITY_MODIFIED Order_OrderItemStatus = 2
	Order_ITEM_DELETED           Order_OrderItemStatus = 4
)

var Order_OrderItemStatus_name = map[int32]string{
	0: "ITEM_ORIGIN",
	1: "ITEM_PRICE_MODIFIED",
	2: "ITEM_QUANTITY_MODIFIED",
	4: "ITEM_DELETED",
}

var Order_OrderItemStatus_value = map[string]int32{
	"ITEM_ORIGIN":            0,
	"ITEM_PRICE_MODIFIED":    1,
	"ITEM_QUANTITY_MODIFIED": 2,
	"ITEM_DELETED":           4,
}

func (x Order_OrderItemStatus) Enum() *Order_OrderItemStatus {
	p := new(Order_OrderItemStatus)
	*p = x
	return p
}

func (x Order_OrderItemStatus) String() string {
	return proto.EnumName(Order_OrderItemStatus_name, int32(x))
}

func (x *Order_OrderItemStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_OrderItemStatus_value, data, "Order_OrderItemStatus")
	if err != nil {
		return err
	}
	*x = Order_OrderItemStatus(value)
	return nil
}

func (Order_OrderItemStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 0}
}

// the flag bit pos in db flag field
type Order_FlagBit int32

const (
	Order_IS_RETURNED               Order_FlagBit = 0
	Order_IS_REFUNDED               Order_FlagBit = 1
	Order_IS_MANUAL_CONFIRMED       Order_FlagBit = 2
	Order_CAN_DRIVER_REWRITE        Order_FlagBit = 3
	Order_IS_DRIVER_REWRITE_PREVIEW Order_FlagBit = 4
	Order_HAS_DROPPED               Order_FlagBit = 5
	Order_IS_INSTANT_PREPARATION    Order_FlagBit = 6
	Order_CAN_MERCHANT_REWRITE      Order_FlagBit = 7
	Order_IS_DFF                    Order_FlagBit = 8
	Order_IS_PAO_TANG               Order_FlagBit = 9
)

var Order_FlagBit_name = map[int32]string{
	0: "IS_RETURNED",
	1: "IS_REFUNDED",
	2: "IS_MANUAL_CONFIRMED",
	3: "CAN_DRIVER_REWRITE",
	4: "IS_DRIVER_REWRITE_PREVIEW",
	5: "HAS_DROPPED",
	6: "IS_INSTANT_PREPARATION",
	7: "CAN_MERCHANT_REWRITE",
	8: "IS_DFF",
	9: "IS_PAO_TANG",
}

var Order_FlagBit_value = map[string]int32{
	"IS_RETURNED":               0,
	"IS_REFUNDED":               1,
	"IS_MANUAL_CONFIRMED":       2,
	"CAN_DRIVER_REWRITE":        3,
	"IS_DRIVER_REWRITE_PREVIEW": 4,
	"HAS_DROPPED":               5,
	"IS_INSTANT_PREPARATION":    6,
	"CAN_MERCHANT_REWRITE":      7,
	"IS_DFF":                    8,
	"IS_PAO_TANG":               9,
}

func (x Order_FlagBit) Enum() *Order_FlagBit {
	p := new(Order_FlagBit)
	*p = x
	return p
}

func (x Order_FlagBit) String() string {
	return proto.EnumName(Order_FlagBit_name, int32(x))
}

func (x *Order_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_FlagBit_value, data, "Order_FlagBit")
	if err != nil {
		return err
	}
	*x = Order_FlagBit(value)
	return nil
}

func (Order_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 1}
}

type Order_RewriteType int32

const (
	Order_REWRITE_ORIGIN   Order_RewriteType = 0
	Order_REWRITE_REFUND   Order_RewriteType = 1
	Order_REWRITE_MAKE_UP  Order_RewriteType = 2
	Order_REWRITE_MODIFIED Order_RewriteType = 3
)

var Order_RewriteType_name = map[int32]string{
	0: "REWRITE_ORIGIN",
	1: "REWRITE_REFUND",
	2: "REWRITE_MAKE_UP",
	3: "REWRITE_MODIFIED",
}

var Order_RewriteType_value = map[string]int32{
	"REWRITE_ORIGIN":   0,
	"REWRITE_REFUND":   1,
	"REWRITE_MAKE_UP":  2,
	"REWRITE_MODIFIED": 3,
}

func (x Order_RewriteType) Enum() *Order_RewriteType {
	p := new(Order_RewriteType)
	*p = x
	return p
}

func (x Order_RewriteType) String() string {
	return proto.EnumName(Order_RewriteType_name, int32(x))
}

func (x *Order_RewriteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_RewriteType_value, data, "Order_RewriteType")
	if err != nil {
		return err
	}
	*x = Order_RewriteType(value)
	return nil
}

func (Order_RewriteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 2}
}

type Order_RewriteReason int32

const (
	Order_REWRITE_RESERVED           Order_RewriteReason = 0
	Order_REWRITE_ITEM_UNAVAILABLE   Order_RewriteReason = 201
	Order_REWRITE_BUYER_REQUIREMENT  Order_RewriteReason = 202
	Order_REWRITE_ITEM_PRICE_CHANGED Order_RewriteReason = 203
	Order_REWRITE_EXTRA_FEE          Order_RewriteReason = 204
	Order_REWRITE_OTHERS             Order_RewriteReason = 250
)

var Order_RewriteReason_name = map[int32]string{
	0:   "REWRITE_RESERVED",
	201: "REWRITE_ITEM_UNAVAILABLE",
	202: "REWRITE_BUYER_REQUIREMENT",
	203: "REWRITE_ITEM_PRICE_CHANGED",
	204: "REWRITE_EXTRA_FEE",
	250: "REWRITE_OTHERS",
}

var Order_RewriteReason_value = map[string]int32{
	"REWRITE_RESERVED":           0,
	"REWRITE_ITEM_UNAVAILABLE":   201,
	"REWRITE_BUYER_REQUIREMENT":  202,
	"REWRITE_ITEM_PRICE_CHANGED": 203,
	"REWRITE_EXTRA_FEE":          204,
	"REWRITE_OTHERS":             250,
}

func (x Order_RewriteReason) Enum() *Order_RewriteReason {
	p := new(Order_RewriteReason)
	*p = x
	return p
}

func (x Order_RewriteReason) String() string {
	return proto.EnumName(Order_RewriteReason_name, int32(x))
}

func (x *Order_RewriteReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_RewriteReason_value, data, "Order_RewriteReason")
	if err != nil {
		return err
	}
	*x = Order_RewriteReason(value)
	return nil
}

func (Order_RewriteReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 3}
}

type Order_Promotion_Flag_Bit int32

const (
	Order_Promotion_Flag_ITEM_VOUCHER           Order_Promotion_Flag_Bit = 0
	Order_Promotion_Flag_SHIPPING_FEE_VOUCHER   Order_Promotion_Flag_Bit = 1
	Order_Promotion_Flag_COINS_CASHBACK_VOUCHER Order_Promotion_Flag_Bit = 2
	Order_Promotion_Flag_COINS                  Order_Promotion_Flag_Bit = 3
)

var Order_Promotion_Flag_Bit_name = map[int32]string{
	0: "ITEM_VOUCHER",
	1: "SHIPPING_FEE_VOUCHER",
	2: "COINS_CASHBACK_VOUCHER",
	3: "COINS",
}

var Order_Promotion_Flag_Bit_value = map[string]int32{
	"ITEM_VOUCHER":           0,
	"SHIPPING_FEE_VOUCHER":   1,
	"COINS_CASHBACK_VOUCHER": 2,
	"COINS":                  3,
}

func (x Order_Promotion_Flag_Bit) Enum() *Order_Promotion_Flag_Bit {
	p := new(Order_Promotion_Flag_Bit)
	*p = x
	return p
}

func (x Order_Promotion_Flag_Bit) String() string {
	return proto.EnumName(Order_Promotion_Flag_Bit_name, int32(x))
}

func (x *Order_Promotion_Flag_Bit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_Promotion_Flag_Bit_value, data, "Order_Promotion_Flag_Bit")
	if err != nil {
		return err
	}
	*x = Order_Promotion_Flag_Bit(value)
	return nil
}

func (Order_Promotion_Flag_Bit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 2, 0, 0}
}

type DeliveryOrder_AssignType int32

const (
	DeliveryOrder_NONE_TYPE DeliveryOrder_AssignType = 0
	DeliveryOrder_AUTOMATE  DeliveryOrder_AssignType = 1
	//    FREE_PICK = 2; //抢单大厅
	DeliveryOrder_MANUAL       DeliveryOrder_AssignType = 3
	DeliveryOrder_STACK_ASSIGN DeliveryOrder_AssignType = 4
)

var DeliveryOrder_AssignType_name = map[int32]string{
	0: "NONE_TYPE",
	1: "AUTOMATE",
	3: "MANUAL",
	4: "STACK_ASSIGN",
}

var DeliveryOrder_AssignType_value = map[string]int32{
	"NONE_TYPE":    0,
	"AUTOMATE":     1,
	"MANUAL":       3,
	"STACK_ASSIGN": 4,
}

func (x DeliveryOrder_AssignType) Enum() *DeliveryOrder_AssignType {
	p := new(DeliveryOrder_AssignType)
	*p = x
	return p
}

func (x DeliveryOrder_AssignType) String() string {
	return proto.EnumName(DeliveryOrder_AssignType_name, int32(x))
}

func (x *DeliveryOrder_AssignType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryOrder_AssignType_value, data, "DeliveryOrder_AssignType")
	if err != nil {
		return err
	}
	*x = DeliveryOrder_AssignType(value)
	return nil
}

func (DeliveryOrder_AssignType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 0}
}

type DeliveryOrder_AdvanceDepositRefundStatus int32

const (
	DeliveryOrder_DEPOSIT_DEFAULT   DeliveryOrder_AdvanceDepositRefundStatus = 0
	DeliveryOrder_DEPOSIT_INITED    DeliveryOrder_AdvanceDepositRefundStatus = 1
	DeliveryOrder_DEPOSIT_DEPOSITED DeliveryOrder_AdvanceDepositRefundStatus = 2
	DeliveryOrder_DEPOSIT_REFUNDED  DeliveryOrder_AdvanceDepositRefundStatus = 3
)

var DeliveryOrder_AdvanceDepositRefundStatus_name = map[int32]string{
	0: "DEPOSIT_DEFAULT",
	1: "DEPOSIT_INITED",
	2: "DEPOSIT_DEPOSITED",
	3: "DEPOSIT_REFUNDED",
}

var DeliveryOrder_AdvanceDepositRefundStatus_value = map[string]int32{
	"DEPOSIT_DEFAULT":   0,
	"DEPOSIT_INITED":    1,
	"DEPOSIT_DEPOSITED": 2,
	"DEPOSIT_REFUNDED":  3,
}

func (x DeliveryOrder_AdvanceDepositRefundStatus) Enum() *DeliveryOrder_AdvanceDepositRefundStatus {
	p := new(DeliveryOrder_AdvanceDepositRefundStatus)
	*p = x
	return p
}

func (x DeliveryOrder_AdvanceDepositRefundStatus) String() string {
	return proto.EnumName(DeliveryOrder_AdvanceDepositRefundStatus_name, int32(x))
}

func (x *DeliveryOrder_AdvanceDepositRefundStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryOrder_AdvanceDepositRefundStatus_value, data, "DeliveryOrder_AdvanceDepositRefundStatus")
	if err != nil {
		return err
	}
	*x = DeliveryOrder_AdvanceDepositRefundStatus(value)
	return nil
}

func (DeliveryOrder_AdvanceDepositRefundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 1}
}

type DeliveryOrder_FlagBit int32

const (
	DeliveryOrder_IS_INSTANT_PREPARATION  DeliveryOrder_FlagBit = 0
	DeliveryOrder_IS_DFF                  DeliveryOrder_FlagBit = 1
	DeliveryOrder_IS_GROUP_DELIVERY       DeliveryOrder_FlagBit = 2
	DeliveryOrder_IS_GROUP_FIRST_DELIVERY DeliveryOrder_FlagBit = 3
)

var DeliveryOrder_FlagBit_name = map[int32]string{
	0: "IS_INSTANT_PREPARATION",
	1: "IS_DFF",
	2: "IS_GROUP_DELIVERY",
	3: "IS_GROUP_FIRST_DELIVERY",
}

var DeliveryOrder_FlagBit_value = map[string]int32{
	"IS_INSTANT_PREPARATION":  0,
	"IS_DFF":                  1,
	"IS_GROUP_DELIVERY":       2,
	"IS_GROUP_FIRST_DELIVERY": 3,
}

func (x DeliveryOrder_FlagBit) Enum() *DeliveryOrder_FlagBit {
	p := new(DeliveryOrder_FlagBit)
	*p = x
	return p
}

func (x DeliveryOrder_FlagBit) String() string {
	return proto.EnumName(DeliveryOrder_FlagBit_name, int32(x))
}

func (x *DeliveryOrder_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryOrder_FlagBit_value, data, "DeliveryOrder_FlagBit")
	if err != nil {
		return err
	}
	*x = DeliveryOrder_FlagBit(value)
	return nil
}

func (DeliveryOrder_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 2}
}

type DeliveryOrder_AdvanceDeposit_Status int32

const (
	DeliveryOrder_AdvanceDeposit_SUCCESS DeliveryOrder_AdvanceDeposit_Status = 1
	DeliveryOrder_AdvanceDeposit_FAILED  DeliveryOrder_AdvanceDeposit_Status = 2
)

var DeliveryOrder_AdvanceDeposit_Status_name = map[int32]string{
	1: "SUCCESS",
	2: "FAILED",
}

var DeliveryOrder_AdvanceDeposit_Status_value = map[string]int32{
	"SUCCESS": 1,
	"FAILED":  2,
}

func (x DeliveryOrder_AdvanceDeposit_Status) Enum() *DeliveryOrder_AdvanceDeposit_Status {
	p := new(DeliveryOrder_AdvanceDeposit_Status)
	*p = x
	return p
}

func (x DeliveryOrder_AdvanceDeposit_Status) String() string {
	return proto.EnumName(DeliveryOrder_AdvanceDeposit_Status_name, int32(x))
}

func (x *DeliveryOrder_AdvanceDeposit_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryOrder_AdvanceDeposit_Status_value, data, "DeliveryOrder_AdvanceDeposit_Status")
	if err != nil {
		return err
	}
	*x = DeliveryOrder_AdvanceDeposit_Status(value)
	return nil
}

func (DeliveryOrder_AdvanceDeposit_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 1, 0}
}

type DeliveryOrder_DepositRefund_Status int32

const (
	DeliveryOrder_DepositRefund_SUCCESS DeliveryOrder_DepositRefund_Status = 1
	DeliveryOrder_DepositRefund_FAILED  DeliveryOrder_DepositRefund_Status = 2
)

var DeliveryOrder_DepositRefund_Status_name = map[int32]string{
	1: "SUCCESS",
	2: "FAILED",
}

var DeliveryOrder_DepositRefund_Status_value = map[string]int32{
	"SUCCESS": 1,
	"FAILED":  2,
}

func (x DeliveryOrder_DepositRefund_Status) Enum() *DeliveryOrder_DepositRefund_Status {
	p := new(DeliveryOrder_DepositRefund_Status)
	*p = x
	return p
}

func (x DeliveryOrder_DepositRefund_Status) String() string {
	return proto.EnumName(DeliveryOrder_DepositRefund_Status_name, int32(x))
}

func (x *DeliveryOrder_DepositRefund_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeliveryOrder_DepositRefund_Status_value, data, "DeliveryOrder_DepositRefund_Status")
	if err != nil {
		return err
	}
	*x = DeliveryOrder_DepositRefund_Status(value)
	return nil
}

func (DeliveryOrder_DepositRefund_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 2, 0}
}

type Payment_Type int32

const (
	Payment_PLACE_ORDER   Payment_Type = 1
	Payment_REWRITE_ORDER Payment_Type = 2
)

var Payment_Type_name = map[int32]string{
	1: "PLACE_ORDER",
	2: "REWRITE_ORDER",
}

var Payment_Type_value = map[string]int32{
	"PLACE_ORDER":   1,
	"REWRITE_ORDER": 2,
}

func (x Payment_Type) Enum() *Payment_Type {
	p := new(Payment_Type)
	*p = x
	return p
}

func (x Payment_Type) String() string {
	return proto.EnumName(Payment_Type_name, int32(x))
}

func (x *Payment_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Payment_Type_value, data, "Payment_Type")
	if err != nil {
		return err
	}
	*x = Payment_Type(value)
	return nil
}

func (Payment_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{22, 0}
}

type Store_WalletStatus int32

const (
	Store_WALLET_DISABLE Store_WalletStatus = 0
	Store_WALLET_ENABLE  Store_WalletStatus = 1
)

var Store_WalletStatus_name = map[int32]string{
	0: "WALLET_DISABLE",
	1: "WALLET_ENABLE",
}

var Store_WalletStatus_value = map[string]int32{
	"WALLET_DISABLE": 0,
	"WALLET_ENABLE":  1,
}

func (x Store_WalletStatus) Enum() *Store_WalletStatus {
	p := new(Store_WalletStatus)
	*p = x
	return p
}

func (x Store_WalletStatus) String() string {
	return proto.EnumName(Store_WalletStatus_name, int32(x))
}

func (x *Store_WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_WalletStatus_value, data, "Store_WalletStatus")
	if err != nil {
		return err
	}
	*x = Store_WalletStatus(value)
	return nil
}

func (Store_WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 0}
}

type Store_AppStatus int32

const (
	Store_APP_DISABLE Store_AppStatus = 0
	Store_APP_ENABLE  Store_AppStatus = 1
)

var Store_AppStatus_name = map[int32]string{
	0: "APP_DISABLE",
	1: "APP_ENABLE",
}

var Store_AppStatus_value = map[string]int32{
	"APP_DISABLE": 0,
	"APP_ENABLE":  1,
}

func (x Store_AppStatus) Enum() *Store_AppStatus {
	p := new(Store_AppStatus)
	*p = x
	return p
}

func (x Store_AppStatus) String() string {
	return proto.EnumName(Store_AppStatus_name, int32(x))
}

func (x *Store_AppStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_AppStatus_value, data, "Store_AppStatus")
	if err != nil {
		return err
	}
	*x = Store_AppStatus(value)
	return nil
}

func (Store_AppStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 1}
}

type Store_AutoConfirmed int32

const (
	Store_Manual Store_AutoConfirmed = 0
	Store_Auto   Store_AutoConfirmed = 1
)

var Store_AutoConfirmed_name = map[int32]string{
	0: "Manual",
	1: "Auto",
}

var Store_AutoConfirmed_value = map[string]int32{
	"Manual": 0,
	"Auto":   1,
}

func (x Store_AutoConfirmed) Enum() *Store_AutoConfirmed {
	p := new(Store_AutoConfirmed)
	*p = x
	return p
}

func (x Store_AutoConfirmed) String() string {
	return proto.EnumName(Store_AutoConfirmed_name, int32(x))
}

func (x *Store_AutoConfirmed) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_AutoConfirmed_value, data, "Store_AutoConfirmed")
	if err != nil {
		return err
	}
	*x = Store_AutoConfirmed(value)
	return nil
}

func (Store_AutoConfirmed) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 2}
}

type Store_AutoConfirmedEnabled int32

const (
	Store_Disable Store_AutoConfirmedEnabled = 0
	Store_Enable  Store_AutoConfirmedEnabled = 1
)

var Store_AutoConfirmedEnabled_name = map[int32]string{
	0: "Disable",
	1: "Enable",
}

var Store_AutoConfirmedEnabled_value = map[string]int32{
	"Disable": 0,
	"Enable":  1,
}

func (x Store_AutoConfirmedEnabled) Enum() *Store_AutoConfirmedEnabled {
	p := new(Store_AutoConfirmedEnabled)
	*p = x
	return p
}

func (x Store_AutoConfirmedEnabled) String() string {
	return proto.EnumName(Store_AutoConfirmedEnabled_name, int32(x))
}

func (x *Store_AutoConfirmedEnabled) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_AutoConfirmedEnabled_value, data, "Store_AutoConfirmedEnabled")
	if err != nil {
		return err
	}
	*x = Store_AutoConfirmedEnabled(value)
	return nil
}

func (Store_AutoConfirmedEnabled) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 3}
}

type Store_DeliveryDistanceMode int32

const (
	Store_DELIVERY_DISTANCE_MODE_DEFAULT    Store_DeliveryDistanceMode = 1
	Store_DELIVERY_DISTANCE_MODE_CUSTOMIZED Store_DeliveryDistanceMode = 2
)

var Store_DeliveryDistanceMode_name = map[int32]string{
	1: "DELIVERY_DISTANCE_MODE_DEFAULT",
	2: "DELIVERY_DISTANCE_MODE_CUSTOMIZED",
}

var Store_DeliveryDistanceMode_value = map[string]int32{
	"DELIVERY_DISTANCE_MODE_DEFAULT":    1,
	"DELIVERY_DISTANCE_MODE_CUSTOMIZED": 2,
}

func (x Store_DeliveryDistanceMode) Enum() *Store_DeliveryDistanceMode {
	p := new(Store_DeliveryDistanceMode)
	*p = x
	return p
}

func (x Store_DeliveryDistanceMode) String() string {
	return proto.EnumName(Store_DeliveryDistanceMode_name, int32(x))
}

func (x *Store_DeliveryDistanceMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_DeliveryDistanceMode_value, data, "Store_DeliveryDistanceMode")
	if err != nil {
		return err
	}
	*x = Store_DeliveryDistanceMode(value)
	return nil
}

func (Store_DeliveryDistanceMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 4}
}

type Store_ModifyOrderMode int32

const (
	Store_MODIFY_ORDER_MODE_NO_EDITING    Store_ModifyOrderMode = 1
	Store_MODIFY_ORDER_MODE_DRIVER_ONLY   Store_ModifyOrderMode = 2
	Store_MODIFY_ORDER_MODE_MERCHANT_ONLY Store_ModifyOrderMode = 3
)

var Store_ModifyOrderMode_name = map[int32]string{
	1: "MODIFY_ORDER_MODE_NO_EDITING",
	2: "MODIFY_ORDER_MODE_DRIVER_ONLY",
	3: "MODIFY_ORDER_MODE_MERCHANT_ONLY",
}

var Store_ModifyOrderMode_value = map[string]int32{
	"MODIFY_ORDER_MODE_NO_EDITING":    1,
	"MODIFY_ORDER_MODE_DRIVER_ONLY":   2,
	"MODIFY_ORDER_MODE_MERCHANT_ONLY": 3,
}

func (x Store_ModifyOrderMode) Enum() *Store_ModifyOrderMode {
	p := new(Store_ModifyOrderMode)
	*p = x
	return p
}

func (x Store_ModifyOrderMode) String() string {
	return proto.EnumName(Store_ModifyOrderMode_name, int32(x))
}

func (x *Store_ModifyOrderMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_ModifyOrderMode_value, data, "Store_ModifyOrderMode")
	if err != nil {
		return err
	}
	*x = Store_ModifyOrderMode(value)
	return nil
}

func (Store_ModifyOrderMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 5}
}

type Store_StatusReason int32

const (
	Store_ON_BOARDING                 Store_StatusReason = 1
	Store_PERMANENT_ClOSE             Store_StatusReason = 2
	Store_TEMPORARY_ClOSE             Store_StatusReason = 3
	Store_FRAUD                       Store_StatusReason = 4
	Store_QMS_Suspended               Store_StatusReason = 5
	Store_QMS_Temporarily_Deactivated Store_StatusReason = 6
	Store_INACTIVE_IN_MIS             Store_StatusReason = 7
	Store_OTHERS                      Store_StatusReason = 100
)

var Store_StatusReason_name = map[int32]string{
	1:   "ON_BOARDING",
	2:   "PERMANENT_ClOSE",
	3:   "TEMPORARY_ClOSE",
	4:   "FRAUD",
	5:   "QMS_Suspended",
	6:   "QMS_Temporarily_Deactivated",
	7:   "INACTIVE_IN_MIS",
	100: "OTHERS",
}

var Store_StatusReason_value = map[string]int32{
	"ON_BOARDING":                 1,
	"PERMANENT_ClOSE":             2,
	"TEMPORARY_ClOSE":             3,
	"FRAUD":                       4,
	"QMS_Suspended":               5,
	"QMS_Temporarily_Deactivated": 6,
	"INACTIVE_IN_MIS":             7,
	"OTHERS":                      100,
}

func (x Store_StatusReason) Enum() *Store_StatusReason {
	p := new(Store_StatusReason)
	*p = x
	return p
}

func (x Store_StatusReason) String() string {
	return proto.EnumName(Store_StatusReason_name, int32(x))
}

func (x *Store_StatusReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_StatusReason_value, data, "Store_StatusReason")
	if err != nil {
		return err
	}
	*x = Store_StatusReason(value)
	return nil
}

func (Store_StatusReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 6}
}

type Store_SettleTo int32

const (
	Store_SETTLE_TO_UNKNOWN       Store_SettleTo = 0
	Store_SETTLE_TO_MERCHANT      Store_SettleTo = 1
	Store_SETTLE_TO_STORE         Store_SettleTo = 2
	Store_SETTLE_TO_MERCHANT_HOST Store_SettleTo = 3
)

var Store_SettleTo_name = map[int32]string{
	0: "SETTLE_TO_UNKNOWN",
	1: "SETTLE_TO_MERCHANT",
	2: "SETTLE_TO_STORE",
	3: "SETTLE_TO_MERCHANT_HOST",
}

var Store_SettleTo_value = map[string]int32{
	"SETTLE_TO_UNKNOWN":       0,
	"SETTLE_TO_MERCHANT":      1,
	"SETTLE_TO_STORE":         2,
	"SETTLE_TO_MERCHANT_HOST": 3,
}

func (x Store_SettleTo) Enum() *Store_SettleTo {
	p := new(Store_SettleTo)
	*p = x
	return p
}

func (x Store_SettleTo) String() string {
	return proto.EnumName(Store_SettleTo_name, int32(x))
}

func (x *Store_SettleTo) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_SettleTo_value, data, "Store_SettleTo")
	if err != nil {
		return err
	}
	*x = Store_SettleTo(value)
	return nil
}

func (Store_SettleTo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 7}
}

type Store_HalalType int32

const (
	Store_NON_HALAL       Store_HalalType = 1
	Store_HALAL_FRIENDLY  Store_HalalType = 2
	Store_CERTIFIED_HALAL Store_HalalType = 3
)

var Store_HalalType_name = map[int32]string{
	1: "NON_HALAL",
	2: "HALAL_FRIENDLY",
	3: "CERTIFIED_HALAL",
}

var Store_HalalType_value = map[string]int32{
	"NON_HALAL":       1,
	"HALAL_FRIENDLY":  2,
	"CERTIFIED_HALAL": 3,
}

func (x Store_HalalType) Enum() *Store_HalalType {
	p := new(Store_HalalType)
	*p = x
	return p
}

func (x Store_HalalType) String() string {
	return proto.EnumName(Store_HalalType_name, int32(x))
}

func (x *Store_HalalType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_HalalType_value, data, "Store_HalalType")
	if err != nil {
		return err
	}
	*x = Store_HalalType(value)
	return nil
}

func (Store_HalalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 8}
}

type Store_ServiceFeeMode int32

const (
	Store_Default   Store_ServiceFeeMode = 1
	Store_Customize Store_ServiceFeeMode = 2
)

var Store_ServiceFeeMode_name = map[int32]string{
	1: "Default",
	2: "Customize",
}

var Store_ServiceFeeMode_value = map[string]int32{
	"Default":   1,
	"Customize": 2,
}

func (x Store_ServiceFeeMode) Enum() *Store_ServiceFeeMode {
	p := new(Store_ServiceFeeMode)
	*p = x
	return p
}

func (x Store_ServiceFeeMode) String() string {
	return proto.EnumName(Store_ServiceFeeMode_name, int32(x))
}

func (x *Store_ServiceFeeMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_ServiceFeeMode_value, data, "Store_ServiceFeeMode")
	if err != nil {
		return err
	}
	*x = Store_ServiceFeeMode(value)
	return nil
}

func (Store_ServiceFeeMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 9}
}

type Store_DFFMode int32

const (
	Store_DFF_MODE_DEFAULT             Store_DFFMode = 1
	Store_DFF_MODE_CUSTOMIZED_MUST_DFF Store_DFFMode = 2
	Store_DFF_MODE_CUSTOMIZED_MUST_MFF Store_DFFMode = 3
)

var Store_DFFMode_name = map[int32]string{
	1: "DFF_MODE_DEFAULT",
	2: "DFF_MODE_CUSTOMIZED_MUST_DFF",
	3: "DFF_MODE_CUSTOMIZED_MUST_MFF",
}

var Store_DFFMode_value = map[string]int32{
	"DFF_MODE_DEFAULT":             1,
	"DFF_MODE_CUSTOMIZED_MUST_DFF": 2,
	"DFF_MODE_CUSTOMIZED_MUST_MFF": 3,
}

func (x Store_DFFMode) Enum() *Store_DFFMode {
	p := new(Store_DFFMode)
	*p = x
	return p
}

func (x Store_DFFMode) String() string {
	return proto.EnumName(Store_DFFMode_name, int32(x))
}

func (x *Store_DFFMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_DFFMode_value, data, "Store_DFFMode")
	if err != nil {
		return err
	}
	*x = Store_DFFMode(value)
	return nil
}

func (Store_DFFMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 10}
}

type Store_DFFSetting int32

const (
	Store_DFF_SETTING_UNKNOWN       Store_DFFSetting = 0
	Store_DFF_SETTING_MUST_DFF      Store_DFFSetting = 1
	Store_DFF_SETTING_APPLY_BY_ALGO Store_DFFSetting = 2
	Store_DFF_SETTING_MUST_MFF      Store_DFFSetting = 3
)

var Store_DFFSetting_name = map[int32]string{
	0: "DFF_SETTING_UNKNOWN",
	1: "DFF_SETTING_MUST_DFF",
	2: "DFF_SETTING_APPLY_BY_ALGO",
	3: "DFF_SETTING_MUST_MFF",
}

var Store_DFFSetting_value = map[string]int32{
	"DFF_SETTING_UNKNOWN":       0,
	"DFF_SETTING_MUST_DFF":      1,
	"DFF_SETTING_APPLY_BY_ALGO": 2,
	"DFF_SETTING_MUST_MFF":      3,
}

func (x Store_DFFSetting) Enum() *Store_DFFSetting {
	p := new(Store_DFFSetting)
	*p = x
	return p
}

func (x Store_DFFSetting) String() string {
	return proto.EnumName(Store_DFFSetting_name, int32(x))
}

func (x *Store_DFFSetting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_DFFSetting_value, data, "Store_DFFSetting")
	if err != nil {
		return err
	}
	*x = Store_DFFSetting(value)
	return nil
}

func (Store_DFFSetting) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 11}
}

type Store_MaxDelayTimeMode int32

const (
	Store_MaxDelayTimeDefault   Store_MaxDelayTimeMode = 1
	Store_MaxDelayTimeCustomize Store_MaxDelayTimeMode = 2
)

var Store_MaxDelayTimeMode_name = map[int32]string{
	1: "MaxDelayTimeDefault",
	2: "MaxDelayTimeCustomize",
}

var Store_MaxDelayTimeMode_value = map[string]int32{
	"MaxDelayTimeDefault":   1,
	"MaxDelayTimeCustomize": 2,
}

func (x Store_MaxDelayTimeMode) Enum() *Store_MaxDelayTimeMode {
	p := new(Store_MaxDelayTimeMode)
	*p = x
	return p
}

func (x Store_MaxDelayTimeMode) String() string {
	return proto.EnumName(Store_MaxDelayTimeMode_name, int32(x))
}

func (x *Store_MaxDelayTimeMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_MaxDelayTimeMode_value, data, "Store_MaxDelayTimeMode")
	if err != nil {
		return err
	}
	*x = Store_MaxDelayTimeMode(value)
	return nil
}

func (Store_MaxDelayTimeMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 12}
}

type Store_StatusInAdmin int32

const (
	Store_NOT_INACTIVE Store_StatusInAdmin = 1
	Store_INACTIVE     Store_StatusInAdmin = 2
)

var Store_StatusInAdmin_name = map[int32]string{
	1: "NOT_INACTIVE",
	2: "INACTIVE",
}

var Store_StatusInAdmin_value = map[string]int32{
	"NOT_INACTIVE": 1,
	"INACTIVE":     2,
}

func (x Store_StatusInAdmin) Enum() *Store_StatusInAdmin {
	p := new(Store_StatusInAdmin)
	*p = x
	return p
}

func (x Store_StatusInAdmin) String() string {
	return proto.EnumName(Store_StatusInAdmin_name, int32(x))
}

func (x *Store_StatusInAdmin) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_StatusInAdmin_value, data, "Store_StatusInAdmin")
	if err != nil {
		return err
	}
	*x = Store_StatusInAdmin(value)
	return nil
}

func (Store_StatusInAdmin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 13}
}

type Store_DeliveryMethod int32

const (
	Store_PLATFORM Store_DeliveryMethod = 0
	Store_SELF     Store_DeliveryMethod = 1
)

var Store_DeliveryMethod_name = map[int32]string{
	0: "PLATFORM",
	1: "SELF",
}

var Store_DeliveryMethod_value = map[string]int32{
	"PLATFORM": 0,
	"SELF":     1,
}

func (x Store_DeliveryMethod) Enum() *Store_DeliveryMethod {
	p := new(Store_DeliveryMethod)
	*p = x
	return p
}

func (x Store_DeliveryMethod) String() string {
	return proto.EnumName(Store_DeliveryMethod_name, int32(x))
}

func (x *Store_DeliveryMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_DeliveryMethod_value, data, "Store_DeliveryMethod")
	if err != nil {
		return err
	}
	*x = Store_DeliveryMethod(value)
	return nil
}

func (Store_DeliveryMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 14}
}

type Store_ConfigStatus int32

const (
	Store_ConfigStatus_Unknown  Store_ConfigStatus = 0
	Store_ConfigStatus_Active   Store_ConfigStatus = 1
	Store_ConfigStatus_Inactive Store_ConfigStatus = 2
)

var Store_ConfigStatus_name = map[int32]string{
	0: "ConfigStatus_Unknown",
	1: "ConfigStatus_Active",
	2: "ConfigStatus_Inactive",
}

var Store_ConfigStatus_value = map[string]int32{
	"ConfigStatus_Unknown":  0,
	"ConfigStatus_Active":   1,
	"ConfigStatus_Inactive": 2,
}

func (x Store_ConfigStatus) Enum() *Store_ConfigStatus {
	p := new(Store_ConfigStatus)
	*p = x
	return p
}

func (x Store_ConfigStatus) String() string {
	return proto.EnumName(Store_ConfigStatus_name, int32(x))
}

func (x *Store_ConfigStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_ConfigStatus_value, data, "Store_ConfigStatus")
	if err != nil {
		return err
	}
	*x = Store_ConfigStatus(value)
	return nil
}

func (Store_ConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 15}
}

type Store_SmallOrderFeeMode int32

const (
	Store_SMALL_ORDER_FEE_MODE_DEFAULT    Store_SmallOrderFeeMode = 1
	Store_SMALL_ORDER_FEE_MODE_CUSTOMIZED Store_SmallOrderFeeMode = 2
)

var Store_SmallOrderFeeMode_name = map[int32]string{
	1: "SMALL_ORDER_FEE_MODE_DEFAULT",
	2: "SMALL_ORDER_FEE_MODE_CUSTOMIZED",
}

var Store_SmallOrderFeeMode_value = map[string]int32{
	"SMALL_ORDER_FEE_MODE_DEFAULT":    1,
	"SMALL_ORDER_FEE_MODE_CUSTOMIZED": 2,
}

func (x Store_SmallOrderFeeMode) Enum() *Store_SmallOrderFeeMode {
	p := new(Store_SmallOrderFeeMode)
	*p = x
	return p
}

func (x Store_SmallOrderFeeMode) String() string {
	return proto.EnumName(Store_SmallOrderFeeMode_name, int32(x))
}

func (x *Store_SmallOrderFeeMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_SmallOrderFeeMode_value, data, "Store_SmallOrderFeeMode")
	if err != nil {
		return err
	}
	*x = Store_SmallOrderFeeMode(value)
	return nil
}

func (Store_SmallOrderFeeMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 16}
}

// the flag bit pos in db flag field
type Store_Flag_FlagBit int32

const (
	Store_Flag_OVERTIME_ORDER_MODE            Store_Flag_FlagBit = 0
	Store_Flag_IS_SUPER_MENU                  Store_Flag_FlagBit = 1
	Store_Flag_REQUIRED_RECEIPT_PHOTO         Store_Flag_FlagBit = 2
	Store_Flag_EDIT_MENU_ENABLED              Store_Flag_FlagBit = 3
	Store_Flag_HIDE_DISH_NOTE                 Store_Flag_FlagBit = 4
	Store_Flag_AUTO_PRINT                     Store_Flag_FlagBit = 5
	Store_Flag_EDIT_PROMOTION_ENABLED         Store_Flag_FlagBit = 6
	Store_Flag_SHOW_BUYER_HALAL_TYPE          Store_Flag_FlagBit = 7
	Store_Flag_HIDE_PROCESSING_FEE            Store_Flag_FlagBit = 8
	Store_Flag_SPECIAL_MODE_STORE_CLOSE       Store_Flag_FlagBit = 9
	Store_Flag_SPECIAL_MODE_DELIVERY_DISTANCE Store_Flag_FlagBit = 10
	Store_Flag_SPECIAL_MODE_STORE_DFF         Store_Flag_FlagBit = 11
)

var Store_Flag_FlagBit_name = map[int32]string{
	0:  "OVERTIME_ORDER_MODE",
	1:  "IS_SUPER_MENU",
	2:  "REQUIRED_RECEIPT_PHOTO",
	3:  "EDIT_MENU_ENABLED",
	4:  "HIDE_DISH_NOTE",
	5:  "AUTO_PRINT",
	6:  "EDIT_PROMOTION_ENABLED",
	7:  "SHOW_BUYER_HALAL_TYPE",
	8:  "HIDE_PROCESSING_FEE",
	9:  "SPECIAL_MODE_STORE_CLOSE",
	10: "SPECIAL_MODE_DELIVERY_DISTANCE",
	11: "SPECIAL_MODE_STORE_DFF",
}

var Store_Flag_FlagBit_value = map[string]int32{
	"OVERTIME_ORDER_MODE":            0,
	"IS_SUPER_MENU":                  1,
	"REQUIRED_RECEIPT_PHOTO":         2,
	"EDIT_MENU_ENABLED":              3,
	"HIDE_DISH_NOTE":                 4,
	"AUTO_PRINT":                     5,
	"EDIT_PROMOTION_ENABLED":         6,
	"SHOW_BUYER_HALAL_TYPE":          7,
	"HIDE_PROCESSING_FEE":            8,
	"SPECIAL_MODE_STORE_CLOSE":       9,
	"SPECIAL_MODE_DELIVERY_DISTANCE": 10,
	"SPECIAL_MODE_STORE_DFF":         11,
}

func (x Store_Flag_FlagBit) Enum() *Store_Flag_FlagBit {
	p := new(Store_Flag_FlagBit)
	*p = x
	return p
}

func (x Store_Flag_FlagBit) String() string {
	return proto.EnumName(Store_Flag_FlagBit_name, int32(x))
}

func (x *Store_Flag_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_Flag_FlagBit_value, data, "Store_Flag_FlagBit")
	if err != nil {
		return err
	}
	*x = Store_Flag_FlagBit(value)
	return nil
}

func (Store_Flag_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 2, 0}
}

type Store_Flag_OvertimeOrderMode int32

const (
	Store_Flag_OVERTIME_ORDER_MODE_CONFIRM Store_Flag_OvertimeOrderMode = 0
	Store_Flag_OVERTIME_ORDER_MODE_DECLINE Store_Flag_OvertimeOrderMode = 1
)

var Store_Flag_OvertimeOrderMode_name = map[int32]string{
	0: "OVERTIME_ORDER_MODE_CONFIRM",
	1: "OVERTIME_ORDER_MODE_DECLINE",
}

var Store_Flag_OvertimeOrderMode_value = map[string]int32{
	"OVERTIME_ORDER_MODE_CONFIRM": 0,
	"OVERTIME_ORDER_MODE_DECLINE": 1,
}

func (x Store_Flag_OvertimeOrderMode) Enum() *Store_Flag_OvertimeOrderMode {
	p := new(Store_Flag_OvertimeOrderMode)
	*p = x
	return p
}

func (x Store_Flag_OvertimeOrderMode) String() string {
	return proto.EnumName(Store_Flag_OvertimeOrderMode_name, int32(x))
}

func (x *Store_Flag_OvertimeOrderMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Store_Flag_OvertimeOrderMode_value, data, "Store_Flag_OvertimeOrderMode")
	if err != nil {
		return err
	}
	*x = Store_Flag_OvertimeOrderMode(value)
	return nil
}

func (Store_Flag_OvertimeOrderMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 2, 1}
}

type StoreMin_WalletStatus int32

const (
	StoreMin_WALLET_DISABLE StoreMin_WalletStatus = 0
	StoreMin_WALLET_ENABLE  StoreMin_WalletStatus = 1
)

var StoreMin_WalletStatus_name = map[int32]string{
	0: "WALLET_DISABLE",
	1: "WALLET_ENABLE",
}

var StoreMin_WalletStatus_value = map[string]int32{
	"WALLET_DISABLE": 0,
	"WALLET_ENABLE":  1,
}

func (x StoreMin_WalletStatus) Enum() *StoreMin_WalletStatus {
	p := new(StoreMin_WalletStatus)
	*p = x
	return p
}

func (x StoreMin_WalletStatus) String() string {
	return proto.EnumName(StoreMin_WalletStatus_name, int32(x))
}

func (x *StoreMin_WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreMin_WalletStatus_value, data, "StoreMin_WalletStatus")
	if err != nil {
		return err
	}
	*x = StoreMin_WalletStatus(value)
	return nil
}

func (StoreMin_WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28, 0}
}

type StoreMin_AppStatus int32

const (
	StoreMin_APP_DISABLE StoreMin_AppStatus = 0
	StoreMin_APP_ENABLE  StoreMin_AppStatus = 1
)

var StoreMin_AppStatus_name = map[int32]string{
	0: "APP_DISABLE",
	1: "APP_ENABLE",
}

var StoreMin_AppStatus_value = map[string]int32{
	"APP_DISABLE": 0,
	"APP_ENABLE":  1,
}

func (x StoreMin_AppStatus) Enum() *StoreMin_AppStatus {
	p := new(StoreMin_AppStatus)
	*p = x
	return p
}

func (x StoreMin_AppStatus) String() string {
	return proto.EnumName(StoreMin_AppStatus_name, int32(x))
}

func (x *StoreMin_AppStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreMin_AppStatus_value, data, "StoreMin_AppStatus")
	if err != nil {
		return err
	}
	*x = StoreMin_AppStatus(value)
	return nil
}

func (StoreMin_AppStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28, 1}
}

type StoreMin_AutoConfirmed int32

const (
	StoreMin_Manual StoreMin_AutoConfirmed = 0
	StoreMin_Auto   StoreMin_AutoConfirmed = 1
)

var StoreMin_AutoConfirmed_name = map[int32]string{
	0: "Manual",
	1: "Auto",
}

var StoreMin_AutoConfirmed_value = map[string]int32{
	"Manual": 0,
	"Auto":   1,
}

func (x StoreMin_AutoConfirmed) Enum() *StoreMin_AutoConfirmed {
	p := new(StoreMin_AutoConfirmed)
	*p = x
	return p
}

func (x StoreMin_AutoConfirmed) String() string {
	return proto.EnumName(StoreMin_AutoConfirmed_name, int32(x))
}

func (x *StoreMin_AutoConfirmed) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreMin_AutoConfirmed_value, data, "StoreMin_AutoConfirmed")
	if err != nil {
		return err
	}
	*x = StoreMin_AutoConfirmed(value)
	return nil
}

func (StoreMin_AutoConfirmed) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28, 2}
}

type StoreMin_AutoConfirmedEnabled int32

const (
	StoreMin_Disable StoreMin_AutoConfirmedEnabled = 0
	StoreMin_Enable  StoreMin_AutoConfirmedEnabled = 1
)

var StoreMin_AutoConfirmedEnabled_name = map[int32]string{
	0: "Disable",
	1: "Enable",
}

var StoreMin_AutoConfirmedEnabled_value = map[string]int32{
	"Disable": 0,
	"Enable":  1,
}

func (x StoreMin_AutoConfirmedEnabled) Enum() *StoreMin_AutoConfirmedEnabled {
	p := new(StoreMin_AutoConfirmedEnabled)
	*p = x
	return p
}

func (x StoreMin_AutoConfirmedEnabled) String() string {
	return proto.EnumName(StoreMin_AutoConfirmedEnabled_name, int32(x))
}

func (x *StoreMin_AutoConfirmedEnabled) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreMin_AutoConfirmedEnabled_value, data, "StoreMin_AutoConfirmedEnabled")
	if err != nil {
		return err
	}
	*x = StoreMin_AutoConfirmedEnabled(value)
	return nil
}

func (StoreMin_AutoConfirmedEnabled) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28, 3}
}

type OpeningStatus_PauseType int32

const (
	OpeningStatus_None                OpeningStatus_PauseType = 1
	OpeningStatus_SpecialOccasionMode OpeningStatus_PauseType = 2
)

var OpeningStatus_PauseType_name = map[int32]string{
	1: "None",
	2: "SpecialOccasionMode",
}

var OpeningStatus_PauseType_value = map[string]int32{
	"None":                1,
	"SpecialOccasionMode": 2,
}

func (x OpeningStatus_PauseType) Enum() *OpeningStatus_PauseType {
	p := new(OpeningStatus_PauseType)
	*p = x
	return p
}

func (x OpeningStatus_PauseType) String() string {
	return proto.EnumName(OpeningStatus_PauseType_name, int32(x))
}

func (x *OpeningStatus_PauseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpeningStatus_PauseType_value, data, "OpeningStatus_PauseType")
	if err != nil {
		return err
	}
	*x = OpeningStatus_PauseType(value)
	return nil
}

func (OpeningStatus_PauseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 0}
}

type OpeningStatus_Status int32

const (
	OpeningStatus_Status_OPEN  OpeningStatus_Status = 2
	OpeningStatus_Status_PAUSE OpeningStatus_Status = 3
)

var OpeningStatus_Status_name = map[int32]string{
	2: "Status_OPEN",
	3: "Status_PAUSE",
}

var OpeningStatus_Status_value = map[string]int32{
	"Status_OPEN":  2,
	"Status_PAUSE": 3,
}

func (x OpeningStatus_Status) Enum() *OpeningStatus_Status {
	p := new(OpeningStatus_Status)
	*p = x
	return p
}

func (x OpeningStatus_Status) String() string {
	return proto.EnumName(OpeningStatus_Status_name, int32(x))
}

func (x *OpeningStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpeningStatus_Status_value, data, "OpeningStatus_Status")
	if err != nil {
		return err
	}
	*x = OpeningStatus_Status(value)
	return nil
}

func (OpeningStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 1}
}

type OpeningStatus_CloseType int32

const (
	OpeningStatus_CloseTypeRegularHour  OpeningStatus_CloseType = 1
	OpeningStatus_CloseTypeSpecialHour  OpeningStatus_CloseType = 2
	OpeningStatus_CloseTypePlatformHour OpeningStatus_CloseType = 3
)

var OpeningStatus_CloseType_name = map[int32]string{
	1: "CloseTypeRegularHour",
	2: "CloseTypeSpecialHour",
	3: "CloseTypePlatformHour",
}

var OpeningStatus_CloseType_value = map[string]int32{
	"CloseTypeRegularHour":  1,
	"CloseTypeSpecialHour":  2,
	"CloseTypePlatformHour": 3,
}

func (x OpeningStatus_CloseType) Enum() *OpeningStatus_CloseType {
	p := new(OpeningStatus_CloseType)
	*p = x
	return p
}

func (x OpeningStatus_CloseType) String() string {
	return proto.EnumName(OpeningStatus_CloseType_name, int32(x))
}

func (x *OpeningStatus_CloseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpeningStatus_CloseType_value, data, "OpeningStatus_CloseType")
	if err != nil {
		return err
	}
	*x = OpeningStatus_CloseType(value)
	return nil
}

func (OpeningStatus_CloseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 2}
}

type Merchant_WalletStatus int32

const (
	Merchant_WALLET_DISABLE Merchant_WalletStatus = 0
	Merchant_WALLET_ENABLE  Merchant_WalletStatus = 1
)

var Merchant_WalletStatus_name = map[int32]string{
	0: "WALLET_DISABLE",
	1: "WALLET_ENABLE",
}

var Merchant_WalletStatus_value = map[string]int32{
	"WALLET_DISABLE": 0,
	"WALLET_ENABLE":  1,
}

func (x Merchant_WalletStatus) Enum() *Merchant_WalletStatus {
	p := new(Merchant_WalletStatus)
	*p = x
	return p
}

func (x Merchant_WalletStatus) String() string {
	return proto.EnumName(Merchant_WalletStatus_name, int32(x))
}

func (x *Merchant_WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Merchant_WalletStatus_value, data, "Merchant_WalletStatus")
	if err != nil {
		return err
	}
	*x = Merchant_WalletStatus(value)
	return nil
}

func (Merchant_WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{32, 0}
}

type Merchant_ConfigStatus int32

const (
	Merchant_ConfigStatus_Unknown  Merchant_ConfigStatus = 0
	Merchant_ConfigStatus_Active   Merchant_ConfigStatus = 1
	Merchant_ConfigStatus_Inactive Merchant_ConfigStatus = 2
)

var Merchant_ConfigStatus_name = map[int32]string{
	0: "ConfigStatus_Unknown",
	1: "ConfigStatus_Active",
	2: "ConfigStatus_Inactive",
}

var Merchant_ConfigStatus_value = map[string]int32{
	"ConfigStatus_Unknown":  0,
	"ConfigStatus_Active":   1,
	"ConfigStatus_Inactive": 2,
}

func (x Merchant_ConfigStatus) Enum() *Merchant_ConfigStatus {
	p := new(Merchant_ConfigStatus)
	*p = x
	return p
}

func (x Merchant_ConfigStatus) String() string {
	return proto.EnumName(Merchant_ConfigStatus_name, int32(x))
}

func (x *Merchant_ConfigStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Merchant_ConfigStatus_value, data, "Merchant_ConfigStatus")
	if err != nil {
		return err
	}
	*x = Merchant_ConfigStatus(value)
	return nil
}

func (Merchant_ConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{32, 1}
}

type Merchant_MerchantStatus int32

const (
	Merchant_MerchantStatus_Active   Merchant_MerchantStatus = 1
	Merchant_MerchantStatus_Inactive Merchant_MerchantStatus = 2
)

var Merchant_MerchantStatus_name = map[int32]string{
	1: "MerchantStatus_Active",
	2: "MerchantStatus_Inactive",
}

var Merchant_MerchantStatus_value = map[string]int32{
	"MerchantStatus_Active":   1,
	"MerchantStatus_Inactive": 2,
}

func (x Merchant_MerchantStatus) Enum() *Merchant_MerchantStatus {
	p := new(Merchant_MerchantStatus)
	*p = x
	return p
}

func (x Merchant_MerchantStatus) String() string {
	return proto.EnumName(Merchant_MerchantStatus_name, int32(x))
}

func (x *Merchant_MerchantStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Merchant_MerchantStatus_value, data, "Merchant_MerchantStatus")
	if err != nil {
		return err
	}
	*x = Merchant_MerchantStatus(value)
	return nil
}

func (Merchant_MerchantStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{32, 2}
}

type TagType_Status int32

const (
	TagType_INACTIVE TagType_Status = 1
	TagType_ACTIVE   TagType_Status = 2
)

var TagType_Status_name = map[int32]string{
	1: "INACTIVE",
	2: "ACTIVE",
}

var TagType_Status_value = map[string]int32{
	"INACTIVE": 1,
	"ACTIVE":   2,
}

func (x TagType_Status) Enum() *TagType_Status {
	p := new(TagType_Status)
	*p = x
	return p
}

func (x TagType_Status) String() string {
	return proto.EnumName(TagType_Status_name, int32(x))
}

func (x *TagType_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TagType_Status_value, data, "TagType_Status")
	if err != nil {
		return err
	}
	*x = TagType_Status(value)
	return nil
}

func (TagType_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{35, 0}
}

//骑手订单类型：
type DriverWalletOrder_Type int32

const (
	DriverWalletOrder_TYPE_NONE         DriverWalletOrder_Type = 0
	DriverWalletOrder_TOP_UP            DriverWalletOrder_Type = 1
	DriverWalletOrder_WITHDRAW          DriverWalletOrder_Type = 2
	DriverWalletOrder_ADJUSTMENT_CREDIT DriverWalletOrder_Type = 3
	DriverWalletOrder_ADJUSTMENT_DEBIT  DriverWalletOrder_Type = 4
)

var DriverWalletOrder_Type_name = map[int32]string{
	0: "TYPE_NONE",
	1: "TOP_UP",
	2: "WITHDRAW",
	3: "ADJUSTMENT_CREDIT",
	4: "ADJUSTMENT_DEBIT",
}

var DriverWalletOrder_Type_value = map[string]int32{
	"TYPE_NONE":         0,
	"TOP_UP":            1,
	"WITHDRAW":          2,
	"ADJUSTMENT_CREDIT": 3,
	"ADJUSTMENT_DEBIT":  4,
}

func (x DriverWalletOrder_Type) Enum() *DriverWalletOrder_Type {
	p := new(DriverWalletOrder_Type)
	*p = x
	return p
}

func (x DriverWalletOrder_Type) String() string {
	return proto.EnumName(DriverWalletOrder_Type_name, int32(x))
}

func (x *DriverWalletOrder_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_Type_value, data, "DriverWalletOrder_Type")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_Type(value)
	return nil
}

func (DriverWalletOrder_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 0}
}

//申请单状态
type DriverWalletOrder_Status int32

const (
	DriverWalletOrder_CREATED   DriverWalletOrder_Status = 0
	DriverWalletOrder_PAID      DriverWalletOrder_Status = 1
	DriverWalletOrder_DEDUCTED  DriverWalletOrder_Status = 2
	DriverWalletOrder_REJECTED  DriverWalletOrder_Status = 3
	DriverWalletOrder_COMPLETED DriverWalletOrder_Status = 4
	DriverWalletOrder_CANCELED  DriverWalletOrder_Status = 5
	DriverWalletOrder_APPROVED  DriverWalletOrder_Status = 21
	DriverWalletOrder_EXCEPTION DriverWalletOrder_Status = 31
)

var DriverWalletOrder_Status_name = map[int32]string{
	0:  "CREATED",
	1:  "PAID",
	2:  "DEDUCTED",
	3:  "REJECTED",
	4:  "COMPLETED",
	5:  "CANCELED",
	21: "APPROVED",
	31: "EXCEPTION",
}

var DriverWalletOrder_Status_value = map[string]int32{
	"CREATED":   0,
	"PAID":      1,
	"DEDUCTED":  2,
	"REJECTED":  3,
	"COMPLETED": 4,
	"CANCELED":  5,
	"APPROVED":  21,
	"EXCEPTION": 31,
}

func (x DriverWalletOrder_Status) Enum() *DriverWalletOrder_Status {
	p := new(DriverWalletOrder_Status)
	*p = x
	return p
}

func (x DriverWalletOrder_Status) String() string {
	return proto.EnumName(DriverWalletOrder_Status_name, int32(x))
}

func (x *DriverWalletOrder_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_Status_value, data, "DriverWalletOrder_Status")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_Status(value)
	return nil
}

func (DriverWalletOrder_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 1}
}

//理由类型：
type DriverWalletOrder_AdjustReason int32

const (
	DriverWalletOrder_REASON_OTHERS                  DriverWalletOrder_AdjustReason = 0
	DriverWalletOrder_REASON_TOP_UP                  DriverWalletOrder_AdjustReason = 1
	DriverWalletOrder_REASON_WITHDRAW                DriverWalletOrder_AdjustReason = 2
	DriverWalletOrder_REASON_DELIVERY_TO_DOOR_FEE    DriverWalletOrder_AdjustReason = 3
	DriverWalletOrder_REASON_COMPENSATION_FOR_DRIVER DriverWalletOrder_AdjustReason = 4
	DriverWalletOrder_REASON_REMEASURE_DISTANCE      DriverWalletOrder_AdjustReason = 5
	DriverWalletOrder_REASON_PARKING_FEE             DriverWalletOrder_AdjustReason = 6
	DriverWalletOrder_REASON_BONUS_SHIPPING_FEE      DriverWalletOrder_AdjustReason = 7
	DriverWalletOrder_REASON_BIG_ORDER_FEE           DriverWalletOrder_AdjustReason = 8
	DriverWalletOrder_REASON_DEDUCT_ORDER_VALUE      DriverWalletOrder_AdjustReason = 9
	DriverWalletOrder_REASON_DEDUCT_SHIPPING_FEE     DriverWalletOrder_AdjustReason = 10
	DriverWalletOrder_REASON_OTHER_BONUS             DriverWalletOrder_AdjustReason = 11
	DriverWalletOrder_REASON_SPX_LOST                DriverWalletOrder_AdjustReason = 20
	DriverWalletOrder_REASON_SPX_DAMAGE              DriverWalletOrder_AdjustReason = 21
)

var DriverWalletOrder_AdjustReason_name = map[int32]string{
	0:  "REASON_OTHERS",
	1:  "REASON_TOP_UP",
	2:  "REASON_WITHDRAW",
	3:  "REASON_DELIVERY_TO_DOOR_FEE",
	4:  "REASON_COMPENSATION_FOR_DRIVER",
	5:  "REASON_REMEASURE_DISTANCE",
	6:  "REASON_PARKING_FEE",
	7:  "REASON_BONUS_SHIPPING_FEE",
	8:  "REASON_BIG_ORDER_FEE",
	9:  "REASON_DEDUCT_ORDER_VALUE",
	10: "REASON_DEDUCT_SHIPPING_FEE",
	11: "REASON_OTHER_BONUS",
	20: "REASON_SPX_LOST",
	21: "REASON_SPX_DAMAGE",
}

var DriverWalletOrder_AdjustReason_value = map[string]int32{
	"REASON_OTHERS":                  0,
	"REASON_TOP_UP":                  1,
	"REASON_WITHDRAW":                2,
	"REASON_DELIVERY_TO_DOOR_FEE":    3,
	"REASON_COMPENSATION_FOR_DRIVER": 4,
	"REASON_REMEASURE_DISTANCE":      5,
	"REASON_PARKING_FEE":             6,
	"REASON_BONUS_SHIPPING_FEE":      7,
	"REASON_BIG_ORDER_FEE":           8,
	"REASON_DEDUCT_ORDER_VALUE":      9,
	"REASON_DEDUCT_SHIPPING_FEE":     10,
	"REASON_OTHER_BONUS":             11,
	"REASON_SPX_LOST":                20,
	"REASON_SPX_DAMAGE":              21,
}

func (x DriverWalletOrder_AdjustReason) Enum() *DriverWalletOrder_AdjustReason {
	p := new(DriverWalletOrder_AdjustReason)
	*p = x
	return p
}

func (x DriverWalletOrder_AdjustReason) String() string {
	return proto.EnumName(DriverWalletOrder_AdjustReason_name, int32(x))
}

func (x *DriverWalletOrder_AdjustReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_AdjustReason_value, data, "DriverWalletOrder_AdjustReason")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_AdjustReason(value)
	return nil
}

func (DriverWalletOrder_AdjustReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 2}
}

type DriverWalletOrder_CancelReason int32

const (
	DriverWalletOrder_OTHERS                          DriverWalletOrder_CancelReason = 0
	DriverWalletOrder_DRIVER_REQUEST_ADMIN_CANCEL     DriverWalletOrder_CancelReason = 1
	DriverWalletOrder_ANTI_FRAUD                      DriverWalletOrder_CancelReason = 2
	DriverWalletOrder_DRIVER_CANCEL                   DriverWalletOrder_CancelReason = 3
	DriverWalletOrder_PAYOUT_CHANNEL_FEEDBACK_FAILURE DriverWalletOrder_CancelReason = 4
	DriverWalletOrder_DRIVER_STATUS_ABNORMAL          DriverWalletOrder_CancelReason = 5
	DriverWalletOrder_MANUAL_AUDIT_DISAPPROVE         DriverWalletOrder_CancelReason = 6
)

var DriverWalletOrder_CancelReason_name = map[int32]string{
	0: "OTHERS",
	1: "DRIVER_REQUEST_ADMIN_CANCEL",
	2: "ANTI_FRAUD",
	3: "DRIVER_CANCEL",
	4: "PAYOUT_CHANNEL_FEEDBACK_FAILURE",
	5: "DRIVER_STATUS_ABNORMAL",
	6: "MANUAL_AUDIT_DISAPPROVE",
}

var DriverWalletOrder_CancelReason_value = map[string]int32{
	"OTHERS":                          0,
	"DRIVER_REQUEST_ADMIN_CANCEL":     1,
	"ANTI_FRAUD":                      2,
	"DRIVER_CANCEL":                   3,
	"PAYOUT_CHANNEL_FEEDBACK_FAILURE": 4,
	"DRIVER_STATUS_ABNORMAL":          5,
	"MANUAL_AUDIT_DISAPPROVE":         6,
}

func (x DriverWalletOrder_CancelReason) Enum() *DriverWalletOrder_CancelReason {
	p := new(DriverWalletOrder_CancelReason)
	*p = x
	return p
}

func (x DriverWalletOrder_CancelReason) String() string {
	return proto.EnumName(DriverWalletOrder_CancelReason_name, int32(x))
}

func (x *DriverWalletOrder_CancelReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_CancelReason_value, data, "DriverWalletOrder_CancelReason")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_CancelReason(value)
	return nil
}

func (DriverWalletOrder_CancelReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 3}
}

type DriverWalletOrder_CancelSource int32

const (
	DriverWalletOrder_CANCEL_OTHERS DriverWalletOrder_CancelSource = 0
	DriverWalletOrder_CANCEL_DRIVER DriverWalletOrder_CancelSource = 1
	DriverWalletOrder_CANCEL_ADMIN  DriverWalletOrder_CancelSource = 2
	DriverWalletOrder_CANCEL_SYSTEM DriverWalletOrder_CancelSource = 3
	DriverWalletOrder_CANCEL_SPM    DriverWalletOrder_CancelSource = 4
)

var DriverWalletOrder_CancelSource_name = map[int32]string{
	0: "CANCEL_OTHERS",
	1: "CANCEL_DRIVER",
	2: "CANCEL_ADMIN",
	3: "CANCEL_SYSTEM",
	4: "CANCEL_SPM",
}

var DriverWalletOrder_CancelSource_value = map[string]int32{
	"CANCEL_OTHERS": 0,
	"CANCEL_DRIVER": 1,
	"CANCEL_ADMIN":  2,
	"CANCEL_SYSTEM": 3,
	"CANCEL_SPM":    4,
}

func (x DriverWalletOrder_CancelSource) Enum() *DriverWalletOrder_CancelSource {
	p := new(DriverWalletOrder_CancelSource)
	*p = x
	return p
}

func (x DriverWalletOrder_CancelSource) String() string {
	return proto.EnumName(DriverWalletOrder_CancelSource_name, int32(x))
}

func (x *DriverWalletOrder_CancelSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_CancelSource_value, data, "DriverWalletOrder_CancelSource")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_CancelSource(value)
	return nil
}

func (DriverWalletOrder_CancelSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 4}
}

type DriverWalletOrder_AuditResult int32

const (
	DriverWalletOrder_AUDIT_RESULT_NONE DriverWalletOrder_AuditResult = 0
	DriverWalletOrder_APPROVE           DriverWalletOrder_AuditResult = 1
	DriverWalletOrder_DISAPPROVE        DriverWalletOrder_AuditResult = 2
)

var DriverWalletOrder_AuditResult_name = map[int32]string{
	0: "AUDIT_RESULT_NONE",
	1: "APPROVE",
	2: "DISAPPROVE",
}

var DriverWalletOrder_AuditResult_value = map[string]int32{
	"AUDIT_RESULT_NONE": 0,
	"APPROVE":           1,
	"DISAPPROVE":        2,
}

func (x DriverWalletOrder_AuditResult) Enum() *DriverWalletOrder_AuditResult {
	p := new(DriverWalletOrder_AuditResult)
	*p = x
	return p
}

func (x DriverWalletOrder_AuditResult) String() string {
	return proto.EnumName(DriverWalletOrder_AuditResult_name, int32(x))
}

func (x *DriverWalletOrder_AuditResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletOrder_AuditResult_value, data, "DriverWalletOrder_AuditResult")
	if err != nil {
		return err
	}
	*x = DriverWalletOrder_AuditResult(value)
	return nil
}

func (DriverWalletOrder_AuditResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40, 5}
}

type StoreSettlement_FlagBit int32

const (
	StoreSettlement_IS_USE_MERCHANT_WALLET_ORIGINAL StoreSettlement_FlagBit = 0
	StoreSettlement_IS_USE_MERCHANT_WALLET          StoreSettlement_FlagBit = 1
	StoreSettlement_IS_MERCHANT_DELIVERY            StoreSettlement_FlagBit = 2
)

var StoreSettlement_FlagBit_name = map[int32]string{
	0: "IS_USE_MERCHANT_WALLET_ORIGINAL",
	1: "IS_USE_MERCHANT_WALLET",
	2: "IS_MERCHANT_DELIVERY",
}

var StoreSettlement_FlagBit_value = map[string]int32{
	"IS_USE_MERCHANT_WALLET_ORIGINAL": 0,
	"IS_USE_MERCHANT_WALLET":          1,
	"IS_MERCHANT_DELIVERY":            2,
}

func (x StoreSettlement_FlagBit) Enum() *StoreSettlement_FlagBit {
	p := new(StoreSettlement_FlagBit)
	*p = x
	return p
}

func (x StoreSettlement_FlagBit) String() string {
	return proto.EnumName(StoreSettlement_FlagBit_name, int32(x))
}

func (x *StoreSettlement_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreSettlement_FlagBit_value, data, "StoreSettlement_FlagBit")
	if err != nil {
		return err
	}
	*x = StoreSettlement_FlagBit(value)
	return nil
}

func (StoreSettlement_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{41, 0}
}

type ReturnOrder_RefundType int32

const (
	ReturnOrder_REFUND_NONE ReturnOrder_RefundType = 1
	ReturnOrder_REFUND_FULL ReturnOrder_RefundType = 2
	ReturnOrder_REFUND_PART ReturnOrder_RefundType = 3
)

var ReturnOrder_RefundType_name = map[int32]string{
	1: "REFUND_NONE",
	2: "REFUND_FULL",
	3: "REFUND_PART",
}

var ReturnOrder_RefundType_value = map[string]int32{
	"REFUND_NONE": 1,
	"REFUND_FULL": 2,
	"REFUND_PART": 3,
}

func (x ReturnOrder_RefundType) Enum() *ReturnOrder_RefundType {
	p := new(ReturnOrder_RefundType)
	*p = x
	return p
}

func (x ReturnOrder_RefundType) String() string {
	return proto.EnumName(ReturnOrder_RefundType_name, int32(x))
}

func (x *ReturnOrder_RefundType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturnOrder_RefundType_value, data, "ReturnOrder_RefundType")
	if err != nil {
		return err
	}
	*x = ReturnOrder_RefundType(value)
	return nil
}

func (ReturnOrder_RefundType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44, 0}
}

type ReturnOrder_ReturnStatus int32

const (
	ReturnOrder_RETURN_CREATED   ReturnOrder_ReturnStatus = 1
	ReturnOrder_RETURN_APPROVED  ReturnOrder_ReturnStatus = 2
	ReturnOrder_RETURN_COMPLETED ReturnOrder_ReturnStatus = 3
	ReturnOrder_RETURN_CANCELED  ReturnOrder_ReturnStatus = 4
)

var ReturnOrder_ReturnStatus_name = map[int32]string{
	1: "RETURN_CREATED",
	2: "RETURN_APPROVED",
	3: "RETURN_COMPLETED",
	4: "RETURN_CANCELED",
}

var ReturnOrder_ReturnStatus_value = map[string]int32{
	"RETURN_CREATED":   1,
	"RETURN_APPROVED":  2,
	"RETURN_COMPLETED": 3,
	"RETURN_CANCELED":  4,
}

func (x ReturnOrder_ReturnStatus) Enum() *ReturnOrder_ReturnStatus {
	p := new(ReturnOrder_ReturnStatus)
	*p = x
	return p
}

func (x ReturnOrder_ReturnStatus) String() string {
	return proto.EnumName(ReturnOrder_ReturnStatus_name, int32(x))
}

func (x *ReturnOrder_ReturnStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturnOrder_ReturnStatus_value, data, "ReturnOrder_ReturnStatus")
	if err != nil {
		return err
	}
	*x = ReturnOrder_ReturnStatus(value)
	return nil
}

func (ReturnOrder_ReturnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44, 1}
}

type ReturnOrder_ReturnType int32

const (
	ReturnOrder_RETURN_TYPE_ORDER_CANCELLED ReturnOrder_ReturnType = 1
	ReturnOrder_RETURN_TYPE_AFTER_SALES     ReturnOrder_ReturnType = 2
	ReturnOrder_RETURN_TYPE_REWRITE         ReturnOrder_ReturnType = 3
)

var ReturnOrder_ReturnType_name = map[int32]string{
	1: "RETURN_TYPE_ORDER_CANCELLED",
	2: "RETURN_TYPE_AFTER_SALES",
	3: "RETURN_TYPE_REWRITE",
}

var ReturnOrder_ReturnType_value = map[string]int32{
	"RETURN_TYPE_ORDER_CANCELLED": 1,
	"RETURN_TYPE_AFTER_SALES":     2,
	"RETURN_TYPE_REWRITE":         3,
}

func (x ReturnOrder_ReturnType) Enum() *ReturnOrder_ReturnType {
	p := new(ReturnOrder_ReturnType)
	*p = x
	return p
}

func (x ReturnOrder_ReturnType) String() string {
	return proto.EnumName(ReturnOrder_ReturnType_name, int32(x))
}

func (x *ReturnOrder_ReturnType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturnOrder_ReturnType_value, data, "ReturnOrder_ReturnType")
	if err != nil {
		return err
	}
	*x = ReturnOrder_ReturnType(value)
	return nil
}

func (ReturnOrder_ReturnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44, 2}
}

// 5.2.2 售后单发起途径：1.取消订单 2. admin发起
// https://confluence.shopee.io/display/SPFOODY/5.3.2.7+Order+System
// https://confluence.shopee.io/pages/viewpage.action?pageId=284758345
type ReturnOrder_ReturnReason int32

const (
	ReturnOrder_RESERVED ReturnOrder_ReturnReason = 0
	//1~50 buyer
	ReturnOrder_BUYER_NOT_RECEIVE             ReturnOrder_ReturnReason = 1
	ReturnOrder_BUYER_PLACED_WRONG_ORDER      ReturnOrder_ReturnReason = 2
	ReturnOrder_BUYER_CHANGE_PAYMENT_METHOD   ReturnOrder_ReturnReason = 3
	ReturnOrder_BUYER_HAS_CHANGED_PLAN        ReturnOrder_ReturnReason = 4
	ReturnOrder_BUYER_WANT_CANCEL             ReturnOrder_ReturnReason = 5
	ReturnOrder_BUYER_WANT_CANCEL_DRIVER_SAID ReturnOrder_ReturnReason = 6
	ReturnOrder_BUYER_INPUT_WRONG_ADDRESS     ReturnOrder_ReturnReason = 7
	ReturnOrder_BUYER_FORGET_USE_VOUCHER      ReturnOrder_ReturnReason = 8
	ReturnOrder_BUYER_CHANGE_ORDER_PRICE      ReturnOrder_ReturnReason = 9
	ReturnOrder_BUYER_LOST_CONTACT            ReturnOrder_ReturnReason = 10
	ReturnOrder_BUYER_FAKE_ORDER              ReturnOrder_ReturnReason = 11
	ReturnOrder_BUYER_DRIVER_ASKED            ReturnOrder_ReturnReason = 12
	ReturnOrder_BUYER_DRIVER_LOST_CONTACT     ReturnOrder_ReturnReason = 13
	ReturnOrder_BUYER_DRIVER_NO_ENOUGH_MONEY  ReturnOrder_ReturnReason = 14
	ReturnOrder_BUYER_DRIVER_TOO_FAR          ReturnOrder_ReturnReason = 15
	ReturnOrder_BUYER_WAITED_TOO_LONG         ReturnOrder_ReturnReason = 16
	ReturnOrder_BUYER_ITEMS_UNAVAILABLE       ReturnOrder_ReturnReason = 17
	ReturnOrder_BUYER_PRICE_CHANGED           ReturnOrder_ReturnReason = 18
	ReturnOrder_BUYER_RESTAURANT_CLOSED       ReturnOrder_ReturnReason = 19
	ReturnOrder_BUYER_OTHERS                  ReturnOrder_ReturnReason = 50
	//51~100 merchant
	ReturnOrder_MERCHANT_OUT_OF_STOCK     ReturnOrder_ReturnReason = 51
	ReturnOrder_MERCHANT_STORE_WAS_BUSY   ReturnOrder_ReturnReason = 52
	ReturnOrder_MERCHANT_STORE_WAS_CLOSED ReturnOrder_ReturnReason = 53
	ReturnOrder_MERCHANT_MISSED_ORDER     ReturnOrder_ReturnReason = 54
	ReturnOrder_MERCHANT_REJECT_ORDER     ReturnOrder_ReturnReason = 55
	ReturnOrder_MERCHANT_OTHERS           ReturnOrder_ReturnReason = 100
	//101~150 driver
	ReturnOrder_DRIVER_LATE_DELIVERY                     ReturnOrder_ReturnReason = 101
	ReturnOrder_DRIVER_CANNOT_DELIVERY                   ReturnOrder_ReturnReason = 102
	ReturnOrder_DRIVER_FIND_NO_RESTAURANT                ReturnOrder_ReturnReason = 103
	ReturnOrder_DRIVER_FIND_NO_BUYER                     ReturnOrder_ReturnReason = 104
	ReturnOrder_DRIVER_LOW_DELIVERY_QUALITY              ReturnOrder_ReturnReason = 105
	ReturnOrder_DRIVER_NO_ENOUGH_MONEY                   ReturnOrder_ReturnReason = 106
	ReturnOrder_DRIVER_ACCIDENTALLY_TAKE_ORDER           ReturnOrder_ReturnReason = 107
	ReturnOrder_DRIVER_BROKEN_VEHICLE                    ReturnOrder_ReturnReason = 108
	ReturnOrder_DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED ReturnOrder_ReturnReason = 109
	ReturnOrder_DRIVER_ITEMS_UNAVAILABLE                 ReturnOrder_ReturnReason = 110
	ReturnOrder_DRIVER_BUYER_ASKED                       ReturnOrder_ReturnReason = 111
	ReturnOrder_DRIVER_RESTAURANT_CLOSED                 ReturnOrder_ReturnReason = 112
	ReturnOrder_DRIVER_RESTAURANT_REJECTED               ReturnOrder_ReturnReason = 113
	ReturnOrder_DRIVER_FAKE_ORDER                        ReturnOrder_ReturnReason = 114
	ReturnOrder_DRIVER_OTHERS                            ReturnOrder_ReturnReason = 150
	//151~200 platform
	ReturnOrder_PLATFORM_CANNOT_MATCH_DRIVER       ReturnOrder_ReturnReason = 151
	ReturnOrder_PLATFORM_PAYMENT_FAILED            ReturnOrder_ReturnReason = 152
	ReturnOrder_PLATFORM_ORDER_EXPIRED             ReturnOrder_ReturnReason = 153
	ReturnOrder_PLATFORM_ORDER_EXPIRED_UNCONFIRMED ReturnOrder_ReturnReason = 154
	// 新增的order cancel reason 需要在return reason 里面也同步增加
	ReturnOrder_PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED ReturnOrder_ReturnReason = 156
	ReturnOrder_CUSTOMER_NOT_RECEIVE_FOOD                 ReturnOrder_ReturnReason = 10001
	ReturnOrder_CUSTOMER_PLACED_WRONG_ORDER               ReturnOrder_ReturnReason = 10002
	ReturnOrder_CUSTOMER_CHANGE_PAYMENT_METHOD            ReturnOrder_ReturnReason = 10003
	ReturnOrder_CUSTOMER_HAS_CHANGED_PLAN                 ReturnOrder_ReturnReason = 10004
	ReturnOrder_CUSTOMER_WANT_CANCEL                      ReturnOrder_ReturnReason = 10005
	ReturnOrder_CUSTOMER_WANT_CANCEL_DRIVER_SAID          ReturnOrder_ReturnReason = 10006
	ReturnOrder_CUSTOMER_INPUT_WRONG_ADDRESS              ReturnOrder_ReturnReason = 10007
	ReturnOrder_CUSTOMER_FORGET_USE_VOUCHER               ReturnOrder_ReturnReason = 10008
	ReturnOrder_ORDER_PRICE_CHANGED                       ReturnOrder_ReturnReason = 10009
	ReturnOrder_CUSTOMER_LOST_CONTACT                     ReturnOrder_ReturnReason = 10010
	ReturnOrder_FAKE_ORDER                                ReturnOrder_ReturnReason = 10011
	ReturnOrder_DRIVER_ASK_TO_CANCEL                      ReturnOrder_ReturnReason = 10012
	ReturnOrder_DRIVER_LOST_CONTACT                       ReturnOrder_ReturnReason = 10013
	ReturnOrder_DRIVER_NO_HAVE_ENOUGH_MONEY               ReturnOrder_ReturnReason = 10014
	ReturnOrder_DRIVER_TOO_FAR                            ReturnOrder_ReturnReason = 10015
	ReturnOrder_CUSTOMER_WAITED_TOO_LONG                  ReturnOrder_ReturnReason = 10016
	ReturnOrder_ITEMS_UNAVAILABLE                         ReturnOrder_ReturnReason = 10017
	ReturnOrder_PRICE_CHANGED                             ReturnOrder_ReturnReason = 10018
	ReturnOrder_RESTAURANT_IS_CLOSED                      ReturnOrder_ReturnReason = 10019
	ReturnOrder_CUSTOMER_WANTS_TO_EDIT_ORDER              ReturnOrder_ReturnReason = 10020
	ReturnOrder_CUSTOMER_REGRET_AFTER_SUBMIT              ReturnOrder_ReturnReason = 10021
	ReturnOrder_OTHERS_REASON                             ReturnOrder_ReturnReason = 10050
	ReturnOrder_RESTAURANT_WAS_BUSY                       ReturnOrder_ReturnReason = 10052
	ReturnOrder_RESTAURANT_MISSED_ORDER                   ReturnOrder_ReturnReason = 10054
	ReturnOrder_DRIVER_IS_UNRESPONSIVE                    ReturnOrder_ReturnReason = 10057
	ReturnOrder_DRIVER_ASKED_TO_CANCEL                    ReturnOrder_ReturnReason = 10058
	ReturnOrder_LATE_DELIVERY                             ReturnOrder_ReturnReason = 10101
	ReturnOrder_DRIVER_CANNOT_CONTINUE_DELIVERY           ReturnOrder_ReturnReason = 10102
	ReturnOrder_DRIVER_CANNOT_FIND_RESTAURANT             ReturnOrder_ReturnReason = 10103
	ReturnOrder_DRIVER_CANNOT_CONTACT_BUYER               ReturnOrder_ReturnReason = 10104
	ReturnOrder_LOW_DELIVERY_QUALITY                      ReturnOrder_ReturnReason = 10105
	ReturnOrder_DRIVER_ACCIDENTALLY_TOOK_ORDER            ReturnOrder_ReturnReason = 10107
	ReturnOrder_DRIVER_VEHICLE_BROKEN                     ReturnOrder_ReturnReason = 10108
	ReturnOrder_DRIVER_REPORT_CUSTOMER_ASKED_CANCEL       ReturnOrder_ReturnReason = 10111
	ReturnOrder_RESTAURANT_REJECT_ORDER                   ReturnOrder_ReturnReason = 10113
	ReturnOrder_DRIVER_REPORT_FAKE_ORDER                  ReturnOrder_ReturnReason = 10114
	ReturnOrder_DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT    ReturnOrder_ReturnReason = 10115
	ReturnOrder_DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER       ReturnOrder_ReturnReason = 10116
	ReturnOrder_DRIVER_LONG_QUEUE_IN_THE_RESTAURANT       ReturnOrder_ReturnReason = 10117
	ReturnOrder_DRIVER_BAD_WEATHER                        ReturnOrder_ReturnReason = 10118
	ReturnOrder_CANNOT_MATCH_DRIVER                       ReturnOrder_ReturnReason = 10151
	ReturnOrder_PAYMENT_FAILURE                           ReturnOrder_ReturnReason = 10152
	ReturnOrder_PAYMENT_TIMEOUT                           ReturnOrder_ReturnReason = 10153
	ReturnOrder_ORDER_EXPIRED_UNCONFIRMED                 ReturnOrder_ReturnReason = 10154
	ReturnOrder_LOW_COMPLETED_RATE_PREDICATED             ReturnOrder_ReturnReason = 10155
	ReturnOrder_SYSTEM_IS_NOT_RESPONDING                  ReturnOrder_ReturnReason = 10160
	ReturnOrder_MERCHANT_IS_UNRESPONSIVE                  ReturnOrder_ReturnReason = 10161
	ReturnOrder_DRIVER_DO_NOT_PICK_FOOD                   ReturnOrder_ReturnReason = 10162
	ReturnOrder_RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD  ReturnOrder_ReturnReason = 10163
	ReturnOrder_FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP     ReturnOrder_ReturnReason = 10164
	ReturnOrder_ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE   ReturnOrder_ReturnReason = 10165
	ReturnOrder_CUSTOMER_ADDRESS_NOT_FOUND                ReturnOrder_ReturnReason = 10166
	ReturnOrder_CUSTOMER_DO_NOT_ACCEPT_THE_ORDER          ReturnOrder_ReturnReason = 10167
	ReturnOrder_IMPROPER_FOOD_HANDING_BY_DRIVER           ReturnOrder_ReturnReason = 10168
	// 301~350 售后原因：Buyer 相关
	ReturnOrder_BUYER_PERSONAL_OPINION ReturnOrder_ReturnReason = 301
	ReturnOrder_BUYER_WRONG_ORDER      ReturnOrder_ReturnReason = 302
	// 351~400 售后原因：Driver 相关
	ReturnOrder_DRIVER_UNDELIVERED                ReturnOrder_ReturnReason = 351
	ReturnOrder_DRIVER_UNCONTACTABLE              ReturnOrder_ReturnReason = 352
	ReturnOrder_DRIVER_IMPROPER_FOOD_HANDLING     ReturnOrder_ReturnReason = 353
	ReturnOrder_DRIVER_FOOD_SEAL_BROKEN           ReturnOrder_ReturnReason = 354
	ReturnOrder_DRIVER_ACCIDENT                   ReturnOrder_ReturnReason = 355
	ReturnOrder_DRIVER_MARKUP_WITHOUT_INFORMATION ReturnOrder_ReturnReason = 356
	ReturnOrder_DRIVER_WRONG_AMOUNT               ReturnOrder_ReturnReason = 357
	ReturnOrder_DRIVER_TAKES_TOO_LONG             ReturnOrder_ReturnReason = 358
	ReturnOrder_DRIVER_BUYER_PAID_TWICE           ReturnOrder_ReturnReason = 359
	ReturnOrder_DRIVER_NO_ENOUGH_CHANGE           ReturnOrder_ReturnReason = 360
	ReturnOrder_DRIVER_NO_PICKUP                  ReturnOrder_ReturnReason = 361
	ReturnOrder_DRIVER_DIFFERENT                  ReturnOrder_ReturnReason = 362
	// 401~450 售后原因：Merchant 相关
	ReturnOrder_MERCHANT_FOOD_QUALITY_ISSUE       ReturnOrder_ReturnReason = 401
	ReturnOrder_MERCHANT_NO_FOLLOWING_INSTRUCTION ReturnOrder_ReturnReason = 402
	ReturnOrder_MERCHANT_FOOD_POISONING           ReturnOrder_ReturnReason = 403
	ReturnOrder_MERCHANT_ITEMS_INCORRECT          ReturnOrder_ReturnReason = 404
	ReturnOrder_MERCHANT_FOOD_ALLERGY             ReturnOrder_ReturnReason = 405
	// 451~500 售后原因：Platform 相关
	ReturnOrder_PLATFORM_APP_CRASH            ReturnOrder_ReturnReason = 451
	ReturnOrder_PLATFORM_SUSPICIOUS_COD_ORDER ReturnOrder_ReturnReason = 452
	ReturnOrder_PLATFORM_HARD_COMPLAINT       ReturnOrder_ReturnReason = 453
	ReturnOrder_PLATFORM_ORDER_PRICE_CHANGED  ReturnOrder_ReturnReason = 454
)

var ReturnOrder_ReturnReason_name = map[int32]string{
	0:     "RESERVED",
	1:     "BUYER_NOT_RECEIVE",
	2:     "BUYER_PLACED_WRONG_ORDER",
	3:     "BUYER_CHANGE_PAYMENT_METHOD",
	4:     "BUYER_HAS_CHANGED_PLAN",
	5:     "BUYER_WANT_CANCEL",
	6:     "BUYER_WANT_CANCEL_DRIVER_SAID",
	7:     "BUYER_INPUT_WRONG_ADDRESS",
	8:     "BUYER_FORGET_USE_VOUCHER",
	9:     "BUYER_CHANGE_ORDER_PRICE",
	10:    "BUYER_LOST_CONTACT",
	11:    "BUYER_FAKE_ORDER",
	12:    "BUYER_DRIVER_ASKED",
	13:    "BUYER_DRIVER_LOST_CONTACT",
	14:    "BUYER_DRIVER_NO_ENOUGH_MONEY",
	15:    "BUYER_DRIVER_TOO_FAR",
	16:    "BUYER_WAITED_TOO_LONG",
	17:    "BUYER_ITEMS_UNAVAILABLE",
	18:    "BUYER_PRICE_CHANGED",
	19:    "BUYER_RESTAURANT_CLOSED",
	50:    "BUYER_OTHERS",
	51:    "MERCHANT_OUT_OF_STOCK",
	52:    "MERCHANT_STORE_WAS_BUSY",
	53:    "MERCHANT_STORE_WAS_CLOSED",
	54:    "MERCHANT_MISSED_ORDER",
	55:    "MERCHANT_REJECT_ORDER",
	100:   "MERCHANT_OTHERS",
	101:   "DRIVER_LATE_DELIVERY",
	102:   "DRIVER_CANNOT_DELIVERY",
	103:   "DRIVER_FIND_NO_RESTAURANT",
	104:   "DRIVER_FIND_NO_BUYER",
	105:   "DRIVER_LOW_DELIVERY_QUALITY",
	106:   "DRIVER_NO_ENOUGH_MONEY",
	107:   "DRIVER_ACCIDENTALLY_TAKE_ORDER",
	108:   "DRIVER_BROKEN_VEHICLE",
	109:   "DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED",
	110:   "DRIVER_ITEMS_UNAVAILABLE",
	111:   "DRIVER_BUYER_ASKED",
	112:   "DRIVER_RESTAURANT_CLOSED",
	113:   "DRIVER_RESTAURANT_REJECTED",
	114:   "DRIVER_FAKE_ORDER",
	150:   "DRIVER_OTHERS",
	151:   "PLATFORM_CANNOT_MATCH_DRIVER",
	152:   "PLATFORM_PAYMENT_FAILED",
	153:   "PLATFORM_ORDER_EXPIRED",
	154:   "PLATFORM_ORDER_EXPIRED_UNCONFIRMED",
	156:   "PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED",
	10001: "CUSTOMER_NOT_RECEIVE_FOOD",
	10002: "CUSTOMER_PLACED_WRONG_ORDER",
	10003: "CUSTOMER_CHANGE_PAYMENT_METHOD",
	10004: "CUSTOMER_HAS_CHANGED_PLAN",
	10005: "CUSTOMER_WANT_CANCEL",
	10006: "CUSTOMER_WANT_CANCEL_DRIVER_SAID",
	10007: "CUSTOMER_INPUT_WRONG_ADDRESS",
	10008: "CUSTOMER_FORGET_USE_VOUCHER",
	10009: "ORDER_PRICE_CHANGED",
	10010: "CUSTOMER_LOST_CONTACT",
	10011: "FAKE_ORDER",
	10012: "DRIVER_ASK_TO_CANCEL",
	10013: "DRIVER_LOST_CONTACT",
	10014: "DRIVER_NO_HAVE_ENOUGH_MONEY",
	10015: "DRIVER_TOO_FAR",
	10016: "CUSTOMER_WAITED_TOO_LONG",
	10017: "ITEMS_UNAVAILABLE",
	10018: "PRICE_CHANGED",
	10019: "RESTAURANT_IS_CLOSED",
	10020: "CUSTOMER_WANTS_TO_EDIT_ORDER",
	10021: "CUSTOMER_REGRET_AFTER_SUBMIT",
	10050: "OTHERS_REASON",
	10052: "RESTAURANT_WAS_BUSY",
	10054: "RESTAURANT_MISSED_ORDER",
	10057: "DRIVER_IS_UNRESPONSIVE",
	10058: "DRIVER_ASKED_TO_CANCEL",
	10101: "LATE_DELIVERY",
	10102: "DRIVER_CANNOT_CONTINUE_DELIVERY",
	10103: "DRIVER_CANNOT_FIND_RESTAURANT",
	10104: "DRIVER_CANNOT_CONTACT_BUYER",
	10105: "LOW_DELIVERY_QUALITY",
	10107: "DRIVER_ACCIDENTALLY_TOOK_ORDER",
	10108: "DRIVER_VEHICLE_BROKEN",
	10111: "DRIVER_REPORT_CUSTOMER_ASKED_CANCEL",
	10113: "RESTAURANT_REJECT_ORDER",
	10114: "DRIVER_REPORT_FAKE_ORDER",
	10115: "DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT",
	10116: "DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER",
	10117: "DRIVER_LONG_QUEUE_IN_THE_RESTAURANT",
	10118: "DRIVER_BAD_WEATHER",
	10151: "CANNOT_MATCH_DRIVER",
	10152: "PAYMENT_FAILURE",
	10153: "PAYMENT_TIMEOUT",
	10154: "ORDER_EXPIRED_UNCONFIRMED",
	10155: "LOW_COMPLETED_RATE_PREDICATED",
	10160: "SYSTEM_IS_NOT_RESPONDING",
	10161: "MERCHANT_IS_UNRESPONSIVE",
	10162: "DRIVER_DO_NOT_PICK_FOOD",
	10163: "RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD",
	10164: "FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP",
	10165: "ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE",
	10166: "CUSTOMER_ADDRESS_NOT_FOUND",
	10167: "CUSTOMER_DO_NOT_ACCEPT_THE_ORDER",
	10168: "IMPROPER_FOOD_HANDING_BY_DRIVER",
	301:   "BUYER_PERSONAL_OPINION",
	302:   "BUYER_WRONG_ORDER",
	351:   "DRIVER_UNDELIVERED",
	352:   "DRIVER_UNCONTACTABLE",
	353:   "DRIVER_IMPROPER_FOOD_HANDLING",
	354:   "DRIVER_FOOD_SEAL_BROKEN",
	355:   "DRIVER_ACCIDENT",
	356:   "DRIVER_MARKUP_WITHOUT_INFORMATION",
	357:   "DRIVER_WRONG_AMOUNT",
	358:   "DRIVER_TAKES_TOO_LONG",
	359:   "DRIVER_BUYER_PAID_TWICE",
	360:   "DRIVER_NO_ENOUGH_CHANGE",
	361:   "DRIVER_NO_PICKUP",
	362:   "DRIVER_DIFFERENT",
	401:   "MERCHANT_FOOD_QUALITY_ISSUE",
	402:   "MERCHANT_NO_FOLLOWING_INSTRUCTION",
	403:   "MERCHANT_FOOD_POISONING",
	404:   "MERCHANT_ITEMS_INCORRECT",
	405:   "MERCHANT_FOOD_ALLERGY",
	451:   "PLATFORM_APP_CRASH",
	452:   "PLATFORM_SUSPICIOUS_COD_ORDER",
	453:   "PLATFORM_HARD_COMPLAINT",
	454:   "PLATFORM_ORDER_PRICE_CHANGED",
}

var ReturnOrder_ReturnReason_value = map[string]int32{
	"RESERVED":                                  0,
	"BUYER_NOT_RECEIVE":                         1,
	"BUYER_PLACED_WRONG_ORDER":                  2,
	"BUYER_CHANGE_PAYMENT_METHOD":               3,
	"BUYER_HAS_CHANGED_PLAN":                    4,
	"BUYER_WANT_CANCEL":                         5,
	"BUYER_WANT_CANCEL_DRIVER_SAID":             6,
	"BUYER_INPUT_WRONG_ADDRESS":                 7,
	"BUYER_FORGET_USE_VOUCHER":                  8,
	"BUYER_CHANGE_ORDER_PRICE":                  9,
	"BUYER_LOST_CONTACT":                        10,
	"BUYER_FAKE_ORDER":                          11,
	"BUYER_DRIVER_ASKED":                        12,
	"BUYER_DRIVER_LOST_CONTACT":                 13,
	"BUYER_DRIVER_NO_ENOUGH_MONEY":              14,
	"BUYER_DRIVER_TOO_FAR":                      15,
	"BUYER_WAITED_TOO_LONG":                     16,
	"BUYER_ITEMS_UNAVAILABLE":                   17,
	"BUYER_PRICE_CHANGED":                       18,
	"BUYER_RESTAURANT_CLOSED":                   19,
	"BUYER_OTHERS":                              50,
	"MERCHANT_OUT_OF_STOCK":                     51,
	"MERCHANT_STORE_WAS_BUSY":                   52,
	"MERCHANT_STORE_WAS_CLOSED":                 53,
	"MERCHANT_MISSED_ORDER":                     54,
	"MERCHANT_REJECT_ORDER":                     55,
	"MERCHANT_OTHERS":                           100,
	"DRIVER_LATE_DELIVERY":                      101,
	"DRIVER_CANNOT_DELIVERY":                    102,
	"DRIVER_FIND_NO_RESTAURANT":                 103,
	"DRIVER_FIND_NO_BUYER":                      104,
	"DRIVER_LOW_DELIVERY_QUALITY":               105,
	"DRIVER_NO_ENOUGH_MONEY":                    106,
	"DRIVER_ACCIDENTALLY_TAKE_ORDER":            107,
	"DRIVER_BROKEN_VEHICLE":                     108,
	"DRIVER_BUYER_ASKED_BECAUSE_PRICE_CHANGED":  109,
	"DRIVER_ITEMS_UNAVAILABLE":                  110,
	"DRIVER_BUYER_ASKED":                        111,
	"DRIVER_RESTAURANT_CLOSED":                  112,
	"DRIVER_RESTAURANT_REJECTED":                113,
	"DRIVER_FAKE_ORDER":                         114,
	"DRIVER_OTHERS":                             150,
	"PLATFORM_CANNOT_MATCH_DRIVER":              151,
	"PLATFORM_PAYMENT_FAILED":                   152,
	"PLATFORM_ORDER_EXPIRED":                    153,
	"PLATFORM_ORDER_EXPIRED_UNCONFIRMED":        154,
	"PLATFORM_ADMIN_CLOSED_AND_ALGO_REASSIGNED": 156,
	"CUSTOMER_NOT_RECEIVE_FOOD":                 10001,
	"CUSTOMER_PLACED_WRONG_ORDER":               10002,
	"CUSTOMER_CHANGE_PAYMENT_METHOD":            10003,
	"CUSTOMER_HAS_CHANGED_PLAN":                 10004,
	"CUSTOMER_WANT_CANCEL":                      10005,
	"CUSTOMER_WANT_CANCEL_DRIVER_SAID":          10006,
	"CUSTOMER_INPUT_WRONG_ADDRESS":              10007,
	"CUSTOMER_FORGET_USE_VOUCHER":               10008,
	"ORDER_PRICE_CHANGED":                       10009,
	"CUSTOMER_LOST_CONTACT":                     10010,
	"FAKE_ORDER":                                10011,
	"DRIVER_ASK_TO_CANCEL":                      10012,
	"DRIVER_LOST_CONTACT":                       10013,
	"DRIVER_NO_HAVE_ENOUGH_MONEY":               10014,
	"DRIVER_TOO_FAR":                            10015,
	"CUSTOMER_WAITED_TOO_LONG":                  10016,
	"ITEMS_UNAVAILABLE":                         10017,
	"PRICE_CHANGED":                             10018,
	"RESTAURANT_IS_CLOSED":                      10019,
	"CUSTOMER_WANTS_TO_EDIT_ORDER":              10020,
	"CUSTOMER_REGRET_AFTER_SUBMIT":              10021,
	"OTHERS_REASON":                             10050,
	"RESTAURANT_WAS_BUSY":                       10052,
	"RESTAURANT_MISSED_ORDER":                   10054,
	"DRIVER_IS_UNRESPONSIVE":                    10057,
	"DRIVER_ASKED_TO_CANCEL":                    10058,
	"LATE_DELIVERY":                             10101,
	"DRIVER_CANNOT_CONTINUE_DELIVERY":           10102,
	"DRIVER_CANNOT_FIND_RESTAURANT":             10103,
	"DRIVER_CANNOT_CONTACT_BUYER":               10104,
	"LOW_DELIVERY_QUALITY":                      10105,
	"DRIVER_ACCIDENTALLY_TOOK_ORDER":            10107,
	"DRIVER_VEHICLE_BROKEN":                     10108,
	"DRIVER_REPORT_CUSTOMER_ASKED_CANCEL":       10111,
	"RESTAURANT_REJECT_ORDER":                   10113,
	"DRIVER_REPORT_FAKE_ORDER":                  10114,
	"DRIVER_MOTOR_BROKEN_ON_WAY_TO_MERCHANT":    10115,
	"DRIVER_MOTOR_BROKEN_ON_WAY_TO_BUYER":       10116,
	"DRIVER_LONG_QUEUE_IN_THE_RESTAURANT":       10117,
	"DRIVER_BAD_WEATHER":                        10118,
	"CANNOT_MATCH_DRIVER":                       10151,
	"PAYMENT_FAILURE":                           10152,
	"PAYMENT_TIMEOUT":                           10153,
	"ORDER_EXPIRED_UNCONFIRMED":                 10154,
	"LOW_COMPLETED_RATE_PREDICATED":             10155,
	"SYSTEM_IS_NOT_RESPONDING":                  10160,
	"MERCHANT_IS_UNRESPONSIVE":                  10161,
	"DRIVER_DO_NOT_PICK_FOOD":                   10162,
	"RESTAURANT_NOT_OPERATION_WITH_SHOPEEFOOD":  10163,
	"FOOD_IS_NOT_READY_WHEN_DRIVER_PICK_UP":     10164,
	"ACTUAL_PRICE_NOT_THE_SAME_AS_LIST_PRICE":   10165,
	"CUSTOMER_ADDRESS_NOT_FOUND":                10166,
	"CUSTOMER_DO_NOT_ACCEPT_THE_ORDER":          10167,
	"IMPROPER_FOOD_HANDING_BY_DRIVER":           10168,
	"BUYER_PERSONAL_OPINION":                    301,
	"BUYER_WRONG_ORDER":                         302,
	"DRIVER_UNDELIVERED":                        351,
	"DRIVER_UNCONTACTABLE":                      352,
	"DRIVER_IMPROPER_FOOD_HANDLING":             353,
	"DRIVER_FOOD_SEAL_BROKEN":                   354,
	"DRIVER_ACCIDENT":                           355,
	"DRIVER_MARKUP_WITHOUT_INFORMATION":         356,
	"DRIVER_WRONG_AMOUNT":                       357,
	"DRIVER_TAKES_TOO_LONG":                     358,
	"DRIVER_BUYER_PAID_TWICE":                   359,
	"DRIVER_NO_ENOUGH_CHANGE":                   360,
	"DRIVER_NO_PICKUP":                          361,
	"DRIVER_DIFFERENT":                          362,
	"MERCHANT_FOOD_QUALITY_ISSUE":               401,
	"MERCHANT_NO_FOLLOWING_INSTRUCTION":         402,
	"MERCHANT_FOOD_POISONING":                   403,
	"MERCHANT_ITEMS_INCORRECT":                  404,
	"MERCHANT_FOOD_ALLERGY":                     405,
	"PLATFORM_APP_CRASH":                        451,
	"PLATFORM_SUSPICIOUS_COD_ORDER":             452,
	"PLATFORM_HARD_COMPLAINT":                   453,
	"PLATFORM_ORDER_PRICE_CHANGED":              454,
}

func (x ReturnOrder_ReturnReason) Enum() *ReturnOrder_ReturnReason {
	p := new(ReturnOrder_ReturnReason)
	*p = x
	return p
}

func (x ReturnOrder_ReturnReason) String() string {
	return proto.EnumName(ReturnOrder_ReturnReason_name, int32(x))
}

func (x *ReturnOrder_ReturnReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturnOrder_ReturnReason_value, data, "ReturnOrder_ReturnReason")
	if err != nil {
		return err
	}
	*x = ReturnOrder_ReturnReason(value)
	return nil
}

func (ReturnOrder_ReturnReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44, 3}
}

type Refund_RefundMethod int32

const (
	Refund_REFUND_METHOD_DEFAULT           Refund_RefundMethod = 0
	Refund_REFUND_METHOD_AUTO              Refund_RefundMethod = 1 // Deprecated: Do not use.
	Refund_REFUND_METHOD_MANUAL            Refund_RefundMethod = 2 // Deprecated: Do not use.
	Refund_REFUND_METHOD_SPM               Refund_RefundMethod = 100
	Refund_REFUND_METHOD_WALLET_ADJUSTMENT Refund_RefundMethod = 200
	Refund_REFUND_METHOD_BANK_TRANSFER     Refund_RefundMethod = 210
)

var Refund_RefundMethod_name = map[int32]string{
	0:   "REFUND_METHOD_DEFAULT",
	1:   "REFUND_METHOD_AUTO",
	2:   "REFUND_METHOD_MANUAL",
	100: "REFUND_METHOD_SPM",
	200: "REFUND_METHOD_WALLET_ADJUSTMENT",
	210: "REFUND_METHOD_BANK_TRANSFER",
}

var Refund_RefundMethod_value = map[string]int32{
	"REFUND_METHOD_DEFAULT":           0,
	"REFUND_METHOD_AUTO":              1,
	"REFUND_METHOD_MANUAL":            2,
	"REFUND_METHOD_SPM":               100,
	"REFUND_METHOD_WALLET_ADJUSTMENT": 200,
	"REFUND_METHOD_BANK_TRANSFER":     210,
}

func (x Refund_RefundMethod) Enum() *Refund_RefundMethod {
	p := new(Refund_RefundMethod)
	*p = x
	return p
}

func (x Refund_RefundMethod) String() string {
	return proto.EnumName(Refund_RefundMethod_name, int32(x))
}

func (x *Refund_RefundMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Refund_RefundMethod_value, data, "Refund_RefundMethod")
	if err != nil {
		return err
	}
	*x = Refund_RefundMethod(value)
	return nil
}

func (Refund_RefundMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{45, 0}
}

type Refund_RefundMode int32

const (
	Refund_REFUND_MODE_AUTO   Refund_RefundMode = 1
	Refund_REFUND_MODE_MANUAL Refund_RefundMode = 2
)

var Refund_RefundMode_name = map[int32]string{
	1: "REFUND_MODE_AUTO",
	2: "REFUND_MODE_MANUAL",
}

var Refund_RefundMode_value = map[string]int32{
	"REFUND_MODE_AUTO":   1,
	"REFUND_MODE_MANUAL": 2,
}

func (x Refund_RefundMode) Enum() *Refund_RefundMode {
	p := new(Refund_RefundMode)
	*p = x
	return p
}

func (x Refund_RefundMode) String() string {
	return proto.EnumName(Refund_RefundMode_name, int32(x))
}

func (x *Refund_RefundMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Refund_RefundMode_value, data, "Refund_RefundMode")
	if err != nil {
		return err
	}
	*x = Refund_RefundMode(value)
	return nil
}

func (Refund_RefundMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{45, 1}
}

type OrderDiscountCampaign_PromotionType int32

const (
	OrderDiscountCampaign_SHIPPING_FEE  OrderDiscountCampaign_PromotionType = 1
	OrderDiscountCampaign_ITEM_SUBTOTAL OrderDiscountCampaign_PromotionType = 2
)

var OrderDiscountCampaign_PromotionType_name = map[int32]string{
	1: "SHIPPING_FEE",
	2: "ITEM_SUBTOTAL",
}

var OrderDiscountCampaign_PromotionType_value = map[string]int32{
	"SHIPPING_FEE":  1,
	"ITEM_SUBTOTAL": 2,
}

func (x OrderDiscountCampaign_PromotionType) Enum() *OrderDiscountCampaign_PromotionType {
	p := new(OrderDiscountCampaign_PromotionType)
	*p = x
	return p
}

func (x OrderDiscountCampaign_PromotionType) String() string {
	return proto.EnumName(OrderDiscountCampaign_PromotionType_name, int32(x))
}

func (x *OrderDiscountCampaign_PromotionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderDiscountCampaign_PromotionType_value, data, "OrderDiscountCampaign_PromotionType")
	if err != nil {
		return err
	}
	*x = OrderDiscountCampaign_PromotionType(value)
	return nil
}

func (OrderDiscountCampaign_PromotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{48, 0}
}

type OrderDiscountCampaign_PromotionStatus int32

const (
	OrderDiscountCampaign_ENABLED  OrderDiscountCampaign_PromotionStatus = 1
	OrderDiscountCampaign_DISABLED OrderDiscountCampaign_PromotionStatus = 2
)

var OrderDiscountCampaign_PromotionStatus_name = map[int32]string{
	1: "ENABLED",
	2: "DISABLED",
}

var OrderDiscountCampaign_PromotionStatus_value = map[string]int32{
	"ENABLED":  1,
	"DISABLED": 2,
}

func (x OrderDiscountCampaign_PromotionStatus) Enum() *OrderDiscountCampaign_PromotionStatus {
	p := new(OrderDiscountCampaign_PromotionStatus)
	*p = x
	return p
}

func (x OrderDiscountCampaign_PromotionStatus) String() string {
	return proto.EnumName(OrderDiscountCampaign_PromotionStatus_name, int32(x))
}

func (x *OrderDiscountCampaign_PromotionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderDiscountCampaign_PromotionStatus_value, data, "OrderDiscountCampaign_PromotionStatus")
	if err != nil {
		return err
	}
	*x = OrderDiscountCampaign_PromotionStatus(value)
	return nil
}

func (OrderDiscountCampaign_PromotionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{48, 1}
}

type OrderDiscountCampaign_DiscountType int32

const (
	OrderDiscountCampaign_PERCENTAGE OrderDiscountCampaign_DiscountType = 1
	OrderDiscountCampaign_AMOUNT     OrderDiscountCampaign_DiscountType = 2
)

var OrderDiscountCampaign_DiscountType_name = map[int32]string{
	1: "PERCENTAGE",
	2: "AMOUNT",
}

var OrderDiscountCampaign_DiscountType_value = map[string]int32{
	"PERCENTAGE": 1,
	"AMOUNT":     2,
}

func (x OrderDiscountCampaign_DiscountType) Enum() *OrderDiscountCampaign_DiscountType {
	p := new(OrderDiscountCampaign_DiscountType)
	*p = x
	return p
}

func (x OrderDiscountCampaign_DiscountType) String() string {
	return proto.EnumName(OrderDiscountCampaign_DiscountType_name, int32(x))
}

func (x *OrderDiscountCampaign_DiscountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderDiscountCampaign_DiscountType_value, data, "OrderDiscountCampaign_DiscountType")
	if err != nil {
		return err
	}
	*x = OrderDiscountCampaign_DiscountType(value)
	return nil
}

func (OrderDiscountCampaign_DiscountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{48, 2}
}

type StoreScope_StoreScopeType int32

const (
	StoreScope_SHOPEE_FOOD_STORE_SCOPE_ALL                    StoreScope_StoreScopeType = 1
	StoreScope_SHOPEE_FOOD_STORE_SCOPE_BY_STORE_IDS           StoreScope_StoreScopeType = 2
	StoreScope_SHOPEE_FOOD_STORE_SCOPE_BY_COMPOSITE_CONDITION StoreScope_StoreScopeType = 3
	StoreScope_SHOPEE_FOOD_STORE_SCOPE_BY_STORE_TAG_IDS       StoreScope_StoreScopeType = 4
)

var StoreScope_StoreScopeType_name = map[int32]string{
	1: "SHOPEE_FOOD_STORE_SCOPE_ALL",
	2: "SHOPEE_FOOD_STORE_SCOPE_BY_STORE_IDS",
	3: "SHOPEE_FOOD_STORE_SCOPE_BY_COMPOSITE_CONDITION",
	4: "SHOPEE_FOOD_STORE_SCOPE_BY_STORE_TAG_IDS",
}

var StoreScope_StoreScopeType_value = map[string]int32{
	"SHOPEE_FOOD_STORE_SCOPE_ALL":                    1,
	"SHOPEE_FOOD_STORE_SCOPE_BY_STORE_IDS":           2,
	"SHOPEE_FOOD_STORE_SCOPE_BY_COMPOSITE_CONDITION": 3,
	"SHOPEE_FOOD_STORE_SCOPE_BY_STORE_TAG_IDS":       4,
}

func (x StoreScope_StoreScopeType) Enum() *StoreScope_StoreScopeType {
	p := new(StoreScope_StoreScopeType)
	*p = x
	return p
}

func (x StoreScope_StoreScopeType) String() string {
	return proto.EnumName(StoreScope_StoreScopeType_name, int32(x))
}

func (x *StoreScope_StoreScopeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreScope_StoreScopeType_value, data, "StoreScope_StoreScopeType")
	if err != nil {
		return err
	}
	*x = StoreScope_StoreScopeType(value)
	return nil
}

func (StoreScope_StoreScopeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{61, 0}
}

type Voucher_Reward_Type int32

const (
	Voucher_DISCOUNT      Voucher_Reward_Type = 0
	Voucher_ITEM_SUBTOTAL Voucher_Reward_Type = 1
	Voucher_COIN_CASHBACK Voucher_Reward_Type = 2
	Voucher_SHIPPING_FEE  Voucher_Reward_Type = 3
)

var Voucher_Reward_Type_name = map[int32]string{
	0: "DISCOUNT",
	1: "ITEM_SUBTOTAL",
	2: "COIN_CASHBACK",
	3: "SHIPPING_FEE",
}

var Voucher_Reward_Type_value = map[string]int32{
	"DISCOUNT":      0,
	"ITEM_SUBTOTAL": 1,
	"COIN_CASHBACK": 2,
	"SHIPPING_FEE":  3,
}

func (x Voucher_Reward_Type) Enum() *Voucher_Reward_Type {
	p := new(Voucher_Reward_Type)
	*p = x
	return p
}

func (x Voucher_Reward_Type) String() string {
	return proto.EnumName(Voucher_Reward_Type_name, int32(x))
}

func (x *Voucher_Reward_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Voucher_Reward_Type_value, data, "Voucher_Reward_Type")
	if err != nil {
		return err
	}
	*x = Voucher_Reward_Type(value)
	return nil
}

func (Voucher_Reward_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{67, 0}
}

type VoucherTaskFile_FileType int32

const (
	VoucherTaskFile_FILE_TYPE_CSV VoucherTaskFile_FileType = 1
)

var VoucherTaskFile_FileType_name = map[int32]string{
	1: "FILE_TYPE_CSV",
}

var VoucherTaskFile_FileType_value = map[string]int32{
	"FILE_TYPE_CSV": 1,
}

func (x VoucherTaskFile_FileType) Enum() *VoucherTaskFile_FileType {
	p := new(VoucherTaskFile_FileType)
	*p = x
	return p
}

func (x VoucherTaskFile_FileType) String() string {
	return proto.EnumName(VoucherTaskFile_FileType_name, int32(x))
}

func (x *VoucherTaskFile_FileType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherTaskFile_FileType_value, data, "VoucherTaskFile_FileType")
	if err != nil {
		return err
	}
	*x = VoucherTaskFile_FileType(value)
	return nil
}

func (VoucherTaskFile_FileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{70, 0}
}

type EarnCoins_Type int32

const (
	EarnCoins_ORDER   EarnCoins_Type = 1
	EarnCoins_VOUCHER EarnCoins_Type = 2
)

var EarnCoins_Type_name = map[int32]string{
	1: "ORDER",
	2: "VOUCHER",
}

var EarnCoins_Type_value = map[string]int32{
	"ORDER":   1,
	"VOUCHER": 2,
}

func (x EarnCoins_Type) Enum() *EarnCoins_Type {
	p := new(EarnCoins_Type)
	*p = x
	return p
}

func (x EarnCoins_Type) String() string {
	return proto.EnumName(EarnCoins_Type_name, int32(x))
}

func (x *EarnCoins_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EarnCoins_Type_value, data, "EarnCoins_Type")
	if err != nil {
		return err
	}
	*x = EarnCoins_Type(value)
	return nil
}

func (EarnCoins_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{75, 0}
}

type ItemDiscountCampaign_Status int32

const (
	ItemDiscountCampaign_DISABLED ItemDiscountCampaign_Status = 0
	ItemDiscountCampaign_ENABLED  ItemDiscountCampaign_Status = 1
)

var ItemDiscountCampaign_Status_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var ItemDiscountCampaign_Status_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x ItemDiscountCampaign_Status) Enum() *ItemDiscountCampaign_Status {
	p := new(ItemDiscountCampaign_Status)
	*p = x
	return p
}

func (x ItemDiscountCampaign_Status) String() string {
	return proto.EnumName(ItemDiscountCampaign_Status_name, int32(x))
}

func (x *ItemDiscountCampaign_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscountCampaign_Status_value, data, "ItemDiscountCampaign_Status")
	if err != nil {
		return err
	}
	*x = ItemDiscountCampaign_Status(value)
	return nil
}

func (ItemDiscountCampaign_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{77, 0}
}

type ItemDiscount_Status int32

const (
	ItemDiscount_DISABLED ItemDiscount_Status = 0
	ItemDiscount_ENABLED  ItemDiscount_Status = 1
	ItemDiscount_DELETED  ItemDiscount_Status = 2
)

var ItemDiscount_Status_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
	2: "DELETED",
}

var ItemDiscount_Status_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
	"DELETED":  2,
}

func (x ItemDiscount_Status) Enum() *ItemDiscount_Status {
	p := new(ItemDiscount_Status)
	*p = x
	return p
}

func (x ItemDiscount_Status) String() string {
	return proto.EnumName(ItemDiscount_Status_name, int32(x))
}

func (x *ItemDiscount_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscount_Status_value, data, "ItemDiscount_Status")
	if err != nil {
		return err
	}
	*x = ItemDiscount_Status(value)
	return nil
}

func (ItemDiscount_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{78, 0}
}

type ItemDiscountRecord_SoldStatus int32

const (
	ItemDiscountRecord_SoldInited    ItemDiscountRecord_SoldStatus = 1
	ItemDiscountRecord_SoldCompleted ItemDiscountRecord_SoldStatus = 2
	ItemDiscountRecord_SoldFailed    ItemDiscountRecord_SoldStatus = 3
)

var ItemDiscountRecord_SoldStatus_name = map[int32]string{
	1: "SoldInited",
	2: "SoldCompleted",
	3: "SoldFailed",
}

var ItemDiscountRecord_SoldStatus_value = map[string]int32{
	"SoldInited":    1,
	"SoldCompleted": 2,
	"SoldFailed":    3,
}

func (x ItemDiscountRecord_SoldStatus) Enum() *ItemDiscountRecord_SoldStatus {
	p := new(ItemDiscountRecord_SoldStatus)
	*p = x
	return p
}

func (x ItemDiscountRecord_SoldStatus) String() string {
	return proto.EnumName(ItemDiscountRecord_SoldStatus_name, int32(x))
}

func (x *ItemDiscountRecord_SoldStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ItemDiscountRecord_SoldStatus_value, data, "ItemDiscountRecord_SoldStatus")
	if err != nil {
		return err
	}
	*x = ItemDiscountRecord_SoldStatus(value)
	return nil
}

func (ItemDiscountRecord_SoldStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{79, 0}
}

type PromotionObject_PromotionType int32

const (
	PromotionObject_ITEM_DISCOUNT PromotionObject_PromotionType = 1
	PromotionObject_FLASH_SALE    PromotionObject_PromotionType = 2
	PromotionObject_VOUCHER       PromotionObject_PromotionType = 3
)

var PromotionObject_PromotionType_name = map[int32]string{
	1: "ITEM_DISCOUNT",
	2: "FLASH_SALE",
	3: "VOUCHER",
}

var PromotionObject_PromotionType_value = map[string]int32{
	"ITEM_DISCOUNT": 1,
	"FLASH_SALE":    2,
	"VOUCHER":       3,
}

func (x PromotionObject_PromotionType) Enum() *PromotionObject_PromotionType {
	p := new(PromotionObject_PromotionType)
	*p = x
	return p
}

func (x PromotionObject_PromotionType) String() string {
	return proto.EnumName(PromotionObject_PromotionType_name, int32(x))
}

func (x *PromotionObject_PromotionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionObject_PromotionType_value, data, "PromotionObject_PromotionType")
	if err != nil {
		return err
	}
	*x = PromotionObject_PromotionType(value)
	return nil
}

func (PromotionObject_PromotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80, 0}
}

type PromotionObject_PromotionStatus int32

const (
	PromotionObject_DISABLED PromotionObject_PromotionStatus = 0
	PromotionObject_ENABLED  PromotionObject_PromotionStatus = 1
)

var PromotionObject_PromotionStatus_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var PromotionObject_PromotionStatus_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x PromotionObject_PromotionStatus) Enum() *PromotionObject_PromotionStatus {
	p := new(PromotionObject_PromotionStatus)
	*p = x
	return p
}

func (x PromotionObject_PromotionStatus) String() string {
	return proto.EnumName(PromotionObject_PromotionStatus_name, int32(x))
}

func (x *PromotionObject_PromotionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionObject_PromotionStatus_value, data, "PromotionObject_PromotionStatus")
	if err != nil {
		return err
	}
	*x = PromotionObject_PromotionStatus(value)
	return nil
}

func (PromotionObject_PromotionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80, 1}
}

type PromotionObject_PromotionShowStatus int32

const (
	PromotionObject_PENDING  PromotionObject_PromotionShowStatus = 1
	PromotionObject_UPCOMING PromotionObject_PromotionShowStatus = 2
	PromotionObject_ONGOING  PromotionObject_PromotionShowStatus = 3
	PromotionObject_ENDED    PromotionObject_PromotionShowStatus = 4
)

var PromotionObject_PromotionShowStatus_name = map[int32]string{
	1: "PENDING",
	2: "UPCOMING",
	3: "ONGOING",
	4: "ENDED",
}

var PromotionObject_PromotionShowStatus_value = map[string]int32{
	"PENDING":  1,
	"UPCOMING": 2,
	"ONGOING":  3,
	"ENDED":    4,
}

func (x PromotionObject_PromotionShowStatus) Enum() *PromotionObject_PromotionShowStatus {
	p := new(PromotionObject_PromotionShowStatus)
	*p = x
	return p
}

func (x PromotionObject_PromotionShowStatus) String() string {
	return proto.EnumName(PromotionObject_PromotionShowStatus_name, int32(x))
}

func (x *PromotionObject_PromotionShowStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionObject_PromotionShowStatus_value, data, "PromotionObject_PromotionShowStatus")
	if err != nil {
		return err
	}
	*x = PromotionObject_PromotionShowStatus(value)
	return nil
}

func (PromotionObject_PromotionShowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80, 2}
}

type Button_ButtonType int32

const (
	Button_PRIMARY   Button_ButtonType = 1
	Button_SECONDARY Button_ButtonType = 2
)

var Button_ButtonType_name = map[int32]string{
	1: "PRIMARY",
	2: "SECONDARY",
}

var Button_ButtonType_value = map[string]int32{
	"PRIMARY":   1,
	"SECONDARY": 2,
}

func (x Button_ButtonType) Enum() *Button_ButtonType {
	p := new(Button_ButtonType)
	*p = x
	return p
}

func (x Button_ButtonType) String() string {
	return proto.EnumName(Button_ButtonType_name, int32(x))
}

func (x *Button_ButtonType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Button_ButtonType_value, data, "Button_ButtonType")
	if err != nil {
		return err
	}
	*x = Button_ButtonType(value)
	return nil
}

func (Button_ButtonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{81, 0}
}

type Attribute_AttributeType int32

const (
	Attribute_TEXT  Attribute_AttributeType = 1
	Attribute_IMAGE Attribute_AttributeType = 2
)

var Attribute_AttributeType_name = map[int32]string{
	1: "TEXT",
	2: "IMAGE",
}

var Attribute_AttributeType_value = map[string]int32{
	"TEXT":  1,
	"IMAGE": 2,
}

func (x Attribute_AttributeType) Enum() *Attribute_AttributeType {
	p := new(Attribute_AttributeType)
	*p = x
	return p
}

func (x Attribute_AttributeType) String() string {
	return proto.EnumName(Attribute_AttributeType_name, int32(x))
}

func (x *Attribute_AttributeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Attribute_AttributeType_value, data, "Attribute_AttributeType")
	if err != nil {
		return err
	}
	*x = Attribute_AttributeType(value)
	return nil
}

func (Attribute_AttributeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82, 0}
}

type Attribute_ValueInfo_ValueInfoType int32

const (
	Attribute_ValueInfo_STRING Attribute_ValueInfo_ValueInfoType = 1
	Attribute_ValueInfo_TIME   Attribute_ValueInfo_ValueInfoType = 2
	Attribute_ValueInfo_INT    Attribute_ValueInfo_ValueInfoType = 3
)

var Attribute_ValueInfo_ValueInfoType_name = map[int32]string{
	1: "STRING",
	2: "TIME",
	3: "INT",
}

var Attribute_ValueInfo_ValueInfoType_value = map[string]int32{
	"STRING": 1,
	"TIME":   2,
	"INT":    3,
}

func (x Attribute_ValueInfo_ValueInfoType) Enum() *Attribute_ValueInfo_ValueInfoType {
	p := new(Attribute_ValueInfo_ValueInfoType)
	*p = x
	return p
}

func (x Attribute_ValueInfo_ValueInfoType) String() string {
	return proto.EnumName(Attribute_ValueInfo_ValueInfoType_name, int32(x))
}

func (x *Attribute_ValueInfo_ValueInfoType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Attribute_ValueInfo_ValueInfoType_value, data, "Attribute_ValueInfo_ValueInfoType")
	if err != nil {
		return err
	}
	*x = Attribute_ValueInfo_ValueInfoType(value)
	return nil
}

func (Attribute_ValueInfo_ValueInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82, 1, 0}
}

type PromotionTool_PromotionToolType int32

const (
	PromotionTool_ITEM_DISCOUNT PromotionTool_PromotionToolType = 1
	PromotionTool_FLASH_SALE    PromotionTool_PromotionToolType = 2
	PromotionTool_VOUCHER       PromotionTool_PromotionToolType = 3
)

var PromotionTool_PromotionToolType_name = map[int32]string{
	1: "ITEM_DISCOUNT",
	2: "FLASH_SALE",
	3: "VOUCHER",
}

var PromotionTool_PromotionToolType_value = map[string]int32{
	"ITEM_DISCOUNT": 1,
	"FLASH_SALE":    2,
	"VOUCHER":       3,
}

func (x PromotionTool_PromotionToolType) Enum() *PromotionTool_PromotionToolType {
	p := new(PromotionTool_PromotionToolType)
	*p = x
	return p
}

func (x PromotionTool_PromotionToolType) String() string {
	return proto.EnumName(PromotionTool_PromotionToolType_name, int32(x))
}

func (x *PromotionTool_PromotionToolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionTool_PromotionToolType_value, data, "PromotionTool_PromotionToolType")
	if err != nil {
		return err
	}
	*x = PromotionTool_PromotionToolType(value)
	return nil
}

func (PromotionTool_PromotionToolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84, 0}
}

type PromotionTool_WhiteListScope int32

const (
	PromotionTool_NONE      PromotionTool_WhiteListScope = 1
	PromotionTool_ALL       PromotionTool_WhiteListScope = 2
	PromotionTool_STORE_IDS PromotionTool_WhiteListScope = 3
)

var PromotionTool_WhiteListScope_name = map[int32]string{
	1: "NONE",
	2: "ALL",
	3: "STORE_IDS",
}

var PromotionTool_WhiteListScope_value = map[string]int32{
	"NONE":      1,
	"ALL":       2,
	"STORE_IDS": 3,
}

func (x PromotionTool_WhiteListScope) Enum() *PromotionTool_WhiteListScope {
	p := new(PromotionTool_WhiteListScope)
	*p = x
	return p
}

func (x PromotionTool_WhiteListScope) String() string {
	return proto.EnumName(PromotionTool_WhiteListScope_name, int32(x))
}

func (x *PromotionTool_WhiteListScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PromotionTool_WhiteListScope_value, data, "PromotionTool_WhiteListScope")
	if err != nil {
		return err
	}
	*x = PromotionTool_WhiteListScope(value)
	return nil
}

func (PromotionTool_WhiteListScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84, 1}
}

type EventPromotion_PromotionType int32

const (
	EventPromotion_ITEM_DISCOUNT EventPromotion_PromotionType = 1
	EventPromotion_FLASH_SALE    EventPromotion_PromotionType = 2
	EventPromotion_VOUCHER       EventPromotion_PromotionType = 3
)

var EventPromotion_PromotionType_name = map[int32]string{
	1: "ITEM_DISCOUNT",
	2: "FLASH_SALE",
	3: "VOUCHER",
}

var EventPromotion_PromotionType_value = map[string]int32{
	"ITEM_DISCOUNT": 1,
	"FLASH_SALE":    2,
	"VOUCHER":       3,
}

func (x EventPromotion_PromotionType) Enum() *EventPromotion_PromotionType {
	p := new(EventPromotion_PromotionType)
	*p = x
	return p
}

func (x EventPromotion_PromotionType) String() string {
	return proto.EnumName(EventPromotion_PromotionType_name, int32(x))
}

func (x *EventPromotion_PromotionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventPromotion_PromotionType_value, data, "EventPromotion_PromotionType")
	if err != nil {
		return err
	}
	*x = EventPromotion_PromotionType(value)
	return nil
}

func (EventPromotion_PromotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 0}
}

type EventPromotion_EventPromotionShowStatus int32

const (
	EventPromotion_PENDING  EventPromotion_EventPromotionShowStatus = 1
	EventPromotion_UPCOMING EventPromotion_EventPromotionShowStatus = 2
	EventPromotion_ONGOING  EventPromotion_EventPromotionShowStatus = 3
	EventPromotion_ENDED    EventPromotion_EventPromotionShowStatus = 4
)

var EventPromotion_EventPromotionShowStatus_name = map[int32]string{
	1: "PENDING",
	2: "UPCOMING",
	3: "ONGOING",
	4: "ENDED",
}

var EventPromotion_EventPromotionShowStatus_value = map[string]int32{
	"PENDING":  1,
	"UPCOMING": 2,
	"ONGOING":  3,
	"ENDED":    4,
}

func (x EventPromotion_EventPromotionShowStatus) Enum() *EventPromotion_EventPromotionShowStatus {
	p := new(EventPromotion_EventPromotionShowStatus)
	*p = x
	return p
}

func (x EventPromotion_EventPromotionShowStatus) String() string {
	return proto.EnumName(EventPromotion_EventPromotionShowStatus_name, int32(x))
}

func (x *EventPromotion_EventPromotionShowStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventPromotion_EventPromotionShowStatus_value, data, "EventPromotion_EventPromotionShowStatus")
	if err != nil {
		return err
	}
	*x = EventPromotion_EventPromotionShowStatus(value)
	return nil
}

func (EventPromotion_EventPromotionShowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 1}
}

type EventPromotion_StoreSessionStatus int32

const (
	EventPromotion_INVITED    EventPromotion_StoreSessionStatus = 1
	EventPromotion_UNINVITED  EventPromotion_StoreSessionStatus = 2
	EventPromotion_JOINED     EventPromotion_StoreSessionStatus = 3
	EventPromotion_TERMINATED EventPromotion_StoreSessionStatus = 4
	EventPromotion_WITHDRAWN  EventPromotion_StoreSessionStatus = 5
)

var EventPromotion_StoreSessionStatus_name = map[int32]string{
	1: "INVITED",
	2: "UNINVITED",
	3: "JOINED",
	4: "TERMINATED",
	5: "WITHDRAWN",
}

var EventPromotion_StoreSessionStatus_value = map[string]int32{
	"INVITED":    1,
	"UNINVITED":  2,
	"JOINED":     3,
	"TERMINATED": 4,
	"WITHDRAWN":  5,
}

func (x EventPromotion_StoreSessionStatus) Enum() *EventPromotion_StoreSessionStatus {
	p := new(EventPromotion_StoreSessionStatus)
	*p = x
	return p
}

func (x EventPromotion_StoreSessionStatus) String() string {
	return proto.EnumName(EventPromotion_StoreSessionStatus_name, int32(x))
}

func (x *EventPromotion_StoreSessionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventPromotion_StoreSessionStatus_value, data, "EventPromotion_StoreSessionStatus")
	if err != nil {
		return err
	}
	*x = EventPromotion_StoreSessionStatus(value)
	return nil
}

func (EventPromotion_StoreSessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 2}
}

type EventPromotion_EventPromotionStatus int32

const (
	EventPromotion_DISABLED EventPromotion_EventPromotionStatus = 0
	EventPromotion_ENABLED  EventPromotion_EventPromotionStatus = 1
)

var EventPromotion_EventPromotionStatus_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var EventPromotion_EventPromotionStatus_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x EventPromotion_EventPromotionStatus) Enum() *EventPromotion_EventPromotionStatus {
	p := new(EventPromotion_EventPromotionStatus)
	*p = x
	return p
}

func (x EventPromotion_EventPromotionStatus) String() string {
	return proto.EnumName(EventPromotion_EventPromotionStatus_name, int32(x))
}

func (x *EventPromotion_EventPromotionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventPromotion_EventPromotionStatus_value, data, "EventPromotion_EventPromotionStatus")
	if err != nil {
		return err
	}
	*x = EventPromotion_EventPromotionStatus(value)
	return nil
}

func (EventPromotion_EventPromotionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 3}
}

type EventObject_PromotionType int32

const (
	EventObject_ITEM_DISCOUNT EventObject_PromotionType = 1
	EventObject_FLASH_SALE    EventObject_PromotionType = 2
	EventObject_VOUCHER       EventObject_PromotionType = 3
)

var EventObject_PromotionType_name = map[int32]string{
	1: "ITEM_DISCOUNT",
	2: "FLASH_SALE",
	3: "VOUCHER",
}

var EventObject_PromotionType_value = map[string]int32{
	"ITEM_DISCOUNT": 1,
	"FLASH_SALE":    2,
	"VOUCHER":       3,
}

func (x EventObject_PromotionType) Enum() *EventObject_PromotionType {
	p := new(EventObject_PromotionType)
	*p = x
	return p
}

func (x EventObject_PromotionType) String() string {
	return proto.EnumName(EventObject_PromotionType_name, int32(x))
}

func (x *EventObject_PromotionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventObject_PromotionType_value, data, "EventObject_PromotionType")
	if err != nil {
		return err
	}
	*x = EventObject_PromotionType(value)
	return nil
}

func (EventObject_PromotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86, 0}
}

type EventObject_WhiteListScope int32

const (
	EventObject_NONE      EventObject_WhiteListScope = 1
	EventObject_ALL       EventObject_WhiteListScope = 2
	EventObject_STORE_IDS EventObject_WhiteListScope = 3
)

var EventObject_WhiteListScope_name = map[int32]string{
	1: "NONE",
	2: "ALL",
	3: "STORE_IDS",
}

var EventObject_WhiteListScope_value = map[string]int32{
	"NONE":      1,
	"ALL":       2,
	"STORE_IDS": 3,
}

func (x EventObject_WhiteListScope) Enum() *EventObject_WhiteListScope {
	p := new(EventObject_WhiteListScope)
	*p = x
	return p
}

func (x EventObject_WhiteListScope) String() string {
	return proto.EnumName(EventObject_WhiteListScope_name, int32(x))
}

func (x *EventObject_WhiteListScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventObject_WhiteListScope_value, data, "EventObject_WhiteListScope")
	if err != nil {
		return err
	}
	*x = EventObject_WhiteListScope(value)
	return nil
}

func (EventObject_WhiteListScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86, 1}
}

type EventObject_EventStatus int32

const (
	EventObject_DISABLED EventObject_EventStatus = 0
	EventObject_ENABLED  EventObject_EventStatus = 1
)

var EventObject_EventStatus_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
}

var EventObject_EventStatus_value = map[string]int32{
	"DISABLED": 0,
	"ENABLED":  1,
}

func (x EventObject_EventStatus) Enum() *EventObject_EventStatus {
	p := new(EventObject_EventStatus)
	*p = x
	return p
}

func (x EventObject_EventStatus) String() string {
	return proto.EnumName(EventObject_EventStatus_name, int32(x))
}

func (x *EventObject_EventStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventObject_EventStatus_value, data, "EventObject_EventStatus")
	if err != nil {
		return err
	}
	*x = EventObject_EventStatus(value)
	return nil
}

func (EventObject_EventStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86, 2}
}

type WhiteList_WhiteListStatus int32

const (
	WhiteList_VALID   WhiteList_WhiteListStatus = 1
	WhiteList_INVALID WhiteList_WhiteListStatus = 2
)

var WhiteList_WhiteListStatus_name = map[int32]string{
	1: "VALID",
	2: "INVALID",
}

var WhiteList_WhiteListStatus_value = map[string]int32{
	"VALID":   1,
	"INVALID": 2,
}

func (x WhiteList_WhiteListStatus) Enum() *WhiteList_WhiteListStatus {
	p := new(WhiteList_WhiteListStatus)
	*p = x
	return p
}

func (x WhiteList_WhiteListStatus) String() string {
	return proto.EnumName(WhiteList_WhiteListStatus_name, int32(x))
}

func (x *WhiteList_WhiteListStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WhiteList_WhiteListStatus_value, data, "WhiteList_WhiteListStatus")
	if err != nil {
		return err
	}
	*x = WhiteList_WhiteListStatus(value)
	return nil
}

func (WhiteList_WhiteListStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{87, 0}
}

type Tip_TipStatus int32

const (
	Tip_TIP_NONE      Tip_TipStatus = 0
	Tip_TIP_CREATED   Tip_TipStatus = 1
	Tip_TIP_PAID      Tip_TipStatus = 2
	Tip_TIP_CANCELED  Tip_TipStatus = 3
	Tip_TIP_COMPLETED Tip_TipStatus = 4
)

var Tip_TipStatus_name = map[int32]string{
	0: "TIP_NONE",
	1: "TIP_CREATED",
	2: "TIP_PAID",
	3: "TIP_CANCELED",
	4: "TIP_COMPLETED",
}

var Tip_TipStatus_value = map[string]int32{
	"TIP_NONE":      0,
	"TIP_CREATED":   1,
	"TIP_PAID":      2,
	"TIP_CANCELED":  3,
	"TIP_COMPLETED": 4,
}

func (x Tip_TipStatus) Enum() *Tip_TipStatus {
	p := new(Tip_TipStatus)
	*p = x
	return p
}

func (x Tip_TipStatus) String() string {
	return proto.EnumName(Tip_TipStatus_name, int32(x))
}

func (x *Tip_TipStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Tip_TipStatus_value, data, "Tip_TipStatus")
	if err != nil {
		return err
	}
	*x = Tip_TipStatus(value)
	return nil
}

func (Tip_TipStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{88, 0}
}

type SpecialRule_RuleType int32

const (
	SpecialRule_TIME SpecialRule_RuleType = 1
)

var SpecialRule_RuleType_name = map[int32]string{
	1: "TIME",
}

var SpecialRule_RuleType_value = map[string]int32{
	"TIME": 1,
}

func (x SpecialRule_RuleType) Enum() *SpecialRule_RuleType {
	p := new(SpecialRule_RuleType)
	*p = x
	return p
}

func (x SpecialRule_RuleType) String() string {
	return proto.EnumName(SpecialRule_RuleType_name, int32(x))
}

func (x *SpecialRule_RuleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpecialRule_RuleType_value, data, "SpecialRule_RuleType")
	if err != nil {
		return err
	}
	*x = SpecialRule_RuleType(value)
	return nil
}

func (SpecialRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91, 0}
}

type IncentivePlan_PlanStatus int32

const (
	IncentivePlan_NORMAL     IncentivePlan_PlanStatus = 1
	IncentivePlan_TERMINATED IncentivePlan_PlanStatus = 2
)

var IncentivePlan_PlanStatus_name = map[int32]string{
	1: "NORMAL",
	2: "TERMINATED",
}

var IncentivePlan_PlanStatus_value = map[string]int32{
	"NORMAL":     1,
	"TERMINATED": 2,
}

func (x IncentivePlan_PlanStatus) Enum() *IncentivePlan_PlanStatus {
	p := new(IncentivePlan_PlanStatus)
	*p = x
	return p
}

func (x IncentivePlan_PlanStatus) String() string {
	return proto.EnumName(IncentivePlan_PlanStatus_name, int32(x))
}

func (x *IncentivePlan_PlanStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentivePlan_PlanStatus_value, data, "IncentivePlan_PlanStatus")
	if err != nil {
		return err
	}
	*x = IncentivePlan_PlanStatus(value)
	return nil
}

func (IncentivePlan_PlanStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{92, 0}
}

type IncentiveTask_CreditStatus int32

const (
	IncentiveTask_CREATED IncentiveTask_CreditStatus = 0
	IncentiveTask_PENDING IncentiveTask_CreditStatus = 1
	IncentiveTask_SUCCESS IncentiveTask_CreditStatus = 2
)

var IncentiveTask_CreditStatus_name = map[int32]string{
	0: "CREATED",
	1: "PENDING",
	2: "SUCCESS",
}

var IncentiveTask_CreditStatus_value = map[string]int32{
	"CREATED": 0,
	"PENDING": 1,
	"SUCCESS": 2,
}

func (x IncentiveTask_CreditStatus) Enum() *IncentiveTask_CreditStatus {
	p := new(IncentiveTask_CreditStatus)
	*p = x
	return p
}

func (x IncentiveTask_CreditStatus) String() string {
	return proto.EnumName(IncentiveTask_CreditStatus_name, int32(x))
}

func (x *IncentiveTask_CreditStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentiveTask_CreditStatus_value, data, "IncentiveTask_CreditStatus")
	if err != nil {
		return err
	}
	*x = IncentiveTask_CreditStatus(value)
	return nil
}

func (IncentiveTask_CreditStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{93, 0}
}

type IncentiveTask_TaskStatus int32

const (
	IncentiveTask_TASK_DEFAULT          IncentiveTask_TaskStatus = 0
	IncentiveTask_TASK_PENDING          IncentiveTask_TaskStatus = 1
	IncentiveTask_TASK_FINISHED         IncentiveTask_TaskStatus = 2
	IncentiveTask_TASK_CLOSED           IncentiveTask_TaskStatus = 3
	IncentiveTask_TASK_POINT_CALCULATED IncentiveTask_TaskStatus = 7
	IncentiveTask_TASK_BONUS_CALCULATED IncentiveTask_TaskStatus = 8
)

var IncentiveTask_TaskStatus_name = map[int32]string{
	0: "TASK_DEFAULT",
	1: "TASK_PENDING",
	2: "TASK_FINISHED",
	3: "TASK_CLOSED",
	7: "TASK_POINT_CALCULATED",
	8: "TASK_BONUS_CALCULATED",
}

var IncentiveTask_TaskStatus_value = map[string]int32{
	"TASK_DEFAULT":          0,
	"TASK_PENDING":          1,
	"TASK_FINISHED":         2,
	"TASK_CLOSED":           3,
	"TASK_POINT_CALCULATED": 7,
	"TASK_BONUS_CALCULATED": 8,
}

func (x IncentiveTask_TaskStatus) Enum() *IncentiveTask_TaskStatus {
	p := new(IncentiveTask_TaskStatus)
	*p = x
	return p
}

func (x IncentiveTask_TaskStatus) String() string {
	return proto.EnumName(IncentiveTask_TaskStatus_name, int32(x))
}

func (x *IncentiveTask_TaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentiveTask_TaskStatus_value, data, "IncentiveTask_TaskStatus")
	if err != nil {
		return err
	}
	*x = IncentiveTask_TaskStatus(value)
	return nil
}

func (IncentiveTask_TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{93, 1}
}

type IncentiveTask_PointSettlementType int32

const (
	IncentiveTask_POINT_SETTLEMENT_TYPE_UNKNOWN    IncentiveTask_PointSettlementType = 0
	IncentiveTask_POINT_SETTLEMENT_TYPE_ELIGIBLE   IncentiveTask_PointSettlementType = 1
	IncentiveTask_POINT_SETTLEMENT_TYPE_INELIGIBLE IncentiveTask_PointSettlementType = 2
)

var IncentiveTask_PointSettlementType_name = map[int32]string{
	0: "POINT_SETTLEMENT_TYPE_UNKNOWN",
	1: "POINT_SETTLEMENT_TYPE_ELIGIBLE",
	2: "POINT_SETTLEMENT_TYPE_INELIGIBLE",
}

var IncentiveTask_PointSettlementType_value = map[string]int32{
	"POINT_SETTLEMENT_TYPE_UNKNOWN":    0,
	"POINT_SETTLEMENT_TYPE_ELIGIBLE":   1,
	"POINT_SETTLEMENT_TYPE_INELIGIBLE": 2,
}

func (x IncentiveTask_PointSettlementType) Enum() *IncentiveTask_PointSettlementType {
	p := new(IncentiveTask_PointSettlementType)
	*p = x
	return p
}

func (x IncentiveTask_PointSettlementType) String() string {
	return proto.EnumName(IncentiveTask_PointSettlementType_name, int32(x))
}

func (x *IncentiveTask_PointSettlementType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentiveTask_PointSettlementType_value, data, "IncentiveTask_PointSettlementType")
	if err != nil {
		return err
	}
	*x = IncentiveTask_PointSettlementType(value)
	return nil
}

func (IncentiveTask_PointSettlementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{93, 2}
}

type IncentiveSettlement_SettlementStatus int32

const (
	IncentiveSettlement_INCENTIVE_SETTLEMENT_STATUS_DEFAULT          IncentiveSettlement_SettlementStatus = 0
	IncentiveSettlement_INCENTIVE_SETTLEMENT_STATUS_SETTLING         IncentiveSettlement_SettlementStatus = 1
	IncentiveSettlement_INCENTIVE_SETTLEMENT_STATUS_BONUS_CALCULATED IncentiveSettlement_SettlementStatus = 2
	IncentiveSettlement_INCENTIVE_SETTLEMENT_STATUS_FINISHED         IncentiveSettlement_SettlementStatus = 3
)

var IncentiveSettlement_SettlementStatus_name = map[int32]string{
	0: "INCENTIVE_SETTLEMENT_STATUS_DEFAULT",
	1: "INCENTIVE_SETTLEMENT_STATUS_SETTLING",
	2: "INCENTIVE_SETTLEMENT_STATUS_BONUS_CALCULATED",
	3: "INCENTIVE_SETTLEMENT_STATUS_FINISHED",
}

var IncentiveSettlement_SettlementStatus_value = map[string]int32{
	"INCENTIVE_SETTLEMENT_STATUS_DEFAULT":          0,
	"INCENTIVE_SETTLEMENT_STATUS_SETTLING":         1,
	"INCENTIVE_SETTLEMENT_STATUS_BONUS_CALCULATED": 2,
	"INCENTIVE_SETTLEMENT_STATUS_FINISHED":         3,
}

func (x IncentiveSettlement_SettlementStatus) Enum() *IncentiveSettlement_SettlementStatus {
	p := new(IncentiveSettlement_SettlementStatus)
	*p = x
	return p
}

func (x IncentiveSettlement_SettlementStatus) String() string {
	return proto.EnumName(IncentiveSettlement_SettlementStatus_name, int32(x))
}

func (x *IncentiveSettlement_SettlementStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentiveSettlement_SettlementStatus_value, data, "IncentiveSettlement_SettlementStatus")
	if err != nil {
		return err
	}
	*x = IncentiveSettlement_SettlementStatus(value)
	return nil
}

func (IncentiveSettlement_SettlementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{95, 0}
}

type IncentiveSettlement_CreditStatus int32

const (
	IncentiveSettlement_INCENTIVE_SETTLEMENT_CREDIT_STATUS_CREATE  IncentiveSettlement_CreditStatus = 0
	IncentiveSettlement_INCENTIVE_SETTLEMENT_CREDIT_STATUS_PENDING IncentiveSettlement_CreditStatus = 1
	IncentiveSettlement_INCENTIVE_SETTLEMENT_CREDIT_STATUS_SUCCESS IncentiveSettlement_CreditStatus = 2
)

var IncentiveSettlement_CreditStatus_name = map[int32]string{
	0: "INCENTIVE_SETTLEMENT_CREDIT_STATUS_CREATE",
	1: "INCENTIVE_SETTLEMENT_CREDIT_STATUS_PENDING",
	2: "INCENTIVE_SETTLEMENT_CREDIT_STATUS_SUCCESS",
}

var IncentiveSettlement_CreditStatus_value = map[string]int32{
	"INCENTIVE_SETTLEMENT_CREDIT_STATUS_CREATE":  0,
	"INCENTIVE_SETTLEMENT_CREDIT_STATUS_PENDING": 1,
	"INCENTIVE_SETTLEMENT_CREDIT_STATUS_SUCCESS": 2,
}

func (x IncentiveSettlement_CreditStatus) Enum() *IncentiveSettlement_CreditStatus {
	p := new(IncentiveSettlement_CreditStatus)
	*p = x
	return p
}

func (x IncentiveSettlement_CreditStatus) String() string {
	return proto.EnumName(IncentiveSettlement_CreditStatus_name, int32(x))
}

func (x *IncentiveSettlement_CreditStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IncentiveSettlement_CreditStatus_value, data, "IncentiveSettlement_CreditStatus")
	if err != nil {
		return err
	}
	*x = IncentiveSettlement_CreditStatus(value)
	return nil
}

func (IncentiveSettlement_CreditStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{95, 1}
}

type VoucherRecord_Status int32

const (
	VoucherRecord_CREATED   VoucherRecord_Status = 1
	VoucherRecord_COMPLETED VoucherRecord_Status = 2
	VoucherRecord_CANCELING VoucherRecord_Status = 3
	VoucherRecord_CANCELED  VoucherRecord_Status = 4
	VoucherRecord_RETURNED  VoucherRecord_Status = 5
)

var VoucherRecord_Status_name = map[int32]string{
	1: "CREATED",
	2: "COMPLETED",
	3: "CANCELING",
	4: "CANCELED",
	5: "RETURNED",
}

var VoucherRecord_Status_value = map[string]int32{
	"CREATED":   1,
	"COMPLETED": 2,
	"CANCELING": 3,
	"CANCELED":  4,
	"RETURNED":  5,
}

func (x VoucherRecord_Status) Enum() *VoucherRecord_Status {
	p := new(VoucherRecord_Status)
	*p = x
	return p
}

func (x VoucherRecord_Status) String() string {
	return proto.EnumName(VoucherRecord_Status_name, int32(x))
}

func (x *VoucherRecord_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VoucherRecord_Status_value, data, "VoucherRecord_Status")
	if err != nil {
		return err
	}
	*x = VoucherRecord_Status(value)
	return nil
}

func (VoucherRecord_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{96, 0}
}

type DriverWalletPayment_PaymentType int32

const (
	DriverWalletPayment_PAY_OUT DriverWalletPayment_PaymentType = 1
	DriverWalletPayment_PAY_IN  DriverWalletPayment_PaymentType = 2
)

var DriverWalletPayment_PaymentType_name = map[int32]string{
	1: "PAY_OUT",
	2: "PAY_IN",
}

var DriverWalletPayment_PaymentType_value = map[string]int32{
	"PAY_OUT": 1,
	"PAY_IN":  2,
}

func (x DriverWalletPayment_PaymentType) Enum() *DriverWalletPayment_PaymentType {
	p := new(DriverWalletPayment_PaymentType)
	*p = x
	return p
}

func (x DriverWalletPayment_PaymentType) String() string {
	return proto.EnumName(DriverWalletPayment_PaymentType_name, int32(x))
}

func (x *DriverWalletPayment_PaymentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletPayment_PaymentType_value, data, "DriverWalletPayment_PaymentType")
	if err != nil {
		return err
	}
	*x = DriverWalletPayment_PaymentType(value)
	return nil
}

func (DriverWalletPayment_PaymentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{98, 0}
}

type DriverWalletPayment_PaymentStatus int32

const (
	DriverWalletPayment_INITED    DriverWalletPayment_PaymentStatus = 1
	DriverWalletPayment_COMPLETED DriverWalletPayment_PaymentStatus = 2
	DriverWalletPayment_REVOKED   DriverWalletPayment_PaymentStatus = 3
)

var DriverWalletPayment_PaymentStatus_name = map[int32]string{
	1: "INITED",
	2: "COMPLETED",
	3: "REVOKED",
}

var DriverWalletPayment_PaymentStatus_value = map[string]int32{
	"INITED":    1,
	"COMPLETED": 2,
	"REVOKED":   3,
}

func (x DriverWalletPayment_PaymentStatus) Enum() *DriverWalletPayment_PaymentStatus {
	p := new(DriverWalletPayment_PaymentStatus)
	*p = x
	return p
}

func (x DriverWalletPayment_PaymentStatus) String() string {
	return proto.EnumName(DriverWalletPayment_PaymentStatus_name, int32(x))
}

func (x *DriverWalletPayment_PaymentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletPayment_PaymentStatus_value, data, "DriverWalletPayment_PaymentStatus")
	if err != nil {
		return err
	}
	*x = DriverWalletPayment_PaymentStatus(value)
	return nil
}

func (DriverWalletPayment_PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{98, 1}
}

type DriverWalletRecord_TransactionType int32

const (
	DriverWalletRecord_TOP_UP   DriverWalletRecord_TransactionType = 1
	DriverWalletRecord_WITHDRAW DriverWalletRecord_TransactionType = 2
	DriverWalletRecord_PAYMENT  DriverWalletRecord_TransactionType = 3
)

var DriverWalletRecord_TransactionType_name = map[int32]string{
	1: "TOP_UP",
	2: "WITHDRAW",
	3: "PAYMENT",
}

var DriverWalletRecord_TransactionType_value = map[string]int32{
	"TOP_UP":   1,
	"WITHDRAW": 2,
	"PAYMENT":  3,
}

func (x DriverWalletRecord_TransactionType) Enum() *DriverWalletRecord_TransactionType {
	p := new(DriverWalletRecord_TransactionType)
	*p = x
	return p
}

func (x DriverWalletRecord_TransactionType) String() string {
	return proto.EnumName(DriverWalletRecord_TransactionType_name, int32(x))
}

func (x *DriverWalletRecord_TransactionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletRecord_TransactionType_value, data, "DriverWalletRecord_TransactionType")
	if err != nil {
		return err
	}
	*x = DriverWalletRecord_TransactionType(value)
	return nil
}

func (DriverWalletRecord_TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{99, 0}
}

type DriverWalletRecord_AmountType int32

const (
	DriverWalletRecord_CREDIT DriverWalletRecord_AmountType = 1
	DriverWalletRecord_DEBIT  DriverWalletRecord_AmountType = 2
)

var DriverWalletRecord_AmountType_name = map[int32]string{
	1: "CREDIT",
	2: "DEBIT",
}

var DriverWalletRecord_AmountType_value = map[string]int32{
	"CREDIT": 1,
	"DEBIT":  2,
}

func (x DriverWalletRecord_AmountType) Enum() *DriverWalletRecord_AmountType {
	p := new(DriverWalletRecord_AmountType)
	*p = x
	return p
}

func (x DriverWalletRecord_AmountType) String() string {
	return proto.EnumName(DriverWalletRecord_AmountType_name, int32(x))
}

func (x *DriverWalletRecord_AmountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverWalletRecord_AmountType_value, data, "DriverWalletRecord_AmountType")
	if err != nil {
		return err
	}
	*x = DriverWalletRecord_AmountType(value)
	return nil
}

func (DriverWalletRecord_AmountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{99, 1}
}

type Penalty_Category int32

const (
	Penalty_WARNING     Penalty_Category = 1
	Penalty_SUSPENSION  Penalty_Category = 2
	Penalty_TERMINATION Penalty_Category = 3
	Penalty_QMS_POINTS  Penalty_Category = 4
	Penalty_FINE        Penalty_Category = 5
)

var Penalty_Category_name = map[int32]string{
	1: "WARNING",
	2: "SUSPENSION",
	3: "TERMINATION",
	4: "QMS_POINTS",
	5: "FINE",
}

var Penalty_Category_value = map[string]int32{
	"WARNING":     1,
	"SUSPENSION":  2,
	"TERMINATION": 3,
	"QMS_POINTS":  4,
	"FINE":        5,
}

func (x Penalty_Category) Enum() *Penalty_Category {
	p := new(Penalty_Category)
	*p = x
	return p
}

func (x Penalty_Category) String() string {
	return proto.EnumName(Penalty_Category_name, int32(x))
}

func (x *Penalty_Category) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Penalty_Category_value, data, "Penalty_Category")
	if err != nil {
		return err
	}
	*x = Penalty_Category(value)
	return nil
}

func (Penalty_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{100, 0}
}

type Penalty_SuspensionType int32

const (
	Penalty_DEFAULT         Penalty_SuspensionType = 0
	Penalty_CANNOT_CHECKIN  Penalty_SuspensionType = 1
	Penalty_CANNOT_WITHDRAW Penalty_SuspensionType = 2
)

var Penalty_SuspensionType_name = map[int32]string{
	0: "DEFAULT",
	1: "CANNOT_CHECKIN",
	2: "CANNOT_WITHDRAW",
}

var Penalty_SuspensionType_value = map[string]int32{
	"DEFAULT":         0,
	"CANNOT_CHECKIN":  1,
	"CANNOT_WITHDRAW": 2,
}

func (x Penalty_SuspensionType) Enum() *Penalty_SuspensionType {
	p := new(Penalty_SuspensionType)
	*p = x
	return p
}

func (x Penalty_SuspensionType) String() string {
	return proto.EnumName(Penalty_SuspensionType_name, int32(x))
}

func (x *Penalty_SuspensionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Penalty_SuspensionType_value, data, "Penalty_SuspensionType")
	if err != nil {
		return err
	}
	*x = Penalty_SuspensionType(value)
	return nil
}

func (Penalty_SuspensionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{100, 1}
}

type Penalty_FineType int32

const (
	Penalty_TYPE_FINE_DEFAULT         Penalty_FineType = 0
	Penalty_TYPE_FINE_CUSTOMIZED      Penalty_FineType = 1
	Penalty_TYPE_FINE_SHIPPING_FEE    Penalty_FineType = 2
	Penalty_TYPE_FINE_INCENTIVE_BONUS Penalty_FineType = 3
)

var Penalty_FineType_name = map[int32]string{
	0: "TYPE_FINE_DEFAULT",
	1: "TYPE_FINE_CUSTOMIZED",
	2: "TYPE_FINE_SHIPPING_FEE",
	3: "TYPE_FINE_INCENTIVE_BONUS",
}

var Penalty_FineType_value = map[string]int32{
	"TYPE_FINE_DEFAULT":         0,
	"TYPE_FINE_CUSTOMIZED":      1,
	"TYPE_FINE_SHIPPING_FEE":    2,
	"TYPE_FINE_INCENTIVE_BONUS": 3,
}

func (x Penalty_FineType) Enum() *Penalty_FineType {
	p := new(Penalty_FineType)
	*p = x
	return p
}

func (x Penalty_FineType) String() string {
	return proto.EnumName(Penalty_FineType_name, int32(x))
}

func (x *Penalty_FineType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Penalty_FineType_value, data, "Penalty_FineType")
	if err != nil {
		return err
	}
	*x = Penalty_FineType(value)
	return nil
}

func (Penalty_FineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{100, 2}
}

type Penalty_Status int32

const (
	Penalty_INITIATED        Penalty_Status = 1
	Penalty_PENALIZED        Penalty_Status = 2
	Penalty_PENALIZED_FAILED Penalty_Status = 3
	Penalty_REVOKED          Penalty_Status = 4
)

var Penalty_Status_name = map[int32]string{
	1: "INITIATED",
	2: "PENALIZED",
	3: "PENALIZED_FAILED",
	4: "REVOKED",
}

var Penalty_Status_value = map[string]int32{
	"INITIATED":        1,
	"PENALIZED":        2,
	"PENALIZED_FAILED": 3,
	"REVOKED":          4,
}

func (x Penalty_Status) Enum() *Penalty_Status {
	p := new(Penalty_Status)
	*p = x
	return p
}

func (x Penalty_Status) String() string {
	return proto.EnumName(Penalty_Status_name, int32(x))
}

func (x *Penalty_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Penalty_Status_value, data, "Penalty_Status")
	if err != nil {
		return err
	}
	*x = Penalty_Status(value)
	return nil
}

func (Penalty_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{100, 3}
}

type Violation_Status int32

const (
	Violation_INITIATED          Violation_Status = 1
	Violation_NO_NEED_PENALTY    Violation_Status = 2
	Violation_PENALIZING         Violation_Status = 3
	Violation_PENALIZED          Violation_Status = 4
	Violation_FAILED_TO_PENALIZE Violation_Status = 5
	Violation_REVOKED            Violation_Status = 6
)

var Violation_Status_name = map[int32]string{
	1: "INITIATED",
	2: "NO_NEED_PENALTY",
	3: "PENALIZING",
	4: "PENALIZED",
	5: "FAILED_TO_PENALIZE",
	6: "REVOKED",
}

var Violation_Status_value = map[string]int32{
	"INITIATED":          1,
	"NO_NEED_PENALTY":    2,
	"PENALIZING":         3,
	"PENALIZED":          4,
	"FAILED_TO_PENALIZE": 5,
	"REVOKED":            6,
}

func (x Violation_Status) Enum() *Violation_Status {
	p := new(Violation_Status)
	*p = x
	return p
}

func (x Violation_Status) String() string {
	return proto.EnumName(Violation_Status_name, int32(x))
}

func (x *Violation_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Violation_Status_value, data, "Violation_Status")
	if err != nil {
		return err
	}
	*x = Violation_Status(value)
	return nil
}

func (Violation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{101, 0}
}

type Area_Status int32

const (
	Area_INACTIVE Area_Status = 0
	Area_ACTIVE   Area_Status = 1
)

var Area_Status_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var Area_Status_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x Area_Status) Enum() *Area_Status {
	p := new(Area_Status)
	*p = x
	return p
}

func (x Area_Status) String() string {
	return proto.EnumName(Area_Status_name, int32(x))
}

func (x *Area_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Area_Status_value, data, "Area_Status")
	if err != nil {
		return err
	}
	*x = Area_Status(value)
	return nil
}

func (Area_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{105, 0}
}

type District_Status int32

const (
	District_INACTIVE District_Status = 0
	District_ACTIVE   District_Status = 1
)

var District_Status_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var District_Status_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x District_Status) Enum() *District_Status {
	p := new(District_Status)
	*p = x
	return p
}

func (x District_Status) String() string {
	return proto.EnumName(District_Status_name, int32(x))
}

func (x *District_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(District_Status_value, data, "District_Status")
	if err != nil {
		return err
	}
	*x = District_Status(value)
	return nil
}

func (District_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{106, 0}
}

type AlgoParameterConfig_Module int32

const (
	AlgoParameterConfig_Module_Unknown                       AlgoParameterConfig_Module = 0
	AlgoParameterConfig_Module_OrderFlow                     AlgoParameterConfig_Module = 1
	AlgoParameterConfig_Module_DriverFiltering               AlgoParameterConfig_Module = 2
	AlgoParameterConfig_Module_MatchAssessment               AlgoParameterConfig_Module = 3
	AlgoParameterConfig_Module_ETA                           AlgoParameterConfig_Module = 4
	AlgoParameterConfig_Module_ShippingFee                   AlgoParameterConfig_Module = 5
	AlgoParameterConfig_Module_BuyerShippingFee              AlgoParameterConfig_Module = 6
	AlgoParameterConfig_Module_DriverShippingFee             AlgoParameterConfig_Module = 7
	AlgoParameterConfig_Module_ServiceFee                    AlgoParameterConfig_Module = 8
	AlgoParameterConfig_Module_DelayAssign                   AlgoParameterConfig_Module = 9
	AlgoParameterConfig_Module_DFF                           AlgoParameterConfig_Module = 10
	AlgoParameterConfig_Module_Insurance                     AlgoParameterConfig_Module = 11
	AlgoParameterConfig_Module_Instant_Shopee_Shipping_Fee   AlgoParameterConfig_Module = 12
	AlgoParameterConfig_Module_Instant_Delivery_Shipping_Fee AlgoParameterConfig_Module = 13
	AlgoParameterConfig_Module_Small_Order_Fee               AlgoParameterConfig_Module = 14
	AlgoParameterConfig_Module_Non_Partner_Fee               AlgoParameterConfig_Module = 15
	AlgoParameterConfig_Module_Working_Hours                 AlgoParameterConfig_Module = 16
)

var AlgoParameterConfig_Module_name = map[int32]string{
	0:  "Module_Unknown",
	1:  "Module_OrderFlow",
	2:  "Module_DriverFiltering",
	3:  "Module_MatchAssessment",
	4:  "Module_ETA",
	5:  "Module_ShippingFee",
	6:  "Module_BuyerShippingFee",
	7:  "Module_DriverShippingFee",
	8:  "Module_ServiceFee",
	9:  "Module_DelayAssign",
	10: "Module_DFF",
	11: "Module_Insurance",
	12: "Module_Instant_Shopee_Shipping_Fee",
	13: "Module_Instant_Delivery_Shipping_Fee",
	14: "Module_Small_Order_Fee",
	15: "Module_Non_Partner_Fee",
	16: "Module_Working_Hours",
}

var AlgoParameterConfig_Module_value = map[string]int32{
	"Module_Unknown":                       0,
	"Module_OrderFlow":                     1,
	"Module_DriverFiltering":               2,
	"Module_MatchAssessment":               3,
	"Module_ETA":                           4,
	"Module_ShippingFee":                   5,
	"Module_BuyerShippingFee":              6,
	"Module_DriverShippingFee":             7,
	"Module_ServiceFee":                    8,
	"Module_DelayAssign":                   9,
	"Module_DFF":                           10,
	"Module_Insurance":                     11,
	"Module_Instant_Shopee_Shipping_Fee":   12,
	"Module_Instant_Delivery_Shipping_Fee": 13,
	"Module_Small_Order_Fee":               14,
	"Module_Non_Partner_Fee":               15,
	"Module_Working_Hours":                 16,
}

func (x AlgoParameterConfig_Module) Enum() *AlgoParameterConfig_Module {
	p := new(AlgoParameterConfig_Module)
	*p = x
	return p
}

func (x AlgoParameterConfig_Module) String() string {
	return proto.EnumName(AlgoParameterConfig_Module_name, int32(x))
}

func (x *AlgoParameterConfig_Module) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AlgoParameterConfig_Module_value, data, "AlgoParameterConfig_Module")
	if err != nil {
		return err
	}
	*x = AlgoParameterConfig_Module(value)
	return nil
}

func (AlgoParameterConfig_Module) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 0}
}

type AlgoParameterConfig_Priority int32

const (
	AlgoParameterConfig_Priority_Unknown AlgoParameterConfig_Priority = 0
	AlgoParameterConfig_Priority_Low     AlgoParameterConfig_Priority = 1
	AlgoParameterConfig_Priority_Mid     AlgoParameterConfig_Priority = 2
	AlgoParameterConfig_Priority_High    AlgoParameterConfig_Priority = 3
)

var AlgoParameterConfig_Priority_name = map[int32]string{
	0: "Priority_Unknown",
	1: "Priority_Low",
	2: "Priority_Mid",
	3: "Priority_High",
}

var AlgoParameterConfig_Priority_value = map[string]int32{
	"Priority_Unknown": 0,
	"Priority_Low":     1,
	"Priority_Mid":     2,
	"Priority_High":    3,
}

func (x AlgoParameterConfig_Priority) Enum() *AlgoParameterConfig_Priority {
	p := new(AlgoParameterConfig_Priority)
	*p = x
	return p
}

func (x AlgoParameterConfig_Priority) String() string {
	return proto.EnumName(AlgoParameterConfig_Priority_name, int32(x))
}

func (x *AlgoParameterConfig_Priority) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AlgoParameterConfig_Priority_value, data, "AlgoParameterConfig_Priority")
	if err != nil {
		return err
	}
	*x = AlgoParameterConfig_Priority(value)
	return nil
}

func (AlgoParameterConfig_Priority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 1}
}

type AlgoParameterConfig_DFFSetting_DFFSettingMode int32

const (
	AlgoParameterConfig_DFFSetting_DFF_ONLY      AlgoParameterConfig_DFFSetting_DFFSettingMode = 1
	AlgoParameterConfig_DFFSetting_APPLY_BY_ALGO AlgoParameterConfig_DFFSetting_DFFSettingMode = 2
	AlgoParameterConfig_DFFSetting_MFF_ONLY      AlgoParameterConfig_DFFSetting_DFFSettingMode = 3
)

var AlgoParameterConfig_DFFSetting_DFFSettingMode_name = map[int32]string{
	1: "DFF_ONLY",
	2: "APPLY_BY_ALGO",
	3: "MFF_ONLY",
}

var AlgoParameterConfig_DFFSetting_DFFSettingMode_value = map[string]int32{
	"DFF_ONLY":      1,
	"APPLY_BY_ALGO": 2,
	"MFF_ONLY":      3,
}

func (x AlgoParameterConfig_DFFSetting_DFFSettingMode) Enum() *AlgoParameterConfig_DFFSetting_DFFSettingMode {
	p := new(AlgoParameterConfig_DFFSetting_DFFSettingMode)
	*p = x
	return p
}

func (x AlgoParameterConfig_DFFSetting_DFFSettingMode) String() string {
	return proto.EnumName(AlgoParameterConfig_DFFSetting_DFFSettingMode_name, int32(x))
}

func (x *AlgoParameterConfig_DFFSetting_DFFSettingMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AlgoParameterConfig_DFFSetting_DFFSettingMode_value, data, "AlgoParameterConfig_DFFSetting_DFFSettingMode")
	if err != nil {
		return err
	}
	*x = AlgoParameterConfig_DFFSetting_DFFSettingMode(value)
	return nil
}

func (AlgoParameterConfig_DFFSetting_DFFSettingMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 14, 0}
}

type Overlay_TagsLogic int32

const (
	Overlay_TAGS_LOGIC_AND Overlay_TagsLogic = 1
	Overlay_TAGS_LOGIC_OR  Overlay_TagsLogic = 2
)

var Overlay_TagsLogic_name = map[int32]string{
	1: "TAGS_LOGIC_AND",
	2: "TAGS_LOGIC_OR",
}

var Overlay_TagsLogic_value = map[string]int32{
	"TAGS_LOGIC_AND": 1,
	"TAGS_LOGIC_OR":  2,
}

func (x Overlay_TagsLogic) Enum() *Overlay_TagsLogic {
	p := new(Overlay_TagsLogic)
	*p = x
	return p
}

func (x Overlay_TagsLogic) String() string {
	return proto.EnumName(Overlay_TagsLogic_name, int32(x))
}

func (x *Overlay_TagsLogic) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Overlay_TagsLogic_value, data, "Overlay_TagsLogic")
	if err != nil {
		return err
	}
	*x = Overlay_TagsLogic(value)
	return nil
}

func (Overlay_TagsLogic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{111, 0}
}

type Overlay_Status int32

const (
	Overlay_STATUS_DISABLED Overlay_Status = 1
	Overlay_STATUS_ENABLED  Overlay_Status = 2
)

var Overlay_Status_name = map[int32]string{
	1: "STATUS_DISABLED",
	2: "STATUS_ENABLED",
}

var Overlay_Status_value = map[string]int32{
	"STATUS_DISABLED": 1,
	"STATUS_ENABLED":  2,
}

func (x Overlay_Status) Enum() *Overlay_Status {
	p := new(Overlay_Status)
	*p = x
	return p
}

func (x Overlay_Status) String() string {
	return proto.EnumName(Overlay_Status_name, int32(x))
}

func (x *Overlay_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Overlay_Status_value, data, "Overlay_Status")
	if err != nil {
		return err
	}
	*x = Overlay_Status(value)
	return nil
}

func (Overlay_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{111, 1}
}

type Overlay_ShowStatus int32

const (
	Overlay_ONGOING  Overlay_ShowStatus = 1
	Overlay_UPCOMING Overlay_ShowStatus = 2
	Overlay_DISABLED Overlay_ShowStatus = 3
	Overlay_PAST     Overlay_ShowStatus = 4
)

var Overlay_ShowStatus_name = map[int32]string{
	1: "ONGOING",
	2: "UPCOMING",
	3: "DISABLED",
	4: "PAST",
}

var Overlay_ShowStatus_value = map[string]int32{
	"ONGOING":  1,
	"UPCOMING": 2,
	"DISABLED": 3,
	"PAST":     4,
}

func (x Overlay_ShowStatus) Enum() *Overlay_ShowStatus {
	p := new(Overlay_ShowStatus)
	*p = x
	return p
}

func (x Overlay_ShowStatus) String() string {
	return proto.EnumName(Overlay_ShowStatus_name, int32(x))
}

func (x *Overlay_ShowStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Overlay_ShowStatus_value, data, "Overlay_ShowStatus")
	if err != nil {
		return err
	}
	*x = Overlay_ShowStatus(value)
	return nil
}

func (Overlay_ShowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{111, 2}
}

type MerchantWalletAdjustmentOrder_AdjustmentStatus int32

const (
	MerchantWalletAdjustmentOrder_INITED    MerchantWalletAdjustmentOrder_AdjustmentStatus = 1
	MerchantWalletAdjustmentOrder_APPROVED  MerchantWalletAdjustmentOrder_AdjustmentStatus = 2
	MerchantWalletAdjustmentOrder_COMPLETED MerchantWalletAdjustmentOrder_AdjustmentStatus = 3
	MerchantWalletAdjustmentOrder_FAILED    MerchantWalletAdjustmentOrder_AdjustmentStatus = 4
	MerchantWalletAdjustmentOrder_EXCEPTION MerchantWalletAdjustmentOrder_AdjustmentStatus = 5
)

var MerchantWalletAdjustmentOrder_AdjustmentStatus_name = map[int32]string{
	1: "INITED",
	2: "APPROVED",
	3: "COMPLETED",
	4: "FAILED",
	5: "EXCEPTION",
}

var MerchantWalletAdjustmentOrder_AdjustmentStatus_value = map[string]int32{
	"INITED":    1,
	"APPROVED":  2,
	"COMPLETED": 3,
	"FAILED":    4,
	"EXCEPTION": 5,
}

func (x MerchantWalletAdjustmentOrder_AdjustmentStatus) Enum() *MerchantWalletAdjustmentOrder_AdjustmentStatus {
	p := new(MerchantWalletAdjustmentOrder_AdjustmentStatus)
	*p = x
	return p
}

func (x MerchantWalletAdjustmentOrder_AdjustmentStatus) String() string {
	return proto.EnumName(MerchantWalletAdjustmentOrder_AdjustmentStatus_name, int32(x))
}

func (x *MerchantWalletAdjustmentOrder_AdjustmentStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletAdjustmentOrder_AdjustmentStatus_value, data, "MerchantWalletAdjustmentOrder_AdjustmentStatus")
	if err != nil {
		return err
	}
	*x = MerchantWalletAdjustmentOrder_AdjustmentStatus(value)
	return nil
}

func (MerchantWalletAdjustmentOrder_AdjustmentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{113, 0}
}

type MerchantWalletAdjustmentOrder_AmountType int32

const (
	MerchantWalletAdjustmentOrder_CREDIT MerchantWalletAdjustmentOrder_AmountType = 1
	MerchantWalletAdjustmentOrder_DEBIT  MerchantWalletAdjustmentOrder_AmountType = 2
)

var MerchantWalletAdjustmentOrder_AmountType_name = map[int32]string{
	1: "CREDIT",
	2: "DEBIT",
}

var MerchantWalletAdjustmentOrder_AmountType_value = map[string]int32{
	"CREDIT": 1,
	"DEBIT":  2,
}

func (x MerchantWalletAdjustmentOrder_AmountType) Enum() *MerchantWalletAdjustmentOrder_AmountType {
	p := new(MerchantWalletAdjustmentOrder_AmountType)
	*p = x
	return p
}

func (x MerchantWalletAdjustmentOrder_AmountType) String() string {
	return proto.EnumName(MerchantWalletAdjustmentOrder_AmountType_name, int32(x))
}

func (x *MerchantWalletAdjustmentOrder_AmountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletAdjustmentOrder_AmountType_value, data, "MerchantWalletAdjustmentOrder_AmountType")
	if err != nil {
		return err
	}
	*x = MerchantWalletAdjustmentOrder_AmountType(value)
	return nil
}

func (MerchantWalletAdjustmentOrder_AmountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{113, 1}
}

type MerchantWalletAdjustmentOrder_AuditResult int32

const (
	MerchantWalletAdjustmentOrder_UNKNOWN MerchantWalletAdjustmentOrder_AuditResult = 0
	MerchantWalletAdjustmentOrder_APPROVE MerchantWalletAdjustmentOrder_AuditResult = 1
	MerchantWalletAdjustmentOrder_REJECT  MerchantWalletAdjustmentOrder_AuditResult = 2
)

var MerchantWalletAdjustmentOrder_AuditResult_name = map[int32]string{
	0: "UNKNOWN",
	1: "APPROVE",
	2: "REJECT",
}

var MerchantWalletAdjustmentOrder_AuditResult_value = map[string]int32{
	"UNKNOWN": 0,
	"APPROVE": 1,
	"REJECT":  2,
}

func (x MerchantWalletAdjustmentOrder_AuditResult) Enum() *MerchantWalletAdjustmentOrder_AuditResult {
	p := new(MerchantWalletAdjustmentOrder_AuditResult)
	*p = x
	return p
}

func (x MerchantWalletAdjustmentOrder_AuditResult) String() string {
	return proto.EnumName(MerchantWalletAdjustmentOrder_AuditResult_name, int32(x))
}

func (x *MerchantWalletAdjustmentOrder_AuditResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletAdjustmentOrder_AuditResult_value, data, "MerchantWalletAdjustmentOrder_AuditResult")
	if err != nil {
		return err
	}
	*x = MerchantWalletAdjustmentOrder_AuditResult(value)
	return nil
}

func (MerchantWalletAdjustmentOrder_AuditResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{113, 2}
}

type MerchantWalletAdjustmentOrder_RejectReason int32

const (
	MerchantWalletAdjustmentOrder_DEFAULT MerchantWalletAdjustmentOrder_RejectReason = 0
)

var MerchantWalletAdjustmentOrder_RejectReason_name = map[int32]string{
	0: "DEFAULT",
}

var MerchantWalletAdjustmentOrder_RejectReason_value = map[string]int32{
	"DEFAULT": 0,
}

func (x MerchantWalletAdjustmentOrder_RejectReason) Enum() *MerchantWalletAdjustmentOrder_RejectReason {
	p := new(MerchantWalletAdjustmentOrder_RejectReason)
	*p = x
	return p
}

func (x MerchantWalletAdjustmentOrder_RejectReason) String() string {
	return proto.EnumName(MerchantWalletAdjustmentOrder_RejectReason_name, int32(x))
}

func (x *MerchantWalletAdjustmentOrder_RejectReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletAdjustmentOrder_RejectReason_value, data, "MerchantWalletAdjustmentOrder_RejectReason")
	if err != nil {
		return err
	}
	*x = MerchantWalletAdjustmentOrder_RejectReason(value)
	return nil
}

func (MerchantWalletAdjustmentOrder_RejectReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{113, 3}
}

type WalletSettlementOrder_SettlementStatus int32

const (
	WalletSettlementOrder_INITED     WalletSettlementOrder_SettlementStatus = 1
	WalletSettlementOrder_PROCESSING WalletSettlementOrder_SettlementStatus = 2
	WalletSettlementOrder_EXCEPTION  WalletSettlementOrder_SettlementStatus = 3
	WalletSettlementOrder_COMPLETED  WalletSettlementOrder_SettlementStatus = 4
	WalletSettlementOrder_FAILED     WalletSettlementOrder_SettlementStatus = 5
)

var WalletSettlementOrder_SettlementStatus_name = map[int32]string{
	1: "INITED",
	2: "PROCESSING",
	3: "EXCEPTION",
	4: "COMPLETED",
	5: "FAILED",
}

var WalletSettlementOrder_SettlementStatus_value = map[string]int32{
	"INITED":     1,
	"PROCESSING": 2,
	"EXCEPTION":  3,
	"COMPLETED":  4,
	"FAILED":     5,
}

func (x WalletSettlementOrder_SettlementStatus) Enum() *WalletSettlementOrder_SettlementStatus {
	p := new(WalletSettlementOrder_SettlementStatus)
	*p = x
	return p
}

func (x WalletSettlementOrder_SettlementStatus) String() string {
	return proto.EnumName(WalletSettlementOrder_SettlementStatus_name, int32(x))
}

func (x *WalletSettlementOrder_SettlementStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WalletSettlementOrder_SettlementStatus_value, data, "WalletSettlementOrder_SettlementStatus")
	if err != nil {
		return err
	}
	*x = WalletSettlementOrder_SettlementStatus(value)
	return nil
}

func (WalletSettlementOrder_SettlementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{114, 0}
}

type MerchantWalletWithdrawOrder_WithdrawStatus int32

const (
	MerchantWalletWithdrawOrder_INITED     MerchantWalletWithdrawOrder_WithdrawStatus = 1
	MerchantWalletWithdrawOrder_PROCESSING MerchantWalletWithdrawOrder_WithdrawStatus = 2
	MerchantWalletWithdrawOrder_EXCEPTION  MerchantWalletWithdrawOrder_WithdrawStatus = 3
	MerchantWalletWithdrawOrder_COMPLETED  MerchantWalletWithdrawOrder_WithdrawStatus = 4
	MerchantWalletWithdrawOrder_FAILED     MerchantWalletWithdrawOrder_WithdrawStatus = 5
)

var MerchantWalletWithdrawOrder_WithdrawStatus_name = map[int32]string{
	1: "INITED",
	2: "PROCESSING",
	3: "EXCEPTION",
	4: "COMPLETED",
	5: "FAILED",
}

var MerchantWalletWithdrawOrder_WithdrawStatus_value = map[string]int32{
	"INITED":     1,
	"PROCESSING": 2,
	"EXCEPTION":  3,
	"COMPLETED":  4,
	"FAILED":     5,
}

func (x MerchantWalletWithdrawOrder_WithdrawStatus) Enum() *MerchantWalletWithdrawOrder_WithdrawStatus {
	p := new(MerchantWalletWithdrawOrder_WithdrawStatus)
	*p = x
	return p
}

func (x MerchantWalletWithdrawOrder_WithdrawStatus) String() string {
	return proto.EnumName(MerchantWalletWithdrawOrder_WithdrawStatus_name, int32(x))
}

func (x *MerchantWalletWithdrawOrder_WithdrawStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletWithdrawOrder_WithdrawStatus_value, data, "MerchantWalletWithdrawOrder_WithdrawStatus")
	if err != nil {
		return err
	}
	*x = MerchantWalletWithdrawOrder_WithdrawStatus(value)
	return nil
}

func (MerchantWalletWithdrawOrder_WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{115, 0}
}

type MerchantWalletWithdrawOrder_PaymentMethod int32

const (
	MerchantWalletWithdrawOrder_BANK   MerchantWalletWithdrawOrder_PaymentMethod = 1
	MerchantWalletWithdrawOrder_WALLET MerchantWalletWithdrawOrder_PaymentMethod = 2
)

var MerchantWalletWithdrawOrder_PaymentMethod_name = map[int32]string{
	1: "BANK",
	2: "WALLET",
}

var MerchantWalletWithdrawOrder_PaymentMethod_value = map[string]int32{
	"BANK":   1,
	"WALLET": 2,
}

func (x MerchantWalletWithdrawOrder_PaymentMethod) Enum() *MerchantWalletWithdrawOrder_PaymentMethod {
	p := new(MerchantWalletWithdrawOrder_PaymentMethod)
	*p = x
	return p
}

func (x MerchantWalletWithdrawOrder_PaymentMethod) String() string {
	return proto.EnumName(MerchantWalletWithdrawOrder_PaymentMethod_name, int32(x))
}

func (x *MerchantWalletWithdrawOrder_PaymentMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletWithdrawOrder_PaymentMethod_value, data, "MerchantWalletWithdrawOrder_PaymentMethod")
	if err != nil {
		return err
	}
	*x = MerchantWalletWithdrawOrder_PaymentMethod(value)
	return nil
}

func (MerchantWalletWithdrawOrder_PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{115, 1}
}

type MerchantWalletWithdrawOrder_PayoutMode int32

const (
	MerchantWalletWithdrawOrder_UNKOWN MerchantWalletWithdrawOrder_PayoutMode = 0
	MerchantWalletWithdrawOrder_AUTO   MerchantWalletWithdrawOrder_PayoutMode = 1
	MerchantWalletWithdrawOrder_MANUAL MerchantWalletWithdrawOrder_PayoutMode = 2
)

var MerchantWalletWithdrawOrder_PayoutMode_name = map[int32]string{
	0: "UNKOWN",
	1: "AUTO",
	2: "MANUAL",
}

var MerchantWalletWithdrawOrder_PayoutMode_value = map[string]int32{
	"UNKOWN": 0,
	"AUTO":   1,
	"MANUAL": 2,
}

func (x MerchantWalletWithdrawOrder_PayoutMode) Enum() *MerchantWalletWithdrawOrder_PayoutMode {
	p := new(MerchantWalletWithdrawOrder_PayoutMode)
	*p = x
	return p
}

func (x MerchantWalletWithdrawOrder_PayoutMode) String() string {
	return proto.EnumName(MerchantWalletWithdrawOrder_PayoutMode_name, int32(x))
}

func (x *MerchantWalletWithdrawOrder_PayoutMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantWalletWithdrawOrder_PayoutMode_value, data, "MerchantWalletWithdrawOrder_PayoutMode")
	if err != nil {
		return err
	}
	*x = MerchantWalletWithdrawOrder_PayoutMode(value)
	return nil
}

func (MerchantWalletWithdrawOrder_PayoutMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{115, 2}
}

type ExpressContent_CollectFrom int32

const (
	ExpressContent_FROM_NONE      ExpressContent_CollectFrom = 0
	ExpressContent_FROM_SENDER    ExpressContent_CollectFrom = 1
	ExpressContent_FROM_RECIPIENT ExpressContent_CollectFrom = 2
)

var ExpressContent_CollectFrom_name = map[int32]string{
	0: "FROM_NONE",
	1: "FROM_SENDER",
	2: "FROM_RECIPIENT",
}

var ExpressContent_CollectFrom_value = map[string]int32{
	"FROM_NONE":      0,
	"FROM_SENDER":    1,
	"FROM_RECIPIENT": 2,
}

func (x ExpressContent_CollectFrom) Enum() *ExpressContent_CollectFrom {
	p := new(ExpressContent_CollectFrom)
	*p = x
	return p
}

func (x ExpressContent_CollectFrom) String() string {
	return proto.EnumName(ExpressContent_CollectFrom_name, int32(x))
}

func (x *ExpressContent_CollectFrom) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressContent_CollectFrom_value, data, "ExpressContent_CollectFrom")
	if err != nil {
		return err
	}
	*x = ExpressContent_CollectFrom(value)
	return nil
}

func (ExpressContent_CollectFrom) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{116, 0}
}

type ExpressContent_PayTo int32

const (
	ExpressContent_TO_NONE     ExpressContent_PayTo = 0
	ExpressContent_TO_MERCHANT ExpressContent_PayTo = 1
)

var ExpressContent_PayTo_name = map[int32]string{
	0: "TO_NONE",
	1: "TO_MERCHANT",
}

var ExpressContent_PayTo_value = map[string]int32{
	"TO_NONE":     0,
	"TO_MERCHANT": 1,
}

func (x ExpressContent_PayTo) Enum() *ExpressContent_PayTo {
	p := new(ExpressContent_PayTo)
	*p = x
	return p
}

func (x ExpressContent_PayTo) String() string {
	return proto.EnumName(ExpressContent_PayTo_name, int32(x))
}

func (x *ExpressContent_PayTo) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressContent_PayTo_value, data, "ExpressContent_PayTo")
	if err != nil {
		return err
	}
	*x = ExpressContent_PayTo(value)
	return nil
}

func (ExpressContent_PayTo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{116, 1}
}

type ExpressDelivery_OnHoldFlag int32

const (
	ExpressDelivery_DEFAULT ExpressDelivery_OnHoldFlag = 0
	ExpressDelivery_ON_HOLD ExpressDelivery_OnHoldFlag = 1
)

var ExpressDelivery_OnHoldFlag_name = map[int32]string{
	0: "DEFAULT",
	1: "ON_HOLD",
}

var ExpressDelivery_OnHoldFlag_value = map[string]int32{
	"DEFAULT": 0,
	"ON_HOLD": 1,
}

func (x ExpressDelivery_OnHoldFlag) Enum() *ExpressDelivery_OnHoldFlag {
	p := new(ExpressDelivery_OnHoldFlag)
	*p = x
	return p
}

func (x ExpressDelivery_OnHoldFlag) String() string {
	return proto.EnumName(ExpressDelivery_OnHoldFlag_name, int32(x))
}

func (x *ExpressDelivery_OnHoldFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressDelivery_OnHoldFlag_value, data, "ExpressDelivery_OnHoldFlag")
	if err != nil {
		return err
	}
	*x = ExpressDelivery_OnHoldFlag(value)
	return nil
}

func (ExpressDelivery_OnHoldFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117, 0}
}

type ExpressDelivery_DeliveryType int32

const (
	ExpressDelivery_UNKNOWN ExpressDelivery_DeliveryType = 0
	ExpressDelivery_BUYER   ExpressDelivery_DeliveryType = 1
	ExpressDelivery_OTHERS  ExpressDelivery_DeliveryType = 2
)

var ExpressDelivery_DeliveryType_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUYER",
	2: "OTHERS",
}

var ExpressDelivery_DeliveryType_value = map[string]int32{
	"UNKNOWN": 0,
	"BUYER":   1,
	"OTHERS":  2,
}

func (x ExpressDelivery_DeliveryType) Enum() *ExpressDelivery_DeliveryType {
	p := new(ExpressDelivery_DeliveryType)
	*p = x
	return p
}

func (x ExpressDelivery_DeliveryType) String() string {
	return proto.EnumName(ExpressDelivery_DeliveryType_name, int32(x))
}

func (x *ExpressDelivery_DeliveryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressDelivery_DeliveryType_value, data, "ExpressDelivery_DeliveryType")
	if err != nil {
		return err
	}
	*x = ExpressDelivery_DeliveryType(value)
	return nil
}

func (ExpressDelivery_DeliveryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117, 1}
}

type ExpressDelivery_CompleteReason int32

const (
	ExpressDelivery_DELIVERED_DEFAULT                    ExpressDelivery_CompleteReason = 0
	ExpressDelivery_DELIVERED_VEHICLE_BROKE              ExpressDelivery_CompleteReason = 1
	ExpressDelivery_DELIVERED_TRAFFIC_ACCIDENT           ExpressDelivery_CompleteReason = 2
	ExpressDelivery_DELIVERED_VICTIM_OF_CRIME            ExpressDelivery_CompleteReason = 3
	ExpressDelivery_DELIVERED_VICTIM_OF_RIOT             ExpressDelivery_CompleteReason = 4
	ExpressDelivery_DELIVERED_VICTIM_OF_NATURAL_DISASTER ExpressDelivery_CompleteReason = 5
	ExpressDelivery_DELIVERED_OTHERS                     ExpressDelivery_CompleteReason = 6
)

var ExpressDelivery_CompleteReason_name = map[int32]string{
	0: "DELIVERED_DEFAULT",
	1: "DELIVERED_VEHICLE_BROKE",
	2: "DELIVERED_TRAFFIC_ACCIDENT",
	3: "DELIVERED_VICTIM_OF_CRIME",
	4: "DELIVERED_VICTIM_OF_RIOT",
	5: "DELIVERED_VICTIM_OF_NATURAL_DISASTER",
	6: "DELIVERED_OTHERS",
}

var ExpressDelivery_CompleteReason_value = map[string]int32{
	"DELIVERED_DEFAULT":                    0,
	"DELIVERED_VEHICLE_BROKE":              1,
	"DELIVERED_TRAFFIC_ACCIDENT":           2,
	"DELIVERED_VICTIM_OF_CRIME":            3,
	"DELIVERED_VICTIM_OF_RIOT":             4,
	"DELIVERED_VICTIM_OF_NATURAL_DISASTER": 5,
	"DELIVERED_OTHERS":                     6,
}

func (x ExpressDelivery_CompleteReason) Enum() *ExpressDelivery_CompleteReason {
	p := new(ExpressDelivery_CompleteReason)
	*p = x
	return p
}

func (x ExpressDelivery_CompleteReason) String() string {
	return proto.EnumName(ExpressDelivery_CompleteReason_name, int32(x))
}

func (x *ExpressDelivery_CompleteReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressDelivery_CompleteReason_value, data, "ExpressDelivery_CompleteReason")
	if err != nil {
		return err
	}
	*x = ExpressDelivery_CompleteReason(value)
	return nil
}

func (ExpressDelivery_CompleteReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117, 2}
}

type ExpressDelivery_ReturnReason int32

const (
	ExpressDelivery_RETURNED_DEFAULT                    ExpressDelivery_ReturnReason = 0
	ExpressDelivery_RETURNED_VEHICLE_BROKE              ExpressDelivery_ReturnReason = 1
	ExpressDelivery_RETURNED_TRAFFIC_ACCIDENT           ExpressDelivery_ReturnReason = 2
	ExpressDelivery_RETURNED_VICTIM_OF_CRIME            ExpressDelivery_ReturnReason = 3
	ExpressDelivery_RETURNED_VICTIM_OF_RIOT             ExpressDelivery_ReturnReason = 4
	ExpressDelivery_RETURNED_VICTIM_OF_NATURAL_DISASTER ExpressDelivery_ReturnReason = 5
	ExpressDelivery_RETURNED_OTHERS                     ExpressDelivery_ReturnReason = 6
)

var ExpressDelivery_ReturnReason_name = map[int32]string{
	0: "RETURNED_DEFAULT",
	1: "RETURNED_VEHICLE_BROKE",
	2: "RETURNED_TRAFFIC_ACCIDENT",
	3: "RETURNED_VICTIM_OF_CRIME",
	4: "RETURNED_VICTIM_OF_RIOT",
	5: "RETURNED_VICTIM_OF_NATURAL_DISASTER",
	6: "RETURNED_OTHERS",
}

var ExpressDelivery_ReturnReason_value = map[string]int32{
	"RETURNED_DEFAULT":                    0,
	"RETURNED_VEHICLE_BROKE":              1,
	"RETURNED_TRAFFIC_ACCIDENT":           2,
	"RETURNED_VICTIM_OF_CRIME":            3,
	"RETURNED_VICTIM_OF_RIOT":             4,
	"RETURNED_VICTIM_OF_NATURAL_DISASTER": 5,
	"RETURNED_OTHERS":                     6,
}

func (x ExpressDelivery_ReturnReason) Enum() *ExpressDelivery_ReturnReason {
	p := new(ExpressDelivery_ReturnReason)
	*p = x
	return p
}

func (x ExpressDelivery_ReturnReason) String() string {
	return proto.EnumName(ExpressDelivery_ReturnReason_name, int32(x))
}

func (x *ExpressDelivery_ReturnReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressDelivery_ReturnReason_value, data, "ExpressDelivery_ReturnReason")
	if err != nil {
		return err
	}
	*x = ExpressDelivery_ReturnReason(value)
	return nil
}

func (ExpressDelivery_ReturnReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117, 3}
}

type ExpressAssignment_DepositStatus int32

const (
	ExpressAssignment_DEPOSIT_DEFAULT   ExpressAssignment_DepositStatus = 0
	ExpressAssignment_DEPOSIT_INITED    ExpressAssignment_DepositStatus = 1
	ExpressAssignment_DEPOSIT_DEPOSITED ExpressAssignment_DepositStatus = 2
	ExpressAssignment_DEPOSIT_REFUNDED  ExpressAssignment_DepositStatus = 3
)

var ExpressAssignment_DepositStatus_name = map[int32]string{
	0: "DEPOSIT_DEFAULT",
	1: "DEPOSIT_INITED",
	2: "DEPOSIT_DEPOSITED",
	3: "DEPOSIT_REFUNDED",
}

var ExpressAssignment_DepositStatus_value = map[string]int32{
	"DEPOSIT_DEFAULT":   0,
	"DEPOSIT_INITED":    1,
	"DEPOSIT_DEPOSITED": 2,
	"DEPOSIT_REFUNDED":  3,
}

func (x ExpressAssignment_DepositStatus) Enum() *ExpressAssignment_DepositStatus {
	p := new(ExpressAssignment_DepositStatus)
	*p = x
	return p
}

func (x ExpressAssignment_DepositStatus) String() string {
	return proto.EnumName(ExpressAssignment_DepositStatus_name, int32(x))
}

func (x *ExpressAssignment_DepositStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressAssignment_DepositStatus_value, data, "ExpressAssignment_DepositStatus")
	if err != nil {
		return err
	}
	*x = ExpressAssignment_DepositStatus(value)
	return nil
}

func (ExpressAssignment_DepositStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{119, 0}
}

type ExpressAuditOrder_AuditType int32

const (
	ExpressAuditOrder_Canceled  ExpressAuditOrder_AuditType = 1
	ExpressAuditOrder_Returning ExpressAuditOrder_AuditType = 2
)

var ExpressAuditOrder_AuditType_name = map[int32]string{
	1: "Canceled",
	2: "Returning",
}

var ExpressAuditOrder_AuditType_value = map[string]int32{
	"Canceled":  1,
	"Returning": 2,
}

func (x ExpressAuditOrder_AuditType) Enum() *ExpressAuditOrder_AuditType {
	p := new(ExpressAuditOrder_AuditType)
	*p = x
	return p
}

func (x ExpressAuditOrder_AuditType) String() string {
	return proto.EnumName(ExpressAuditOrder_AuditType_name, int32(x))
}

func (x *ExpressAuditOrder_AuditType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressAuditOrder_AuditType_value, data, "ExpressAuditOrder_AuditType")
	if err != nil {
		return err
	}
	*x = ExpressAuditOrder_AuditType(value)
	return nil
}

func (ExpressAuditOrder_AuditType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{121, 0}
}

type ExpressAuditOrder_OrderStatus int32

const (
	ExpressAuditOrder_CREATED  ExpressAuditOrder_OrderStatus = 1
	ExpressAuditOrder_APPROVED ExpressAuditOrder_OrderStatus = 2
	ExpressAuditOrder_CANCELED ExpressAuditOrder_OrderStatus = 3
)

var ExpressAuditOrder_OrderStatus_name = map[int32]string{
	1: "CREATED",
	2: "APPROVED",
	3: "CANCELED",
}

var ExpressAuditOrder_OrderStatus_value = map[string]int32{
	"CREATED":  1,
	"APPROVED": 2,
	"CANCELED": 3,
}

func (x ExpressAuditOrder_OrderStatus) Enum() *ExpressAuditOrder_OrderStatus {
	p := new(ExpressAuditOrder_OrderStatus)
	*p = x
	return p
}

func (x ExpressAuditOrder_OrderStatus) String() string {
	return proto.EnumName(ExpressAuditOrder_OrderStatus_name, int32(x))
}

func (x *ExpressAuditOrder_OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExpressAuditOrder_OrderStatus_value, data, "ExpressAuditOrder_OrderStatus")
	if err != nil {
		return err
	}
	*x = ExpressAuditOrder_OrderStatus(value)
	return nil
}

func (ExpressAuditOrder_OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{121, 1}
}

type SPXOrderContent_OrderSource int32

const (
	SPXOrderContent_SOURCE_SPX_INSTANT_SHOPEE   SPXOrderContent_OrderSource = 2
	SPXOrderContent_SOURCE_SPX_INSTANT_DELIVERY SPXOrderContent_OrderSource = 3
)

var SPXOrderContent_OrderSource_name = map[int32]string{
	2: "SOURCE_SPX_INSTANT_SHOPEE",
	3: "SOURCE_SPX_INSTANT_DELIVERY",
}

var SPXOrderContent_OrderSource_value = map[string]int32{
	"SOURCE_SPX_INSTANT_SHOPEE":   2,
	"SOURCE_SPX_INSTANT_DELIVERY": 3,
}

func (x SPXOrderContent_OrderSource) Enum() *SPXOrderContent_OrderSource {
	p := new(SPXOrderContent_OrderSource)
	*p = x
	return p
}

func (x SPXOrderContent_OrderSource) String() string {
	return proto.EnumName(SPXOrderContent_OrderSource_name, int32(x))
}

func (x *SPXOrderContent_OrderSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXOrderContent_OrderSource_value, data, "SPXOrderContent_OrderSource")
	if err != nil {
		return err
	}
	*x = SPXOrderContent_OrderSource(value)
	return nil
}

func (SPXOrderContent_OrderSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{123, 0}
}

// the flag bit pos in db flag field
type SPXOrder_FlagBit int32

const (
	SPXOrder_IS_RETURNED SPXOrder_FlagBit = 0
	SPXOrder_IS_REFUNDED SPXOrder_FlagBit = 1
)

var SPXOrder_FlagBit_name = map[int32]string{
	0: "IS_RETURNED",
	1: "IS_REFUNDED",
}

var SPXOrder_FlagBit_value = map[string]int32{
	"IS_RETURNED": 0,
	"IS_REFUNDED": 1,
}

func (x SPXOrder_FlagBit) Enum() *SPXOrder_FlagBit {
	p := new(SPXOrder_FlagBit)
	*p = x
	return p
}

func (x SPXOrder_FlagBit) String() string {
	return proto.EnumName(SPXOrder_FlagBit_name, int32(x))
}

func (x *SPXOrder_FlagBit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXOrder_FlagBit_value, data, "SPXOrder_FlagBit")
	if err != nil {
		return err
	}
	*x = SPXOrder_FlagBit(value)
	return nil
}

func (SPXOrder_FlagBit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{125, 0}
}

type SPXPayment_Type int32

const (
	SPXPayment_PLACE_ORDER   SPXPayment_Type = 1
	SPXPayment_REWRITE_ORDER SPXPayment_Type = 2
)

var SPXPayment_Type_name = map[int32]string{
	1: "PLACE_ORDER",
	2: "REWRITE_ORDER",
}

var SPXPayment_Type_value = map[string]int32{
	"PLACE_ORDER":   1,
	"REWRITE_ORDER": 2,
}

func (x SPXPayment_Type) Enum() *SPXPayment_Type {
	p := new(SPXPayment_Type)
	*p = x
	return p
}

func (x SPXPayment_Type) String() string {
	return proto.EnumName(SPXPayment_Type_name, int32(x))
}

func (x *SPXPayment_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXPayment_Type_value, data, "SPXPayment_Type")
	if err != nil {
		return err
	}
	*x = SPXPayment_Type(value)
	return nil
}

func (SPXPayment_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{126, 0}
}

type SPXReturnOrder_ReturnType int32

const (
	SPXReturnOrder_RETURN_TYPE_ORDER_CANCELLED SPXReturnOrder_ReturnType = 1
)

var SPXReturnOrder_ReturnType_name = map[int32]string{
	1: "RETURN_TYPE_ORDER_CANCELLED",
}

var SPXReturnOrder_ReturnType_value = map[string]int32{
	"RETURN_TYPE_ORDER_CANCELLED": 1,
}

func (x SPXReturnOrder_ReturnType) Enum() *SPXReturnOrder_ReturnType {
	p := new(SPXReturnOrder_ReturnType)
	*p = x
	return p
}

func (x SPXReturnOrder_ReturnType) String() string {
	return proto.EnumName(SPXReturnOrder_ReturnType_name, int32(x))
}

func (x *SPXReturnOrder_ReturnType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXReturnOrder_ReturnType_value, data, "SPXReturnOrder_ReturnType")
	if err != nil {
		return err
	}
	*x = SPXReturnOrder_ReturnType(value)
	return nil
}

func (SPXReturnOrder_ReturnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{127, 0}
}

type SPXReturnOrder_RefundType int32

const (
	SPXReturnOrder_REFUND_NONE SPXReturnOrder_RefundType = 1
	SPXReturnOrder_REFUND_FULL SPXReturnOrder_RefundType = 2
	SPXReturnOrder_REFUND_PART SPXReturnOrder_RefundType = 3
)

var SPXReturnOrder_RefundType_name = map[int32]string{
	1: "REFUND_NONE",
	2: "REFUND_FULL",
	3: "REFUND_PART",
}

var SPXReturnOrder_RefundType_value = map[string]int32{
	"REFUND_NONE": 1,
	"REFUND_FULL": 2,
	"REFUND_PART": 3,
}

func (x SPXReturnOrder_RefundType) Enum() *SPXReturnOrder_RefundType {
	p := new(SPXReturnOrder_RefundType)
	*p = x
	return p
}

func (x SPXReturnOrder_RefundType) String() string {
	return proto.EnumName(SPXReturnOrder_RefundType_name, int32(x))
}

func (x *SPXReturnOrder_RefundType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXReturnOrder_RefundType_value, data, "SPXReturnOrder_RefundType")
	if err != nil {
		return err
	}
	*x = SPXReturnOrder_RefundType(value)
	return nil
}

func (SPXReturnOrder_RefundType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{127, 1}
}

type SPXReturnOrder_ReturnStatus int32

const (
	SPXReturnOrder_RETURN_CREATED   SPXReturnOrder_ReturnStatus = 1
	SPXReturnOrder_RETURN_APPROVED  SPXReturnOrder_ReturnStatus = 2
	SPXReturnOrder_RETURN_COMPLETED SPXReturnOrder_ReturnStatus = 3
	SPXReturnOrder_RETURN_CANCELED  SPXReturnOrder_ReturnStatus = 4
)

var SPXReturnOrder_ReturnStatus_name = map[int32]string{
	1: "RETURN_CREATED",
	2: "RETURN_APPROVED",
	3: "RETURN_COMPLETED",
	4: "RETURN_CANCELED",
}

var SPXReturnOrder_ReturnStatus_value = map[string]int32{
	"RETURN_CREATED":   1,
	"RETURN_APPROVED":  2,
	"RETURN_COMPLETED": 3,
	"RETURN_CANCELED":  4,
}

func (x SPXReturnOrder_ReturnStatus) Enum() *SPXReturnOrder_ReturnStatus {
	p := new(SPXReturnOrder_ReturnStatus)
	*p = x
	return p
}

func (x SPXReturnOrder_ReturnStatus) String() string {
	return proto.EnumName(SPXReturnOrder_ReturnStatus_name, int32(x))
}

func (x *SPXReturnOrder_ReturnStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXReturnOrder_ReturnStatus_value, data, "SPXReturnOrder_ReturnStatus")
	if err != nil {
		return err
	}
	*x = SPXReturnOrder_ReturnStatus(value)
	return nil
}

func (SPXReturnOrder_ReturnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{127, 2}
}

type SPXReturnOrder_ReturnReason int32

const (
	// 同SPX Order cancel reason
	// https://docs.google.com/spreadsheets/d/1lymx1sfZpp69ZRgvve_yrN61IzSarygDX_JkrRmZer8/edit#gid=338141721
	SPXReturnOrder_EXPRESS_OTHERS                                SPXReturnOrder_ReturnReason = 1000
	SPXReturnOrder_EXPRESS_BAD_WEATHER                           SPXReturnOrder_ReturnReason = 1001
	SPXReturnOrder_EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER        SPXReturnOrder_ReturnReason = 1002
	SPXReturnOrder_EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER       SPXReturnOrder_ReturnReason = 1003
	SPXReturnOrder_EXPRESS_DRIVER_COULD_NOT_FIND_SELLER          SPXReturnOrder_ReturnReason = 1004
	SPXReturnOrder_EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT   SPXReturnOrder_ReturnReason = 1005
	SPXReturnOrder_EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL  SPXReturnOrder_ReturnReason = 1006
	SPXReturnOrder_EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR            SPXReturnOrder_ReturnReason = 1007
	SPXReturnOrder_EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY     SPXReturnOrder_ReturnReason = 1008
	SPXReturnOrder_EXPRESS_PKG_IS_NOT_WELL_PREPARED              SPXReturnOrder_ReturnReason = 1009
	SPXReturnOrder_EXPRESS_PROHIBITED_ITEM                       SPXReturnOrder_ReturnReason = 1010
	SPXReturnOrder_EXPRESS_STORE_WAS_CLOSED                      SPXReturnOrder_ReturnReason = 1011
	SPXReturnOrder_EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD        SPXReturnOrder_ReturnReason = 1012
	SPXReturnOrder_EXPRESS_CUSTOMER_HAS_CHANGE_PLAN              SPXReturnOrder_ReturnReason = 1013
	SPXReturnOrder_EXPRESS_CUSTOMER_INPUT_WRONG_INFO             SPXReturnOrder_ReturnReason = 1014
	SPXReturnOrder_EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER           SPXReturnOrder_ReturnReason = 1015
	SPXReturnOrder_EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL       SPXReturnOrder_ReturnReason = 1016
	SPXReturnOrder_EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER       SPXReturnOrder_ReturnReason = 1017
	SPXReturnOrder_EXPRESS_DRIVER_IS_TOO_FAR                     SPXReturnOrder_ReturnReason = 1018
	SPXReturnOrder_EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG          SPXReturnOrder_ReturnReason = 1019
	SPXReturnOrder_EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT          SPXReturnOrder_ReturnReason = 1020
	SPXReturnOrder_EXPRESS_DRIVER_REJECT_MY_ITEM                 SPXReturnOrder_ReturnReason = 1021
	SPXReturnOrder_EXPRESS_CAN_NOT_MATCH_DRIVER                  SPXReturnOrder_ReturnReason = 1022
	SPXReturnOrder_EXPRESS_PAYMENT_FAILED                        SPXReturnOrder_ReturnReason = 1023
	SPXReturnOrder_EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD        SPXReturnOrder_ReturnReason = 1024
	SPXReturnOrder_EXPRESS_FAILED_TO_DECODE_LOGLAT               SPXReturnOrder_ReturnReason = 1025
	SPXReturnOrder_EXPRESS_LOST                                  SPXReturnOrder_ReturnReason = 1026
	SPXReturnOrder_EXPRESS_DAMAGE                                SPXReturnOrder_ReturnReason = 1027
	SPXReturnOrder_EXPRESS_REACHED_DRIVER_DROPPING_LIMIT         SPXReturnOrder_ReturnReason = 1028
	SPXReturnOrder_EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM           SPXReturnOrder_ReturnReason = 1029
	SPXReturnOrder_EXPRESS_DRIVER_VEHICLE_BROKEN                 SPXReturnOrder_ReturnReason = 2000
	SPXReturnOrder_EXPRESS_INSISTS_CANCEL                        SPXReturnOrder_ReturnReason = 2001
	SPXReturnOrder_EXPRESS_INSISTS_RETURN                        SPXReturnOrder_ReturnReason = 2002
	SPXReturnOrder_EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG       SPXReturnOrder_ReturnReason = 2003
	SPXReturnOrder_EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT            SPXReturnOrder_ReturnReason = 2004
	SPXReturnOrder_EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME         SPXReturnOrder_ReturnReason = 2005
	SPXReturnOrder_EXPRESS_RIOT                                  SPXReturnOrder_ReturnReason = 2006
	SPXReturnOrder_EXPRESS_NATURAL_DISASTER                      SPXReturnOrder_ReturnReason = 2007
	SPXReturnOrder_EXPRESS_DRIVER_REPORT_ROAD_BLOCKED            SPXReturnOrder_ReturnReason = 2008
	SPXReturnOrder_EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT  SPXReturnOrder_ReturnReason = 2009
	SPXReturnOrder_EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM SPXReturnOrder_ReturnReason = 2010
	SPXReturnOrder_EXPRESS_INSISTS_TO_RETURN_ORDER               SPXReturnOrder_ReturnReason = 2011
	SPXReturnOrder_EXPRESS_RECIPIENT_REPORT_FAKE_ORDER           SPXReturnOrder_ReturnReason = 2012
	SPXReturnOrder_EXPRESS_ITEM_TAMPERED                         SPXReturnOrder_ReturnReason = 2013
	SPXReturnOrder_EXPRESS_SENDER_NOT_ACCEPT_ITEM                SPXReturnOrder_ReturnReason = 2014
	SPXReturnOrder_EXPRESS_CUSTOMER_CANNOT_CONTACT               SPXReturnOrder_ReturnReason = 2015
)

var SPXReturnOrder_ReturnReason_name = map[int32]string{
	1000: "EXPRESS_OTHERS",
	1001: "EXPRESS_BAD_WEATHER",
	1002: "EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER",
	1003: "EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER",
	1004: "EXPRESS_DRIVER_COULD_NOT_FIND_SELLER",
	1005: "EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT",
	1006: "EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL",
	1007: "EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR",
	1008: "EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY",
	1009: "EXPRESS_PKG_IS_NOT_WELL_PREPARED",
	1010: "EXPRESS_PROHIBITED_ITEM",
	1011: "EXPRESS_STORE_WAS_CLOSED",
	1012: "EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD",
	1013: "EXPRESS_CUSTOMER_HAS_CHANGE_PLAN",
	1014: "EXPRESS_CUSTOMER_INPUT_WRONG_INFO",
	1015: "EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER",
	1016: "EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL",
	1017: "EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER",
	1018: "EXPRESS_DRIVER_IS_TOO_FAR",
	1019: "EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG",
	1020: "EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT",
	1021: "EXPRESS_DRIVER_REJECT_MY_ITEM",
	1022: "EXPRESS_CAN_NOT_MATCH_DRIVER",
	1023: "EXPRESS_PAYMENT_FAILED",
	1024: "EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD",
	1025: "EXPRESS_FAILED_TO_DECODE_LOGLAT",
	1026: "EXPRESS_LOST",
	1027: "EXPRESS_DAMAGE",
	1028: "EXPRESS_REACHED_DRIVER_DROPPING_LIMIT",
	1029: "EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM",
	2000: "EXPRESS_DRIVER_VEHICLE_BROKEN",
	2001: "EXPRESS_INSISTS_CANCEL",
	2002: "EXPRESS_INSISTS_RETURN",
	2003: "EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG",
	2004: "EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT",
	2005: "EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME",
	2006: "EXPRESS_RIOT",
	2007: "EXPRESS_NATURAL_DISASTER",
	2008: "EXPRESS_DRIVER_REPORT_ROAD_BLOCKED",
	2009: "EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT",
	2010: "EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM",
	2011: "EXPRESS_INSISTS_TO_RETURN_ORDER",
	2012: "EXPRESS_RECIPIENT_REPORT_FAKE_ORDER",
	2013: "EXPRESS_ITEM_TAMPERED",
	2014: "EXPRESS_SENDER_NOT_ACCEPT_ITEM",
	2015: "EXPRESS_CUSTOMER_CANNOT_CONTACT",
}

var SPXReturnOrder_ReturnReason_value = map[string]int32{
	"EXPRESS_OTHERS":                                1000,
	"EXPRESS_BAD_WEATHER":                           1001,
	"EXPRESS_DRIVER_ACCIDENTALLY_TOOK_ORDER":        1002,
	"EXPRESS_DRIVER_VEHICLE_BROKEN_TO_SELLER":       1003,
	"EXPRESS_DRIVER_COULD_NOT_FIND_SELLER":          1004,
	"EXPRESS_DRIVER_REPORT_SELLER_CANNOT_CONTACT":   1005,
	"EXPRESS_DRIVER_REPORT_SELLER_ASKED_TO_CANCEL":  1006,
	"EXPRESS_PICK_UP_ADDRESS_IS_TOO_FAR":            1007,
	"EXPRESS_PKG_TOO_BIG_TOO_HEAVY_TO_DELIVERY":     1008,
	"EXPRESS_PKG_IS_NOT_WELL_PREPARED":              1009,
	"EXPRESS_PROHIBITED_ITEM":                       1010,
	"EXPRESS_STORE_WAS_CLOSED":                      1011,
	"EXPRESS_CUSTOMER_CHANGE_PAYMENT_METHOD":        1012,
	"EXPRESS_CUSTOMER_HAS_CHANGE_PLAN":              1013,
	"EXPRESS_CUSTOMER_INPUT_WRONG_INFO":             1014,
	"EXPRESS_CUSTOMER_FORGOT_USE_VOUCHER":           1015,
	"EXPRESS_DRIVER_ASKED_CUSTOMER_TO_CANCEL":       1016,
	"EXPRESS_CUSTOMER_CAN_NOT_CONTACT_DRIVER":       1017,
	"EXPRESS_DRIVER_IS_TOO_FAR":                     1018,
	"EXPRESS_CUSTOMER_HAS_WAITED_TOO_LONG":          1019,
	"EXPRESS_CUSTOMER_REGRET_AFTER_SUBMIT":          1020,
	"EXPRESS_DRIVER_REJECT_MY_ITEM":                 1021,
	"EXPRESS_CAN_NOT_MATCH_DRIVER":                  1022,
	"EXPRESS_PAYMENT_FAILED":                        1023,
	"EXPRESS_SHOPEE_INDICATES_THIS_IS_FRAUD":        1024,
	"EXPRESS_FAILED_TO_DECODE_LOGLAT":               1025,
	"EXPRESS_LOST":                                  1026,
	"EXPRESS_DAMAGE":                                1027,
	"EXPRESS_REACHED_DRIVER_DROPPING_LIMIT":         1028,
	"EXPRESS_CANCELED_BY_UPSTREAM_SYSTEM":           1029,
	"EXPRESS_DRIVER_VEHICLE_BROKEN":                 2000,
	"EXPRESS_INSISTS_CANCEL":                        2001,
	"EXPRESS_INSISTS_RETURN":                        2002,
	"EXPRESS_CUSTOMER_REPORT_RETURN_TOO_LONG":       2003,
	"EXPRESS_DRIVER_IN_TRAFFIC_ACCIDENT":            2004,
	"EXPRESS_DRIVER_BECOME_VICTIM_OF_CRIME":         2005,
	"EXPRESS_RIOT":                                  2006,
	"EXPRESS_NATURAL_DISASTER":                      2007,
	"EXPRESS_DRIVER_REPORT_ROAD_BLOCKED":            2008,
	"EXPRESS_DRIVER_REPORT_CAN_NOT_FIND_RECIPIENT":  2009,
	"EXPRESS_DRIVER_REPORT_RECIPIENT_REJECTED_ITEM": 2010,
	"EXPRESS_INSISTS_TO_RETURN_ORDER":               2011,
	"EXPRESS_RECIPIENT_REPORT_FAKE_ORDER":           2012,
	"EXPRESS_ITEM_TAMPERED":                         2013,
	"EXPRESS_SENDER_NOT_ACCEPT_ITEM":                2014,
	"EXPRESS_CUSTOMER_CANNOT_CONTACT":               2015,
}

func (x SPXReturnOrder_ReturnReason) Enum() *SPXReturnOrder_ReturnReason {
	p := new(SPXReturnOrder_ReturnReason)
	*p = x
	return p
}

func (x SPXReturnOrder_ReturnReason) String() string {
	return proto.EnumName(SPXReturnOrder_ReturnReason_name, int32(x))
}

func (x *SPXReturnOrder_ReturnReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXReturnOrder_ReturnReason_value, data, "SPXReturnOrder_ReturnReason")
	if err != nil {
		return err
	}
	*x = SPXReturnOrder_ReturnReason(value)
	return nil
}

func (SPXReturnOrder_ReturnReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{127, 3}
}

type SPXRefund_RefundMethod int32

const (
	SPXRefund_REFUND_METHOD_DEFAULT           SPXRefund_RefundMethod = 0
	SPXRefund_REFUND_METHOD_AUTO              SPXRefund_RefundMethod = 1 // Deprecated: Do not use.
	SPXRefund_REFUND_METHOD_MANUAL            SPXRefund_RefundMethod = 2 // Deprecated: Do not use.
	SPXRefund_REFUND_METHOD_SPM               SPXRefund_RefundMethod = 100
	SPXRefund_REFUND_METHOD_WALLET_ADJUSTMENT SPXRefund_RefundMethod = 200
	SPXRefund_REFUND_METHOD_BANK_TRANSFER     SPXRefund_RefundMethod = 210
)

var SPXRefund_RefundMethod_name = map[int32]string{
	0:   "REFUND_METHOD_DEFAULT",
	1:   "REFUND_METHOD_AUTO",
	2:   "REFUND_METHOD_MANUAL",
	100: "REFUND_METHOD_SPM",
	200: "REFUND_METHOD_WALLET_ADJUSTMENT",
	210: "REFUND_METHOD_BANK_TRANSFER",
}

var SPXRefund_RefundMethod_value = map[string]int32{
	"REFUND_METHOD_DEFAULT":           0,
	"REFUND_METHOD_AUTO":              1,
	"REFUND_METHOD_MANUAL":            2,
	"REFUND_METHOD_SPM":               100,
	"REFUND_METHOD_WALLET_ADJUSTMENT": 200,
	"REFUND_METHOD_BANK_TRANSFER":     210,
}

func (x SPXRefund_RefundMethod) Enum() *SPXRefund_RefundMethod {
	p := new(SPXRefund_RefundMethod)
	*p = x
	return p
}

func (x SPXRefund_RefundMethod) String() string {
	return proto.EnumName(SPXRefund_RefundMethod_name, int32(x))
}

func (x *SPXRefund_RefundMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXRefund_RefundMethod_value, data, "SPXRefund_RefundMethod")
	if err != nil {
		return err
	}
	*x = SPXRefund_RefundMethod(value)
	return nil
}

func (SPXRefund_RefundMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{128, 0}
}

type SPXRefund_RefundMode int32

const (
	SPXRefund_REFUND_MODE_AUTO   SPXRefund_RefundMode = 1
	SPXRefund_REFUND_MODE_MANUAL SPXRefund_RefundMode = 2
)

var SPXRefund_RefundMode_name = map[int32]string{
	1: "REFUND_MODE_AUTO",
	2: "REFUND_MODE_MANUAL",
}

var SPXRefund_RefundMode_value = map[string]int32{
	"REFUND_MODE_AUTO":   1,
	"REFUND_MODE_MANUAL": 2,
}

func (x SPXRefund_RefundMode) Enum() *SPXRefund_RefundMode {
	p := new(SPXRefund_RefundMode)
	*p = x
	return p
}

func (x SPXRefund_RefundMode) String() string {
	return proto.EnumName(SPXRefund_RefundMode_name, int32(x))
}

func (x *SPXRefund_RefundMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXRefund_RefundMode_value, data, "SPXRefund_RefundMode")
	if err != nil {
		return err
	}
	*x = SPXRefund_RefundMode(value)
	return nil
}

func (SPXRefund_RefundMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{128, 1}
}

type SPXVoucherRecord_ReturnStatus int32

const (
	SPXVoucherRecord_RETURN_STATUS_UNINITIALIZED SPXVoucherRecord_ReturnStatus = 0
	SPXVoucherRecord_RETURN_STATUS_CREATED       SPXVoucherRecord_ReturnStatus = 1
	SPXVoucherRecord_RETURN_STATUS_COMPLETED     SPXVoucherRecord_ReturnStatus = 2
)

var SPXVoucherRecord_ReturnStatus_name = map[int32]string{
	0: "RETURN_STATUS_UNINITIALIZED",
	1: "RETURN_STATUS_CREATED",
	2: "RETURN_STATUS_COMPLETED",
}

var SPXVoucherRecord_ReturnStatus_value = map[string]int32{
	"RETURN_STATUS_UNINITIALIZED": 0,
	"RETURN_STATUS_CREATED":       1,
	"RETURN_STATUS_COMPLETED":     2,
}

func (x SPXVoucherRecord_ReturnStatus) Enum() *SPXVoucherRecord_ReturnStatus {
	p := new(SPXVoucherRecord_ReturnStatus)
	*p = x
	return p
}

func (x SPXVoucherRecord_ReturnStatus) String() string {
	return proto.EnumName(SPXVoucherRecord_ReturnStatus_name, int32(x))
}

func (x *SPXVoucherRecord_ReturnStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXVoucherRecord_ReturnStatus_value, data, "SPXVoucherRecord_ReturnStatus")
	if err != nil {
		return err
	}
	*x = SPXVoucherRecord_ReturnStatus(value)
	return nil
}

func (SPXVoucherRecord_ReturnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{129, 0}
}

type SPXCoinRecord_ReturnStatus int32

const (
	SPXCoinRecord_RETURN_STATUS_UNINITIALIZED SPXCoinRecord_ReturnStatus = 0
	SPXCoinRecord_RETURN_STATUS_CREATED       SPXCoinRecord_ReturnStatus = 1
	SPXCoinRecord_RETURN_STATUS_COMPLETED     SPXCoinRecord_ReturnStatus = 2
)

var SPXCoinRecord_ReturnStatus_name = map[int32]string{
	0: "RETURN_STATUS_UNINITIALIZED",
	1: "RETURN_STATUS_CREATED",
	2: "RETURN_STATUS_COMPLETED",
}

var SPXCoinRecord_ReturnStatus_value = map[string]int32{
	"RETURN_STATUS_UNINITIALIZED": 0,
	"RETURN_STATUS_CREATED":       1,
	"RETURN_STATUS_COMPLETED":     2,
}

func (x SPXCoinRecord_ReturnStatus) Enum() *SPXCoinRecord_ReturnStatus {
	p := new(SPXCoinRecord_ReturnStatus)
	*p = x
	return p
}

func (x SPXCoinRecord_ReturnStatus) String() string {
	return proto.EnumName(SPXCoinRecord_ReturnStatus_name, int32(x))
}

func (x *SPXCoinRecord_ReturnStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SPXCoinRecord_ReturnStatus_value, data, "SPXCoinRecord_ReturnStatus")
	if err != nil {
		return err
	}
	*x = SPXCoinRecord_ReturnStatus(value)
	return nil
}

func (SPXCoinRecord_ReturnStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{130, 0}
}

type FlashSaleDishDiscount_DishDiscountType int32

const (
	FlashSaleDishDiscount_DISCOUNT_PRICE      FlashSaleDishDiscount_DishDiscountType = 1
	FlashSaleDishDiscount_DISCOUNT_PERCENTAGE FlashSaleDishDiscount_DishDiscountType = 2
)

var FlashSaleDishDiscount_DishDiscountType_name = map[int32]string{
	1: "DISCOUNT_PRICE",
	2: "DISCOUNT_PERCENTAGE",
}

var FlashSaleDishDiscount_DishDiscountType_value = map[string]int32{
	"DISCOUNT_PRICE":      1,
	"DISCOUNT_PERCENTAGE": 2,
}

func (x FlashSaleDishDiscount_DishDiscountType) Enum() *FlashSaleDishDiscount_DishDiscountType {
	p := new(FlashSaleDishDiscount_DishDiscountType)
	*p = x
	return p
}

func (x FlashSaleDishDiscount_DishDiscountType) String() string {
	return proto.EnumName(FlashSaleDishDiscount_DishDiscountType_name, int32(x))
}

func (x *FlashSaleDishDiscount_DishDiscountType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlashSaleDishDiscount_DishDiscountType_value, data, "FlashSaleDishDiscount_DishDiscountType")
	if err != nil {
		return err
	}
	*x = FlashSaleDishDiscount_DishDiscountType(value)
	return nil
}

func (FlashSaleDishDiscount_DishDiscountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{136, 0}
}

type FlashSaleDishSoldRecord_RecordSoldStatus int32

const (
	FlashSaleDishSoldRecord_INIT          FlashSaleDishSoldRecord_RecordSoldStatus = 1
	FlashSaleDishSoldRecord_ORDER_CREATED FlashSaleDishSoldRecord_RecordSoldStatus = 2
	FlashSaleDishSoldRecord_FAILED        FlashSaleDishSoldRecord_RecordSoldStatus = 3
)

var FlashSaleDishSoldRecord_RecordSoldStatus_name = map[int32]string{
	1: "INIT",
	2: "ORDER_CREATED",
	3: "FAILED",
}

var FlashSaleDishSoldRecord_RecordSoldStatus_value = map[string]int32{
	"INIT":          1,
	"ORDER_CREATED": 2,
	"FAILED":        3,
}

func (x FlashSaleDishSoldRecord_RecordSoldStatus) Enum() *FlashSaleDishSoldRecord_RecordSoldStatus {
	p := new(FlashSaleDishSoldRecord_RecordSoldStatus)
	*p = x
	return p
}

func (x FlashSaleDishSoldRecord_RecordSoldStatus) String() string {
	return proto.EnumName(FlashSaleDishSoldRecord_RecordSoldStatus_name, int32(x))
}

func (x *FlashSaleDishSoldRecord_RecordSoldStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlashSaleDishSoldRecord_RecordSoldStatus_value, data, "FlashSaleDishSoldRecord_RecordSoldStatus")
	if err != nil {
		return err
	}
	*x = FlashSaleDishSoldRecord_RecordSoldStatus(value)
	return nil
}

func (FlashSaleDishSoldRecord_RecordSoldStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{137, 0}
}

type DriverDeliveryOrder_LocationType int32

const (
	DriverDeliveryOrder_PICKUP_LOCATION   DriverDeliveryOrder_LocationType = 1
	DriverDeliveryOrder_DELIVERY_LOCATION DriverDeliveryOrder_LocationType = 2
)

var DriverDeliveryOrder_LocationType_name = map[int32]string{
	1: "PICKUP_LOCATION",
	2: "DELIVERY_LOCATION",
}

var DriverDeliveryOrder_LocationType_value = map[string]int32{
	"PICKUP_LOCATION":   1,
	"DELIVERY_LOCATION": 2,
}

func (x DriverDeliveryOrder_LocationType) Enum() *DriverDeliveryOrder_LocationType {
	p := new(DriverDeliveryOrder_LocationType)
	*p = x
	return p
}

func (x DriverDeliveryOrder_LocationType) String() string {
	return proto.EnumName(DriverDeliveryOrder_LocationType_name, int32(x))
}

func (x *DriverDeliveryOrder_LocationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DriverDeliveryOrder_LocationType_value, data, "DriverDeliveryOrder_LocationType")
	if err != nil {
		return err
	}
	*x = DriverDeliveryOrder_LocationType(value)
	return nil
}

func (DriverDeliveryOrder_LocationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{143, 0}
}

type StoreSettlementMart_WalletStatus int32

const (
	StoreSettlementMart_WALLET_DISABLE StoreSettlementMart_WalletStatus = 0
	StoreSettlementMart_WALLET_ENABLE  StoreSettlementMart_WalletStatus = 1
)

var StoreSettlementMart_WalletStatus_name = map[int32]string{
	0: "WALLET_DISABLE",
	1: "WALLET_ENABLE",
}

var StoreSettlementMart_WalletStatus_value = map[string]int32{
	"WALLET_DISABLE": 0,
	"WALLET_ENABLE":  1,
}

func (x StoreSettlementMart_WalletStatus) Enum() *StoreSettlementMart_WalletStatus {
	p := new(StoreSettlementMart_WalletStatus)
	*p = x
	return p
}

func (x StoreSettlementMart_WalletStatus) String() string {
	return proto.EnumName(StoreSettlementMart_WalletStatus_name, int32(x))
}

func (x *StoreSettlementMart_WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreSettlementMart_WalletStatus_value, data, "StoreSettlementMart_WalletStatus")
	if err != nil {
		return err
	}
	*x = StoreSettlementMart_WalletStatus(value)
	return nil
}

func (StoreSettlementMart_WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{144, 0}
}

type StoreSettlementMart_ConfigStatus int32

const (
	StoreSettlementMart_ConfigStatus_Unknown  StoreSettlementMart_ConfigStatus = 0
	StoreSettlementMart_ConfigStatus_Active   StoreSettlementMart_ConfigStatus = 1
	StoreSettlementMart_ConfigStatus_Inactive StoreSettlementMart_ConfigStatus = 2
)

var StoreSettlementMart_ConfigStatus_name = map[int32]string{
	0: "ConfigStatus_Unknown",
	1: "ConfigStatus_Active",
	2: "ConfigStatus_Inactive",
}

var StoreSettlementMart_ConfigStatus_value = map[string]int32{
	"ConfigStatus_Unknown":  0,
	"ConfigStatus_Active":   1,
	"ConfigStatus_Inactive": 2,
}

func (x StoreSettlementMart_ConfigStatus) Enum() *StoreSettlementMart_ConfigStatus {
	p := new(StoreSettlementMart_ConfigStatus)
	*p = x
	return p
}

func (x StoreSettlementMart_ConfigStatus) String() string {
	return proto.EnumName(StoreSettlementMart_ConfigStatus_name, int32(x))
}

func (x *StoreSettlementMart_ConfigStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StoreSettlementMart_ConfigStatus_value, data, "StoreSettlementMart_ConfigStatus")
	if err != nil {
		return err
	}
	*x = StoreSettlementMart_ConfigStatus(value)
	return nil
}

func (StoreSettlementMart_ConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{144, 1}
}

type MerchantSettlementMart_WalletStatus int32

const (
	MerchantSettlementMart_WALLET_DISABLE MerchantSettlementMart_WalletStatus = 0
	MerchantSettlementMart_WALLET_ENABLE  MerchantSettlementMart_WalletStatus = 1
)

var MerchantSettlementMart_WalletStatus_name = map[int32]string{
	0: "WALLET_DISABLE",
	1: "WALLET_ENABLE",
}

var MerchantSettlementMart_WalletStatus_value = map[string]int32{
	"WALLET_DISABLE": 0,
	"WALLET_ENABLE":  1,
}

func (x MerchantSettlementMart_WalletStatus) Enum() *MerchantSettlementMart_WalletStatus {
	p := new(MerchantSettlementMart_WalletStatus)
	*p = x
	return p
}

func (x MerchantSettlementMart_WalletStatus) String() string {
	return proto.EnumName(MerchantSettlementMart_WalletStatus_name, int32(x))
}

func (x *MerchantSettlementMart_WalletStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantSettlementMart_WalletStatus_value, data, "MerchantSettlementMart_WalletStatus")
	if err != nil {
		return err
	}
	*x = MerchantSettlementMart_WalletStatus(value)
	return nil
}

func (MerchantSettlementMart_WalletStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{145, 0}
}

type MerchantSettlementMart_ConfigStatus int32

const (
	MerchantSettlementMart_ConfigStatus_Unknown  MerchantSettlementMart_ConfigStatus = 0
	MerchantSettlementMart_ConfigStatus_Active   MerchantSettlementMart_ConfigStatus = 1
	MerchantSettlementMart_ConfigStatus_Inactive MerchantSettlementMart_ConfigStatus = 2
)

var MerchantSettlementMart_ConfigStatus_name = map[int32]string{
	0: "ConfigStatus_Unknown",
	1: "ConfigStatus_Active",
	2: "ConfigStatus_Inactive",
}

var MerchantSettlementMart_ConfigStatus_value = map[string]int32{
	"ConfigStatus_Unknown":  0,
	"ConfigStatus_Active":   1,
	"ConfigStatus_Inactive": 2,
}

func (x MerchantSettlementMart_ConfigStatus) Enum() *MerchantSettlementMart_ConfigStatus {
	p := new(MerchantSettlementMart_ConfigStatus)
	*p = x
	return p
}

func (x MerchantSettlementMart_ConfigStatus) String() string {
	return proto.EnumName(MerchantSettlementMart_ConfigStatus_name, int32(x))
}

func (x *MerchantSettlementMart_ConfigStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MerchantSettlementMart_ConfigStatus_value, data, "MerchantSettlementMart_ConfigStatus")
	if err != nil {
		return err
	}
	*x = MerchantSettlementMart_ConfigStatus(value)
	return nil
}

func (MerchantSettlementMart_ConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{145, 1}
}

type RecruitmentSessionMaterialTemplate_BizType int32

const (
	RecruitmentSessionMaterialTemplate_VOUCHER         RecruitmentSessionMaterialTemplate_BizType = 1
	RecruitmentSessionMaterialTemplate_VOUCHER_PACKAGE RecruitmentSessionMaterialTemplate_BizType = 2
)

var RecruitmentSessionMaterialTemplate_BizType_name = map[int32]string{
	1: "VOUCHER",
	2: "VOUCHER_PACKAGE",
}

var RecruitmentSessionMaterialTemplate_BizType_value = map[string]int32{
	"VOUCHER":         1,
	"VOUCHER_PACKAGE": 2,
}

func (x RecruitmentSessionMaterialTemplate_BizType) Enum() *RecruitmentSessionMaterialTemplate_BizType {
	p := new(RecruitmentSessionMaterialTemplate_BizType)
	*p = x
	return p
}

func (x RecruitmentSessionMaterialTemplate_BizType) String() string {
	return proto.EnumName(RecruitmentSessionMaterialTemplate_BizType_name, int32(x))
}

func (x *RecruitmentSessionMaterialTemplate_BizType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionMaterialTemplate_BizType_value, data, "RecruitmentSessionMaterialTemplate_BizType")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionMaterialTemplate_BizType(value)
	return nil
}

func (RecruitmentSessionMaterialTemplate_BizType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{150, 0}
}

type RecruitmentSessionMaterialTemplate_Status int32

const (
	RecruitmentSessionMaterialTemplate_INIT    RecruitmentSessionMaterialTemplate_Status = 1
	RecruitmentSessionMaterialTemplate_SUCCESS RecruitmentSessionMaterialTemplate_Status = 2
	RecruitmentSessionMaterialTemplate_FAIL    RecruitmentSessionMaterialTemplate_Status = 3
)

var RecruitmentSessionMaterialTemplate_Status_name = map[int32]string{
	1: "INIT",
	2: "SUCCESS",
	3: "FAIL",
}

var RecruitmentSessionMaterialTemplate_Status_value = map[string]int32{
	"INIT":    1,
	"SUCCESS": 2,
	"FAIL":    3,
}

func (x RecruitmentSessionMaterialTemplate_Status) Enum() *RecruitmentSessionMaterialTemplate_Status {
	p := new(RecruitmentSessionMaterialTemplate_Status)
	*p = x
	return p
}

func (x RecruitmentSessionMaterialTemplate_Status) String() string {
	return proto.EnumName(RecruitmentSessionMaterialTemplate_Status_name, int32(x))
}

func (x *RecruitmentSessionMaterialTemplate_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionMaterialTemplate_Status_value, data, "RecruitmentSessionMaterialTemplate_Status")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionMaterialTemplate_Status(value)
	return nil
}

func (RecruitmentSessionMaterialTemplate_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{150, 1}
}

type RecruitmentSessionRegistration_RegistrationStatus int32

const (
	RecruitmentSessionRegistration_INVITED    RecruitmentSessionRegistration_RegistrationStatus = 0
	RecruitmentSessionRegistration_JOINED     RecruitmentSessionRegistration_RegistrationStatus = 1
	RecruitmentSessionRegistration_TERMINATED RecruitmentSessionRegistration_RegistrationStatus = 2
	RecruitmentSessionRegistration_WITHDRAWN  RecruitmentSessionRegistration_RegistrationStatus = 3
)

var RecruitmentSessionRegistration_RegistrationStatus_name = map[int32]string{
	0: "INVITED",
	1: "JOINED",
	2: "TERMINATED",
	3: "WITHDRAWN",
}

var RecruitmentSessionRegistration_RegistrationStatus_value = map[string]int32{
	"INVITED":    0,
	"JOINED":     1,
	"TERMINATED": 2,
	"WITHDRAWN":  3,
}

func (x RecruitmentSessionRegistration_RegistrationStatus) Enum() *RecruitmentSessionRegistration_RegistrationStatus {
	p := new(RecruitmentSessionRegistration_RegistrationStatus)
	*p = x
	return p
}

func (x RecruitmentSessionRegistration_RegistrationStatus) String() string {
	return proto.EnumName(RecruitmentSessionRegistration_RegistrationStatus_name, int32(x))
}

func (x *RecruitmentSessionRegistration_RegistrationStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionRegistration_RegistrationStatus_value, data, "RecruitmentSessionRegistration_RegistrationStatus")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionRegistration_RegistrationStatus(value)
	return nil
}

func (RecruitmentSessionRegistration_RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{152, 0}
}

type RecruitmentSessionRegistration_RegistrationSource int32

const (
	RecruitmentSessionRegistration_MERCHANT RecruitmentSessionRegistration_RegistrationSource = 1
	RecruitmentSessionRegistration_ADMIN    RecruitmentSessionRegistration_RegistrationSource = 2
)

var RecruitmentSessionRegistration_RegistrationSource_name = map[int32]string{
	1: "MERCHANT",
	2: "ADMIN",
}

var RecruitmentSessionRegistration_RegistrationSource_value = map[string]int32{
	"MERCHANT": 1,
	"ADMIN":    2,
}

func (x RecruitmentSessionRegistration_RegistrationSource) Enum() *RecruitmentSessionRegistration_RegistrationSource {
	p := new(RecruitmentSessionRegistration_RegistrationSource)
	*p = x
	return p
}

func (x RecruitmentSessionRegistration_RegistrationSource) String() string {
	return proto.EnumName(RecruitmentSessionRegistration_RegistrationSource_name, int32(x))
}

func (x *RecruitmentSessionRegistration_RegistrationSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionRegistration_RegistrationSource_value, data, "RecruitmentSessionRegistration_RegistrationSource")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionRegistration_RegistrationSource(value)
	return nil
}

func (RecruitmentSessionRegistration_RegistrationSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{152, 1}
}

type RecruitmentSessionRegistration_BindStatus int32

const (
	RecruitmentSessionRegistration_INIT    RecruitmentSessionRegistration_BindStatus = 0
	RecruitmentSessionRegistration_SUCCESS RecruitmentSessionRegistration_BindStatus = 1
	RecruitmentSessionRegistration_FAIL    RecruitmentSessionRegistration_BindStatus = 2
)

var RecruitmentSessionRegistration_BindStatus_name = map[int32]string{
	0: "INIT",
	1: "SUCCESS",
	2: "FAIL",
}

var RecruitmentSessionRegistration_BindStatus_value = map[string]int32{
	"INIT":    0,
	"SUCCESS": 1,
	"FAIL":    2,
}

func (x RecruitmentSessionRegistration_BindStatus) Enum() *RecruitmentSessionRegistration_BindStatus {
	p := new(RecruitmentSessionRegistration_BindStatus)
	*p = x
	return p
}

func (x RecruitmentSessionRegistration_BindStatus) String() string {
	return proto.EnumName(RecruitmentSessionRegistration_BindStatus_name, int32(x))
}

func (x *RecruitmentSessionRegistration_BindStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionRegistration_BindStatus_value, data, "RecruitmentSessionRegistration_BindStatus")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionRegistration_BindStatus(value)
	return nil
}

func (RecruitmentSessionRegistration_BindStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{152, 2}
}

type RecruitmentSession_RecruitmentSessionType int32

const (
	RecruitmentSession_ITEM_DISCOUNT RecruitmentSession_RecruitmentSessionType = 1
	RecruitmentSession_FLASH_SALE    RecruitmentSession_RecruitmentSessionType = 2
	RecruitmentSession_VOUCHER       RecruitmentSession_RecruitmentSessionType = 3
)

var RecruitmentSession_RecruitmentSessionType_name = map[int32]string{
	1: "ITEM_DISCOUNT",
	2: "FLASH_SALE",
	3: "VOUCHER",
}

var RecruitmentSession_RecruitmentSessionType_value = map[string]int32{
	"ITEM_DISCOUNT": 1,
	"FLASH_SALE":    2,
	"VOUCHER":       3,
}

func (x RecruitmentSession_RecruitmentSessionType) Enum() *RecruitmentSession_RecruitmentSessionType {
	p := new(RecruitmentSession_RecruitmentSessionType)
	*p = x
	return p
}

func (x RecruitmentSession_RecruitmentSessionType) String() string {
	return proto.EnumName(RecruitmentSession_RecruitmentSessionType_name, int32(x))
}

func (x *RecruitmentSession_RecruitmentSessionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSession_RecruitmentSessionType_value, data, "RecruitmentSession_RecruitmentSessionType")
	if err != nil {
		return err
	}
	*x = RecruitmentSession_RecruitmentSessionType(value)
	return nil
}

func (RecruitmentSession_RecruitmentSessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{155, 0}
}

type RecruitmentSession_RecruitmentSessionStatus int32

const (
	RecruitmentSession_UPCOMING  RecruitmentSession_RecruitmentSessionStatus = 1
	RecruitmentSession_ONGOING   RecruitmentSession_RecruitmentSessionStatus = 2
	RecruitmentSession_COMPLETED RecruitmentSession_RecruitmentSessionStatus = 3
)

var RecruitmentSession_RecruitmentSessionStatus_name = map[int32]string{
	1: "UPCOMING",
	2: "ONGOING",
	3: "COMPLETED",
}

var RecruitmentSession_RecruitmentSessionStatus_value = map[string]int32{
	"UPCOMING":  1,
	"ONGOING":   2,
	"COMPLETED": 3,
}

func (x RecruitmentSession_RecruitmentSessionStatus) Enum() *RecruitmentSession_RecruitmentSessionStatus {
	p := new(RecruitmentSession_RecruitmentSessionStatus)
	*p = x
	return p
}

func (x RecruitmentSession_RecruitmentSessionStatus) String() string {
	return proto.EnumName(RecruitmentSession_RecruitmentSessionStatus_name, int32(x))
}

func (x *RecruitmentSession_RecruitmentSessionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSession_RecruitmentSessionStatus_value, data, "RecruitmentSession_RecruitmentSessionStatus")
	if err != nil {
		return err
	}
	*x = RecruitmentSession_RecruitmentSessionStatus(value)
	return nil
}

func (RecruitmentSession_RecruitmentSessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{155, 1}
}

type RecruitmentSessionTask_TaskType int32

const (
	RecruitmentSessionTask_INVITED_STORE_SAVE_CHECK   RecruitmentSessionTask_TaskType = 1
	RecruitmentSessionTask_INVITED_STORE_BATCH_UPDATE RecruitmentSessionTask_TaskType = 2
)

var RecruitmentSessionTask_TaskType_name = map[int32]string{
	1: "INVITED_STORE_SAVE_CHECK",
	2: "INVITED_STORE_BATCH_UPDATE",
}

var RecruitmentSessionTask_TaskType_value = map[string]int32{
	"INVITED_STORE_SAVE_CHECK":   1,
	"INVITED_STORE_BATCH_UPDATE": 2,
}

func (x RecruitmentSessionTask_TaskType) Enum() *RecruitmentSessionTask_TaskType {
	p := new(RecruitmentSessionTask_TaskType)
	*p = x
	return p
}

func (x RecruitmentSessionTask_TaskType) String() string {
	return proto.EnumName(RecruitmentSessionTask_TaskType_name, int32(x))
}

func (x *RecruitmentSessionTask_TaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionTask_TaskType_value, data, "RecruitmentSessionTask_TaskType")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionTask_TaskType(value)
	return nil
}

func (RecruitmentSessionTask_TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{157, 0}
}

type RecruitmentSessionTask_TaskStatus int32

const (
	RecruitmentSessionTask_ONGOING  RecruitmentSessionTask_TaskStatus = 1
	RecruitmentSessionTask_SUCCESS  RecruitmentSessionTask_TaskStatus = 2
	RecruitmentSessionTask_FAIL     RecruitmentSessionTask_TaskStatus = 3
	RecruitmentSessionTask_PARTFAIL RecruitmentSessionTask_TaskStatus = 4
)

var RecruitmentSessionTask_TaskStatus_name = map[int32]string{
	1: "ONGOING",
	2: "SUCCESS",
	3: "FAIL",
	4: "PARTFAIL",
}

var RecruitmentSessionTask_TaskStatus_value = map[string]int32{
	"ONGOING":  1,
	"SUCCESS":  2,
	"FAIL":     3,
	"PARTFAIL": 4,
}

func (x RecruitmentSessionTask_TaskStatus) Enum() *RecruitmentSessionTask_TaskStatus {
	p := new(RecruitmentSessionTask_TaskStatus)
	*p = x
	return p
}

func (x RecruitmentSessionTask_TaskStatus) String() string {
	return proto.EnumName(RecruitmentSessionTask_TaskStatus_name, int32(x))
}

func (x *RecruitmentSessionTask_TaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitmentSessionTask_TaskStatus_value, data, "RecruitmentSessionTask_TaskStatus")
	if err != nil {
		return err
	}
	*x = RecruitmentSessionTask_TaskStatus(value)
	return nil
}

func (RecruitmentSessionTask_TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{157, 1}
}

//证明文件
type Certificate struct {
	Hash                 *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{0}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Certificate) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// 异步任务
type AsyncTask struct {
	Id                   *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type                 *AsyncTask_Type   `protobuf:"varint,2,opt,name=type,enum=foody_base.AsyncTask_Type" json:"type,omitempty"`
	FileName             *string           `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileLink             *string           `protobuf:"bytes,4,opt,name=file_link,json=fileLink" json:"file_link,omitempty"`
	Status               *AsyncTask_Status `protobuf:"varint,5,opt,name=status,enum=foody_base.AsyncTask_Status" json:"status,omitempty"`
	SucceedCnt           *uint32           `protobuf:"varint,6,opt,name=succeed_cnt,json=succeedCnt" json:"succeed_cnt,omitempty"`
	FailedCnt            *uint32           `protobuf:"varint,7,opt,name=failed_cnt,json=failedCnt" json:"failed_cnt,omitempty"`
	CreateTime           *uint64           `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64           `protobuf:"varint,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Operator             *string           `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty"`
	ReferenceId          *uint64           `protobuf:"varint,11,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	FailedLink           *string           `protobuf:"bytes,12,opt,name=failed_link,json=failedLink" json:"failed_link,omitempty"`
	StartTime            *uint64           `protobuf:"varint,13,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AsyncTask) Reset()         { *m = AsyncTask{} }
func (m *AsyncTask) String() string { return proto.CompactTextString(m) }
func (*AsyncTask) ProtoMessage()    {}
func (*AsyncTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{1}
}
func (m *AsyncTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsyncTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AsyncTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AsyncTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsyncTask.Merge(m, src)
}
func (m *AsyncTask) XXX_Size() int {
	return m.Size()
}
func (m *AsyncTask) XXX_DiscardUnknown() {
	xxx_messageInfo_AsyncTask.DiscardUnknown(m)
}

var xxx_messageInfo_AsyncTask proto.InternalMessageInfo

func (m *AsyncTask) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AsyncTask) GetType() AsyncTask_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AsyncTask_STORE_TAG_BINDING_ATTACH
}

func (m *AsyncTask) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *AsyncTask) GetFileLink() string {
	if m != nil && m.FileLink != nil {
		return *m.FileLink
	}
	return ""
}

func (m *AsyncTask) GetStatus() AsyncTask_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return AsyncTask_CREATED
}

func (m *AsyncTask) GetSucceedCnt() uint32 {
	if m != nil && m.SucceedCnt != nil {
		return *m.SucceedCnt
	}
	return 0
}

func (m *AsyncTask) GetFailedCnt() uint32 {
	if m != nil && m.FailedCnt != nil {
		return *m.FailedCnt
	}
	return 0
}

func (m *AsyncTask) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AsyncTask) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *AsyncTask) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *AsyncTask) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *AsyncTask) GetFailedLink() string {
	if m != nil && m.FailedLink != nil {
		return *m.FailedLink
	}
	return ""
}

func (m *AsyncTask) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

// Rank 用于 catalog/dish/option 排序
type Rank struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Rank                 *uint32  `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rank) Reset()         { *m = Rank{} }
func (m *Rank) String() string { return proto.CompactTextString(m) }
func (*Rank) ProtoMessage()    {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{2}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Rank) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

type Dish struct {
	Id               *uint64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StoreId          *uint64              `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Name             *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Picture          *string              `protobuf:"bytes,4,opt,name=picture" json:"picture,omitempty"`
	Description      *string              `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Available        *Available           `protobuf:"varint,6,opt,name=available,enum=foody_base.Available" json:"available,omitempty"`
	Price            *uint64              `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
	CatalogId        *uint64              `protobuf:"varint,8,opt,name=catalog_id,json=catalogId" json:"catalog_id,omitempty"`
	Rank             *uint32              `protobuf:"varint,9,opt,name=rank" json:"rank,omitempty"`
	OptionGroupCount *uint32              `protobuf:"varint,10,opt,name=option_group_count,json=optionGroupCount" json:"option_group_count,omitempty"`
	Deleted          *uint32              `protobuf:"varint,11,opt,name=deleted" json:"deleted,omitempty"`
	CreateTime       *uint64              `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime       *uint64              `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	SalesVolume      *uint32              `protobuf:"varint,14,opt,name=sales_volume,json=salesVolume" json:"sales_volume,omitempty"`
	RatingTotal      *uint32              `protobuf:"varint,15,opt,name=rating_total,json=ratingTotal" json:"rating_total,omitempty"`
	RatingGood       *uint32              `protobuf:"varint,16,opt,name=rating_good,json=ratingGood" json:"rating_good,omitempty"`
	RatingBad        *uint32              `protobuf:"varint,17,opt,name=rating_bad,json=ratingBad" json:"rating_bad,omitempty"`
	BindGroupCount   *uint32              `protobuf:"varint,18,opt,name=bind_group_count,json=bindGroupCount" json:"bind_group_count,omitempty"`
	SaleStartTime    *uint64              `protobuf:"varint,19,opt,name=sale_start_time,json=saleStartTime" json:"sale_start_time,omitempty"` // Deprecated: Do not use.
	SaleEndTime      *uint64              `protobuf:"varint,20,opt,name=sale_end_time,json=saleEndTime" json:"sale_end_time,omitempty"`       // Deprecated: Do not use.
	SaleWeekBit      *uint32              `protobuf:"varint,21,opt,name=sale_week_bit,json=saleWeekBit" json:"sale_week_bit,omitempty"`
	InSaleTime       *bool                `protobuf:"varint,22,opt,name=in_sale_time,json=inSaleTime" json:"in_sale_time,omitempty"`
	ListingStatus    *DishListingStatus   `protobuf:"varint,23,opt,name=listing_status,json=listingStatus,enum=foody_base.DishListingStatus" json:"listing_status,omitempty"`
	SaleStatus       *DishSaleStatus      `protobuf:"varint,24,opt,name=sale_status,json=saleStatus,enum=foody_base.DishSaleStatus" json:"sale_status,omitempty"`
	TimeForSales     []*Dish_TimeForSales `protobuf:"bytes,25,rep,name=time_for_sales,json=timeForSales" json:"time_for_sales,omitempty"`
	// flag
	RawFlag              *uint64                 `protobuf:"varint,26,opt,name=raw_flag,json=rawFlag" json:"raw_flag,omitempty"`
	Flag                 *Dish_Flag              `protobuf:"bytes,27,opt,name=flag" json:"flag,omitempty"`
	SalesTime            *Dish_SalesDay          `protobuf:"bytes,28,opt,name=sales_time,json=salesTime" json:"sales_time,omitempty"`
	CrawlerPicture       *string                 `protobuf:"bytes,29,opt,name=crawler_picture,json=crawlerPicture" json:"crawler_picture,omitempty"`
	SpecialSaleDates     []*Dish_SpecialSaleDate `protobuf:"bytes,30,rep,name=special_sale_dates,json=specialSaleDates" json:"special_sale_dates,omitempty"`
	OutOfStockTime       *TimeRange              `protobuf:"bytes,31,opt,name=out_of_stock_time,json=outOfStockTime" json:"out_of_stock_time,omitempty"`
	SyncItemGroupId      *uint64                 `protobuf:"varint,32,opt,name=sync_item_group_id,json=syncItemGroupId" json:"sync_item_group_id,omitempty"`
	Blocked              *bool                   `protobuf:"varint,33,opt,name=blocked" json:"blocked,omitempty"`
	BlockedTime          *TimeRange              `protobuf:"bytes,34,opt,name=blocked_time,json=blockedTime" json:"blocked_time,omitempty"`
	OutBizId             *string                 `protobuf:"bytes,35,opt,name=out_biz_id,json=outBizId" json:"out_biz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Dish) Reset()         { *m = Dish{} }
func (m *Dish) String() string { return proto.CompactTextString(m) }
func (*Dish) ProtoMessage()    {}
func (*Dish) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3}
}
func (m *Dish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dish.Merge(m, src)
}
func (m *Dish) XXX_Size() int {
	return m.Size()
}
func (m *Dish) XXX_DiscardUnknown() {
	xxx_messageInfo_Dish.DiscardUnknown(m)
}

var xxx_messageInfo_Dish proto.InternalMessageInfo

func (m *Dish) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Dish) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *Dish) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Dish) GetPicture() string {
	if m != nil && m.Picture != nil {
		return *m.Picture
	}
	return ""
}

func (m *Dish) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Dish) GetAvailable() Available {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return Available_UNAVAILABLE
}

func (m *Dish) GetPrice() uint64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Dish) GetCatalogId() uint64 {
	if m != nil && m.CatalogId != nil {
		return *m.CatalogId
	}
	return 0
}

func (m *Dish) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Dish) GetOptionGroupCount() uint32 {
	if m != nil && m.OptionGroupCount != nil {
		return *m.OptionGroupCount
	}
	return 0
}

func (m *Dish) GetDeleted() uint32 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return 0
}

func (m *Dish) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Dish) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Dish) GetSalesVolume() uint32 {
	if m != nil && m.SalesVolume != nil {
		return *m.SalesVolume
	}
	return 0
}

func (m *Dish) GetRatingTotal() uint32 {
	if m != nil && m.RatingTotal != nil {
		return *m.RatingTotal
	}
	return 0
}

func (m *Dish) GetRatingGood() uint32 {
	if m != nil && m.RatingGood != nil {
		return *m.RatingGood
	}
	return 0
}

func (m *Dish) GetRatingBad() uint32 {
	if m != nil && m.RatingBad != nil {
		return *m.RatingBad
	}
	return 0
}

func (m *Dish) GetBindGroupCount() uint32 {
	if m != nil && m.BindGroupCount != nil {
		return *m.BindGroupCount
	}
	return 0
}

// Deprecated: Do not use.
func (m *Dish) GetSaleStartTime() uint64 {
	if m != nil && m.SaleStartTime != nil {
		return *m.SaleStartTime
	}
	return 0
}

// Deprecated: Do not use.
func (m *Dish) GetSaleEndTime() uint64 {
	if m != nil && m.SaleEndTime != nil {
		return *m.SaleEndTime
	}
	return 0
}

func (m *Dish) GetSaleWeekBit() uint32 {
	if m != nil && m.SaleWeekBit != nil {
		return *m.SaleWeekBit
	}
	return 0
}

func (m *Dish) GetInSaleTime() bool {
	if m != nil && m.InSaleTime != nil {
		return *m.InSaleTime
	}
	return false
}

func (m *Dish) GetListingStatus() DishListingStatus {
	if m != nil && m.ListingStatus != nil {
		return *m.ListingStatus
	}
	return DishListingStatus_INACTIVE
}

func (m *Dish) GetSaleStatus() DishSaleStatus {
	if m != nil && m.SaleStatus != nil {
		return *m.SaleStatus
	}
	return DishSaleStatus_NOT_FOR_SALE
}

func (m *Dish) GetTimeForSales() []*Dish_TimeForSales {
	if m != nil {
		return m.TimeForSales
	}
	return nil
}

func (m *Dish) GetRawFlag() uint64 {
	if m != nil && m.RawFlag != nil {
		return *m.RawFlag
	}
	return 0
}

func (m *Dish) GetFlag() *Dish_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Dish) GetSalesTime() *Dish_SalesDay {
	if m != nil {
		return m.SalesTime
	}
	return nil
}

func (m *Dish) GetCrawlerPicture() string {
	if m != nil && m.CrawlerPicture != nil {
		return *m.CrawlerPicture
	}
	return ""
}

func (m *Dish) GetSpecialSaleDates() []*Dish_SpecialSaleDate {
	if m != nil {
		return m.SpecialSaleDates
	}
	return nil
}

func (m *Dish) GetOutOfStockTime() *TimeRange {
	if m != nil {
		return m.OutOfStockTime
	}
	return nil
}

func (m *Dish) GetSyncItemGroupId() uint64 {
	if m != nil && m.SyncItemGroupId != nil {
		return *m.SyncItemGroupId
	}
	return 0
}

func (m *Dish) GetBlocked() bool {
	if m != nil && m.Blocked != nil {
		return *m.Blocked
	}
	return false
}

func (m *Dish) GetBlockedTime() *TimeRange {
	if m != nil {
		return m.BlockedTime
	}
	return nil
}

func (m *Dish) GetOutBizId() string {
	if m != nil && m.OutBizId != nil {
		return *m.OutBizId
	}
	return ""
}

type Dish_TimeForSales struct {
	SaleStartTime        *uint64  `protobuf:"varint,1,opt,name=sale_start_time,json=saleStartTime" json:"sale_start_time,omitempty"`
	SaleEndTime          *uint64  `protobuf:"varint,2,opt,name=sale_end_time,json=saleEndTime" json:"sale_end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dish_TimeForSales) Reset()         { *m = Dish_TimeForSales{} }
func (m *Dish_TimeForSales) String() string { return proto.CompactTextString(m) }
func (*Dish_TimeForSales) ProtoMessage()    {}
func (*Dish_TimeForSales) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3, 0}
}
func (m *Dish_TimeForSales) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dish_TimeForSales) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dish_TimeForSales.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dish_TimeForSales) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dish_TimeForSales.Merge(m, src)
}
func (m *Dish_TimeForSales) XXX_Size() int {
	return m.Size()
}
func (m *Dish_TimeForSales) XXX_DiscardUnknown() {
	xxx_messageInfo_Dish_TimeForSales.DiscardUnknown(m)
}

var xxx_messageInfo_Dish_TimeForSales proto.InternalMessageInfo

func (m *Dish_TimeForSales) GetSaleStartTime() uint64 {
	if m != nil && m.SaleStartTime != nil {
		return *m.SaleStartTime
	}
	return 0
}

func (m *Dish_TimeForSales) GetSaleEndTime() uint64 {
	if m != nil && m.SaleEndTime != nil {
		return *m.SaleEndTime
	}
	return 0
}

type Dish_SalesDay struct {
	Monday               []*Dish_TimeForSales `protobuf:"bytes,1,rep,name=monday" json:"monday,omitempty"`
	Tuesday              []*Dish_TimeForSales `protobuf:"bytes,2,rep,name=tuesday" json:"tuesday,omitempty"`
	Wednesday            []*Dish_TimeForSales `protobuf:"bytes,3,rep,name=wednesday" json:"wednesday,omitempty"`
	Thursday             []*Dish_TimeForSales `protobuf:"bytes,4,rep,name=thursday" json:"thursday,omitempty"`
	Friday               []*Dish_TimeForSales `protobuf:"bytes,5,rep,name=friday" json:"friday,omitempty"`
	Saturday             []*Dish_TimeForSales `protobuf:"bytes,6,rep,name=saturday" json:"saturday,omitempty"`
	Sunday               []*Dish_TimeForSales `protobuf:"bytes,7,rep,name=sunday" json:"sunday,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Dish_SalesDay) Reset()         { *m = Dish_SalesDay{} }
func (m *Dish_SalesDay) String() string { return proto.CompactTextString(m) }
func (*Dish_SalesDay) ProtoMessage()    {}
func (*Dish_SalesDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3, 1}
}
func (m *Dish_SalesDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dish_SalesDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dish_SalesDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dish_SalesDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dish_SalesDay.Merge(m, src)
}
func (m *Dish_SalesDay) XXX_Size() int {
	return m.Size()
}
func (m *Dish_SalesDay) XXX_DiscardUnknown() {
	xxx_messageInfo_Dish_SalesDay.DiscardUnknown(m)
}

var xxx_messageInfo_Dish_SalesDay proto.InternalMessageInfo

func (m *Dish_SalesDay) GetMonday() []*Dish_TimeForSales {
	if m != nil {
		return m.Monday
	}
	return nil
}

func (m *Dish_SalesDay) GetTuesday() []*Dish_TimeForSales {
	if m != nil {
		return m.Tuesday
	}
	return nil
}

func (m *Dish_SalesDay) GetWednesday() []*Dish_TimeForSales {
	if m != nil {
		return m.Wednesday
	}
	return nil
}

func (m *Dish_SalesDay) GetThursday() []*Dish_TimeForSales {
	if m != nil {
		return m.Thursday
	}
	return nil
}

func (m *Dish_SalesDay) GetFriday() []*Dish_TimeForSales {
	if m != nil {
		return m.Friday
	}
	return nil
}

func (m *Dish_SalesDay) GetSaturday() []*Dish_TimeForSales {
	if m != nil {
		return m.Saturday
	}
	return nil
}

func (m *Dish_SalesDay) GetSunday() []*Dish_TimeForSales {
	if m != nil {
		return m.Sunday
	}
	return nil
}

type Dish_Flag struct {
	Alcoholic            *bool    `protobuf:"varint,1,opt,name=alcoholic" json:"alcoholic,omitempty"`
	QcFrozen             *bool    `protobuf:"varint,2,opt,name=qc_frozen,json=qcFrozen" json:"qc_frozen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dish_Flag) Reset()         { *m = Dish_Flag{} }
func (m *Dish_Flag) String() string { return proto.CompactTextString(m) }
func (*Dish_Flag) ProtoMessage()    {}
func (*Dish_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3, 2}
}
func (m *Dish_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dish_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dish_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dish_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dish_Flag.Merge(m, src)
}
func (m *Dish_Flag) XXX_Size() int {
	return m.Size()
}
func (m *Dish_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Dish_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Dish_Flag proto.InternalMessageInfo

func (m *Dish_Flag) GetAlcoholic() bool {
	if m != nil && m.Alcoholic != nil {
		return *m.Alcoholic
	}
	return false
}

func (m *Dish_Flag) GetQcFrozen() bool {
	if m != nil && m.QcFrozen != nil {
		return *m.QcFrozen
	}
	return false
}

type Dish_SpecialSaleDate struct {
	Id                   *uint64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartDate            *uint64              `protobuf:"varint,2,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate              *uint64              `protobuf:"varint,3,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	TimeForSales         []*Dish_TimeForSales `protobuf:"bytes,4,rep,name=time_for_sales,json=timeForSales" json:"time_for_sales,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Dish_SpecialSaleDate) Reset()         { *m = Dish_SpecialSaleDate{} }
func (m *Dish_SpecialSaleDate) String() string { return proto.CompactTextString(m) }
func (*Dish_SpecialSaleDate) ProtoMessage()    {}
func (*Dish_SpecialSaleDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{3, 3}
}
func (m *Dish_SpecialSaleDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dish_SpecialSaleDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dish_SpecialSaleDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dish_SpecialSaleDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dish_SpecialSaleDate.Merge(m, src)
}
func (m *Dish_SpecialSaleDate) XXX_Size() int {
	return m.Size()
}
func (m *Dish_SpecialSaleDate) XXX_DiscardUnknown() {
	xxx_messageInfo_Dish_SpecialSaleDate.DiscardUnknown(m)
}

var xxx_messageInfo_Dish_SpecialSaleDate proto.InternalMessageInfo

func (m *Dish_SpecialSaleDate) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Dish_SpecialSaleDate) GetStartDate() uint64 {
	if m != nil && m.StartDate != nil {
		return *m.StartDate
	}
	return 0
}

func (m *Dish_SpecialSaleDate) GetEndDate() uint64 {
	if m != nil && m.EndDate != nil {
		return *m.EndDate
	}
	return 0
}

func (m *Dish_SpecialSaleDate) GetTimeForSales() []*Dish_TimeForSales {
	if m != nil {
		return m.TimeForSales
	}
	return nil
}

type Option struct {
	Id                   *uint64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StoreId              *uint64    `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Name                 *string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Price                *uint64    `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	Available            *Available `protobuf:"varint,5,opt,name=available,enum=foody_base.Available" json:"available,omitempty"`
	CreateTime           *uint64    `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64    `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	GroupId              *uint64    `protobuf:"varint,8,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rank                 *uint32    `protobuf:"varint,9,opt,name=rank" json:"rank,omitempty"`
	OutOfStockTime       *TimeRange `protobuf:"bytes,10,opt,name=out_of_stock_time,json=outOfStockTime" json:"out_of_stock_time,omitempty"`
	SyncItemGroupId      *uint64    `protobuf:"varint,11,opt,name=sync_item_group_id,json=syncItemGroupId" json:"sync_item_group_id,omitempty"`
	OutBizId             *string    `protobuf:"bytes,12,opt,name=out_biz_id,json=outBizId" json:"out_biz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{4}
}
func (m *Option) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Option.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return m.Size()
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Option) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *Option) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Option) GetPrice() uint64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Option) GetAvailable() Available {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return Available_UNAVAILABLE
}

func (m *Option) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Option) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Option) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *Option) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Option) GetOutOfStockTime() *TimeRange {
	if m != nil {
		return m.OutOfStockTime
	}
	return nil
}

func (m *Option) GetSyncItemGroupId() uint64 {
	if m != nil && m.SyncItemGroupId != nil {
		return *m.SyncItemGroupId
	}
	return 0
}

func (m *Option) GetOutBizId() string {
	if m != nil && m.OutBizId != nil {
		return *m.OutBizId
	}
	return ""
}

type OptionGroup struct {
	Id                   *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StoreId              *uint64           `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Name                 *string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Remark               *string           `protobuf:"bytes,4,opt,name=remark" json:"remark,omitempty"`
	ShelveState          *ShelveState      `protobuf:"varint,5,opt,name=shelve_state,json=shelveState,enum=foody_base.ShelveState" json:"shelve_state,omitempty"`
	SelectMode           *OptionSelectMode `protobuf:"varint,6,opt,name=select_mode,json=selectMode,enum=foody_base.OptionSelectMode" json:"select_mode,omitempty"`
	SelectMin            *uint32           `protobuf:"varint,7,opt,name=select_min,json=selectMin" json:"select_min,omitempty"`
	SelectMax            *uint32           `protobuf:"varint,8,opt,name=select_max,json=selectMax" json:"select_max,omitempty"`
	CreateTime           *uint64           `protobuf:"varint,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64           `protobuf:"varint,10,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Flag                 *OptionGroup_Flag `protobuf:"bytes,11,opt,name=flag" json:"flag,omitempty"`
	SyncItemGroupId      *uint64           `protobuf:"varint,12,opt,name=sync_item_group_id,json=syncItemGroupId" json:"sync_item_group_id,omitempty"`
	OutBizId             *string           `protobuf:"bytes,13,opt,name=out_biz_id,json=outBizId" json:"out_biz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OptionGroup) Reset()         { *m = OptionGroup{} }
func (m *OptionGroup) String() string { return proto.CompactTextString(m) }
func (*OptionGroup) ProtoMessage()    {}
func (*OptionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{5}
}
func (m *OptionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionGroup.Merge(m, src)
}
func (m *OptionGroup) XXX_Size() int {
	return m.Size()
}
func (m *OptionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_OptionGroup proto.InternalMessageInfo

func (m *OptionGroup) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OptionGroup) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *OptionGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *OptionGroup) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *OptionGroup) GetShelveState() ShelveState {
	if m != nil && m.ShelveState != nil {
		return *m.ShelveState
	}
	return ShelveState_UNSHELVED
}

func (m *OptionGroup) GetSelectMode() OptionSelectMode {
	if m != nil && m.SelectMode != nil {
		return *m.SelectMode
	}
	return OptionSelectMode_MODE_EQUAL
}

func (m *OptionGroup) GetSelectMin() uint32 {
	if m != nil && m.SelectMin != nil {
		return *m.SelectMin
	}
	return 0
}

func (m *OptionGroup) GetSelectMax() uint32 {
	if m != nil && m.SelectMax != nil {
		return *m.SelectMax
	}
	return 0
}

func (m *OptionGroup) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OptionGroup) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *OptionGroup) GetFlag() *OptionGroup_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *OptionGroup) GetSyncItemGroupId() uint64 {
	if m != nil && m.SyncItemGroupId != nil {
		return *m.SyncItemGroupId
	}
	return 0
}

func (m *OptionGroup) GetOutBizId() string {
	if m != nil && m.OutBizId != nil {
		return *m.OutBizId
	}
	return ""
}

type OptionGroup_Flag struct {
	QcFrozen             *bool    `protobuf:"varint,1,opt,name=qc_frozen,json=qcFrozen" json:"qc_frozen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionGroup_Flag) Reset()         { *m = OptionGroup_Flag{} }
func (m *OptionGroup_Flag) String() string { return proto.CompactTextString(m) }
func (*OptionGroup_Flag) ProtoMessage()    {}
func (*OptionGroup_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{5, 0}
}
func (m *OptionGroup_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionGroup_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionGroup_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionGroup_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionGroup_Flag.Merge(m, src)
}
func (m *OptionGroup_Flag) XXX_Size() int {
	return m.Size()
}
func (m *OptionGroup_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionGroup_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_OptionGroup_Flag proto.InternalMessageInfo

func (m *OptionGroup_Flag) GetQcFrozen() bool {
	if m != nil && m.QcFrozen != nil {
		return *m.QcFrozen
	}
	return false
}

// DishOptionBinding 表示一个店铺绑定了一个 Option group。
type DishOptionBinding struct {
	StoreId              *uint64      `protobuf:"varint,1,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DishId               *uint64      `protobuf:"varint,2,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	GroupId              *uint64      `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rank                 *uint32      `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	ShelveState          *ShelveState `protobuf:"varint,5,opt,name=shelve_state,json=shelveState,enum=foody_base.ShelveState" json:"shelve_state,omitempty"`
	CreateTime           *uint64      `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64      `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DishOptionBinding) Reset()         { *m = DishOptionBinding{} }
func (m *DishOptionBinding) String() string { return proto.CompactTextString(m) }
func (*DishOptionBinding) ProtoMessage()    {}
func (*DishOptionBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{6}
}
func (m *DishOptionBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DishOptionBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DishOptionBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DishOptionBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DishOptionBinding.Merge(m, src)
}
func (m *DishOptionBinding) XXX_Size() int {
	return m.Size()
}
func (m *DishOptionBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_DishOptionBinding.DiscardUnknown(m)
}

var xxx_messageInfo_DishOptionBinding proto.InternalMessageInfo

func (m *DishOptionBinding) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *DishOptionBinding) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *DishOptionBinding) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *DishOptionBinding) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *DishOptionBinding) GetShelveState() ShelveState {
	if m != nil && m.ShelveState != nil {
		return *m.ShelveState
	}
	return ShelveState_UNSHELVED
}

func (m *DishOptionBinding) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DishOptionBinding) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type OptionGroupBinding struct {
	StoreId              *uint64  `protobuf:"varint,1,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	GroupId              *uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	OptionId             *uint64  `protobuf:"varint,3,opt,name=option_id,json=optionId" json:"option_id,omitempty"`
	Rank                 *uint32  `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Price                *uint64  `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionGroupBinding) Reset()         { *m = OptionGroupBinding{} }
func (m *OptionGroupBinding) String() string { return proto.CompactTextString(m) }
func (*OptionGroupBinding) ProtoMessage()    {}
func (*OptionGroupBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{7}
}
func (m *OptionGroupBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionGroupBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionGroupBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionGroupBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionGroupBinding.Merge(m, src)
}
func (m *OptionGroupBinding) XXX_Size() int {
	return m.Size()
}
func (m *OptionGroupBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionGroupBinding.DiscardUnknown(m)
}

var xxx_messageInfo_OptionGroupBinding proto.InternalMessageInfo

func (m *OptionGroupBinding) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *OptionGroupBinding) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *OptionGroupBinding) GetOptionId() uint64 {
	if m != nil && m.OptionId != nil {
		return *m.OptionId
	}
	return 0
}

func (m *OptionGroupBinding) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *OptionGroupBinding) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OptionGroupBinding) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *OptionGroupBinding) GetPrice() uint64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

type Catalog struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	StoreId              *uint64  `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DishCount            *uint32  `protobuf:"varint,4,opt,name=dish_count,json=dishCount" json:"dish_count,omitempty"`
	Rank                 *uint32  `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	SyncItemGroupId      *uint64  `protobuf:"varint,8,opt,name=sync_item_group_id,json=syncItemGroupId" json:"sync_item_group_id,omitempty"`
	OutBizId             *string  `protobuf:"bytes,9,opt,name=out_biz_id,json=outBizId" json:"out_biz_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Catalog) Reset()         { *m = Catalog{} }
func (m *Catalog) String() string { return proto.CompactTextString(m) }
func (*Catalog) ProtoMessage()    {}
func (*Catalog) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{8}
}
func (m *Catalog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Catalog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Catalog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Catalog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Catalog.Merge(m, src)
}
func (m *Catalog) XXX_Size() int {
	return m.Size()
}
func (m *Catalog) XXX_DiscardUnknown() {
	xxx_messageInfo_Catalog.DiscardUnknown(m)
}

var xxx_messageInfo_Catalog proto.InternalMessageInfo

func (m *Catalog) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Catalog) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Catalog) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *Catalog) GetDishCount() uint32 {
	if m != nil && m.DishCount != nil {
		return *m.DishCount
	}
	return 0
}

func (m *Catalog) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *Catalog) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Catalog) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Catalog) GetSyncItemGroupId() uint64 {
	if m != nil && m.SyncItemGroupId != nil {
		return *m.SyncItemGroupId
	}
	return 0
}

func (m *Catalog) GetOutBizId() string {
	if m != nil && m.OutBizId != nil {
		return *m.OutBizId
	}
	return ""
}

type Buyer struct {
	Id                   *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phone                *string   `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Location             *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Avatar               *string   `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Buyer) Reset()         { *m = Buyer{} }
func (m *Buyer) String() string { return proto.CompactTextString(m) }
func (*Buyer) ProtoMessage()    {}
func (*Buyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{9}
}
func (m *Buyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Buyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Buyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Buyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Buyer.Merge(m, src)
}
func (m *Buyer) XXX_Size() int {
	return m.Size()
}
func (m *Buyer) XXX_DiscardUnknown() {
	xxx_messageInfo_Buyer.DiscardUnknown(m)
}

var xxx_messageInfo_Buyer proto.InternalMessageInfo

func (m *Buyer) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Buyer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Buyer) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Buyer) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Buyer) GetAvatar() string {
	if m != nil && m.Avatar != nil {
		return *m.Avatar
	}
	return ""
}

type DeliveryAddress struct {
	Id                   *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Phone                *string   `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Location             *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeliveryAddress) Reset()         { *m = DeliveryAddress{} }
func (m *DeliveryAddress) String() string { return proto.CompactTextString(m) }
func (*DeliveryAddress) ProtoMessage()    {}
func (*DeliveryAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{10}
}
func (m *DeliveryAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryAddress.Merge(m, src)
}
func (m *DeliveryAddress) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryAddress.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryAddress proto.InternalMessageInfo

func (m *DeliveryAddress) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeliveryAddress) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DeliveryAddress) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *DeliveryAddress) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Driver struct {
	Id                   *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FullName             *string   `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Phone                *string   `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Location             *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	ProfilePhoto         *string   `protobuf:"bytes,5,opt,name=profile_photo,json=profilePhoto" json:"profile_photo,omitempty"`
	VehiclePlateNo       *string   `protobuf:"bytes,6,opt,name=vehicle_plate_no,json=vehiclePlateNo" json:"vehicle_plate_no,omitempty"`
	RatingTotal          *uint32   `protobuf:"varint,7,opt,name=rating_total,json=ratingTotal" json:"rating_total,omitempty"`
	RatingScore          *float32  `protobuf:"fixed32,8,opt,name=rating_score,json=ratingScore" json:"rating_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Driver) Reset()         { *m = Driver{} }
func (m *Driver) String() string { return proto.CompactTextString(m) }
func (*Driver) ProtoMessage()    {}
func (*Driver) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{11}
}
func (m *Driver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Driver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Driver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Driver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Driver.Merge(m, src)
}
func (m *Driver) XXX_Size() int {
	return m.Size()
}
func (m *Driver) XXX_DiscardUnknown() {
	xxx_messageInfo_Driver.DiscardUnknown(m)
}

var xxx_messageInfo_Driver proto.InternalMessageInfo

func (m *Driver) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Driver) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *Driver) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *Driver) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Driver) GetProfilePhoto() string {
	if m != nil && m.ProfilePhoto != nil {
		return *m.ProfilePhoto
	}
	return ""
}

func (m *Driver) GetVehiclePlateNo() string {
	if m != nil && m.VehiclePlateNo != nil {
		return *m.VehiclePlateNo
	}
	return ""
}

func (m *Driver) GetRatingTotal() uint32 {
	if m != nil && m.RatingTotal != nil {
		return *m.RatingTotal
	}
	return 0
}

func (m *Driver) GetRatingScore() float32 {
	if m != nil && m.RatingScore != nil {
		return *m.RatingScore
	}
	return 0
}

type Location struct {
	State                *string  `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	City                 *string  `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	District             *string  `protobuf:"bytes,3,opt,name=district" json:"district,omitempty"`
	Address              *string  `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	Latitude             *float32 `protobuf:"fixed32,5,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float32 `protobuf:"fixed32,6,opt,name=longitude" json:"longitude,omitempty"`
	Remark               *string  `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
	PreciseLatitude      *float64 `protobuf:"fixed64,8,opt,name=precise_latitude,json=preciseLatitude" json:"precise_latitude,omitempty"`
	PreciseLongitude     *float64 `protobuf:"fixed64,9,opt,name=precise_longitude,json=preciseLongitude" json:"precise_longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{12}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *Location) GetDistrict() string {
	if m != nil && m.District != nil {
		return *m.District
	}
	return ""
}

func (m *Location) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Location) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Location) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *Location) GetPreciseLatitude() float64 {
	if m != nil && m.PreciseLatitude != nil {
		return *m.PreciseLatitude
	}
	return 0
}

func (m *Location) GetPreciseLongitude() float64 {
	if m != nil && m.PreciseLongitude != nil {
		return *m.PreciseLongitude
	}
	return 0
}

type CartOption struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price                *uint64  `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CartOption) Reset()         { *m = CartOption{} }
func (m *CartOption) String() string { return proto.CompactTextString(m) }
func (*CartOption) ProtoMessage()    {}
func (*CartOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{13}
}
func (m *CartOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartOption.Merge(m, src)
}
func (m *CartOption) XXX_Size() int {
	return m.Size()
}
func (m *CartOption) XXX_DiscardUnknown() {
	xxx_messageInfo_CartOption.DiscardUnknown(m)
}

var xxx_messageInfo_CartOption proto.InternalMessageInfo

func (m *CartOption) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CartOption) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CartOption) GetPrice() uint64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

type CartOptionGroup struct {
	Id                   *uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Options              []*CartOption `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CartOptionGroup) Reset()         { *m = CartOptionGroup{} }
func (m *CartOptionGroup) String() string { return proto.CompactTextString(m) }
func (*CartOptionGroup) ProtoMessage()    {}
func (*CartOptionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{14}
}
func (m *CartOptionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartOptionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartOptionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartOptionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartOptionGroup.Merge(m, src)
}
func (m *CartOptionGroup) XXX_Size() int {
	return m.Size()
}
func (m *CartOptionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CartOptionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CartOptionGroup proto.InternalMessageInfo

func (m *CartOptionGroup) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CartOptionGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CartOptionGroup) GetOptions() []*CartOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type CartDish struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SnapshotId           *uint64  `protobuf:"varint,2,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Image                *string  `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Price                *uint64  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	CatalogId            *uint64  `protobuf:"varint,6,opt,name=catalog_id,json=catalogId" json:"catalog_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CartDish) Reset()         { *m = CartDish{} }
func (m *CartDish) String() string { return proto.CompactTextString(m) }
func (*CartDish) ProtoMessage()    {}
func (*CartDish) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{15}
}
func (m *CartDish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartDish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartDish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartDish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartDish.Merge(m, src)
}
func (m *CartDish) XXX_Size() int {
	return m.Size()
}
func (m *CartDish) XXX_DiscardUnknown() {
	xxx_messageInfo_CartDish.DiscardUnknown(m)
}

var xxx_messageInfo_CartDish proto.InternalMessageInfo

func (m *CartDish) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CartDish) GetSnapshotId() uint64 {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return 0
}

func (m *CartDish) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CartDish) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CartDish) GetPrice() uint64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *CartDish) GetCatalogId() uint64 {
	if m != nil && m.CatalogId != nil {
		return *m.CatalogId
	}
	return 0
}

type CartItemDetail struct {
	Dish                 *CartDish                    `protobuf:"bytes,1,opt,name=dish" json:"dish,omitempty"`
	OptionGroups         []*CartOptionGroup           `protobuf:"bytes,2,rep,name=option_groups,json=optionGroups" json:"option_groups,omitempty"`
	Discount             *ItemDiscount                `protobuf:"bytes,3,opt,name=discount" json:"discount,omitempty"`
	FlashSaleDiscount    *FlashSaleDishDiscount       `protobuf:"bytes,4,opt,name=flash_sale_discount,json=flashSaleDiscount" json:"flash_sale_discount,omitempty"`
	FlashSaleLimit       *uint64                      `protobuf:"varint,5,opt,name=flash_sale_limit,json=flashSaleLimit" json:"flash_sale_limit,omitempty"`
	DiscountType         *CartItemDetail_DiscountType `protobuf:"varint,6,opt,name=discount_type,json=discountType,enum=foody_base.CartItemDetail_DiscountType" json:"discount_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CartItemDetail) Reset()         { *m = CartItemDetail{} }
func (m *CartItemDetail) String() string { return proto.CompactTextString(m) }
func (*CartItemDetail) ProtoMessage()    {}
func (*CartItemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{16}
}
func (m *CartItemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartItemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartItemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartItemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartItemDetail.Merge(m, src)
}
func (m *CartItemDetail) XXX_Size() int {
	return m.Size()
}
func (m *CartItemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_CartItemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_CartItemDetail proto.InternalMessageInfo

func (m *CartItemDetail) GetDish() *CartDish {
	if m != nil {
		return m.Dish
	}
	return nil
}

func (m *CartItemDetail) GetOptionGroups() []*CartOptionGroup {
	if m != nil {
		return m.OptionGroups
	}
	return nil
}

func (m *CartItemDetail) GetDiscount() *ItemDiscount {
	if m != nil {
		return m.Discount
	}
	return nil
}

func (m *CartItemDetail) GetFlashSaleDiscount() *FlashSaleDishDiscount {
	if m != nil {
		return m.FlashSaleDiscount
	}
	return nil
}

func (m *CartItemDetail) GetFlashSaleLimit() uint64 {
	if m != nil && m.FlashSaleLimit != nil {
		return *m.FlashSaleLimit
	}
	return 0
}

func (m *CartItemDetail) GetDiscountType() CartItemDetail_DiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return CartItemDetail_NoDiscount
}

type CartItem struct {
	Id                   *uint64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Detail               *CartItemDetail `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
	Quantity             *uint32         `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	Status               *CartItemStatus `protobuf:"varint,4,opt,name=status,enum=foody_base.CartItemStatus" json:"status,omitempty"`
	Remark               *string         `protobuf:"bytes,5,opt,name=remark" json:"remark,omitempty"`
	ItemId               *uint64         `protobuf:"varint,6,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	DishId               *uint64         `protobuf:"varint,7,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	CreateTime           *uint64         `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	BuyerId              *uint64         `protobuf:"varint,9,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CartItem) Reset()         { *m = CartItem{} }
func (m *CartItem) String() string { return proto.CompactTextString(m) }
func (*CartItem) ProtoMessage()    {}
func (*CartItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{17}
}
func (m *CartItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartItem.Merge(m, src)
}
func (m *CartItem) XXX_Size() int {
	return m.Size()
}
func (m *CartItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CartItem.DiscardUnknown(m)
}

var xxx_messageInfo_CartItem proto.InternalMessageInfo

func (m *CartItem) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CartItem) GetDetail() *CartItemDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *CartItem) GetQuantity() uint32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *CartItem) GetStatus() CartItemStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return CartItemStatus_NORMAL
}

func (m *CartItem) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *CartItem) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CartItem) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *CartItem) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CartItem) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

type DeliveryAmount struct {
	//配送费
	//  optional uint64 shipping_fee = 1; //买家应付运费，TODO 废弃
	DriverShippingIncome *uint64 `protobuf:"varint,2,opt,name=driver_shipping_income,json=driverShippingIncome" json:"driver_shipping_income,omitempty"`
	//COD金额
	PayToMerchant        *uint64  `protobuf:"varint,5,opt,name=pay_to_merchant,json=payToMerchant" json:"pay_to_merchant,omitempty"`
	CollectFromCustomer  *uint64  `protobuf:"varint,6,opt,name=collect_from_customer,json=collectFromCustomer" json:"collect_from_customer,omitempty"`
	ShippingSurgeFee     *uint64  `protobuf:"varint,7,opt,name=shipping_surge_fee,json=shippingSurgeFee" json:"shipping_surge_fee,omitempty"`
	ParkingFee           *uint64  `protobuf:"varint,8,opt,name=parking_fee,json=parkingFee" json:"parking_fee,omitempty"`
	BadWeatherFee        *uint64  `protobuf:"varint,9,opt,name=bad_weather_fee,json=badWeatherFee" json:"bad_weather_fee,omitempty"`
	HolidayFee           *uint64  `protobuf:"varint,10,opt,name=holiday_fee,json=holidayFee" json:"holiday_fee,omitempty"`
	LateNightFee         *uint64  `protobuf:"varint,11,opt,name=late_night_fee,json=lateNightFee" json:"late_night_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeliveryAmount) Reset()         { *m = DeliveryAmount{} }
func (m *DeliveryAmount) String() string { return proto.CompactTextString(m) }
func (*DeliveryAmount) ProtoMessage()    {}
func (*DeliveryAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{18}
}
func (m *DeliveryAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryAmount.Merge(m, src)
}
func (m *DeliveryAmount) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryAmount.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryAmount proto.InternalMessageInfo

func (m *DeliveryAmount) GetDriverShippingIncome() uint64 {
	if m != nil && m.DriverShippingIncome != nil {
		return *m.DriverShippingIncome
	}
	return 0
}

func (m *DeliveryAmount) GetPayToMerchant() uint64 {
	if m != nil && m.PayToMerchant != nil {
		return *m.PayToMerchant
	}
	return 0
}

func (m *DeliveryAmount) GetCollectFromCustomer() uint64 {
	if m != nil && m.CollectFromCustomer != nil {
		return *m.CollectFromCustomer
	}
	return 0
}

func (m *DeliveryAmount) GetShippingSurgeFee() uint64 {
	if m != nil && m.ShippingSurgeFee != nil {
		return *m.ShippingSurgeFee
	}
	return 0
}

func (m *DeliveryAmount) GetParkingFee() uint64 {
	if m != nil && m.ParkingFee != nil {
		return *m.ParkingFee
	}
	return 0
}

func (m *DeliveryAmount) GetBadWeatherFee() uint64 {
	if m != nil && m.BadWeatherFee != nil {
		return *m.BadWeatherFee
	}
	return 0
}

func (m *DeliveryAmount) GetHolidayFee() uint64 {
	if m != nil && m.HolidayFee != nil {
		return *m.HolidayFee
	}
	return 0
}

func (m *DeliveryAmount) GetLateNightFee() uint64 {
	if m != nil && m.LateNightFee != nil {
		return *m.LateNightFee
	}
	return 0
}

type OrderCustomTag struct {
	Key                  *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderCustomTag) Reset()         { *m = OrderCustomTag{} }
func (m *OrderCustomTag) String() string { return proto.CompactTextString(m) }
func (*OrderCustomTag) ProtoMessage()    {}
func (*OrderCustomTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{19}
}
func (m *OrderCustomTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderCustomTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderCustomTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderCustomTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCustomTag.Merge(m, src)
}
func (m *OrderCustomTag) XXX_Size() int {
	return m.Size()
}
func (m *OrderCustomTag) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCustomTag.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCustomTag proto.InternalMessageInfo

func (m *OrderCustomTag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *OrderCustomTag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Order struct {
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	//  optional string order_no = 2; // 废弃
	Source          *OrderSource     `protobuf:"varint,3,opt,name=source,enum=foody_base.OrderSource" json:"source,omitempty"`
	BuyerId         *uint64          `protobuf:"varint,4,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	Store           *Store           `protobuf:"bytes,5,opt,name=store" json:"store,omitempty"`
	DeliveryAddress *DeliveryAddress `protobuf:"bytes,6,opt,name=delivery_address,json=deliveryAddress" json:"delivery_address,omitempty"`
	Items           []*Order_Item    `protobuf:"bytes,7,rep,name=items" json:"items,omitempty"`
	//  optional Promotion promotion = 8; // 挪到 Amount 中
	Amount         *Order_Amount  `protobuf:"bytes,9,opt,name=amount" json:"amount,omitempty"`
	PaymentMethod  *PaymentMethod `protobuf:"varint,10,opt,name=payment_method,json=paymentMethod,enum=foody_base.PaymentMethod" json:"payment_method,omitempty"`
	Remark         *string        `protobuf:"bytes,11,opt,name=remark" json:"remark,omitempty"`
	Status         *OrderStatus   `protobuf:"varint,12,opt,name=status,enum=foody_base.OrderStatus" json:"status,omitempty"`
	CancelReason   *CancelReason  `protobuf:"varint,13,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	CancelSource   *CancelSource  `protobuf:"varint,14,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelProposer *Proposer      `protobuf:"varint,15,opt,name=cancel_proposer,json=cancelProposer,enum=foody_base.Proposer" json:"cancel_proposer,omitempty"`
	//  optional uint64 checkout_id = 15; // 废弃
	PlaceTime             *uint64 `protobuf:"varint,16,opt,name=place_time,json=placeTime" json:"place_time,omitempty"`
	PaymentTime           *uint64 `protobuf:"varint,17,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	ReviewTime            *uint64 `protobuf:"varint,18,opt,name=review_time,json=reviewTime" json:"review_time,omitempty"`
	MerchantConfirmTime   *uint64 `protobuf:"varint,19,opt,name=merchant_confirm_time,json=merchantConfirmTime" json:"merchant_confirm_time,omitempty"`
	CompleteTime          *uint64 `protobuf:"varint,20,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime            *uint64 `protobuf:"varint,21,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CreateTime            *uint64 `protobuf:"varint,22,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime            *uint64 `protobuf:"varint,23,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	EstimateArrivedTime   *uint64 `protobuf:"varint,24,opt,name=estimate_arrived_time,json=estimateArrivedTime" json:"estimate_arrived_time,omitempty"`
	EstimateDeliveredTime *uint64 `protobuf:"varint,25,opt,name=estimate_delivered_time,json=estimateDeliveredTime" json:"estimate_delivered_time,omitempty"`
	PickupSeq             *uint32 `protobuf:"varint,26,opt,name=pickup_seq,json=pickupSeq" json:"pickup_seq,omitempty"`
	// optional uint64 delivery_order_id = 27; // 废弃
	DeliveryAssignTime   *uint64 `protobuf:"varint,28,opt,name=delivery_assign_time,json=deliveryAssignTime" json:"delivery_assign_time,omitempty"`
	DeliveryArriveTime   *uint64 `protobuf:"varint,29,opt,name=delivery_arrive_time,json=deliveryArriveTime" json:"delivery_arrive_time,omitempty"`
	DeliveryPickupTime   *uint64 `protobuf:"varint,30,opt,name=delivery_pickup_time,json=deliveryPickupTime" json:"delivery_pickup_time,omitempty"`
	DeliveryCompleteTime *uint64 `protobuf:"varint,31,opt,name=delivery_complete_time,json=deliveryCompleteTime" json:"delivery_complete_time,omitempty"`
	//编号32曾被使用 SettlementMode store_settlement_mode 防止直接变更已有字段先跳过这个编号,新增在39
	IsReceived                *bool                         `protobuf:"varint,33,opt,name=is_received,json=isReceived" json:"is_received,omitempty"`
	IsReady                   *bool                         `protobuf:"varint,34,opt,name=is_ready,json=isReady" json:"is_ready,omitempty"`
	ReadyTime                 *uint64                       `protobuf:"varint,35,opt,name=ready_time,json=readyTime" json:"ready_time,omitempty"`
	RatingCompletedTime       *uint64                       `protobuf:"varint,36,opt,name=rating_completed_time,json=ratingCompletedTime" json:"rating_completed_time,omitempty"`
	IsRatingCompleted         *uint32                       `protobuf:"varint,37,opt,name=is_rating_completed,json=isRatingCompleted" json:"is_rating_completed,omitempty"`
	Flag                      *Order_Flag                   `protobuf:"bytes,38,opt,name=flag" json:"flag,omitempty"`
	ItemQuantity              *uint64                       `protobuf:"varint,39,opt,name=item_quantity,json=itemQuantity" json:"item_quantity,omitempty"`
	StoreSettlementFactor     *Order_StoreSettlementFactor  `protobuf:"bytes,40,opt,name=store_settlement_factor,json=storeSettlementFactor" json:"store_settlement_factor,omitempty"`
	RewriteType               *Order_RewriteType            `protobuf:"varint,41,opt,name=rewrite_type,json=rewriteType,enum=foody_base.Order_RewriteType" json:"rewrite_type,omitempty"`
	RewriteReason             *Order_RewriteReason          `protobuf:"varint,42,opt,name=rewrite_reason,json=rewriteReason,enum=foody_base.Order_RewriteReason" json:"rewrite_reason,omitempty"`
	RewriteRemark             *string                       `protobuf:"bytes,43,opt,name=rewrite_remark,json=rewriteRemark" json:"rewrite_remark,omitempty"`
	RefundAmount              *uint64                       `protobuf:"varint,44,opt,name=refund_amount,json=refundAmount" json:"refund_amount,omitempty"`
	MakeupAmount              *uint64                       `protobuf:"varint,45,opt,name=makeup_amount,json=makeupAmount" json:"makeup_amount,omitempty"`
	PromotionFlag             *Order_Promotion_Flag         `protobuf:"bytes,46,opt,name=promotion_flag,json=promotionFlag" json:"promotion_flag,omitempty"`
	VoucherReferenceId        *string                       `protobuf:"bytes,47,opt,name=voucher_reference_id,json=voucherReferenceId" json:"voucher_reference_id,omitempty"`
	DeliveryDistance          *uint64                       `protobuf:"varint,48,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	DeliveryReconfirmTime     *uint64                       `protobuf:"varint,49,opt,name=delivery_reconfirm_time,json=deliveryReconfirmTime" json:"delivery_reconfirm_time,omitempty"`
	MerchantConfirmedDeadline *uint64                       `protobuf:"varint,50,opt,name=merchant_confirmed_deadline,json=merchantConfirmedDeadline" json:"merchant_confirmed_deadline,omitempty"`
	OvertimeMode              *Store_Flag_OvertimeOrderMode `protobuf:"varint,51,opt,name=overtime_mode,json=overtimeMode,enum=foody_base.Store_Flag_OvertimeOrderMode" json:"overtime_mode,omitempty"`
	RewriteSource             *RewriteSource                `protobuf:"varint,52,opt,name=rewrite_source,json=rewriteSource,enum=foody_base.RewriteSource" json:"rewrite_source,omitempty"`
	StoreLocationGroups       []*LocationGroup              `protobuf:"bytes,53,rep,name=store_location_groups,json=storeLocationGroups" json:"store_location_groups,omitempty"`
	BuyerLocationGroups       []*LocationGroup              `protobuf:"bytes,54,rep,name=buyer_location_groups,json=buyerLocationGroups" json:"buyer_location_groups,omitempty"`
	CancelRemark              *string                       `protobuf:"bytes,55,opt,name=cancel_remark,json=cancelRemark" json:"cancel_remark,omitempty"`
	CancelCerts               []*Certificate                `protobuf:"bytes,56,rep,name=cancel_certs,json=cancelCerts" json:"cancel_certs,omitempty"`
	VendorId                  *uint64                       `protobuf:"varint,57,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	DelayAssignDuration       *uint64                       `protobuf:"varint,58,opt,name=delay_assign_duration,json=delayAssignDuration" json:"delay_assign_duration,omitempty"`
	IsMerchantVisible         *bool                         `protobuf:"varint,59,opt,name=is_merchant_visible,json=isMerchantVisible" json:"is_merchant_visible,omitempty"`
	PaymentInfo               *Order_PaymentInfo            `protobuf:"bytes,60,opt,name=payment_info,json=paymentInfo" json:"payment_info,omitempty"`
	MinSpend                  *uint64                       `protobuf:"varint,61,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	CustomTags                []*OrderCustomTag             `protobuf:"bytes,62,rep,name=custom_tags,json=customTags" json:"custom_tags,omitempty"`
	DeliveryMode              *DeliveryMode                 `protobuf:"varint,63,opt,name=delivery_mode,json=deliveryMode,enum=foody_base.DeliveryMode" json:"delivery_mode,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                      `json:"-"`
	XXX_unrecognized          []byte                        `json:"-"`
	XXX_sizecache             int32                         `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Order) GetSource() OrderSource {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return OrderSource_SOURCE_SHOPEE
}

func (m *Order) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *Order) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Order) GetDeliveryAddress() *DeliveryAddress {
	if m != nil {
		return m.DeliveryAddress
	}
	return nil
}

func (m *Order) GetItems() []*Order_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetAmount() *Order_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Order) GetPaymentMethod() PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *Order) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return OrderStatus_ORDER_CREATED
}

func (m *Order) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *Order) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *Order) GetCancelProposer() Proposer {
	if m != nil && m.CancelProposer != nil {
		return *m.CancelProposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *Order) GetPlaceTime() uint64 {
	if m != nil && m.PlaceTime != nil {
		return *m.PlaceTime
	}
	return 0
}

func (m *Order) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *Order) GetReviewTime() uint64 {
	if m != nil && m.ReviewTime != nil {
		return *m.ReviewTime
	}
	return 0
}

func (m *Order) GetMerchantConfirmTime() uint64 {
	if m != nil && m.MerchantConfirmTime != nil {
		return *m.MerchantConfirmTime
	}
	return 0
}

func (m *Order) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *Order) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *Order) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Order) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Order) GetEstimateArrivedTime() uint64 {
	if m != nil && m.EstimateArrivedTime != nil {
		return *m.EstimateArrivedTime
	}
	return 0
}

func (m *Order) GetEstimateDeliveredTime() uint64 {
	if m != nil && m.EstimateDeliveredTime != nil {
		return *m.EstimateDeliveredTime
	}
	return 0
}

func (m *Order) GetPickupSeq() uint32 {
	if m != nil && m.PickupSeq != nil {
		return *m.PickupSeq
	}
	return 0
}

func (m *Order) GetDeliveryAssignTime() uint64 {
	if m != nil && m.DeliveryAssignTime != nil {
		return *m.DeliveryAssignTime
	}
	return 0
}

func (m *Order) GetDeliveryArriveTime() uint64 {
	if m != nil && m.DeliveryArriveTime != nil {
		return *m.DeliveryArriveTime
	}
	return 0
}

func (m *Order) GetDeliveryPickupTime() uint64 {
	if m != nil && m.DeliveryPickupTime != nil {
		return *m.DeliveryPickupTime
	}
	return 0
}

func (m *Order) GetDeliveryCompleteTime() uint64 {
	if m != nil && m.DeliveryCompleteTime != nil {
		return *m.DeliveryCompleteTime
	}
	return 0
}

func (m *Order) GetIsReceived() bool {
	if m != nil && m.IsReceived != nil {
		return *m.IsReceived
	}
	return false
}

func (m *Order) GetIsReady() bool {
	if m != nil && m.IsReady != nil {
		return *m.IsReady
	}
	return false
}

func (m *Order) GetReadyTime() uint64 {
	if m != nil && m.ReadyTime != nil {
		return *m.ReadyTime
	}
	return 0
}

func (m *Order) GetRatingCompletedTime() uint64 {
	if m != nil && m.RatingCompletedTime != nil {
		return *m.RatingCompletedTime
	}
	return 0
}

func (m *Order) GetIsRatingCompleted() uint32 {
	if m != nil && m.IsRatingCompleted != nil {
		return *m.IsRatingCompleted
	}
	return 0
}

func (m *Order) GetFlag() *Order_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Order) GetItemQuantity() uint64 {
	if m != nil && m.ItemQuantity != nil {
		return *m.ItemQuantity
	}
	return 0
}

func (m *Order) GetStoreSettlementFactor() *Order_StoreSettlementFactor {
	if m != nil {
		return m.StoreSettlementFactor
	}
	return nil
}

func (m *Order) GetRewriteType() Order_RewriteType {
	if m != nil && m.RewriteType != nil {
		return *m.RewriteType
	}
	return Order_REWRITE_ORIGIN
}

func (m *Order) GetRewriteReason() Order_RewriteReason {
	if m != nil && m.RewriteReason != nil {
		return *m.RewriteReason
	}
	return Order_REWRITE_RESERVED
}

func (m *Order) GetRewriteRemark() string {
	if m != nil && m.RewriteRemark != nil {
		return *m.RewriteRemark
	}
	return ""
}

func (m *Order) GetRefundAmount() uint64 {
	if m != nil && m.RefundAmount != nil {
		return *m.RefundAmount
	}
	return 0
}

func (m *Order) GetMakeupAmount() uint64 {
	if m != nil && m.MakeupAmount != nil {
		return *m.MakeupAmount
	}
	return 0
}

func (m *Order) GetPromotionFlag() *Order_Promotion_Flag {
	if m != nil {
		return m.PromotionFlag
	}
	return nil
}

func (m *Order) GetVoucherReferenceId() string {
	if m != nil && m.VoucherReferenceId != nil {
		return *m.VoucherReferenceId
	}
	return ""
}

func (m *Order) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *Order) GetDeliveryReconfirmTime() uint64 {
	if m != nil && m.DeliveryReconfirmTime != nil {
		return *m.DeliveryReconfirmTime
	}
	return 0
}

func (m *Order) GetMerchantConfirmedDeadline() uint64 {
	if m != nil && m.MerchantConfirmedDeadline != nil {
		return *m.MerchantConfirmedDeadline
	}
	return 0
}

func (m *Order) GetOvertimeMode() Store_Flag_OvertimeOrderMode {
	if m != nil && m.OvertimeMode != nil {
		return *m.OvertimeMode
	}
	return Store_Flag_OVERTIME_ORDER_MODE_CONFIRM
}

func (m *Order) GetRewriteSource() RewriteSource {
	if m != nil && m.RewriteSource != nil {
		return *m.RewriteSource
	}
	return RewriteSource_REWRITE_NONE
}

func (m *Order) GetStoreLocationGroups() []*LocationGroup {
	if m != nil {
		return m.StoreLocationGroups
	}
	return nil
}

func (m *Order) GetBuyerLocationGroups() []*LocationGroup {
	if m != nil {
		return m.BuyerLocationGroups
	}
	return nil
}

func (m *Order) GetCancelRemark() string {
	if m != nil && m.CancelRemark != nil {
		return *m.CancelRemark
	}
	return ""
}

func (m *Order) GetCancelCerts() []*Certificate {
	if m != nil {
		return m.CancelCerts
	}
	return nil
}

func (m *Order) GetVendorId() uint64 {
	if m != nil && m.VendorId != nil {
		return *m.VendorId
	}
	return 0
}

func (m *Order) GetDelayAssignDuration() uint64 {
	if m != nil && m.DelayAssignDuration != nil {
		return *m.DelayAssignDuration
	}
	return 0
}

func (m *Order) GetIsMerchantVisible() bool {
	if m != nil && m.IsMerchantVisible != nil {
		return *m.IsMerchantVisible
	}
	return false
}

func (m *Order) GetPaymentInfo() *Order_PaymentInfo {
	if m != nil {
		return m.PaymentInfo
	}
	return nil
}

func (m *Order) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

func (m *Order) GetCustomTags() []*OrderCustomTag {
	if m != nil {
		return m.CustomTags
	}
	return nil
}

func (m *Order) GetDeliveryMode() DeliveryMode {
	if m != nil && m.DeliveryMode != nil {
		return *m.DeliveryMode
	}
	return DeliveryMode_UNKNOWN_DELIVERY
}

type Order_Item struct {
	Id       *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CartItem *CartItem `protobuf:"bytes,2,opt,name=cart_item,json=cartItem" json:"cart_item,omitempty"`
	// 商品单价
	// 没有直减优惠时等于 unit_list_price
	// 有直减优惠时等于 cart_item.detail.item_discount.discount_price + SUM(option_price)
	UnitPrice *uint64 `protobuf:"varint,3,opt,name=unit_price,json=unitPrice" json:"unit_price,omitempty"`
	// 均摊费用（订单中除商品外的其他所有费用的均摊之后的值，其他费用包括但不限于：merchant_service_fee, platform_service_fee, etc.）
	// Deprecated: Do not use.
	FlatFee              *uint64                `protobuf:"varint,4,opt,name=flat_fee,json=flatFee" json:"flat_fee,omitempty"`
	Subtotal             *uint64                `protobuf:"varint,5,opt,name=subtotal" json:"subtotal,omitempty"`
	Image                *string                `protobuf:"bytes,6,opt,name=image" json:"image,omitempty"`
	Remark               *string                `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
	UnitListPrice        *uint64                `protobuf:"varint,8,opt,name=unit_list_price,json=unitListPrice" json:"unit_list_price,omitempty"`
	Status               *Order_OrderItemStatus `protobuf:"varint,9,opt,name=status,enum=foody_base.Order_OrderItemStatus" json:"status,omitempty"`
	CreateTime           *uint64                `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	DiscountType         *ItemDiscountType      `protobuf:"varint,11,opt,name=discount_type,json=discountType,enum=foody_base.ItemDiscountType" json:"discount_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Order_Item) Reset()         { *m = Order_Item{} }
func (m *Order_Item) String() string { return proto.CompactTextString(m) }
func (*Order_Item) ProtoMessage()    {}
func (*Order_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 0}
}
func (m *Order_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_Item.Merge(m, src)
}
func (m *Order_Item) XXX_Size() int {
	return m.Size()
}
func (m *Order_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Order_Item proto.InternalMessageInfo

func (m *Order_Item) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Order_Item) GetCartItem() *CartItem {
	if m != nil {
		return m.CartItem
	}
	return nil
}

func (m *Order_Item) GetUnitPrice() uint64 {
	if m != nil && m.UnitPrice != nil {
		return *m.UnitPrice
	}
	return 0
}

func (m *Order_Item) GetFlatFee() uint64 {
	if m != nil && m.FlatFee != nil {
		return *m.FlatFee
	}
	return 0
}

func (m *Order_Item) GetSubtotal() uint64 {
	if m != nil && m.Subtotal != nil {
		return *m.Subtotal
	}
	return 0
}

func (m *Order_Item) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *Order_Item) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *Order_Item) GetUnitListPrice() uint64 {
	if m != nil && m.UnitListPrice != nil {
		return *m.UnitListPrice
	}
	return 0
}

func (m *Order_Item) GetStatus() Order_OrderItemStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Order_ITEM_ORIGIN
}

func (m *Order_Item) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Order_Item) GetDiscountType() ItemDiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return ItemDiscountType_None
}

type Order_Amount struct {
	Subtotal                   *uint64          `protobuf:"varint,1,opt,name=subtotal" json:"subtotal,omitempty"`
	TaxAmount                  *uint64          `protobuf:"varint,2,opt,name=tax_amount,json=taxAmount" json:"tax_amount,omitempty"`
	MerchantServiceFee         *uint64          `protobuf:"varint,3,opt,name=merchant_service_fee,json=merchantServiceFee" json:"merchant_service_fee,omitempty"`
	PlatformServiceFee         *uint64          `protobuf:"varint,4,opt,name=platform_service_fee,json=platformServiceFee" json:"platform_service_fee,omitempty"`
	ShippingFee                *uint64          `protobuf:"varint,5,opt,name=shipping_fee,json=shippingFee" json:"shipping_fee,omitempty"`
	TotalAmount                *uint64          `protobuf:"varint,6,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	ShippingBasicFee           *uint64          `protobuf:"varint,7,opt,name=shipping_basic_fee,json=shippingBasicFee" json:"shipping_basic_fee,omitempty"`
	ShippingSurgeFee           *uint64          `protobuf:"varint,8,opt,name=shipping_surge_fee,json=shippingSurgeFee" json:"shipping_surge_fee,omitempty"`
	MerchantSurchargeFee       *uint64          `protobuf:"varint,9,opt,name=merchant_surcharge_fee,json=merchantSurchargeFee" json:"merchant_surcharge_fee,omitempty"`
	Promotion                  *Order_Promotion `protobuf:"bytes,10,opt,name=promotion" json:"promotion,omitempty"`
	PayToMerchant              *uint64          `protobuf:"varint,11,opt,name=pay_to_merchant,json=payToMerchant" json:"pay_to_merchant,omitempty"`
	CollectFromCustomer        *uint64          `protobuf:"varint,12,opt,name=collect_from_customer,json=collectFromCustomer" json:"collect_from_customer,omitempty"`
	SmallOrderFee              *uint64          `protobuf:"varint,13,opt,name=small_order_fee,json=smallOrderFee" json:"small_order_fee,omitempty"`
	ShippingFareExtraFee       *uint64          `protobuf:"varint,14,opt,name=shipping_fare_extra_fee,json=shippingFareExtraFee" json:"shipping_fare_extra_fee,omitempty"`
	ShippingFareDiscountAmount *uint64          `protobuf:"varint,15,opt,name=shipping_fare_discount_amount,json=shippingFareDiscountAmount" json:"shipping_fare_discount_amount,omitempty"`
	ParkingFee                 *uint64          `protobuf:"varint,16,opt,name=parking_fee,json=parkingFee" json:"parking_fee,omitempty"`
	NonPartnerFee              *uint64          `protobuf:"varint,17,opt,name=non_partner_fee,json=nonPartnerFee" json:"non_partner_fee,omitempty"`
	BadWeatherFee              *uint64          `protobuf:"varint,18,opt,name=bad_weather_fee,json=badWeatherFee" json:"bad_weather_fee,omitempty"`
	HolidayFee                 *uint64          `protobuf:"varint,19,opt,name=holiday_fee,json=holidayFee" json:"holiday_fee,omitempty"`
	LateNightFee               *uint64          `protobuf:"varint,20,opt,name=late_night_fee,json=lateNightFee" json:"late_night_fee,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}         `json:"-"`
	XXX_unrecognized           []byte           `json:"-"`
	XXX_sizecache              int32            `json:"-"`
}

func (m *Order_Amount) Reset()         { *m = Order_Amount{} }
func (m *Order_Amount) String() string { return proto.CompactTextString(m) }
func (*Order_Amount) ProtoMessage()    {}
func (*Order_Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 1}
}
func (m *Order_Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_Amount.Merge(m, src)
}
func (m *Order_Amount) XXX_Size() int {
	return m.Size()
}
func (m *Order_Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Order_Amount proto.InternalMessageInfo

func (m *Order_Amount) GetSubtotal() uint64 {
	if m != nil && m.Subtotal != nil {
		return *m.Subtotal
	}
	return 0
}

func (m *Order_Amount) GetTaxAmount() uint64 {
	if m != nil && m.TaxAmount != nil {
		return *m.TaxAmount
	}
	return 0
}

func (m *Order_Amount) GetMerchantServiceFee() uint64 {
	if m != nil && m.MerchantServiceFee != nil {
		return *m.MerchantServiceFee
	}
	return 0
}

func (m *Order_Amount) GetPlatformServiceFee() uint64 {
	if m != nil && m.PlatformServiceFee != nil {
		return *m.PlatformServiceFee
	}
	return 0
}

func (m *Order_Amount) GetShippingFee() uint64 {
	if m != nil && m.ShippingFee != nil {
		return *m.ShippingFee
	}
	return 0
}

func (m *Order_Amount) GetTotalAmount() uint64 {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return 0
}

func (m *Order_Amount) GetShippingBasicFee() uint64 {
	if m != nil && m.ShippingBasicFee != nil {
		return *m.ShippingBasicFee
	}
	return 0
}

func (m *Order_Amount) GetShippingSurgeFee() uint64 {
	if m != nil && m.ShippingSurgeFee != nil {
		return *m.ShippingSurgeFee
	}
	return 0
}

func (m *Order_Amount) GetMerchantSurchargeFee() uint64 {
	if m != nil && m.MerchantSurchargeFee != nil {
		return *m.MerchantSurchargeFee
	}
	return 0
}

func (m *Order_Amount) GetPromotion() *Order_Promotion {
	if m != nil {
		return m.Promotion
	}
	return nil
}

func (m *Order_Amount) GetPayToMerchant() uint64 {
	if m != nil && m.PayToMerchant != nil {
		return *m.PayToMerchant
	}
	return 0
}

func (m *Order_Amount) GetCollectFromCustomer() uint64 {
	if m != nil && m.CollectFromCustomer != nil {
		return *m.CollectFromCustomer
	}
	return 0
}

func (m *Order_Amount) GetSmallOrderFee() uint64 {
	if m != nil && m.SmallOrderFee != nil {
		return *m.SmallOrderFee
	}
	return 0
}

func (m *Order_Amount) GetShippingFareExtraFee() uint64 {
	if m != nil && m.ShippingFareExtraFee != nil {
		return *m.ShippingFareExtraFee
	}
	return 0
}

func (m *Order_Amount) GetShippingFareDiscountAmount() uint64 {
	if m != nil && m.ShippingFareDiscountAmount != nil {
		return *m.ShippingFareDiscountAmount
	}
	return 0
}

func (m *Order_Amount) GetParkingFee() uint64 {
	if m != nil && m.ParkingFee != nil {
		return *m.ParkingFee
	}
	return 0
}

func (m *Order_Amount) GetNonPartnerFee() uint64 {
	if m != nil && m.NonPartnerFee != nil {
		return *m.NonPartnerFee
	}
	return 0
}

func (m *Order_Amount) GetBadWeatherFee() uint64 {
	if m != nil && m.BadWeatherFee != nil {
		return *m.BadWeatherFee
	}
	return 0
}

func (m *Order_Amount) GetHolidayFee() uint64 {
	if m != nil && m.HolidayFee != nil {
		return *m.HolidayFee
	}
	return 0
}

func (m *Order_Amount) GetLateNightFee() uint64 {
	if m != nil && m.LateNightFee != nil {
		return *m.LateNightFee
	}
	return 0
}

type Order_Promotion struct {
	ShippingDiscountAmount       *uint64  `protobuf:"varint,1,opt,name=shipping_discount_amount,json=shippingDiscountAmount" json:"shipping_discount_amount,omitempty"`
	CoinsRedeemedAmount          *uint64  `protobuf:"varint,2,opt,name=coins_redeemed_amount,json=coinsRedeemedAmount" json:"coins_redeemed_amount,omitempty"`
	ItemVoucherAmount            *uint64  `protobuf:"varint,3,opt,name=item_voucher_amount,json=itemVoucherAmount" json:"item_voucher_amount,omitempty"`
	ShippingVoucherAmount        *uint64  `protobuf:"varint,4,opt,name=shipping_voucher_amount,json=shippingVoucherAmount" json:"shipping_voucher_amount,omitempty"`
	CoinsEarning                 *int64   `protobuf:"varint,5,opt,name=coins_earning,json=coinsEarning" json:"coins_earning,omitempty"`
	CoinsCashback                *int64   `protobuf:"varint,6,opt,name=coins_cashback,json=coinsCashback" json:"coins_cashback,omitempty"`
	ItemDiscountAmount           *uint64  `protobuf:"varint,7,opt,name=item_discount_amount,json=itemDiscountAmount" json:"item_discount_amount,omitempty"`
	VoucherMerchantSubsidyAmount *uint64  `protobuf:"varint,8,opt,name=voucher_merchant_subsidy_amount,json=voucherMerchantSubsidyAmount" json:"voucher_merchant_subsidy_amount,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *Order_Promotion) Reset()         { *m = Order_Promotion{} }
func (m *Order_Promotion) String() string { return proto.CompactTextString(m) }
func (*Order_Promotion) ProtoMessage()    {}
func (*Order_Promotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 2}
}
func (m *Order_Promotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_Promotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_Promotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_Promotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_Promotion.Merge(m, src)
}
func (m *Order_Promotion) XXX_Size() int {
	return m.Size()
}
func (m *Order_Promotion) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_Promotion.DiscardUnknown(m)
}

var xxx_messageInfo_Order_Promotion proto.InternalMessageInfo

func (m *Order_Promotion) GetShippingDiscountAmount() uint64 {
	if m != nil && m.ShippingDiscountAmount != nil {
		return *m.ShippingDiscountAmount
	}
	return 0
}

func (m *Order_Promotion) GetCoinsRedeemedAmount() uint64 {
	if m != nil && m.CoinsRedeemedAmount != nil {
		return *m.CoinsRedeemedAmount
	}
	return 0
}

func (m *Order_Promotion) GetItemVoucherAmount() uint64 {
	if m != nil && m.ItemVoucherAmount != nil {
		return *m.ItemVoucherAmount
	}
	return 0
}

func (m *Order_Promotion) GetShippingVoucherAmount() uint64 {
	if m != nil && m.ShippingVoucherAmount != nil {
		return *m.ShippingVoucherAmount
	}
	return 0
}

func (m *Order_Promotion) GetCoinsEarning() int64 {
	if m != nil && m.CoinsEarning != nil {
		return *m.CoinsEarning
	}
	return 0
}

func (m *Order_Promotion) GetCoinsCashback() int64 {
	if m != nil && m.CoinsCashback != nil {
		return *m.CoinsCashback
	}
	return 0
}

func (m *Order_Promotion) GetItemDiscountAmount() uint64 {
	if m != nil && m.ItemDiscountAmount != nil {
		return *m.ItemDiscountAmount
	}
	return 0
}

func (m *Order_Promotion) GetVoucherMerchantSubsidyAmount() uint64 {
	if m != nil && m.VoucherMerchantSubsidyAmount != nil {
		return *m.VoucherMerchantSubsidyAmount
	}
	return 0
}

type Order_Promotion_Flag struct {
	UseItemVoucher          *bool    `protobuf:"varint,1,opt,name=use_item_voucher,json=useItemVoucher" json:"use_item_voucher,omitempty"`
	UseShippingFeeVoucher   *bool    `protobuf:"varint,2,opt,name=use_shipping_fee_voucher,json=useShippingFeeVoucher" json:"use_shipping_fee_voucher,omitempty"`
	UseCoinsCashbackVoucher *bool    `protobuf:"varint,3,opt,name=use_coins_cashback_voucher,json=useCoinsCashbackVoucher" json:"use_coins_cashback_voucher,omitempty"`
	UseCoins                *bool    `protobuf:"varint,4,opt,name=use_coins,json=useCoins" json:"use_coins,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Order_Promotion_Flag) Reset()         { *m = Order_Promotion_Flag{} }
func (m *Order_Promotion_Flag) String() string { return proto.CompactTextString(m) }
func (*Order_Promotion_Flag) ProtoMessage()    {}
func (*Order_Promotion_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 2, 0}
}
func (m *Order_Promotion_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_Promotion_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_Promotion_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_Promotion_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_Promotion_Flag.Merge(m, src)
}
func (m *Order_Promotion_Flag) XXX_Size() int {
	return m.Size()
}
func (m *Order_Promotion_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_Promotion_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Order_Promotion_Flag proto.InternalMessageInfo

func (m *Order_Promotion_Flag) GetUseItemVoucher() bool {
	if m != nil && m.UseItemVoucher != nil {
		return *m.UseItemVoucher
	}
	return false
}

func (m *Order_Promotion_Flag) GetUseShippingFeeVoucher() bool {
	if m != nil && m.UseShippingFeeVoucher != nil {
		return *m.UseShippingFeeVoucher
	}
	return false
}

func (m *Order_Promotion_Flag) GetUseCoinsCashbackVoucher() bool {
	if m != nil && m.UseCoinsCashbackVoucher != nil {
		return *m.UseCoinsCashbackVoucher
	}
	return false
}

func (m *Order_Promotion_Flag) GetUseCoins() bool {
	if m != nil && m.UseCoins != nil {
		return *m.UseCoins
	}
	return false
}

type Order_Flag struct {
	IsReturned             *uint32  `protobuf:"varint,1,opt,name=is_returned,json=isReturned" json:"is_returned,omitempty"`
	IsRefunded             *uint32  `protobuf:"varint,2,opt,name=is_refunded,json=isRefunded" json:"is_refunded,omitempty"`
	IsManualConfirmed      *uint32  `protobuf:"varint,3,opt,name=is_manual_confirmed,json=isManualConfirmed" json:"is_manual_confirmed,omitempty"`
	CanDriverRewrite       *uint32  `protobuf:"varint,4,opt,name=can_driver_rewrite,json=canDriverRewrite" json:"can_driver_rewrite,omitempty"`
	IsDriverRewritePreview *uint32  `protobuf:"varint,5,opt,name=is_driver_rewrite_preview,json=isDriverRewritePreview" json:"is_driver_rewrite_preview,omitempty"` // Deprecated: Do not use.
	HasDropped             *uint32  `protobuf:"varint,6,opt,name=has_dropped,json=hasDropped" json:"has_dropped,omitempty"`
	IsInstantPreparation   *uint32  `protobuf:"varint,7,opt,name=is_instant_preparation,json=isInstantPreparation" json:"is_instant_preparation,omitempty"`
	CanMerchantRewrite     *uint32  `protobuf:"varint,8,opt,name=can_merchant_rewrite,json=canMerchantRewrite" json:"can_merchant_rewrite,omitempty"`
	IsDff                  *uint32  `protobuf:"varint,9,opt,name=is_dff,json=isDff" json:"is_dff,omitempty"`
	IsPaoTang              *uint32  `protobuf:"varint,10,opt,name=is_pao_tang,json=isPaoTang" json:"is_pao_tang,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Order_Flag) Reset()         { *m = Order_Flag{} }
func (m *Order_Flag) String() string { return proto.CompactTextString(m) }
func (*Order_Flag) ProtoMessage()    {}
func (*Order_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 3}
}
func (m *Order_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_Flag.Merge(m, src)
}
func (m *Order_Flag) XXX_Size() int {
	return m.Size()
}
func (m *Order_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Order_Flag proto.InternalMessageInfo

func (m *Order_Flag) GetIsReturned() uint32 {
	if m != nil && m.IsReturned != nil {
		return *m.IsReturned
	}
	return 0
}

func (m *Order_Flag) GetIsRefunded() uint32 {
	if m != nil && m.IsRefunded != nil {
		return *m.IsRefunded
	}
	return 0
}

func (m *Order_Flag) GetIsManualConfirmed() uint32 {
	if m != nil && m.IsManualConfirmed != nil {
		return *m.IsManualConfirmed
	}
	return 0
}

func (m *Order_Flag) GetCanDriverRewrite() uint32 {
	if m != nil && m.CanDriverRewrite != nil {
		return *m.CanDriverRewrite
	}
	return 0
}

// Deprecated: Do not use.
func (m *Order_Flag) GetIsDriverRewritePreview() uint32 {
	if m != nil && m.IsDriverRewritePreview != nil {
		return *m.IsDriverRewritePreview
	}
	return 0
}

func (m *Order_Flag) GetHasDropped() uint32 {
	if m != nil && m.HasDropped != nil {
		return *m.HasDropped
	}
	return 0
}

func (m *Order_Flag) GetIsInstantPreparation() uint32 {
	if m != nil && m.IsInstantPreparation != nil {
		return *m.IsInstantPreparation
	}
	return 0
}

func (m *Order_Flag) GetCanMerchantRewrite() uint32 {
	if m != nil && m.CanMerchantRewrite != nil {
		return *m.CanMerchantRewrite
	}
	return 0
}

func (m *Order_Flag) GetIsDff() uint32 {
	if m != nil && m.IsDff != nil {
		return *m.IsDff
	}
	return 0
}

func (m *Order_Flag) GetIsPaoTang() uint32 {
	if m != nil && m.IsPaoTang != nil {
		return *m.IsPaoTang
	}
	return 0
}

type Order_StoreSettlementFactor struct {
	StoreSettlementMode  *SettlementMode `protobuf:"varint,1,opt,name=store_settlement_mode,json=storeSettlementMode,enum=foody_base.SettlementMode" json:"store_settlement_mode,omitempty"`
	CommissionRate       *uint64         `protobuf:"varint,2,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	TaxRate              *uint64         `protobuf:"varint,3,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	ServiceChargeFeeRate *uint32         `protobuf:"varint,4,opt,name=service_charge_fee_rate,json=serviceChargeFeeRate" json:"service_charge_fee_rate,omitempty"`
	// TH/MY 增加
	Vat                  *Vat            `protobuf:"varint,5,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	VatRate              *uint64         `protobuf:"varint,6,opt,name=vat_rate,json=vatRate" json:"vat_rate,omitempty"`
	Wht                  *Wht            `protobuf:"varint,7,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	WhtRate              *uint64         `protobuf:"varint,8,opt,name=wht_rate,json=whtRate" json:"wht_rate,omitempty"`
	VatCalculate         *VatCalculate   `protobuf:"varint,9,opt,name=vat_calculate,json=vatCalculate,enum=foody_base.VatCalculate" json:"vat_calculate,omitempty"`
	SettleTo             *Store_SettleTo `protobuf:"varint,10,opt,name=settle_to,json=settleTo,enum=foody_base.Store_SettleTo" json:"settle_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Order_StoreSettlementFactor) Reset()         { *m = Order_StoreSettlementFactor{} }
func (m *Order_StoreSettlementFactor) String() string { return proto.CompactTextString(m) }
func (*Order_StoreSettlementFactor) ProtoMessage()    {}
func (*Order_StoreSettlementFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 4}
}
func (m *Order_StoreSettlementFactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_StoreSettlementFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_StoreSettlementFactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_StoreSettlementFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_StoreSettlementFactor.Merge(m, src)
}
func (m *Order_StoreSettlementFactor) XXX_Size() int {
	return m.Size()
}
func (m *Order_StoreSettlementFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_StoreSettlementFactor.DiscardUnknown(m)
}

var xxx_messageInfo_Order_StoreSettlementFactor proto.InternalMessageInfo

func (m *Order_StoreSettlementFactor) GetStoreSettlementMode() SettlementMode {
	if m != nil && m.StoreSettlementMode != nil {
		return *m.StoreSettlementMode
	}
	return SettlementMode_MODE_WALLET
}

func (m *Order_StoreSettlementFactor) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *Order_StoreSettlementFactor) GetTaxRate() uint64 {
	if m != nil && m.TaxRate != nil {
		return *m.TaxRate
	}
	return 0
}

func (m *Order_StoreSettlementFactor) GetServiceChargeFeeRate() uint32 {
	if m != nil && m.ServiceChargeFeeRate != nil {
		return *m.ServiceChargeFeeRate
	}
	return 0
}

func (m *Order_StoreSettlementFactor) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *Order_StoreSettlementFactor) GetVatRate() uint64 {
	if m != nil && m.VatRate != nil {
		return *m.VatRate
	}
	return 0
}

func (m *Order_StoreSettlementFactor) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *Order_StoreSettlementFactor) GetWhtRate() uint64 {
	if m != nil && m.WhtRate != nil {
		return *m.WhtRate
	}
	return 0
}

func (m *Order_StoreSettlementFactor) GetVatCalculate() VatCalculate {
	if m != nil && m.VatCalculate != nil {
		return *m.VatCalculate
	}
	return VatCalculate_VAT_CALCULATE_UNKNOWN
}

func (m *Order_StoreSettlementFactor) GetSettleTo() Store_SettleTo {
	if m != nil && m.SettleTo != nil {
		return *m.SettleTo
	}
	return Store_SETTLE_TO_UNKNOWN
}

type Order_PaymentInfo struct {
	VoucherPaymentType   *VoucherPaymentType `protobuf:"varint,1,opt,name=voucher_payment_type,json=voucherPaymentType,enum=foody_base.VoucherPaymentType" json:"voucher_payment_type,omitempty"`
	CreditCardBin        *string             `protobuf:"bytes,2,opt,name=credit_card_bin,json=creditCardBin" json:"credit_card_bin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Order_PaymentInfo) Reset()         { *m = Order_PaymentInfo{} }
func (m *Order_PaymentInfo) String() string { return proto.CompactTextString(m) }
func (*Order_PaymentInfo) ProtoMessage()    {}
func (*Order_PaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{20, 5}
}
func (m *Order_PaymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order_PaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order_PaymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order_PaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order_PaymentInfo.Merge(m, src)
}
func (m *Order_PaymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *Order_PaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Order_PaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Order_PaymentInfo proto.InternalMessageInfo

func (m *Order_PaymentInfo) GetVoucherPaymentType() VoucherPaymentType {
	if m != nil && m.VoucherPaymentType != nil {
		return *m.VoucherPaymentType
	}
	return VoucherPaymentType_CREDIT_CARD_NO_INSTALLMENT
}

func (m *Order_PaymentInfo) GetCreditCardBin() string {
	if m != nil && m.CreditCardBin != nil {
		return *m.CreditCardBin
	}
	return ""
}

type DeliveryOrder struct {
	Id      *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId *uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	//  optional uint64 buyer_id = 3; // 废弃
	DriverId              *uint64          `protobuf:"varint,4,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	StoreId               *uint64          `protobuf:"varint,5,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DeliveryAddress       *DeliveryAddress `protobuf:"bytes,6,opt,name=delivery_address,json=deliveryAddress" json:"delivery_address,omitempty"`
	DeliveryDistance      *uint64          `protobuf:"varint,7,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	EstimateArrivedTime   *uint64          `protobuf:"varint,8,opt,name=estimate_arrived_time,json=estimateArrivedTime" json:"estimate_arrived_time,omitempty"`
	EstimateDeliveredTime *uint64          `protobuf:"varint,9,opt,name=estimate_delivered_time,json=estimateDeliveredTime" json:"estimate_delivered_time,omitempty"`
	DeliveryAmount        *DeliveryAmount  `protobuf:"bytes,10,opt,name=delivery_amount,json=deliveryAmount" json:"delivery_amount,omitempty"`
	PickupSeq             *uint32          `protobuf:"varint,12,opt,name=pickup_seq,json=pickupSeq" json:"pickup_seq,omitempty"`
	DeliveryStatus        *DeliveryStatus  `protobuf:"varint,13,opt,name=delivery_status,json=deliveryStatus,enum=foody_base.DeliveryStatus" json:"delivery_status,omitempty"`
	CancelReason          *CancelReason    `protobuf:"varint,14,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	CancelSource          *CancelSource    `protobuf:"varint,15,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	AssignTime            *uint64          `protobuf:"varint,16,opt,name=assign_time,json=assignTime" json:"assign_time,omitempty"`
	ArriveTime            *uint64          `protobuf:"varint,17,opt,name=arrive_time,json=arriveTime" json:"arrive_time,omitempty"`
	PickupTime            *uint64          `protobuf:"varint,18,opt,name=pickup_time,json=pickupTime" json:"pickup_time,omitempty"`
	CompleteTime          *uint64          `protobuf:"varint,19,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CreateTime            *uint64          `protobuf:"varint,20,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime            *uint64          `protobuf:"varint,21,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	//  optional uint64 place_time = 22; TODO 废弃
	//  optional uint64 quantity = 23; TODO 废弃
	//  optional string remark = 24; TODO 废弃
	//  optional string order_no = 25; TODO 废弃
	CancelTime                 *uint64                                   `protobuf:"varint,26,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	GeoTracking                *DeliveryOrder_GeoTracking                `protobuf:"bytes,27,opt,name=geo_tracking,json=geoTracking" json:"geo_tracking,omitempty"`
	Receipt                    *string                                   `protobuf:"bytes,28,opt,name=receipt" json:"receipt,omitempty"`
	StoreAddress               *Location                                 `protobuf:"bytes,29,opt,name=store_address,json=storeAddress" json:"store_address,omitempty"`
	AssignType                 *DeliveryOrder_AssignType                 `protobuf:"varint,30,opt,name=assign_type,json=assignType,enum=foody_base.DeliveryOrder_AssignType" json:"assign_type,omitempty"`
	AssignOperator             *string                                   `protobuf:"bytes,31,opt,name=assign_operator,json=assignOperator" json:"assign_operator,omitempty"`
	AdvanceDeposit             *DeliveryOrder_AdvanceDeposit             `protobuf:"bytes,32,opt,name=advance_deposit,json=advanceDeposit" json:"advance_deposit,omitempty"`
	DepositRefund              *DeliveryOrder_DepositRefund              `protobuf:"bytes,33,opt,name=deposit_refund,json=depositRefund" json:"deposit_refund,omitempty"`
	CancelRemark               *string                                   `protobuf:"bytes,34,opt,name=cancel_remark,json=cancelRemark" json:"cancel_remark,omitempty"`
	CancelCerts                []*Certificate                            `protobuf:"bytes,35,rep,name=cancel_certs,json=cancelCerts" json:"cancel_certs,omitempty"`
	Flag                       *DeliveryOrder_Flag                       `protobuf:"bytes,36,opt,name=flag" json:"flag,omitempty"`
	AdvanceDepositRefundStatus *DeliveryOrder_AdvanceDepositRefundStatus `protobuf:"varint,37,opt,name=advance_deposit_refund_status,json=advanceDepositRefundStatus,enum=foody_base.DeliveryOrder_AdvanceDepositRefundStatus" json:"advance_deposit_refund_status,omitempty"`
	BeginAssignTime            *uint64                                   `protobuf:"varint,38,opt,name=begin_assign_time,json=beginAssignTime" json:"begin_assign_time,omitempty"`
	Timezone                   *string                                   `protobuf:"bytes,39,opt,name=timezone" json:"timezone,omitempty"`
	// group新增
	GroupId               *uint64  `protobuf:"varint,50,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	PickupRank            *uint64  `protobuf:"varint,51,opt,name=pickup_rank,json=pickupRank" json:"pickup_rank,omitempty"`
	DeliveryRank          *uint64  `protobuf:"varint,52,opt,name=delivery_rank,json=deliveryRank" json:"delivery_rank,omitempty"`
	DriverDeliveryOrderId *uint64  `protobuf:"varint,53,opt,name=driver_delivery_order_id,json=driverDeliveryOrderId" json:"driver_delivery_order_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DeliveryOrder) Reset()         { *m = DeliveryOrder{} }
func (m *DeliveryOrder) String() string { return proto.CompactTextString(m) }
func (*DeliveryOrder) ProtoMessage()    {}
func (*DeliveryOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21}
}
func (m *DeliveryOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryOrder.Merge(m, src)
}
func (m *DeliveryOrder) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryOrder proto.InternalMessageInfo

func (m *DeliveryOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeliveryOrder) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *DeliveryOrder) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DeliveryOrder) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *DeliveryOrder) GetDeliveryAddress() *DeliveryAddress {
	if m != nil {
		return m.DeliveryAddress
	}
	return nil
}

func (m *DeliveryOrder) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *DeliveryOrder) GetEstimateArrivedTime() uint64 {
	if m != nil && m.EstimateArrivedTime != nil {
		return *m.EstimateArrivedTime
	}
	return 0
}

func (m *DeliveryOrder) GetEstimateDeliveredTime() uint64 {
	if m != nil && m.EstimateDeliveredTime != nil {
		return *m.EstimateDeliveredTime
	}
	return 0
}

func (m *DeliveryOrder) GetDeliveryAmount() *DeliveryAmount {
	if m != nil {
		return m.DeliveryAmount
	}
	return nil
}

func (m *DeliveryOrder) GetPickupSeq() uint32 {
	if m != nil && m.PickupSeq != nil {
		return *m.PickupSeq
	}
	return 0
}

func (m *DeliveryOrder) GetDeliveryStatus() DeliveryStatus {
	if m != nil && m.DeliveryStatus != nil {
		return *m.DeliveryStatus
	}
	return DeliveryStatus_DELIVERY_CREATED
}

func (m *DeliveryOrder) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *DeliveryOrder) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *DeliveryOrder) GetAssignTime() uint64 {
	if m != nil && m.AssignTime != nil {
		return *m.AssignTime
	}
	return 0
}

func (m *DeliveryOrder) GetArriveTime() uint64 {
	if m != nil && m.ArriveTime != nil {
		return *m.ArriveTime
	}
	return 0
}

func (m *DeliveryOrder) GetPickupTime() uint64 {
	if m != nil && m.PickupTime != nil {
		return *m.PickupTime
	}
	return 0
}

func (m *DeliveryOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *DeliveryOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DeliveryOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DeliveryOrder) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *DeliveryOrder) GetGeoTracking() *DeliveryOrder_GeoTracking {
	if m != nil {
		return m.GeoTracking
	}
	return nil
}

func (m *DeliveryOrder) GetReceipt() string {
	if m != nil && m.Receipt != nil {
		return *m.Receipt
	}
	return ""
}

func (m *DeliveryOrder) GetStoreAddress() *Location {
	if m != nil {
		return m.StoreAddress
	}
	return nil
}

func (m *DeliveryOrder) GetAssignType() DeliveryOrder_AssignType {
	if m != nil && m.AssignType != nil {
		return *m.AssignType
	}
	return DeliveryOrder_NONE_TYPE
}

func (m *DeliveryOrder) GetAssignOperator() string {
	if m != nil && m.AssignOperator != nil {
		return *m.AssignOperator
	}
	return ""
}

func (m *DeliveryOrder) GetAdvanceDeposit() *DeliveryOrder_AdvanceDeposit {
	if m != nil {
		return m.AdvanceDeposit
	}
	return nil
}

func (m *DeliveryOrder) GetDepositRefund() *DeliveryOrder_DepositRefund {
	if m != nil {
		return m.DepositRefund
	}
	return nil
}

func (m *DeliveryOrder) GetCancelRemark() string {
	if m != nil && m.CancelRemark != nil {
		return *m.CancelRemark
	}
	return ""
}

func (m *DeliveryOrder) GetCancelCerts() []*Certificate {
	if m != nil {
		return m.CancelCerts
	}
	return nil
}

func (m *DeliveryOrder) GetFlag() *DeliveryOrder_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *DeliveryOrder) GetAdvanceDepositRefundStatus() DeliveryOrder_AdvanceDepositRefundStatus {
	if m != nil && m.AdvanceDepositRefundStatus != nil {
		return *m.AdvanceDepositRefundStatus
	}
	return DeliveryOrder_DEPOSIT_DEFAULT
}

func (m *DeliveryOrder) GetBeginAssignTime() uint64 {
	if m != nil && m.BeginAssignTime != nil {
		return *m.BeginAssignTime
	}
	return 0
}

func (m *DeliveryOrder) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *DeliveryOrder) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *DeliveryOrder) GetPickupRank() uint64 {
	if m != nil && m.PickupRank != nil {
		return *m.PickupRank
	}
	return 0
}

func (m *DeliveryOrder) GetDeliveryRank() uint64 {
	if m != nil && m.DeliveryRank != nil {
		return *m.DeliveryRank
	}
	return 0
}

func (m *DeliveryOrder) GetDriverDeliveryOrderId() uint64 {
	if m != nil && m.DriverDeliveryOrderId != nil {
		return *m.DriverDeliveryOrderId
	}
	return 0
}

type DeliveryOrder_GeoTracking struct {
	ArriveGeo            *Geo     `protobuf:"bytes,1,opt,name=arrive_geo,json=arriveGeo" json:"arrive_geo,omitempty"`
	PickupGeo            *Geo     `protobuf:"bytes,2,opt,name=pickup_geo,json=pickupGeo" json:"pickup_geo,omitempty"`
	CompleteGeo          *Geo     `protobuf:"bytes,3,opt,name=complete_geo,json=completeGeo" json:"complete_geo,omitempty"`
	AcceptGeo            *Geo     `protobuf:"bytes,4,opt,name=accept_geo,json=acceptGeo" json:"accept_geo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeliveryOrder_GeoTracking) Reset()         { *m = DeliveryOrder_GeoTracking{} }
func (m *DeliveryOrder_GeoTracking) String() string { return proto.CompactTextString(m) }
func (*DeliveryOrder_GeoTracking) ProtoMessage()    {}
func (*DeliveryOrder_GeoTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 0}
}
func (m *DeliveryOrder_GeoTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryOrder_GeoTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryOrder_GeoTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryOrder_GeoTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryOrder_GeoTracking.Merge(m, src)
}
func (m *DeliveryOrder_GeoTracking) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryOrder_GeoTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryOrder_GeoTracking.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryOrder_GeoTracking proto.InternalMessageInfo

func (m *DeliveryOrder_GeoTracking) GetArriveGeo() *Geo {
	if m != nil {
		return m.ArriveGeo
	}
	return nil
}

func (m *DeliveryOrder_GeoTracking) GetPickupGeo() *Geo {
	if m != nil {
		return m.PickupGeo
	}
	return nil
}

func (m *DeliveryOrder_GeoTracking) GetCompleteGeo() *Geo {
	if m != nil {
		return m.CompleteGeo
	}
	return nil
}

func (m *DeliveryOrder_GeoTracking) GetAcceptGeo() *Geo {
	if m != nil {
		return m.AcceptGeo
	}
	return nil
}

type DeliveryOrder_AdvanceDeposit struct {
	Id                   *uint64                              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Amount               *uint64                              `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Status               *DeliveryOrder_AdvanceDeposit_Status `protobuf:"varint,3,opt,name=status,enum=foody_base.DeliveryOrder_AdvanceDeposit_Status" json:"status,omitempty"`
	Time                 *uint64                              `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *DeliveryOrder_AdvanceDeposit) Reset()         { *m = DeliveryOrder_AdvanceDeposit{} }
func (m *DeliveryOrder_AdvanceDeposit) String() string { return proto.CompactTextString(m) }
func (*DeliveryOrder_AdvanceDeposit) ProtoMessage()    {}
func (*DeliveryOrder_AdvanceDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 1}
}
func (m *DeliveryOrder_AdvanceDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryOrder_AdvanceDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryOrder_AdvanceDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryOrder_AdvanceDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryOrder_AdvanceDeposit.Merge(m, src)
}
func (m *DeliveryOrder_AdvanceDeposit) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryOrder_AdvanceDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryOrder_AdvanceDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryOrder_AdvanceDeposit proto.InternalMessageInfo

func (m *DeliveryOrder_AdvanceDeposit) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeliveryOrder_AdvanceDeposit) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DeliveryOrder_AdvanceDeposit) GetStatus() DeliveryOrder_AdvanceDeposit_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DeliveryOrder_AdvanceDeposit_SUCCESS
}

func (m *DeliveryOrder_AdvanceDeposit) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type DeliveryOrder_DepositRefund struct {
	Id                   *uint64                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Amount               *uint64                             `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Status               *DeliveryOrder_DepositRefund_Status `protobuf:"varint,3,opt,name=status,enum=foody_base.DeliveryOrder_DepositRefund_Status" json:"status,omitempty"`
	Time                 *uint64                             `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DeliveryOrder_DepositRefund) Reset()         { *m = DeliveryOrder_DepositRefund{} }
func (m *DeliveryOrder_DepositRefund) String() string { return proto.CompactTextString(m) }
func (*DeliveryOrder_DepositRefund) ProtoMessage()    {}
func (*DeliveryOrder_DepositRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 2}
}
func (m *DeliveryOrder_DepositRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryOrder_DepositRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryOrder_DepositRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryOrder_DepositRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryOrder_DepositRefund.Merge(m, src)
}
func (m *DeliveryOrder_DepositRefund) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryOrder_DepositRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryOrder_DepositRefund.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryOrder_DepositRefund proto.InternalMessageInfo

func (m *DeliveryOrder_DepositRefund) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeliveryOrder_DepositRefund) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DeliveryOrder_DepositRefund) GetStatus() DeliveryOrder_DepositRefund_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DeliveryOrder_DepositRefund_SUCCESS
}

func (m *DeliveryOrder_DepositRefund) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type DeliveryOrder_Flag struct {
	IsInstantPreparation *uint32  `protobuf:"varint,1,opt,name=is_instant_preparation,json=isInstantPreparation" json:"is_instant_preparation,omitempty"`
	IsDff                *uint32  `protobuf:"varint,2,opt,name=is_dff,json=isDff" json:"is_dff,omitempty"`
	IsGroupDelivery      *uint32  `protobuf:"varint,3,opt,name=is_group_delivery,json=isGroupDelivery" json:"is_group_delivery,omitempty"`
	IsGroupFirstDelivery *uint32  `protobuf:"varint,4,opt,name=is_group_first_delivery,json=isGroupFirstDelivery" json:"is_group_first_delivery,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeliveryOrder_Flag) Reset()         { *m = DeliveryOrder_Flag{} }
func (m *DeliveryOrder_Flag) String() string { return proto.CompactTextString(m) }
func (*DeliveryOrder_Flag) ProtoMessage()    {}
func (*DeliveryOrder_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{21, 3}
}
func (m *DeliveryOrder_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeliveryOrder_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeliveryOrder_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeliveryOrder_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliveryOrder_Flag.Merge(m, src)
}
func (m *DeliveryOrder_Flag) XXX_Size() int {
	return m.Size()
}
func (m *DeliveryOrder_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliveryOrder_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_DeliveryOrder_Flag proto.InternalMessageInfo

func (m *DeliveryOrder_Flag) GetIsInstantPreparation() uint32 {
	if m != nil && m.IsInstantPreparation != nil {
		return *m.IsInstantPreparation
	}
	return 0
}

func (m *DeliveryOrder_Flag) GetIsDff() uint32 {
	if m != nil && m.IsDff != nil {
		return *m.IsDff
	}
	return 0
}

func (m *DeliveryOrder_Flag) GetIsGroupDelivery() uint32 {
	if m != nil && m.IsGroupDelivery != nil {
		return *m.IsGroupDelivery
	}
	return 0
}

func (m *DeliveryOrder_Flag) GetIsGroupFirstDelivery() uint32 {
	if m != nil && m.IsGroupFirstDelivery != nil {
		return *m.IsGroupFirstDelivery
	}
	return 0
}

type Payment struct {
	CheckoutId               *uint64          `protobuf:"varint,1,opt,name=checkout_id,json=checkoutId" json:"checkout_id,omitempty"`
	BuyerId                  *uint64          `protobuf:"varint,2,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	OrderId                  *uint64          `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	TransactionRef           *uint64          `protobuf:"varint,4,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	Method                   *PaymentMethod   `protobuf:"varint,5,opt,name=method,enum=foody_base.PaymentMethod" json:"method,omitempty"`
	ChannelId                *uint64          `protobuf:"varint,6,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	ChannelOption            *string          `protobuf:"bytes,7,opt,name=channel_option,json=channelOption" json:"channel_option,omitempty"`
	TotalAmount              *uint64          `protobuf:"varint,8,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	Currency                 *string          `protobuf:"bytes,9,opt,name=currency" json:"currency,omitempty"`
	Region                   *string          `protobuf:"bytes,10,opt,name=region" json:"region,omitempty"`
	Status                   *PaymentStatus   `protobuf:"varint,11,opt,name=status,enum=foody_base.PaymentStatus" json:"status,omitempty"`
	InitiationTime           *uint64          `protobuf:"varint,12,opt,name=initiation_time,json=initiationTime" json:"initiation_time,omitempty"`
	PaymentTime              *uint64          `protobuf:"varint,13,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	CreateTime               *uint64          `protobuf:"varint,14,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime               *uint64          `protobuf:"varint,15,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	PaymentType              *Payment_Type    `protobuf:"varint,16,opt,name=payment_type,json=paymentType,enum=foody_base.Payment_Type" json:"payment_type,omitempty"`
	PaymentLink              *string          `protobuf:"bytes,17,opt,name=payment_link,json=paymentLink" json:"payment_link,omitempty"`
	Platform                 *PaymentPlatform `protobuf:"varint,18,opt,name=platform,enum=foody_base.PaymentPlatform" json:"platform,omitempty"`
	ThirdPartyTransactionRef *string          `protobuf:"bytes,19,opt,name=third_party_transaction_ref,json=thirdPartyTransactionRef" json:"third_party_transaction_ref,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}         `json:"-"`
	XXX_unrecognized         []byte           `json:"-"`
	XXX_sizecache            int32            `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{22}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetCheckoutId() uint64 {
	if m != nil && m.CheckoutId != nil {
		return *m.CheckoutId
	}
	return 0
}

func (m *Payment) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *Payment) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *Payment) GetTransactionRef() uint64 {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return 0
}

func (m *Payment) GetMethod() PaymentMethod {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *Payment) GetChannelId() uint64 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *Payment) GetChannelOption() string {
	if m != nil && m.ChannelOption != nil {
		return *m.ChannelOption
	}
	return ""
}

func (m *Payment) GetTotalAmount() uint64 {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return 0
}

func (m *Payment) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Payment) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *Payment) GetStatus() PaymentStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return PaymentStatus_PAYMENT_CREATED
}

func (m *Payment) GetInitiationTime() uint64 {
	if m != nil && m.InitiationTime != nil {
		return *m.InitiationTime
	}
	return 0
}

func (m *Payment) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *Payment) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Payment) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Payment) GetPaymentType() Payment_Type {
	if m != nil && m.PaymentType != nil {
		return *m.PaymentType
	}
	return Payment_PLACE_ORDER
}

func (m *Payment) GetPaymentLink() string {
	if m != nil && m.PaymentLink != nil {
		return *m.PaymentLink
	}
	return ""
}

func (m *Payment) GetPlatform() PaymentPlatform {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return PaymentPlatform_PLATFORM_UNKNOWN
}

func (m *Payment) GetThirdPartyTransactionRef() string {
	if m != nil && m.ThirdPartyTransactionRef != nil {
		return *m.ThirdPartyTransactionRef
	}
	return ""
}

//地理位置经纬度坐标
type Geo struct {
	Longitude            *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude             *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	PreciseLongitude     *float64 `protobuf:"fixed64,3,opt,name=precise_longitude,json=preciseLongitude" json:"precise_longitude,omitempty"`
	PreciseLatitude      *float64 `protobuf:"fixed64,4,opt,name=precise_latitude,json=preciseLatitude" json:"precise_latitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Geo) Reset()         { *m = Geo{} }
func (m *Geo) String() string { return proto.CompactTextString(m) }
func (*Geo) ProtoMessage()    {}
func (*Geo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{23}
}
func (m *Geo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Geo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Geo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Geo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Geo.Merge(m, src)
}
func (m *Geo) XXX_Size() int {
	return m.Size()
}
func (m *Geo) XXX_DiscardUnknown() {
	xxx_messageInfo_Geo.DiscardUnknown(m)
}

var xxx_messageInfo_Geo proto.InternalMessageInfo

func (m *Geo) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *Geo) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Geo) GetPreciseLongitude() float64 {
	if m != nil && m.PreciseLongitude != nil {
		return *m.PreciseLongitude
	}
	return 0
}

func (m *Geo) GetPreciseLatitude() float64 {
	if m != nil && m.PreciseLatitude != nil {
		return *m.PreciseLatitude
	}
	return 0
}

//变更日志
type ChangeLog struct {
	Id                   *uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EntityType           *EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=foody_base.EntityType" json:"entity_type,omitempty"`
	EntityId             *uint64     `protobuf:"varint,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	ChangeType           *ChangeType `protobuf:"varint,4,opt,name=change_type,json=changeType,enum=foody_base.ChangeType" json:"change_type,omitempty"`
	DriverId             *uint64     `protobuf:"varint,5,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	BuyerId              *uint64     `protobuf:"varint,6,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	SellerId             *uint64     `protobuf:"varint,7,opt,name=seller_id,json=sellerId" json:"seller_id,omitempty"`
	StoreId              *uint64     `protobuf:"varint,8,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	OldValue             *string     `protobuf:"bytes,9,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
	NewValue             *string     `protobuf:"bytes,10,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	Remark               *string     `protobuf:"bytes,11,opt,name=remark" json:"remark,omitempty"`
	Source               *Source     `protobuf:"varint,12,opt,name=source,enum=foody_base.Source" json:"source,omitempty"`
	Operator             *string     `protobuf:"bytes,13,opt,name=operator" json:"operator,omitempty"`
	OperateTime          *uint64     `protobuf:"varint,14,opt,name=operate_time,json=operateTime" json:"operate_time,omitempty"`
	CreateTime           *uint64     `protobuf:"varint,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChangeLog) Reset()         { *m = ChangeLog{} }
func (m *ChangeLog) String() string { return proto.CompactTextString(m) }
func (*ChangeLog) ProtoMessage()    {}
func (*ChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{24}
}
func (m *ChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeLog.Merge(m, src)
}
func (m *ChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *ChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeLog proto.InternalMessageInfo

func (m *ChangeLog) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChangeLog) GetEntityType() EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityType_ENTITY_TYPE_STORE
}

func (m *ChangeLog) GetEntityId() uint64 {
	if m != nil && m.EntityId != nil {
		return *m.EntityId
	}
	return 0
}

func (m *ChangeLog) GetChangeType() ChangeType {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return ChangeType_CHANGE_TYPE_CREATE
}

func (m *ChangeLog) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *ChangeLog) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *ChangeLog) GetSellerId() uint64 {
	if m != nil && m.SellerId != nil {
		return *m.SellerId
	}
	return 0
}

func (m *ChangeLog) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *ChangeLog) GetOldValue() string {
	if m != nil && m.OldValue != nil {
		return *m.OldValue
	}
	return ""
}

func (m *ChangeLog) GetNewValue() string {
	if m != nil && m.NewValue != nil {
		return *m.NewValue
	}
	return ""
}

func (m *ChangeLog) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *ChangeLog) GetSource() Source {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return Source_SOURCE_UNKOWN
}

func (m *ChangeLog) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *ChangeLog) GetOperateTime() uint64 {
	if m != nil && m.OperateTime != nil {
		return *m.OperateTime
	}
	return 0
}

func (m *ChangeLog) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type Result struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Code                 *int32   `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Msg                  *string  `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{25}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Result) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

//设备
type Device struct {
	DeviceId             *string   `protobuf:"bytes,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	DeviceModel          *string   `protobuf:"bytes,2,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	Os                   *OS       `protobuf:"varint,3,opt,name=os,enum=foody_base.OS" json:"os,omitempty"`
	OsVersion            *string   `protobuf:"bytes,4,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	PushToken            *string   `protobuf:"bytes,5,opt,name=push_token,json=pushToken" json:"push_token,omitempty"`
	PushType             *PushType `protobuf:"varint,6,opt,name=push_type,json=pushType,enum=foody_base.PushType" json:"push_type,omitempty"`
	AppVersion           *string   `protobuf:"bytes,7,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	Channel              *string   `protobuf:"bytes,8,opt,name=channel" json:"channel,omitempty"`
	Ip                   *uint64   `protobuf:"varint,9,opt,name=ip" json:"ip,omitempty"`
	Imei                 *string   `protobuf:"bytes,10,opt,name=imei" json:"imei,omitempty"`
	Idfa                 *string   `protobuf:"bytes,11,opt,name=idfa" json:"idfa,omitempty"`
	Mac                  *string   `protobuf:"bytes,12,opt,name=mac" json:"mac,omitempty"`
	DriverId             *uint64   `protobuf:"varint,13,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	BundleId             *string   `protobuf:"bytes,14,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{26}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *Device) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *Device) GetOs() OS {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return OS_ANDROID
}

func (m *Device) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *Device) GetPushToken() string {
	if m != nil && m.PushToken != nil {
		return *m.PushToken
	}
	return ""
}

func (m *Device) GetPushType() PushType {
	if m != nil && m.PushType != nil {
		return *m.PushType
	}
	return PushType_FCM
}

func (m *Device) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *Device) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func (m *Device) GetIp() uint64 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *Device) GetImei() string {
	if m != nil && m.Imei != nil {
		return *m.Imei
	}
	return ""
}

func (m *Device) GetIdfa() string {
	if m != nil && m.Idfa != nil {
		return *m.Idfa
	}
	return ""
}

func (m *Device) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *Device) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *Device) GetBundleId() string {
	if m != nil && m.BundleId != nil {
		return *m.BundleId
	}
	return ""
}

// 店铺基础信息-下单过程中被用到
type Store struct {
	Id                       *uint64                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                     *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MerchantId               *uint64                     `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	TagId                    *uint64                     `protobuf:"varint,4,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"` // Deprecated: Do not use.
	BrandId                  *uint64                     `protobuf:"varint,5,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	TobUserId                *uint64                     `protobuf:"varint,6,opt,name=tob_user_id,json=tobUserId" json:"tob_user_id,omitempty"` // Deprecated: Do not use.
	IsUseWallet              *Store_WalletStatus         `protobuf:"varint,7,opt,name=is_use_wallet,json=isUseWallet,enum=foody_base.Store_WalletStatus" json:"is_use_wallet,omitempty"`
	IsUseMerchantApp         *Store_AppStatus            `protobuf:"varint,8,opt,name=is_use_merchant_app,json=isUseMerchantApp,enum=foody_base.Store_AppStatus" json:"is_use_merchant_app,omitempty"`
	Location                 *Location                   `protobuf:"bytes,9,opt,name=location" json:"location,omitempty"`
	PostalCode               *string                     `protobuf:"bytes,10,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	RegisterPhone            *string                     `protobuf:"bytes,11,opt,name=register_phone,json=registerPhone" json:"register_phone,omitempty"`
	Email                    *string                     `protobuf:"bytes,12,opt,name=email" json:"email,omitempty"`
	EmailSource              *uint32                     `protobuf:"varint,13,opt,name=email_source,json=emailSource" json:"email_source,omitempty"` // Deprecated: Do not use.
	RegisterTime             *uint64                     `protobuf:"varint,14,opt,name=register_time,json=registerTime" json:"register_time,omitempty"`
	Logo                     *string                     `protobuf:"bytes,15,opt,name=logo" json:"logo,omitempty"`
	Banner                   *string                     `protobuf:"bytes,16,opt,name=banner" json:"banner,omitempty"`
	PartnerType              *PartnerType                `protobuf:"varint,17,opt,name=partner_type,json=partnerType,enum=foody_base.PartnerType" json:"partner_type,omitempty"`
	CommissionRate           *uint64                     `protobuf:"varint,18,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	TaxRate                  *uint64                     `protobuf:"varint,19,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	ServiceFee               *uint64                     `protobuf:"varint,20,opt,name=service_fee,json=serviceFee" json:"service_fee,omitempty"`
	MinSpend                 *uint64                     `protobuf:"varint,21,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	DeliveryDistance         *uint64                     `protobuf:"varint,22,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	PreparationTime          *uint64                     `protobuf:"varint,23,opt,name=preparation_time,json=preparationTime" json:"preparation_time,omitempty"`
	ContactPhone             *string                     `protobuf:"bytes,24,opt,name=contact_phone,json=contactPhone" json:"contact_phone,omitempty"`
	Status                   *StoreStatus                `protobuf:"varint,25,opt,name=status,enum=foody_base.StoreStatus" json:"status,omitempty"`
	AutoConfirmed            *Store_AutoConfirmed        `protobuf:"varint,28,opt,name=auto_confirmed,json=autoConfirmed,enum=foody_base.Store_AutoConfirmed" json:"auto_confirmed,omitempty"`
	AutoConfirmedEnabled     *Store_AutoConfirmedEnabled `protobuf:"varint,29,opt,name=auto_confirmed_enabled,json=autoConfirmedEnabled,enum=foody_base.Store_AutoConfirmedEnabled" json:"auto_confirmed_enabled,omitempty"`
	CreateTime               *uint64                     `protobuf:"varint,30,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime               *uint64                     `protobuf:"varint,31,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	RatingTotal              *uint32                     `protobuf:"varint,32,opt,name=rating_total,json=ratingTotal" json:"rating_total,omitempty"`
	RatingScore              *float32                    `protobuf:"fixed32,33,opt,name=rating_score,json=ratingScore" json:"rating_score,omitempty"`
	OpeningStatus            *OpeningStatus_Status       `protobuf:"varint,34,opt,name=opening_status,json=openingStatus,enum=foody_base.OpeningStatus_Status" json:"opening_status,omitempty"`
	SurchargeIntervals       *Store_SurChargeIntervals   `protobuf:"bytes,35,opt,name=surcharge_intervals,json=surchargeIntervals" json:"surcharge_intervals,omitempty"`
	ServiceChargeFeeRate     *uint32                     `protobuf:"varint,36,opt,name=service_charge_fee_rate,json=serviceChargeFeeRate" json:"service_charge_fee_rate,omitempty"`
	DriverModifyOrderEnabled *uint32                     `protobuf:"varint,37,opt,name=driver_modify_order_enabled,json=driverModifyOrderEnabled" json:"driver_modify_order_enabled,omitempty"`
	DeliveryDistanceMode     *Store_DeliveryDistanceMode `protobuf:"varint,38,opt,name=delivery_distance_mode,json=deliveryDistanceMode,enum=foody_base.Store_DeliveryDistanceMode" json:"delivery_distance_mode,omitempty"`
	BusinessInfoAdded        *uint32                     `protobuf:"varint,39,opt,name=business_info_added,json=businessInfoAdded" json:"business_info_added,omitempty"`
	IsInstantPrep            *uint32                     `protobuf:"varint,40,opt,name=is_instant_prep,json=isInstantPrep" json:"is_instant_prep,omitempty"`
	Flag                     *Store_Flag                 `protobuf:"bytes,41,opt,name=flag" json:"flag,omitempty"`
	ModifyOrderMode          *Store_ModifyOrderMode      `protobuf:"varint,42,opt,name=modify_order_mode,json=modifyOrderMode,enum=foody_base.Store_ModifyOrderMode" json:"modify_order_mode,omitempty"`
	StatusReason             *Store_StatusReason         `protobuf:"varint,43,opt,name=status_reason,json=statusReason,enum=foody_base.Store_StatusReason" json:"status_reason,omitempty"`
	StatusReasonRemark       *string                     `protobuf:"bytes,44,opt,name=status_reason_remark,json=statusReasonRemark" json:"status_reason_remark,omitempty"`
	Overlay                  *Store_Overlay              `protobuf:"bytes,45,opt,name=overlay" json:"overlay,omitempty"`
	ScheduledCommissions     *Store_ScheduledCommissions `protobuf:"bytes,46,opt,name=scheduled_commissions,json=scheduledCommissions" json:"scheduled_commissions,omitempty"`
	EffectiveCommissionRate  *uint32                     `protobuf:"varint,47,opt,name=effective_commission_rate,json=effectiveCommissionRate" json:"effective_commission_rate,omitempty"`
	VendorId                 *uint64                     `protobuf:"varint,48,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	TobUserIds               *string                     `protobuf:"bytes,60,opt,name=tob_user_ids,json=tobUserIds" json:"tob_user_ids,omitempty"`
	BankName                 *string                     `protobuf:"bytes,61,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	BankAccountNo            *string                     `protobuf:"bytes,62,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankBranch               *string                     `protobuf:"bytes,63,opt,name=bank_branch,json=bankBranch" json:"bank_branch,omitempty"`
	BankAccountName          *string                     `protobuf:"bytes,64,opt,name=bank_account_name,json=bankAccountName" json:"bank_account_name,omitempty"`
	WalletId                 *uint64                     `protobuf:"varint,65,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	TaxId                    *string                     `protobuf:"bytes,66,opt,name=tax_id,json=taxId" json:"tax_id,omitempty"` // Deprecated: Do not use.
	SettlementMethod         *SettlementMethod           `protobuf:"varint,67,opt,name=settlement_method,json=settlementMethod,enum=foody_base.SettlementMethod" json:"settlement_method,omitempty"`
	PaymentWay               *PaymentWay                 `protobuf:"varint,68,opt,name=payment_way,json=paymentWay,enum=foody_base.PaymentWay" json:"payment_way,omitempty"`
	Vat                      *Vat                        `protobuf:"varint,69,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	VatRate                  *uint64                     `protobuf:"varint,70,opt,name=vat_rate,json=vatRate" json:"vat_rate,omitempty"`
	Wht                      *Wht                        `protobuf:"varint,71,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	WhtRate                  *uint64                     `protobuf:"varint,72,opt,name=wht_rate,json=whtRate" json:"wht_rate,omitempty"`
	SettleTo                 *Store_SettleTo             `protobuf:"varint,73,opt,name=settle_to,json=settleTo,enum=foody_base.Store_SettleTo" json:"settle_to,omitempty"`
	SourceUpdateTime         *uint64                     `protobuf:"varint,74,opt,name=source_update_time,json=sourceUpdateTime" json:"source_update_time,omitempty"`
	BankChannelId            *uint64                     `protobuf:"varint,75,opt,name=bank_channel_id,json=bankChannelId" json:"bank_channel_id,omitempty"`
	VatCalculate             *VatCalculate               `protobuf:"varint,76,opt,name=vat_calculate,json=vatCalculate,enum=foody_base.VatCalculate" json:"vat_calculate,omitempty"`
	PayoutMethod             *PayoutMethod               `protobuf:"varint,77,opt,name=payout_method,json=payoutMethod,enum=foody_base.PayoutMethod" json:"payout_method,omitempty"`
	CrossMonthSettlement     *CrossMonthSettlement       `protobuf:"varint,78,opt,name=cross_month_settlement,json=crossMonthSettlement,enum=foody_base.CrossMonthSettlement" json:"cross_month_settlement,omitempty"`
	HalalType                *Store_HalalType            `protobuf:"varint,79,opt,name=halal_type,json=halalType,enum=foody_base.Store_HalalType" json:"halal_type,omitempty"`
	SmallOrderFee            *uint64                     `protobuf:"varint,80,opt,name=small_order_fee,json=smallOrderFee" json:"small_order_fee,omitempty"`
	ServiceFeeMode           *Store_ServiceFeeMode       `protobuf:"varint,81,opt,name=service_fee_mode,json=serviceFeeMode,enum=foody_base.Store_ServiceFeeMode" json:"service_fee_mode,omitempty"`
	DffMode                  *Store_DFFMode              `protobuf:"varint,82,opt,name=dff_mode,json=dffMode,enum=foody_base.Store_DFFMode" json:"dff_mode,omitempty"`
	DffSetting               *Store_DFFSetting           `protobuf:"varint,83,opt,name=dff_setting,json=dffSetting,enum=foody_base.Store_DFFSetting" json:"dff_setting,omitempty"`
	Timezone                 *string                     `protobuf:"bytes,84,opt,name=timezone" json:"timezone,omitempty"`
	DistrictId               *uint64                     `protobuf:"varint,85,opt,name=district_id,json=districtId" json:"district_id,omitempty"`
	MainCategory             *StoreCategory              `protobuf:"bytes,86,opt,name=main_category,json=mainCategory" json:"main_category,omitempty"`
	SubCategory              *Store_SubCategory          `protobuf:"bytes,87,opt,name=sub_category,json=subCategory" json:"sub_category,omitempty"`
	MaxDelayTimeMode         *Store_MaxDelayTimeMode     `protobuf:"varint,88,opt,name=max_delay_time_mode,json=maxDelayTimeMode,enum=foody_base.Store_MaxDelayTimeMode" json:"max_delay_time_mode,omitempty"`
	MaxDelayTime             *uint64                     `protobuf:"varint,89,opt,name=max_delay_time,json=maxDelayTime" json:"max_delay_time,omitempty"`
	StatusInAdmin            *Store_StatusInAdmin        `protobuf:"varint,90,opt,name=status_in_admin,json=statusInAdmin,enum=foody_base.Store_StatusInAdmin" json:"status_in_admin,omitempty"`
	PayoutAccountId          *uint64                     `protobuf:"varint,91,opt,name=payout_account_id,json=payoutAccountId" json:"payout_account_id,omitempty"`
	WalletRelationStatus     *Store_ConfigStatus         `protobuf:"varint,92,opt,name=wallet_relation_status,json=walletRelationStatus,enum=foody_base.Store_ConfigStatus" json:"wallet_relation_status,omitempty"`
	SettlementConfigStatus   *Store_ConfigStatus         `protobuf:"varint,93,opt,name=settlement_config_status,json=settlementConfigStatus,enum=foody_base.Store_ConfigStatus" json:"settlement_config_status,omitempty"`
	ProductConfigStatus      *Store_ConfigStatus         `protobuf:"varint,94,opt,name=product_config_status,json=productConfigStatus,enum=foody_base.Store_ConfigStatus" json:"product_config_status,omitempty"`
	BankAccountStatus        *BankAccountStatus          `protobuf:"varint,95,opt,name=bank_account_status,json=bankAccountStatus,enum=foody_base.BankAccountStatus" json:"bank_account_status,omitempty"`
	AutoPayoutRemark         *string                     `protobuf:"bytes,96,opt,name=auto_payout_remark,json=autoPayoutRemark" json:"auto_payout_remark,omitempty"`
	ParkingFee               *uint64                     `protobuf:"varint,97,opt,name=parking_fee,json=parkingFee" json:"parking_fee,omitempty"`
	SmallOrderFeeMode        *Store_SmallOrderFeeMode    `protobuf:"varint,98,opt,name=small_order_fee_mode,json=smallOrderFeeMode,enum=foody_base.Store_SmallOrderFeeMode" json:"small_order_fee_mode,omitempty"`
	ExtraContactPhones       *string                     `protobuf:"bytes,99,opt,name=extra_contact_phones,json=extraContactPhones" json:"extra_contact_phones,omitempty"`
	CategoryType             *uint32                     `protobuf:"varint,100,opt,name=category_type,json=categoryType" json:"category_type,omitempty"`
	MaximumSubtotalPrice     *uint64                     `protobuf:"varint,102,opt,name=maximum_subtotal_price,json=maximumSubtotalPrice" json:"maximum_subtotal_price,omitempty"`
	DeliveryMethod           *Store_DeliveryMethod       `protobuf:"varint,103,opt,name=delivery_method,json=deliveryMethod,enum=foody_base.Store_DeliveryMethod" json:"delivery_method,omitempty"`
	MinFee                   *uint64                     `protobuf:"varint,104,opt,name=min_fee,json=minFee" json:"min_fee,omitempty"`
	ShippingFees             *Store_ShippingFees         `protobuf:"bytes,105,opt,name=shipping_fees,json=shippingFees" json:"shipping_fees,omitempty"`
	BankBranchId             *uint64                     `protobuf:"varint,106,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                    `json:"-"`
	XXX_unrecognized         []byte                      `json:"-"`
	XXX_sizecache            int32                       `json:"-"`
}

func (m *Store) Reset()         { *m = Store{} }
func (m *Store) String() string { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()    {}
func (*Store) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27}
}
func (m *Store) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store.Merge(m, src)
}
func (m *Store) XXX_Size() int {
	return m.Size()
}
func (m *Store) XXX_DiscardUnknown() {
	xxx_messageInfo_Store.DiscardUnknown(m)
}

var xxx_messageInfo_Store proto.InternalMessageInfo

func (m *Store) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Store) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Store) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

// Deprecated: Do not use.
func (m *Store) GetTagId() uint64 {
	if m != nil && m.TagId != nil {
		return *m.TagId
	}
	return 0
}

func (m *Store) GetBrandId() uint64 {
	if m != nil && m.BrandId != nil {
		return *m.BrandId
	}
	return 0
}

// Deprecated: Do not use.
func (m *Store) GetTobUserId() uint64 {
	if m != nil && m.TobUserId != nil {
		return *m.TobUserId
	}
	return 0
}

func (m *Store) GetIsUseWallet() Store_WalletStatus {
	if m != nil && m.IsUseWallet != nil {
		return *m.IsUseWallet
	}
	return Store_WALLET_DISABLE
}

func (m *Store) GetIsUseMerchantApp() Store_AppStatus {
	if m != nil && m.IsUseMerchantApp != nil {
		return *m.IsUseMerchantApp
	}
	return Store_APP_DISABLE
}

func (m *Store) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Store) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *Store) GetRegisterPhone() string {
	if m != nil && m.RegisterPhone != nil {
		return *m.RegisterPhone
	}
	return ""
}

func (m *Store) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

// Deprecated: Do not use.
func (m *Store) GetEmailSource() uint32 {
	if m != nil && m.EmailSource != nil {
		return *m.EmailSource
	}
	return 0
}

func (m *Store) GetRegisterTime() uint64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *Store) GetLogo() string {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return ""
}

func (m *Store) GetBanner() string {
	if m != nil && m.Banner != nil {
		return *m.Banner
	}
	return ""
}

func (m *Store) GetPartnerType() PartnerType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return PartnerType_PARTNER_LISTED
}

func (m *Store) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *Store) GetTaxRate() uint64 {
	if m != nil && m.TaxRate != nil {
		return *m.TaxRate
	}
	return 0
}

func (m *Store) GetServiceFee() uint64 {
	if m != nil && m.ServiceFee != nil {
		return *m.ServiceFee
	}
	return 0
}

func (m *Store) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

func (m *Store) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *Store) GetPreparationTime() uint64 {
	if m != nil && m.PreparationTime != nil {
		return *m.PreparationTime
	}
	return 0
}

func (m *Store) GetContactPhone() string {
	if m != nil && m.ContactPhone != nil {
		return *m.ContactPhone
	}
	return ""
}

func (m *Store) GetStatus() StoreStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return StoreStatus_STORE_INACTIVE
}

func (m *Store) GetAutoConfirmed() Store_AutoConfirmed {
	if m != nil && m.AutoConfirmed != nil {
		return *m.AutoConfirmed
	}
	return Store_Manual
}

func (m *Store) GetAutoConfirmedEnabled() Store_AutoConfirmedEnabled {
	if m != nil && m.AutoConfirmedEnabled != nil {
		return *m.AutoConfirmedEnabled
	}
	return Store_Disable
}

func (m *Store) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Store) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Store) GetRatingTotal() uint32 {
	if m != nil && m.RatingTotal != nil {
		return *m.RatingTotal
	}
	return 0
}

func (m *Store) GetRatingScore() float32 {
	if m != nil && m.RatingScore != nil {
		return *m.RatingScore
	}
	return 0
}

func (m *Store) GetOpeningStatus() OpeningStatus_Status {
	if m != nil && m.OpeningStatus != nil {
		return *m.OpeningStatus
	}
	return OpeningStatus_Status_OPEN
}

func (m *Store) GetSurchargeIntervals() *Store_SurChargeIntervals {
	if m != nil {
		return m.SurchargeIntervals
	}
	return nil
}

func (m *Store) GetServiceChargeFeeRate() uint32 {
	if m != nil && m.ServiceChargeFeeRate != nil {
		return *m.ServiceChargeFeeRate
	}
	return 0
}

func (m *Store) GetDriverModifyOrderEnabled() uint32 {
	if m != nil && m.DriverModifyOrderEnabled != nil {
		return *m.DriverModifyOrderEnabled
	}
	return 0
}

func (m *Store) GetDeliveryDistanceMode() Store_DeliveryDistanceMode {
	if m != nil && m.DeliveryDistanceMode != nil {
		return *m.DeliveryDistanceMode
	}
	return Store_DELIVERY_DISTANCE_MODE_DEFAULT
}

func (m *Store) GetBusinessInfoAdded() uint32 {
	if m != nil && m.BusinessInfoAdded != nil {
		return *m.BusinessInfoAdded
	}
	return 0
}

func (m *Store) GetIsInstantPrep() uint32 {
	if m != nil && m.IsInstantPrep != nil {
		return *m.IsInstantPrep
	}
	return 0
}

func (m *Store) GetFlag() *Store_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Store) GetModifyOrderMode() Store_ModifyOrderMode {
	if m != nil && m.ModifyOrderMode != nil {
		return *m.ModifyOrderMode
	}
	return Store_MODIFY_ORDER_MODE_NO_EDITING
}

func (m *Store) GetStatusReason() Store_StatusReason {
	if m != nil && m.StatusReason != nil {
		return *m.StatusReason
	}
	return Store_ON_BOARDING
}

func (m *Store) GetStatusReasonRemark() string {
	if m != nil && m.StatusReasonRemark != nil {
		return *m.StatusReasonRemark
	}
	return ""
}

func (m *Store) GetOverlay() *Store_Overlay {
	if m != nil {
		return m.Overlay
	}
	return nil
}

func (m *Store) GetScheduledCommissions() *Store_ScheduledCommissions {
	if m != nil {
		return m.ScheduledCommissions
	}
	return nil
}

func (m *Store) GetEffectiveCommissionRate() uint32 {
	if m != nil && m.EffectiveCommissionRate != nil {
		return *m.EffectiveCommissionRate
	}
	return 0
}

func (m *Store) GetVendorId() uint64 {
	if m != nil && m.VendorId != nil {
		return *m.VendorId
	}
	return 0
}

func (m *Store) GetTobUserIds() string {
	if m != nil && m.TobUserIds != nil {
		return *m.TobUserIds
	}
	return ""
}

func (m *Store) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *Store) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *Store) GetBankBranch() string {
	if m != nil && m.BankBranch != nil {
		return *m.BankBranch
	}
	return ""
}

func (m *Store) GetBankAccountName() string {
	if m != nil && m.BankAccountName != nil {
		return *m.BankAccountName
	}
	return ""
}

func (m *Store) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

// Deprecated: Do not use.
func (m *Store) GetTaxId() string {
	if m != nil && m.TaxId != nil {
		return *m.TaxId
	}
	return ""
}

func (m *Store) GetSettlementMethod() SettlementMethod {
	if m != nil && m.SettlementMethod != nil {
		return *m.SettlementMethod
	}
	return SettlementMethod_SETTLEMENT_METHOD_NONE
}

func (m *Store) GetPaymentWay() PaymentWay {
	if m != nil && m.PaymentWay != nil {
		return *m.PaymentWay
	}
	return PaymentWay_PAYMENT_UNKNOWN
}

func (m *Store) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *Store) GetVatRate() uint64 {
	if m != nil && m.VatRate != nil {
		return *m.VatRate
	}
	return 0
}

func (m *Store) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *Store) GetWhtRate() uint64 {
	if m != nil && m.WhtRate != nil {
		return *m.WhtRate
	}
	return 0
}

func (m *Store) GetSettleTo() Store_SettleTo {
	if m != nil && m.SettleTo != nil {
		return *m.SettleTo
	}
	return Store_SETTLE_TO_UNKNOWN
}

func (m *Store) GetSourceUpdateTime() uint64 {
	if m != nil && m.SourceUpdateTime != nil {
		return *m.SourceUpdateTime
	}
	return 0
}

func (m *Store) GetBankChannelId() uint64 {
	if m != nil && m.BankChannelId != nil {
		return *m.BankChannelId
	}
	return 0
}

func (m *Store) GetVatCalculate() VatCalculate {
	if m != nil && m.VatCalculate != nil {
		return *m.VatCalculate
	}
	return VatCalculate_VAT_CALCULATE_UNKNOWN
}

func (m *Store) GetPayoutMethod() PayoutMethod {
	if m != nil && m.PayoutMethod != nil {
		return *m.PayoutMethod
	}
	return PayoutMethod_PAYOUT_METHOD_NONE
}

func (m *Store) GetCrossMonthSettlement() CrossMonthSettlement {
	if m != nil && m.CrossMonthSettlement != nil {
		return *m.CrossMonthSettlement
	}
	return CrossMonthSettlement_CROSS_MONTH_NONE
}

func (m *Store) GetHalalType() Store_HalalType {
	if m != nil && m.HalalType != nil {
		return *m.HalalType
	}
	return Store_NON_HALAL
}

func (m *Store) GetSmallOrderFee() uint64 {
	if m != nil && m.SmallOrderFee != nil {
		return *m.SmallOrderFee
	}
	return 0
}

func (m *Store) GetServiceFeeMode() Store_ServiceFeeMode {
	if m != nil && m.ServiceFeeMode != nil {
		return *m.ServiceFeeMode
	}
	return Store_Default
}

func (m *Store) GetDffMode() Store_DFFMode {
	if m != nil && m.DffMode != nil {
		return *m.DffMode
	}
	return Store_DFF_MODE_DEFAULT
}

func (m *Store) GetDffSetting() Store_DFFSetting {
	if m != nil && m.DffSetting != nil {
		return *m.DffSetting
	}
	return Store_DFF_SETTING_UNKNOWN
}

func (m *Store) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Store) GetDistrictId() uint64 {
	if m != nil && m.DistrictId != nil {
		return *m.DistrictId
	}
	return 0
}

func (m *Store) GetMainCategory() *StoreCategory {
	if m != nil {
		return m.MainCategory
	}
	return nil
}

func (m *Store) GetSubCategory() *Store_SubCategory {
	if m != nil {
		return m.SubCategory
	}
	return nil
}

func (m *Store) GetMaxDelayTimeMode() Store_MaxDelayTimeMode {
	if m != nil && m.MaxDelayTimeMode != nil {
		return *m.MaxDelayTimeMode
	}
	return Store_MaxDelayTimeDefault
}

func (m *Store) GetMaxDelayTime() uint64 {
	if m != nil && m.MaxDelayTime != nil {
		return *m.MaxDelayTime
	}
	return 0
}

func (m *Store) GetStatusInAdmin() Store_StatusInAdmin {
	if m != nil && m.StatusInAdmin != nil {
		return *m.StatusInAdmin
	}
	return Store_NOT_INACTIVE
}

func (m *Store) GetPayoutAccountId() uint64 {
	if m != nil && m.PayoutAccountId != nil {
		return *m.PayoutAccountId
	}
	return 0
}

func (m *Store) GetWalletRelationStatus() Store_ConfigStatus {
	if m != nil && m.WalletRelationStatus != nil {
		return *m.WalletRelationStatus
	}
	return Store_ConfigStatus_Unknown
}

func (m *Store) GetSettlementConfigStatus() Store_ConfigStatus {
	if m != nil && m.SettlementConfigStatus != nil {
		return *m.SettlementConfigStatus
	}
	return Store_ConfigStatus_Unknown
}

func (m *Store) GetProductConfigStatus() Store_ConfigStatus {
	if m != nil && m.ProductConfigStatus != nil {
		return *m.ProductConfigStatus
	}
	return Store_ConfigStatus_Unknown
}

func (m *Store) GetBankAccountStatus() BankAccountStatus {
	if m != nil && m.BankAccountStatus != nil {
		return *m.BankAccountStatus
	}
	return BankAccountStatus_BANK_STATUS_NONE
}

func (m *Store) GetAutoPayoutRemark() string {
	if m != nil && m.AutoPayoutRemark != nil {
		return *m.AutoPayoutRemark
	}
	return ""
}

func (m *Store) GetParkingFee() uint64 {
	if m != nil && m.ParkingFee != nil {
		return *m.ParkingFee
	}
	return 0
}

func (m *Store) GetSmallOrderFeeMode() Store_SmallOrderFeeMode {
	if m != nil && m.SmallOrderFeeMode != nil {
		return *m.SmallOrderFeeMode
	}
	return Store_SMALL_ORDER_FEE_MODE_DEFAULT
}

func (m *Store) GetExtraContactPhones() string {
	if m != nil && m.ExtraContactPhones != nil {
		return *m.ExtraContactPhones
	}
	return ""
}

func (m *Store) GetCategoryType() uint32 {
	if m != nil && m.CategoryType != nil {
		return *m.CategoryType
	}
	return 0
}

func (m *Store) GetMaximumSubtotalPrice() uint64 {
	if m != nil && m.MaximumSubtotalPrice != nil {
		return *m.MaximumSubtotalPrice
	}
	return 0
}

func (m *Store) GetDeliveryMethod() Store_DeliveryMethod {
	if m != nil && m.DeliveryMethod != nil {
		return *m.DeliveryMethod
	}
	return Store_PLATFORM
}

func (m *Store) GetMinFee() uint64 {
	if m != nil && m.MinFee != nil {
		return *m.MinFee
	}
	return 0
}

func (m *Store) GetShippingFees() *Store_ShippingFees {
	if m != nil {
		return m.ShippingFees
	}
	return nil
}

func (m *Store) GetBankBranchId() uint64 {
	if m != nil && m.BankBranchId != nil {
		return *m.BankBranchId
	}
	return 0
}

type Store_SurChargeIntervals struct {
	Intervals            []*Store_SurChargeInterval `protobuf:"bytes,1,rep,name=intervals" json:"intervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Store_SurChargeIntervals) Reset()         { *m = Store_SurChargeIntervals{} }
func (m *Store_SurChargeIntervals) String() string { return proto.CompactTextString(m) }
func (*Store_SurChargeIntervals) ProtoMessage()    {}
func (*Store_SurChargeIntervals) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 0}
}
func (m *Store_SurChargeIntervals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_SurChargeIntervals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_SurChargeIntervals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_SurChargeIntervals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_SurChargeIntervals.Merge(m, src)
}
func (m *Store_SurChargeIntervals) XXX_Size() int {
	return m.Size()
}
func (m *Store_SurChargeIntervals) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_SurChargeIntervals.DiscardUnknown(m)
}

var xxx_messageInfo_Store_SurChargeIntervals proto.InternalMessageInfo

func (m *Store_SurChargeIntervals) GetIntervals() []*Store_SurChargeInterval {
	if m != nil {
		return m.Intervals
	}
	return nil
}

type Store_SurChargeInterval struct {
	OrderPriceEnd        *uint64  `protobuf:"varint,1,opt,name=order_price_end,json=orderPriceEnd" json:"order_price_end,omitempty"`
	Fee                  *uint64  `protobuf:"varint,2,opt,name=fee" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_SurChargeInterval) Reset()         { *m = Store_SurChargeInterval{} }
func (m *Store_SurChargeInterval) String() string { return proto.CompactTextString(m) }
func (*Store_SurChargeInterval) ProtoMessage()    {}
func (*Store_SurChargeInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 1}
}
func (m *Store_SurChargeInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_SurChargeInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_SurChargeInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_SurChargeInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_SurChargeInterval.Merge(m, src)
}
func (m *Store_SurChargeInterval) XXX_Size() int {
	return m.Size()
}
func (m *Store_SurChargeInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_SurChargeInterval.DiscardUnknown(m)
}

var xxx_messageInfo_Store_SurChargeInterval proto.InternalMessageInfo

func (m *Store_SurChargeInterval) GetOrderPriceEnd() uint64 {
	if m != nil && m.OrderPriceEnd != nil {
		return *m.OrderPriceEnd
	}
	return 0
}

func (m *Store_SurChargeInterval) GetFee() uint64 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

type Store_Flag struct {
	OvertimeOrderMode           *Store_Flag_OvertimeOrderMode `protobuf:"varint,1,opt,name=overtime_order_mode,json=overtimeOrderMode,enum=foody_base.Store_Flag_OvertimeOrderMode" json:"overtime_order_mode,omitempty"`
	IsSuperMenu                 *uint32                       `protobuf:"varint,2,opt,name=is_super_menu,json=isSuperMenu" json:"is_super_menu,omitempty"`
	RequiredReceiptPhoto        *uint32                       `protobuf:"varint,3,opt,name=required_receipt_photo,json=requiredReceiptPhoto" json:"required_receipt_photo,omitempty"`
	EditMenuEnabled             *uint32                       `protobuf:"varint,4,opt,name=edit_menu_enabled,json=editMenuEnabled" json:"edit_menu_enabled,omitempty"`
	HideDishNoteEnabled         *uint32                       `protobuf:"varint,5,opt,name=hide_dish_note_enabled,json=hideDishNoteEnabled" json:"hide_dish_note_enabled,omitempty"`
	AutoPrintDisabled           *uint32                       `protobuf:"varint,6,opt,name=auto_print_disabled,json=autoPrintDisabled" json:"auto_print_disabled,omitempty"`
	EditPromotionEnabled        *uint32                       `protobuf:"varint,7,opt,name=edit_promotion_enabled,json=editPromotionEnabled" json:"edit_promotion_enabled,omitempty"`
	ShowBuyerHalalType          *uint32                       `protobuf:"varint,8,opt,name=show_buyer_halal_type,json=showBuyerHalalType" json:"show_buyer_halal_type,omitempty"`
	HideProcessingFee           *uint32                       `protobuf:"varint,9,opt,name=hide_processing_fee,json=hideProcessingFee" json:"hide_processing_fee,omitempty"`
	SpecialModeStoreClose       *uint32                       `protobuf:"varint,10,opt,name=special_mode_store_close,json=specialModeStoreClose" json:"special_mode_store_close,omitempty"`
	SpecialModeDeliveryDistance *uint32                       `protobuf:"varint,11,opt,name=special_mode_delivery_distance,json=specialModeDeliveryDistance" json:"special_mode_delivery_distance,omitempty"`
	SpecialModeStoreDff         *uint32                       `protobuf:"varint,12,opt,name=special_mode_store_dff,json=specialModeStoreDff" json:"special_mode_store_dff,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                      `json:"-"`
	XXX_unrecognized            []byte                        `json:"-"`
	XXX_sizecache               int32                         `json:"-"`
}

func (m *Store_Flag) Reset()         { *m = Store_Flag{} }
func (m *Store_Flag) String() string { return proto.CompactTextString(m) }
func (*Store_Flag) ProtoMessage()    {}
func (*Store_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 2}
}
func (m *Store_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_Flag.Merge(m, src)
}
func (m *Store_Flag) XXX_Size() int {
	return m.Size()
}
func (m *Store_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Store_Flag proto.InternalMessageInfo

func (m *Store_Flag) GetOvertimeOrderMode() Store_Flag_OvertimeOrderMode {
	if m != nil && m.OvertimeOrderMode != nil {
		return *m.OvertimeOrderMode
	}
	return Store_Flag_OVERTIME_ORDER_MODE_CONFIRM
}

func (m *Store_Flag) GetIsSuperMenu() uint32 {
	if m != nil && m.IsSuperMenu != nil {
		return *m.IsSuperMenu
	}
	return 0
}

func (m *Store_Flag) GetRequiredReceiptPhoto() uint32 {
	if m != nil && m.RequiredReceiptPhoto != nil {
		return *m.RequiredReceiptPhoto
	}
	return 0
}

func (m *Store_Flag) GetEditMenuEnabled() uint32 {
	if m != nil && m.EditMenuEnabled != nil {
		return *m.EditMenuEnabled
	}
	return 0
}

func (m *Store_Flag) GetHideDishNoteEnabled() uint32 {
	if m != nil && m.HideDishNoteEnabled != nil {
		return *m.HideDishNoteEnabled
	}
	return 0
}

func (m *Store_Flag) GetAutoPrintDisabled() uint32 {
	if m != nil && m.AutoPrintDisabled != nil {
		return *m.AutoPrintDisabled
	}
	return 0
}

func (m *Store_Flag) GetEditPromotionEnabled() uint32 {
	if m != nil && m.EditPromotionEnabled != nil {
		return *m.EditPromotionEnabled
	}
	return 0
}

func (m *Store_Flag) GetShowBuyerHalalType() uint32 {
	if m != nil && m.ShowBuyerHalalType != nil {
		return *m.ShowBuyerHalalType
	}
	return 0
}

func (m *Store_Flag) GetHideProcessingFee() uint32 {
	if m != nil && m.HideProcessingFee != nil {
		return *m.HideProcessingFee
	}
	return 0
}

func (m *Store_Flag) GetSpecialModeStoreClose() uint32 {
	if m != nil && m.SpecialModeStoreClose != nil {
		return *m.SpecialModeStoreClose
	}
	return 0
}

func (m *Store_Flag) GetSpecialModeDeliveryDistance() uint32 {
	if m != nil && m.SpecialModeDeliveryDistance != nil {
		return *m.SpecialModeDeliveryDistance
	}
	return 0
}

func (m *Store_Flag) GetSpecialModeStoreDff() uint32 {
	if m != nil && m.SpecialModeStoreDff != nil {
		return *m.SpecialModeStoreDff
	}
	return 0
}

type Store_Overlay struct {
	LogoImage            *string  `protobuf:"bytes,1,opt,name=logo_image,json=logoImage" json:"logo_image,omitempty"`
	BannerImage          *string  `protobuf:"bytes,2,opt,name=banner_image,json=bannerImage" json:"banner_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_Overlay) Reset()         { *m = Store_Overlay{} }
func (m *Store_Overlay) String() string { return proto.CompactTextString(m) }
func (*Store_Overlay) ProtoMessage()    {}
func (*Store_Overlay) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 3}
}
func (m *Store_Overlay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_Overlay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_Overlay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_Overlay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_Overlay.Merge(m, src)
}
func (m *Store_Overlay) XXX_Size() int {
	return m.Size()
}
func (m *Store_Overlay) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_Overlay.DiscardUnknown(m)
}

var xxx_messageInfo_Store_Overlay proto.InternalMessageInfo

func (m *Store_Overlay) GetLogoImage() string {
	if m != nil && m.LogoImage != nil {
		return *m.LogoImage
	}
	return ""
}

func (m *Store_Overlay) GetBannerImage() string {
	if m != nil && m.BannerImage != nil {
		return *m.BannerImage
	}
	return ""
}

type Store_ScheduledCommission struct {
	CommissionRate       *uint32  `protobuf:"varint,1,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	Priority             *uint32  `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
	EffectiveTime        *uint64  `protobuf:"varint,3,opt,name=effective_time,json=effectiveTime" json:"effective_time,omitempty"`
	ExpireTime           *uint64  `protobuf:"varint,4,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_ScheduledCommission) Reset()         { *m = Store_ScheduledCommission{} }
func (m *Store_ScheduledCommission) String() string { return proto.CompactTextString(m) }
func (*Store_ScheduledCommission) ProtoMessage()    {}
func (*Store_ScheduledCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 4}
}
func (m *Store_ScheduledCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_ScheduledCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_ScheduledCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_ScheduledCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_ScheduledCommission.Merge(m, src)
}
func (m *Store_ScheduledCommission) XXX_Size() int {
	return m.Size()
}
func (m *Store_ScheduledCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_ScheduledCommission.DiscardUnknown(m)
}

var xxx_messageInfo_Store_ScheduledCommission proto.InternalMessageInfo

func (m *Store_ScheduledCommission) GetCommissionRate() uint32 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *Store_ScheduledCommission) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Store_ScheduledCommission) GetEffectiveTime() uint64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *Store_ScheduledCommission) GetExpireTime() uint64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

type Store_ScheduledCommissions struct {
	ScheduledCommissions []*Store_ScheduledCommission `protobuf:"bytes,1,rep,name=scheduled_commissions,json=scheduledCommissions" json:"scheduled_commissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Store_ScheduledCommissions) Reset()         { *m = Store_ScheduledCommissions{} }
func (m *Store_ScheduledCommissions) String() string { return proto.CompactTextString(m) }
func (*Store_ScheduledCommissions) ProtoMessage()    {}
func (*Store_ScheduledCommissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 5}
}
func (m *Store_ScheduledCommissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_ScheduledCommissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_ScheduledCommissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_ScheduledCommissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_ScheduledCommissions.Merge(m, src)
}
func (m *Store_ScheduledCommissions) XXX_Size() int {
	return m.Size()
}
func (m *Store_ScheduledCommissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_ScheduledCommissions.DiscardUnknown(m)
}

var xxx_messageInfo_Store_ScheduledCommissions proto.InternalMessageInfo

func (m *Store_ScheduledCommissions) GetScheduledCommissions() []*Store_ScheduledCommission {
	if m != nil {
		return m.ScheduledCommissions
	}
	return nil
}

type Store_SubCategory struct {
	SubCategory          []*StoreCategory `protobuf:"bytes,1,rep,name=sub_category,json=subCategory" json:"sub_category,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Store_SubCategory) Reset()         { *m = Store_SubCategory{} }
func (m *Store_SubCategory) String() string { return proto.CompactTextString(m) }
func (*Store_SubCategory) ProtoMessage()    {}
func (*Store_SubCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 6}
}
func (m *Store_SubCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_SubCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_SubCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_SubCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_SubCategory.Merge(m, src)
}
func (m *Store_SubCategory) XXX_Size() int {
	return m.Size()
}
func (m *Store_SubCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_SubCategory.DiscardUnknown(m)
}

var xxx_messageInfo_Store_SubCategory proto.InternalMessageInfo

func (m *Store_SubCategory) GetSubCategory() []*StoreCategory {
	if m != nil {
		return m.SubCategory
	}
	return nil
}

type Store_ShippingFee struct {
	From                 *uint32  `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To                   *uint32  `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Fee                  *uint64  `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Store_ShippingFee) Reset()         { *m = Store_ShippingFee{} }
func (m *Store_ShippingFee) String() string { return proto.CompactTextString(m) }
func (*Store_ShippingFee) ProtoMessage()    {}
func (*Store_ShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 7}
}
func (m *Store_ShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_ShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_ShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_ShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_ShippingFee.Merge(m, src)
}
func (m *Store_ShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *Store_ShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_ShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_Store_ShippingFee proto.InternalMessageInfo

func (m *Store_ShippingFee) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *Store_ShippingFee) GetTo() uint32 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *Store_ShippingFee) GetFee() uint64 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

type Store_ShippingFees struct {
	ShippingFees         []*Store_ShippingFee `protobuf:"bytes,1,rep,name=shipping_fees,json=shippingFees" json:"shipping_fees,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Store_ShippingFees) Reset()         { *m = Store_ShippingFees{} }
func (m *Store_ShippingFees) String() string { return proto.CompactTextString(m) }
func (*Store_ShippingFees) ProtoMessage()    {}
func (*Store_ShippingFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{27, 8}
}
func (m *Store_ShippingFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store_ShippingFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store_ShippingFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store_ShippingFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store_ShippingFees.Merge(m, src)
}
func (m *Store_ShippingFees) XXX_Size() int {
	return m.Size()
}
func (m *Store_ShippingFees) XXX_DiscardUnknown() {
	xxx_messageInfo_Store_ShippingFees.DiscardUnknown(m)
}

var xxx_messageInfo_Store_ShippingFees proto.InternalMessageInfo

func (m *Store_ShippingFees) GetShippingFees() []*Store_ShippingFee {
	if m != nil {
		return m.ShippingFees
	}
	return nil
}

// 店铺基础信息-下单过程中被用到
type StoreMin struct {
	Id                   *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MerchantId           *uint64                `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	TagId                *uint64                `protobuf:"varint,4,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"` // Deprecated: Do not use.
	BrandId              *uint64                `protobuf:"varint,5,opt,name=brand_id,json=brandId" json:"brand_id,omitempty"`
	TobUserId            *uint64                `protobuf:"varint,6,opt,name=tob_user_id,json=tobUserId" json:"tob_user_id,omitempty"` // Deprecated: Do not use.
	IsUseWallet          *StoreMin_WalletStatus `protobuf:"varint,7,opt,name=is_use_wallet,json=isUseWallet,enum=foody_base.StoreMin_WalletStatus" json:"is_use_wallet,omitempty"`
	IsUseMerchantApp     *StoreMin_AppStatus    `protobuf:"varint,8,opt,name=is_use_merchant_app,json=isUseMerchantApp,enum=foody_base.StoreMin_AppStatus" json:"is_use_merchant_app,omitempty"`
	Location             *Location              `protobuf:"bytes,9,opt,name=location" json:"location,omitempty"`
	PostalCode           *string                `protobuf:"bytes,10,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	RegisterPhone        *string                `protobuf:"bytes,11,opt,name=register_phone,json=registerPhone" json:"register_phone,omitempty"`
	Email                *string                `protobuf:"bytes,12,opt,name=email" json:"email,omitempty"`
	EmailSource          *uint32                `protobuf:"varint,13,opt,name=email_source,json=emailSource" json:"email_source,omitempty"` // Deprecated: Do not use.
	RegisterTime         *uint64                `protobuf:"varint,14,opt,name=register_time,json=registerTime" json:"register_time,omitempty"`
	Logo                 *string                `protobuf:"bytes,15,opt,name=logo" json:"logo,omitempty"`
	Banner               *string                `protobuf:"bytes,16,opt,name=banner" json:"banner,omitempty"`
	PartnerType          *PartnerType           `protobuf:"varint,17,opt,name=partner_type,json=partnerType,enum=foody_base.PartnerType" json:"partner_type,omitempty"`
	CommissionRate       *uint64                `protobuf:"varint,18,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	TaxRate              *uint64                `protobuf:"varint,19,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	ServiceFee           *uint64                `protobuf:"varint,20,opt,name=service_fee,json=serviceFee" json:"service_fee,omitempty"`
	MinSpend             *uint64                `protobuf:"varint,21,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	DeliveryDistance     *uint64                `protobuf:"varint,22,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	PreparationTime      *uint64                `protobuf:"varint,23,opt,name=preparation_time,json=preparationTime" json:"preparation_time,omitempty"`
	ContactPhone         *string                `protobuf:"bytes,24,opt,name=contact_phone,json=contactPhone" json:"contact_phone,omitempty"`
	Status               *StoreStatus           `protobuf:"varint,25,opt,name=status,enum=foody_base.StoreStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StoreMin) Reset()         { *m = StoreMin{} }
func (m *StoreMin) String() string { return proto.CompactTextString(m) }
func (*StoreMin) ProtoMessage()    {}
func (*StoreMin) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{28}
}
func (m *StoreMin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreMin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreMin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreMin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreMin.Merge(m, src)
}
func (m *StoreMin) XXX_Size() int {
	return m.Size()
}
func (m *StoreMin) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreMin.DiscardUnknown(m)
}

var xxx_messageInfo_StoreMin proto.InternalMessageInfo

func (m *StoreMin) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StoreMin) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *StoreMin) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

// Deprecated: Do not use.
func (m *StoreMin) GetTagId() uint64 {
	if m != nil && m.TagId != nil {
		return *m.TagId
	}
	return 0
}

func (m *StoreMin) GetBrandId() uint64 {
	if m != nil && m.BrandId != nil {
		return *m.BrandId
	}
	return 0
}

// Deprecated: Do not use.
func (m *StoreMin) GetTobUserId() uint64 {
	if m != nil && m.TobUserId != nil {
		return *m.TobUserId
	}
	return 0
}

func (m *StoreMin) GetIsUseWallet() StoreMin_WalletStatus {
	if m != nil && m.IsUseWallet != nil {
		return *m.IsUseWallet
	}
	return StoreMin_WALLET_DISABLE
}

func (m *StoreMin) GetIsUseMerchantApp() StoreMin_AppStatus {
	if m != nil && m.IsUseMerchantApp != nil {
		return *m.IsUseMerchantApp
	}
	return StoreMin_APP_DISABLE
}

func (m *StoreMin) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *StoreMin) GetPostalCode() string {
	if m != nil && m.PostalCode != nil {
		return *m.PostalCode
	}
	return ""
}

func (m *StoreMin) GetRegisterPhone() string {
	if m != nil && m.RegisterPhone != nil {
		return *m.RegisterPhone
	}
	return ""
}

func (m *StoreMin) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

// Deprecated: Do not use.
func (m *StoreMin) GetEmailSource() uint32 {
	if m != nil && m.EmailSource != nil {
		return *m.EmailSource
	}
	return 0
}

func (m *StoreMin) GetRegisterTime() uint64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *StoreMin) GetLogo() string {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return ""
}

func (m *StoreMin) GetBanner() string {
	if m != nil && m.Banner != nil {
		return *m.Banner
	}
	return ""
}

func (m *StoreMin) GetPartnerType() PartnerType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return PartnerType_PARTNER_LISTED
}

func (m *StoreMin) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *StoreMin) GetTaxRate() uint64 {
	if m != nil && m.TaxRate != nil {
		return *m.TaxRate
	}
	return 0
}

func (m *StoreMin) GetServiceFee() uint64 {
	if m != nil && m.ServiceFee != nil {
		return *m.ServiceFee
	}
	return 0
}

func (m *StoreMin) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

func (m *StoreMin) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *StoreMin) GetPreparationTime() uint64 {
	if m != nil && m.PreparationTime != nil {
		return *m.PreparationTime
	}
	return 0
}

func (m *StoreMin) GetContactPhone() string {
	if m != nil && m.ContactPhone != nil {
		return *m.ContactPhone
	}
	return ""
}

func (m *StoreMin) GetStatus() StoreStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return StoreStatus_STORE_INACTIVE
}

type StoreCategory struct {
	Level_1              *StoreCategoryFirstLevel  `protobuf:"varint,1,opt,name=level_1,json=level1,enum=foody_base.StoreCategoryFirstLevel" json:"level_1,omitempty"`
	Level_2              *StoreCategorySecondLevel `protobuf:"varint,2,opt,name=level_2,json=level2,enum=foody_base.StoreCategorySecondLevel" json:"level_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StoreCategory) Reset()         { *m = StoreCategory{} }
func (m *StoreCategory) String() string { return proto.CompactTextString(m) }
func (*StoreCategory) ProtoMessage()    {}
func (*StoreCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{29}
}
func (m *StoreCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreCategory.Merge(m, src)
}
func (m *StoreCategory) XXX_Size() int {
	return m.Size()
}
func (m *StoreCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreCategory.DiscardUnknown(m)
}

var xxx_messageInfo_StoreCategory proto.InternalMessageInfo

func (m *StoreCategory) GetLevel_1() StoreCategoryFirstLevel {
	if m != nil && m.Level_1 != nil {
		return *m.Level_1
	}
	return StoreCategoryFirstLevel_FIRST_LEVEL_UNKNOWN
}

func (m *StoreCategory) GetLevel_2() StoreCategorySecondLevel {
	if m != nil && m.Level_2 != nil {
		return *m.Level_2
	}
	return StoreCategorySecondLevel_SECOND_LEVEL_UNKNOWN
}

type OpeningStatus struct {
	DisplayOpeningStatus *DisplayOpeningStatus `protobuf:"varint,1,opt,name=display_opening_status,json=displayOpeningStatus,enum=foody_base.DisplayOpeningStatus" json:"display_opening_status,omitempty"`
	OrderEnabled         *uint32               `protobuf:"varint,2,opt,name=order_enabled,json=orderEnabled" json:"order_enabled,omitempty"`
	//  optional uint64 effective_closed_end_time = 3; // 实际生效的closed结束时间, deprecated, placeholder
	CurrentOpeningTime *OpeningStatus_Interval `protobuf:"bytes,4,opt,name=current_opening_time,json=currentOpeningTime" json:"current_opening_time,omitempty"`
	NextOpeningTime    *OpeningStatus_Interval `protobuf:"bytes,5,opt,name=next_opening_time,json=nextOpeningTime" json:"next_opening_time,omitempty"`
	//  optional uint64 closed_start_time = 6; // deprecated, placeholder
	//  optional uint64 closed_end_time = 7; // deprecated, placeholder
	OpeningStatus        *OpeningStatus_Status      `protobuf:"varint,8,opt,name=opening_status,json=openingStatus,enum=foody_base.OpeningStatus_Status" json:"opening_status,omitempty"`
	PauseTime            *OpeningStatus_PauseTime   `protobuf:"bytes,9,opt,name=pause_time,json=pauseTime" json:"pause_time,omitempty"`
	CloseStatus          *OpeningStatus_CloseStatus `protobuf:"bytes,10,opt,name=close_status,json=closeStatus" json:"close_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *OpeningStatus) Reset()         { *m = OpeningStatus{} }
func (m *OpeningStatus) String() string { return proto.CompactTextString(m) }
func (*OpeningStatus) ProtoMessage()    {}
func (*OpeningStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30}
}
func (m *OpeningStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningStatus.Merge(m, src)
}
func (m *OpeningStatus) XXX_Size() int {
	return m.Size()
}
func (m *OpeningStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningStatus proto.InternalMessageInfo

func (m *OpeningStatus) GetDisplayOpeningStatus() DisplayOpeningStatus {
	if m != nil && m.DisplayOpeningStatus != nil {
		return *m.DisplayOpeningStatus
	}
	return DisplayOpeningStatus_DisplayOpeningStatus_CLOSED
}

func (m *OpeningStatus) GetOrderEnabled() uint32 {
	if m != nil && m.OrderEnabled != nil {
		return *m.OrderEnabled
	}
	return 0
}

func (m *OpeningStatus) GetCurrentOpeningTime() *OpeningStatus_Interval {
	if m != nil {
		return m.CurrentOpeningTime
	}
	return nil
}

func (m *OpeningStatus) GetNextOpeningTime() *OpeningStatus_Interval {
	if m != nil {
		return m.NextOpeningTime
	}
	return nil
}

func (m *OpeningStatus) GetOpeningStatus() OpeningStatus_Status {
	if m != nil && m.OpeningStatus != nil {
		return *m.OpeningStatus
	}
	return OpeningStatus_Status_OPEN
}

func (m *OpeningStatus) GetPauseTime() *OpeningStatus_PauseTime {
	if m != nil {
		return m.PauseTime
	}
	return nil
}

func (m *OpeningStatus) GetCloseStatus() *OpeningStatus_CloseStatus {
	if m != nil {
		return m.CloseStatus
	}
	return nil
}

type OpeningStatus_Interval struct {
	StartRelativeSec     *uint32  `protobuf:"varint,1,opt,name=start_relative_sec,json=startRelativeSec" json:"start_relative_sec,omitempty"`
	EndRelativeSec       *uint32  `protobuf:"varint,2,opt,name=end_relative_sec,json=endRelativeSec" json:"end_relative_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpeningStatus_Interval) Reset()         { *m = OpeningStatus_Interval{} }
func (m *OpeningStatus_Interval) String() string { return proto.CompactTextString(m) }
func (*OpeningStatus_Interval) ProtoMessage()    {}
func (*OpeningStatus_Interval) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 0}
}
func (m *OpeningStatus_Interval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningStatus_Interval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningStatus_Interval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningStatus_Interval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningStatus_Interval.Merge(m, src)
}
func (m *OpeningStatus_Interval) XXX_Size() int {
	return m.Size()
}
func (m *OpeningStatus_Interval) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningStatus_Interval.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningStatus_Interval proto.InternalMessageInfo

func (m *OpeningStatus_Interval) GetStartRelativeSec() uint32 {
	if m != nil && m.StartRelativeSec != nil {
		return *m.StartRelativeSec
	}
	return 0
}

func (m *OpeningStatus_Interval) GetEndRelativeSec() uint32 {
	if m != nil && m.EndRelativeSec != nil {
		return *m.EndRelativeSec
	}
	return 0
}

type OpeningStatus_SpecialMode struct {
	ModeTypeId           *uint64  `protobuf:"varint,1,opt,name=mode_type_id,json=modeTypeId" json:"mode_type_id,omitempty"`
	ModeTypeName         *string  `protobuf:"bytes,2,opt,name=mode_type_name,json=modeTypeName" json:"mode_type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpeningStatus_SpecialMode) Reset()         { *m = OpeningStatus_SpecialMode{} }
func (m *OpeningStatus_SpecialMode) String() string { return proto.CompactTextString(m) }
func (*OpeningStatus_SpecialMode) ProtoMessage()    {}
func (*OpeningStatus_SpecialMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 1}
}
func (m *OpeningStatus_SpecialMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningStatus_SpecialMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningStatus_SpecialMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningStatus_SpecialMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningStatus_SpecialMode.Merge(m, src)
}
func (m *OpeningStatus_SpecialMode) XXX_Size() int {
	return m.Size()
}
func (m *OpeningStatus_SpecialMode) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningStatus_SpecialMode.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningStatus_SpecialMode proto.InternalMessageInfo

func (m *OpeningStatus_SpecialMode) GetModeTypeId() uint64 {
	if m != nil && m.ModeTypeId != nil {
		return *m.ModeTypeId
	}
	return 0
}

func (m *OpeningStatus_SpecialMode) GetModeTypeName() string {
	if m != nil && m.ModeTypeName != nil {
		return *m.ModeTypeName
	}
	return ""
}

type OpeningStatus_PauseTime struct {
	PauseStartTime       *uint64                    `protobuf:"varint,1,opt,name=pause_start_time,json=pauseStartTime" json:"pause_start_time,omitempty"`
	PauseEndTime         *uint64                    `protobuf:"varint,2,opt,name=pause_end_time,json=pauseEndTime" json:"pause_end_time,omitempty"`
	PauseType            *OpeningStatus_PauseType   `protobuf:"varint,3,opt,name=pause_type,json=pauseType,enum=foody_base.OpeningStatus_PauseType" json:"pause_type,omitempty"`
	SpecialMode          *OpeningStatus_SpecialMode `protobuf:"bytes,4,opt,name=special_mode,json=specialMode" json:"special_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *OpeningStatus_PauseTime) Reset()         { *m = OpeningStatus_PauseTime{} }
func (m *OpeningStatus_PauseTime) String() string { return proto.CompactTextString(m) }
func (*OpeningStatus_PauseTime) ProtoMessage()    {}
func (*OpeningStatus_PauseTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 2}
}
func (m *OpeningStatus_PauseTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningStatus_PauseTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningStatus_PauseTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningStatus_PauseTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningStatus_PauseTime.Merge(m, src)
}
func (m *OpeningStatus_PauseTime) XXX_Size() int {
	return m.Size()
}
func (m *OpeningStatus_PauseTime) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningStatus_PauseTime.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningStatus_PauseTime proto.InternalMessageInfo

func (m *OpeningStatus_PauseTime) GetPauseStartTime() uint64 {
	if m != nil && m.PauseStartTime != nil {
		return *m.PauseStartTime
	}
	return 0
}

func (m *OpeningStatus_PauseTime) GetPauseEndTime() uint64 {
	if m != nil && m.PauseEndTime != nil {
		return *m.PauseEndTime
	}
	return 0
}

func (m *OpeningStatus_PauseTime) GetPauseType() OpeningStatus_PauseType {
	if m != nil && m.PauseType != nil {
		return *m.PauseType
	}
	return OpeningStatus_None
}

func (m *OpeningStatus_PauseTime) GetSpecialMode() *OpeningStatus_SpecialMode {
	if m != nil {
		return m.SpecialMode
	}
	return nil
}

type OpeningStatus_CloseStatus struct {
	CloseType            *OpeningStatus_CloseType `protobuf:"varint,1,opt,name=close_type,json=closeType,enum=foody_base.OpeningStatus_CloseType" json:"close_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *OpeningStatus_CloseStatus) Reset()         { *m = OpeningStatus_CloseStatus{} }
func (m *OpeningStatus_CloseStatus) String() string { return proto.CompactTextString(m) }
func (*OpeningStatus_CloseStatus) ProtoMessage()    {}
func (*OpeningStatus_CloseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{30, 3}
}
func (m *OpeningStatus_CloseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpeningStatus_CloseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpeningStatus_CloseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpeningStatus_CloseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpeningStatus_CloseStatus.Merge(m, src)
}
func (m *OpeningStatus_CloseStatus) XXX_Size() int {
	return m.Size()
}
func (m *OpeningStatus_CloseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OpeningStatus_CloseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OpeningStatus_CloseStatus proto.InternalMessageInfo

func (m *OpeningStatus_CloseStatus) GetCloseType() OpeningStatus_CloseType {
	if m != nil && m.CloseType != nil {
		return *m.CloseType
	}
	return OpeningStatus_CloseTypeRegularHour
}

type StoreExt struct {
	Store                *Store         `protobuf:"bytes,1,opt,name=store" json:"store,omitempty"`
	OpeningStatus        *OpeningStatus `protobuf:"bytes,2,opt,name=opening_status,json=openingStatus" json:"opening_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StoreExt) Reset()         { *m = StoreExt{} }
func (m *StoreExt) String() string { return proto.CompactTextString(m) }
func (*StoreExt) ProtoMessage()    {}
func (*StoreExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{31}
}
func (m *StoreExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreExt.Merge(m, src)
}
func (m *StoreExt) XXX_Size() int {
	return m.Size()
}
func (m *StoreExt) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreExt.DiscardUnknown(m)
}

var xxx_messageInfo_StoreExt proto.InternalMessageInfo

func (m *StoreExt) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *StoreExt) GetOpeningStatus() *OpeningStatus {
	if m != nil {
		return m.OpeningStatus
	}
	return nil
}

type Merchant struct {
	Id                     *uint64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MerchantName           *string                  `protobuf:"bytes,2,opt,name=merchant_name,json=merchantName" json:"merchant_name,omitempty"`
	Email                  *string                  `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Logo                   *string                  `protobuf:"bytes,4,opt,name=logo" json:"logo,omitempty"`
	Banner                 *string                  `protobuf:"bytes,5,opt,name=banner" json:"banner,omitempty"`
	RegisterTime           *uint64                  `protobuf:"varint,6,opt,name=register_time,json=registerTime" json:"register_time,omitempty"`
	CreateTime             *uint64                  `protobuf:"varint,7,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime             *uint64                  `protobuf:"varint,8,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	TobUserId              *uint64                  `protobuf:"varint,9,opt,name=tob_user_id,json=tobUserId" json:"tob_user_id,omitempty"` // Deprecated: Do not use.
	TobUserIds             *string                  `protobuf:"bytes,20,opt,name=tob_user_ids,json=tobUserIds" json:"tob_user_ids,omitempty"`
	BankName               *string                  `protobuf:"bytes,21,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	BankAccountNo          *string                  `protobuf:"bytes,22,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankBranch             *string                  `protobuf:"bytes,23,opt,name=bank_branch,json=bankBranch" json:"bank_branch,omitempty"`
	BankAccountName        *string                  `protobuf:"bytes,24,opt,name=bank_account_name,json=bankAccountName" json:"bank_account_name,omitempty"`
	WalletId               *uint64                  `protobuf:"varint,25,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	TaxId                  *string                  `protobuf:"bytes,26,opt,name=tax_id,json=taxId" json:"tax_id,omitempty"`
	SettlementMethod       *SettlementMethod        `protobuf:"varint,27,opt,name=settlement_method,json=settlementMethod,enum=foody_base.SettlementMethod" json:"settlement_method,omitempty"`
	PaymentWay             *PaymentWay              `protobuf:"varint,28,opt,name=payment_way,json=paymentWay,enum=foody_base.PaymentWay" json:"payment_way,omitempty"`
	Vat                    *Vat                     `protobuf:"varint,29,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	VatRate                *uint64                  `protobuf:"varint,30,opt,name=vat_rate,json=vatRate" json:"vat_rate,omitempty"`
	Wht                    *Wht                     `protobuf:"varint,31,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	WhtRate                *uint64                  `protobuf:"varint,32,opt,name=wht_rate,json=whtRate" json:"wht_rate,omitempty"`
	IsUseWallet            *Merchant_WalletStatus   `protobuf:"varint,33,opt,name=is_use_wallet,json=isUseWallet,enum=foody_base.Merchant_WalletStatus" json:"is_use_wallet,omitempty"`
	SourceUpdateTime       *uint64                  `protobuf:"varint,34,opt,name=source_update_time,json=sourceUpdateTime" json:"source_update_time,omitempty"`
	BankChannelId          *uint64                  `protobuf:"varint,35,opt,name=bank_channel_id,json=bankChannelId" json:"bank_channel_id,omitempty"`
	VatCalculate           *VatCalculate            `protobuf:"varint,36,opt,name=vat_calculate,json=vatCalculate,enum=foody_base.VatCalculate" json:"vat_calculate,omitempty"`
	PayoutMethod           *PayoutMethod            `protobuf:"varint,37,opt,name=payout_method,json=payoutMethod,enum=foody_base.PayoutMethod" json:"payout_method,omitempty"`
	CrossMonthSettlement   *CrossMonthSettlement    `protobuf:"varint,38,opt,name=cross_month_settlement,json=crossMonthSettlement,enum=foody_base.CrossMonthSettlement" json:"cross_month_settlement,omitempty"`
	PayoutAccountId        *uint64                  `protobuf:"varint,39,opt,name=payout_account_id,json=payoutAccountId" json:"payout_account_id,omitempty"`
	WalletRelationStatus   *Merchant_ConfigStatus   `protobuf:"varint,40,opt,name=wallet_relation_status,json=walletRelationStatus,enum=foody_base.Merchant_ConfigStatus" json:"wallet_relation_status,omitempty"`
	SettlementConfigStatus *Merchant_ConfigStatus   `protobuf:"varint,41,opt,name=settlement_config_status,json=settlementConfigStatus,enum=foody_base.Merchant_ConfigStatus" json:"settlement_config_status,omitempty"`
	ProductConfigStatus    *Merchant_ConfigStatus   `protobuf:"varint,42,opt,name=product_config_status,json=productConfigStatus,enum=foody_base.Merchant_ConfigStatus" json:"product_config_status,omitempty"`
	BankAccountStatus      *BankAccountStatus       `protobuf:"varint,43,opt,name=bank_account_status,json=bankAccountStatus,enum=foody_base.BankAccountStatus" json:"bank_account_status,omitempty"`
	AutoPayoutRemark       *string                  `protobuf:"bytes,44,opt,name=auto_payout_remark,json=autoPayoutRemark" json:"auto_payout_remark,omitempty"`
	MerchantStatus         *Merchant_MerchantStatus `protobuf:"varint,45,opt,name=merchant_status,json=merchantStatus,enum=foody_base.Merchant_MerchantStatus" json:"merchant_status,omitempty"`
	BankBranchId           *uint64                  `protobuf:"varint,46,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *Merchant) Reset()         { *m = Merchant{} }
func (m *Merchant) String() string { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()    {}
func (*Merchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{32}
}
func (m *Merchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Merchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Merchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Merchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merchant.Merge(m, src)
}
func (m *Merchant) XXX_Size() int {
	return m.Size()
}
func (m *Merchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Merchant.DiscardUnknown(m)
}

var xxx_messageInfo_Merchant proto.InternalMessageInfo

func (m *Merchant) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Merchant) GetMerchantName() string {
	if m != nil && m.MerchantName != nil {
		return *m.MerchantName
	}
	return ""
}

func (m *Merchant) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Merchant) GetLogo() string {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return ""
}

func (m *Merchant) GetBanner() string {
	if m != nil && m.Banner != nil {
		return *m.Banner
	}
	return ""
}

func (m *Merchant) GetRegisterTime() uint64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *Merchant) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Merchant) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

// Deprecated: Do not use.
func (m *Merchant) GetTobUserId() uint64 {
	if m != nil && m.TobUserId != nil {
		return *m.TobUserId
	}
	return 0
}

func (m *Merchant) GetTobUserIds() string {
	if m != nil && m.TobUserIds != nil {
		return *m.TobUserIds
	}
	return ""
}

func (m *Merchant) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *Merchant) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *Merchant) GetBankBranch() string {
	if m != nil && m.BankBranch != nil {
		return *m.BankBranch
	}
	return ""
}

func (m *Merchant) GetBankAccountName() string {
	if m != nil && m.BankAccountName != nil {
		return *m.BankAccountName
	}
	return ""
}

func (m *Merchant) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *Merchant) GetTaxId() string {
	if m != nil && m.TaxId != nil {
		return *m.TaxId
	}
	return ""
}

func (m *Merchant) GetSettlementMethod() SettlementMethod {
	if m != nil && m.SettlementMethod != nil {
		return *m.SettlementMethod
	}
	return SettlementMethod_SETTLEMENT_METHOD_NONE
}

func (m *Merchant) GetPaymentWay() PaymentWay {
	if m != nil && m.PaymentWay != nil {
		return *m.PaymentWay
	}
	return PaymentWay_PAYMENT_UNKNOWN
}

func (m *Merchant) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *Merchant) GetVatRate() uint64 {
	if m != nil && m.VatRate != nil {
		return *m.VatRate
	}
	return 0
}

func (m *Merchant) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *Merchant) GetWhtRate() uint64 {
	if m != nil && m.WhtRate != nil {
		return *m.WhtRate
	}
	return 0
}

func (m *Merchant) GetIsUseWallet() Merchant_WalletStatus {
	if m != nil && m.IsUseWallet != nil {
		return *m.IsUseWallet
	}
	return Merchant_WALLET_DISABLE
}

func (m *Merchant) GetSourceUpdateTime() uint64 {
	if m != nil && m.SourceUpdateTime != nil {
		return *m.SourceUpdateTime
	}
	return 0
}

func (m *Merchant) GetBankChannelId() uint64 {
	if m != nil && m.BankChannelId != nil {
		return *m.BankChannelId
	}
	return 0
}

func (m *Merchant) GetVatCalculate() VatCalculate {
	if m != nil && m.VatCalculate != nil {
		return *m.VatCalculate
	}
	return VatCalculate_VAT_CALCULATE_UNKNOWN
}

func (m *Merchant) GetPayoutMethod() PayoutMethod {
	if m != nil && m.PayoutMethod != nil {
		return *m.PayoutMethod
	}
	return PayoutMethod_PAYOUT_METHOD_NONE
}

func (m *Merchant) GetCrossMonthSettlement() CrossMonthSettlement {
	if m != nil && m.CrossMonthSettlement != nil {
		return *m.CrossMonthSettlement
	}
	return CrossMonthSettlement_CROSS_MONTH_NONE
}

func (m *Merchant) GetPayoutAccountId() uint64 {
	if m != nil && m.PayoutAccountId != nil {
		return *m.PayoutAccountId
	}
	return 0
}

func (m *Merchant) GetWalletRelationStatus() Merchant_ConfigStatus {
	if m != nil && m.WalletRelationStatus != nil {
		return *m.WalletRelationStatus
	}
	return Merchant_ConfigStatus_Unknown
}

func (m *Merchant) GetSettlementConfigStatus() Merchant_ConfigStatus {
	if m != nil && m.SettlementConfigStatus != nil {
		return *m.SettlementConfigStatus
	}
	return Merchant_ConfigStatus_Unknown
}

func (m *Merchant) GetProductConfigStatus() Merchant_ConfigStatus {
	if m != nil && m.ProductConfigStatus != nil {
		return *m.ProductConfigStatus
	}
	return Merchant_ConfigStatus_Unknown
}

func (m *Merchant) GetBankAccountStatus() BankAccountStatus {
	if m != nil && m.BankAccountStatus != nil {
		return *m.BankAccountStatus
	}
	return BankAccountStatus_BANK_STATUS_NONE
}

func (m *Merchant) GetAutoPayoutRemark() string {
	if m != nil && m.AutoPayoutRemark != nil {
		return *m.AutoPayoutRemark
	}
	return ""
}

func (m *Merchant) GetMerchantStatus() Merchant_MerchantStatus {
	if m != nil && m.MerchantStatus != nil {
		return *m.MerchantStatus
	}
	return Merchant_MerchantStatus_Active
}

func (m *Merchant) GetBankBranchId() uint64 {
	if m != nil && m.BankBranchId != nil {
		return *m.BankBranchId
	}
	return 0
}

type Brand struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BrandName            *string  `protobuf:"bytes,2,opt,name=brand_name,json=brandName" json:"brand_name,omitempty"`
	Deleted              *uint32  `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
	StoreCount           *uint32  `protobuf:"varint,4,opt,name=store_count,json=storeCount" json:"store_count,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{33}
}
func (m *Brand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(m, src)
}
func (m *Brand) XXX_Size() int {
	return m.Size()
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Brand) GetBrandName() string {
	if m != nil && m.BrandName != nil {
		return *m.BrandName
	}
	return ""
}

func (m *Brand) GetDeleted() uint32 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return 0
}

func (m *Brand) GetStoreCount() uint32 {
	if m != nil && m.StoreCount != nil {
		return *m.StoreCount
	}
	return 0
}

func (m *Brand) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Brand) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type Tag struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TagName              *string  `protobuf:"bytes,2,opt,name=tag_name,json=tagName" json:"tag_name,omitempty"`
	Deleted              *uint64  `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,5,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	TagTypeId            *uint64  `protobuf:"varint,6,opt,name=tag_type_id,json=tagTypeId" json:"tag_type_id,omitempty"`
	Description          *string  `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Creator              *string  `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	DeleteTime           *uint64  `protobuf:"varint,9,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
	Editable             *bool    `protobuf:"varint,10,opt,name=editable" json:"editable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{34}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Tag) GetTagName() string {
	if m != nil && m.TagName != nil {
		return *m.TagName
	}
	return ""
}

func (m *Tag) GetDeleted() uint64 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return 0
}

func (m *Tag) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Tag) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Tag) GetTagTypeId() uint64 {
	if m != nil && m.TagTypeId != nil {
		return *m.TagTypeId
	}
	return 0
}

func (m *Tag) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Tag) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Tag) GetDeleteTime() uint64 {
	if m != nil && m.DeleteTime != nil {
		return *m.DeleteTime
	}
	return 0
}

func (m *Tag) GetEditable() bool {
	if m != nil && m.Editable != nil {
		return *m.Editable
	}
	return false
}

type TagType struct {
	Id                   *uint64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TypeName             *string         `protobuf:"bytes,2,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	Creator              *string         `protobuf:"bytes,3,opt,name=creator" json:"creator,omitempty"`
	Status               *TagType_Status `protobuf:"varint,4,opt,name=status,enum=foody_base.TagType_Status" json:"status,omitempty"`
	CreateTime           *uint64         `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64         `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	TagCount             *uint64         `protobuf:"varint,7,opt,name=tag_count,json=tagCount" json:"tag_count,omitempty"`
	Deleted              *uint64         `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	DeleteTime           *uint64         `protobuf:"varint,9,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
	Editable             *bool           `protobuf:"varint,10,opt,name=editable" json:"editable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TagType) Reset()         { *m = TagType{} }
func (m *TagType) String() string { return proto.CompactTextString(m) }
func (*TagType) ProtoMessage()    {}
func (*TagType) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{35}
}
func (m *TagType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagType.Merge(m, src)
}
func (m *TagType) XXX_Size() int {
	return m.Size()
}
func (m *TagType) XXX_DiscardUnknown() {
	xxx_messageInfo_TagType.DiscardUnknown(m)
}

var xxx_messageInfo_TagType proto.InternalMessageInfo

func (m *TagType) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TagType) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

func (m *TagType) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *TagType) GetStatus() TagType_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TagType_INACTIVE
}

func (m *TagType) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TagType) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *TagType) GetTagCount() uint64 {
	if m != nil && m.TagCount != nil {
		return *m.TagCount
	}
	return 0
}

func (m *TagType) GetDeleted() uint64 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return 0
}

func (m *TagType) GetDeleteTime() uint64 {
	if m != nil && m.DeleteTime != nil {
		return *m.DeleteTime
	}
	return 0
}

func (m *TagType) GetEditable() bool {
	if m != nil && m.Editable != nil {
		return *m.Editable
	}
	return false
}

type PredefinedKeyword struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ActualSearchKeyword  *string  `protobuf:"bytes,2,opt,name=actual_search_keyword,json=actualSearchKeyword" json:"actual_search_keyword,omitempty"`
	UserSearchKeywords   []string `protobuf:"bytes,3,rep,name=user_search_keywords,json=userSearchKeywords" json:"user_search_keywords,omitempty"`
	Creator              *string  `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	Deleted              *uint64  `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,7,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	DeleteTime           *uint64  `protobuf:"varint,8,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PredefinedKeyword) Reset()         { *m = PredefinedKeyword{} }
func (m *PredefinedKeyword) String() string { return proto.CompactTextString(m) }
func (*PredefinedKeyword) ProtoMessage()    {}
func (*PredefinedKeyword) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{36}
}
func (m *PredefinedKeyword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredefinedKeyword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredefinedKeyword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PredefinedKeyword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredefinedKeyword.Merge(m, src)
}
func (m *PredefinedKeyword) XXX_Size() int {
	return m.Size()
}
func (m *PredefinedKeyword) XXX_DiscardUnknown() {
	xxx_messageInfo_PredefinedKeyword.DiscardUnknown(m)
}

var xxx_messageInfo_PredefinedKeyword proto.InternalMessageInfo

func (m *PredefinedKeyword) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PredefinedKeyword) GetActualSearchKeyword() string {
	if m != nil && m.ActualSearchKeyword != nil {
		return *m.ActualSearchKeyword
	}
	return ""
}

func (m *PredefinedKeyword) GetUserSearchKeywords() []string {
	if m != nil {
		return m.UserSearchKeywords
	}
	return nil
}

func (m *PredefinedKeyword) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *PredefinedKeyword) GetDeleted() uint64 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return 0
}

func (m *PredefinedKeyword) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PredefinedKeyword) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PredefinedKeyword) GetDeleteTime() uint64 {
	if m != nil && m.DeleteTime != nil {
		return *m.DeleteTime
	}
	return 0
}

type WithdrawalChannel struct {
	Bank                 *Enabled `protobuf:"varint,1,opt,name=bank,enum=foody_base.Enabled" json:"bank,omitempty"`
	ShopeePay            *Enabled `protobuf:"varint,2,opt,name=shopee_pay,json=shopeePay,enum=foody_base.Enabled" json:"shopee_pay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawalChannel) Reset()         { *m = WithdrawalChannel{} }
func (m *WithdrawalChannel) String() string { return proto.CompactTextString(m) }
func (*WithdrawalChannel) ProtoMessage()    {}
func (*WithdrawalChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{37}
}
func (m *WithdrawalChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalChannel.Merge(m, src)
}
func (m *WithdrawalChannel) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalChannel.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalChannel proto.InternalMessageInfo

func (m *WithdrawalChannel) GetBank() Enabled {
	if m != nil && m.Bank != nil {
		return *m.Bank
	}
	return Enabled_DISABLED
}

func (m *WithdrawalChannel) GetShopeePay() Enabled {
	if m != nil && m.ShopeePay != nil {
		return *m.ShopeePay
	}
	return Enabled_DISABLED
}

type DriverWallet struct {
	Id                   *uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId             *uint64            `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	Balance              *int64             `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
	WalletStatus         *WalletStatus      `protobuf:"varint,4,opt,name=wallet_status,json=walletStatus,enum=foody_base.WalletStatus" json:"wallet_status,omitempty"`
	CreateTime           *uint64            `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64            `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WalletType           *WalletType        `protobuf:"varint,7,opt,name=wallet_type,json=walletType,enum=foody_base.WalletType" json:"wallet_type,omitempty"`
	PayoutMode           *PayoutMode        `protobuf:"varint,8,opt,name=payout_mode,json=payoutMode,enum=foody_base.PayoutMode" json:"payout_mode,omitempty"`
	ModeOperator         *string            `protobuf:"bytes,9,opt,name=mode_operator,json=modeOperator" json:"mode_operator,omitempty"`
	ModeUpdateTime       *uint64            `protobuf:"varint,10,opt,name=mode_update_time,json=modeUpdateTime" json:"mode_update_time,omitempty"`
	BalanceVersion       *uint64            `protobuf:"varint,11,opt,name=balance_version,json=balanceVersion" json:"balance_version,omitempty"`
	WithdrawalChannel    *WithdrawalChannel `protobuf:"bytes,12,opt,name=withdrawal_channel,json=withdrawalChannel" json:"withdrawal_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DriverWallet) Reset()         { *m = DriverWallet{} }
func (m *DriverWallet) String() string { return proto.CompactTextString(m) }
func (*DriverWallet) ProtoMessage()    {}
func (*DriverWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{38}
}
func (m *DriverWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverWallet.Merge(m, src)
}
func (m *DriverWallet) XXX_Size() int {
	return m.Size()
}
func (m *DriverWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverWallet.DiscardUnknown(m)
}

var xxx_messageInfo_DriverWallet proto.InternalMessageInfo

func (m *DriverWallet) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverWallet) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverWallet) GetBalance() int64 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *DriverWallet) GetWalletStatus() WalletStatus {
	if m != nil && m.WalletStatus != nil {
		return *m.WalletStatus
	}
	return WalletStatus_WALLET_NORMAL
}

func (m *DriverWallet) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverWallet) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverWallet) GetWalletType() WalletType {
	if m != nil && m.WalletType != nil {
		return *m.WalletType
	}
	return WalletType_WALLET_TYPE_DRIVER
}

func (m *DriverWallet) GetPayoutMode() PayoutMode {
	if m != nil && m.PayoutMode != nil {
		return *m.PayoutMode
	}
	return PayoutMode_PAYOUT_NONE
}

func (m *DriverWallet) GetModeOperator() string {
	if m != nil && m.ModeOperator != nil {
		return *m.ModeOperator
	}
	return ""
}

func (m *DriverWallet) GetModeUpdateTime() uint64 {
	if m != nil && m.ModeUpdateTime != nil {
		return *m.ModeUpdateTime
	}
	return 0
}

func (m *DriverWallet) GetBalanceVersion() uint64 {
	if m != nil && m.BalanceVersion != nil {
		return *m.BalanceVersion
	}
	return 0
}

func (m *DriverWallet) GetWithdrawalChannel() *WithdrawalChannel {
	if m != nil {
		return m.WithdrawalChannel
	}
	return nil
}

type DriverWalletTransaction struct {
	Id                   *uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	WalletId             *uint64          `protobuf:"varint,2,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	DriverId             *uint64          `protobuf:"varint,3,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	TransactionType      *TransactionType `protobuf:"varint,4,opt,name=transaction_type,json=transactionType,enum=foody_base.TransactionType" json:"transaction_type,omitempty"`
	Amount               *uint64          `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	Balance              *int64           `protobuf:"varint,6,opt,name=balance" json:"balance,omitempty"`
	Currency             *string          `protobuf:"bytes,7,opt,name=currency" json:"currency,omitempty"`
	ReferenceId          *uint64          `protobuf:"varint,8,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	Remark               *string          `protobuf:"bytes,9,opt,name=remark" json:"remark,omitempty"`
	CreateTime           *uint64          `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64          `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Extend               *string          `protobuf:"bytes,12,opt,name=extend" json:"extend,omitempty"`
	BalanceVersion       *uint64          `protobuf:"varint,13,opt,name=balance_version,json=balanceVersion" json:"balance_version,omitempty"`
	RelatedOrder         *uint64          `protobuf:"varint,14,opt,name=related_order,json=relatedOrder" json:"related_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DriverWalletTransaction) Reset()         { *m = DriverWalletTransaction{} }
func (m *DriverWalletTransaction) String() string { return proto.CompactTextString(m) }
func (*DriverWalletTransaction) ProtoMessage()    {}
func (*DriverWalletTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{39}
}
func (m *DriverWalletTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverWalletTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverWalletTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverWalletTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverWalletTransaction.Merge(m, src)
}
func (m *DriverWalletTransaction) XXX_Size() int {
	return m.Size()
}
func (m *DriverWalletTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverWalletTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_DriverWalletTransaction proto.InternalMessageInfo

func (m *DriverWalletTransaction) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverWalletTransaction) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *DriverWalletTransaction) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverWalletTransaction) GetTransactionType() TransactionType {
	if m != nil && m.TransactionType != nil {
		return *m.TransactionType
	}
	return TransactionType_CREDIT_TOP_UP
}

func (m *DriverWalletTransaction) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DriverWalletTransaction) GetBalance() int64 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *DriverWalletTransaction) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *DriverWalletTransaction) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *DriverWalletTransaction) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *DriverWalletTransaction) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverWalletTransaction) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverWalletTransaction) GetExtend() string {
	if m != nil && m.Extend != nil {
		return *m.Extend
	}
	return ""
}

func (m *DriverWalletTransaction) GetBalanceVersion() uint64 {
	if m != nil && m.BalanceVersion != nil {
		return *m.BalanceVersion
	}
	return 0
}

func (m *DriverWalletTransaction) GetRelatedOrder() uint64 {
	if m != nil && m.RelatedOrder != nil {
		return *m.RelatedOrder
	}
	return 0
}

//骑手申请单(充值/提现/手动调整)
type DriverWalletOrder struct {
	//基础信息
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	//relation
	DriverId    *uint64                   `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	WalletId    *uint64                   `protobuf:"varint,3,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	DriverName  *string                   `protobuf:"bytes,4,opt,name=driver_name,json=driverName" json:"driver_name,omitempty"`
	DriverPhone *string                   `protobuf:"bytes,5,opt,name=driver_phone,json=driverPhone" json:"driver_phone,omitempty"`
	Type        *DriverWalletOrder_Type   `protobuf:"varint,6,opt,name=type,enum=foody_base.DriverWalletOrder_Type" json:"type,omitempty"`
	Status      *DriverWalletOrder_Status `protobuf:"varint,7,opt,name=status,enum=foody_base.DriverWalletOrder_Status" json:"status,omitempty"`
	//业务信息
	Amount        *uint64                         `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	Operator      *string                         `protobuf:"bytes,9,opt,name=operator" json:"operator,omitempty"`
	AdjustReason  *DriverWalletOrder_AdjustReason `protobuf:"varint,10,opt,name=adjust_reason,json=adjustReason,enum=foody_base.DriverWalletOrder_AdjustReason" json:"adjust_reason,omitempty"`
	CancelReason  *DriverWalletOrder_CancelReason `protobuf:"varint,11,opt,name=cancel_reason,json=cancelReason,enum=foody_base.DriverWalletOrder_CancelReason" json:"cancel_reason,omitempty"`
	Remark        *string                         `protobuf:"bytes,12,opt,name=remark" json:"remark,omitempty"`
	EscrowCerts   []*Certificate                  `protobuf:"bytes,13,rep,name=escrow_certs,json=escrowCerts" json:"escrow_certs,omitempty"`
	EscrowNo      *string                         `protobuf:"bytes,14,opt,name=escrow_no,json=escrowNo" json:"escrow_no,omitempty"`
	BankAccountNo *string                         `protobuf:"bytes,15,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankName      *string                         `protobuf:"bytes,16,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	//支付信息
	TransactionRef       *uint64        `protobuf:"varint,17,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	PaymentMethod        *PaymentMethod `protobuf:"varint,18,opt,name=payment_method,json=paymentMethod,enum=foody_base.PaymentMethod" json:"payment_method,omitempty"`
	PaymentChannelId     *uint64        `protobuf:"varint,19,opt,name=payment_channel_id,json=paymentChannelId" json:"payment_channel_id,omitempty"`
	PaymentChannelOption *string        `protobuf:"bytes,20,opt,name=payment_channel_option,json=paymentChannelOption" json:"payment_channel_option,omitempty"`
	PaymentLink          *string        `protobuf:"bytes,21,opt,name=payment_link,json=paymentLink" json:"payment_link,omitempty"`
	Currency             *string        `protobuf:"bytes,22,opt,name=currency" json:"currency,omitempty"`
	Region               *string        `protobuf:"bytes,23,opt,name=region" json:"region,omitempty"`
	//time
	InitialTime      *uint64     `protobuf:"varint,24,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	PaymentTime      *uint64     `protobuf:"varint,25,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	AdjustTime       *uint64     `protobuf:"varint,26,opt,name=adjust_time,json=adjustTime" json:"adjust_time,omitempty"`
	RejectTime       *uint64     `protobuf:"varint,27,opt,name=reject_time,json=rejectTime" json:"reject_time,omitempty"`
	CompleteTime     *uint64     `protobuf:"varint,28,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime       *uint64     `protobuf:"varint,29,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CreateTime       *uint64     `protobuf:"varint,30,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime       *uint64     `protobuf:"varint,31,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	PayoutMode       *PayoutMode `protobuf:"varint,32,opt,name=payout_mode,json=payoutMode,enum=foody_base.PayoutMode" json:"payout_mode,omitempty"`
	PaymentErrorCode *string     `protobuf:"bytes,33,opt,name=payment_error_code,json=paymentErrorCode" json:"payment_error_code,omitempty"`
	// 审核信息
	AuditResult          *DriverWalletOrder_AuditResult  `protobuf:"varint,34,opt,name=audit_result,json=auditResult,enum=foody_base.DriverWalletOrder_AuditResult" json:"audit_result,omitempty"`
	AuditRemark          *string                         `protobuf:"bytes,35,opt,name=audit_remark,json=auditRemark" json:"audit_remark,omitempty"`
	AuditOperator        *string                         `protobuf:"bytes,36,opt,name=audit_operator,json=auditOperator" json:"audit_operator,omitempty"`
	AuditTime            *uint64                         `protobuf:"varint,37,opt,name=audit_time,json=auditTime" json:"audit_time,omitempty"`
	CancelSource         *DriverWalletOrder_CancelSource `protobuf:"varint,38,opt,name=cancel_source,json=cancelSource,enum=foody_base.DriverWalletOrder_CancelSource" json:"cancel_source,omitempty"`
	EstimateApproveTime  *uint64                         `protobuf:"varint,39,opt,name=estimate_approve_time,json=estimateApproveTime" json:"estimate_approve_time,omitempty"`
	PayoutNotifyTime     *uint64                         `protobuf:"varint,40,opt,name=payout_notify_time,json=payoutNotifyTime" json:"payout_notify_time,omitempty"`
	BankAccountHolder    *string                         `protobuf:"bytes,41,opt,name=bank_account_holder,json=bankAccountHolder" json:"bank_account_holder,omitempty"`
	ShopeeUserId         *uint64                         `protobuf:"varint,42,opt,name=shopee_user_id,json=shopeeUserId" json:"shopee_user_id,omitempty"`
	WithdrawalChannel    *WithdrawalChannelType          `protobuf:"varint,43,opt,name=withdrawal_channel,json=withdrawalChannel,enum=foody_base.WithdrawalChannelType" json:"withdrawal_channel,omitempty"`
	ShopeeUserName       *string                         `protobuf:"bytes,44,opt,name=shopee_user_name,json=shopeeUserName" json:"shopee_user_name,omitempty"`
	ServiceType          *ServiceType                    `protobuf:"varint,45,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DriverWalletOrder) Reset()         { *m = DriverWalletOrder{} }
func (m *DriverWalletOrder) String() string { return proto.CompactTextString(m) }
func (*DriverWalletOrder) ProtoMessage()    {}
func (*DriverWalletOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{40}
}
func (m *DriverWalletOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverWalletOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverWalletOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverWalletOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverWalletOrder.Merge(m, src)
}
func (m *DriverWalletOrder) XXX_Size() int {
	return m.Size()
}
func (m *DriverWalletOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverWalletOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DriverWalletOrder proto.InternalMessageInfo

func (m *DriverWalletOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverWalletOrder) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverWalletOrder) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *DriverWalletOrder) GetDriverName() string {
	if m != nil && m.DriverName != nil {
		return *m.DriverName
	}
	return ""
}

func (m *DriverWalletOrder) GetDriverPhone() string {
	if m != nil && m.DriverPhone != nil {
		return *m.DriverPhone
	}
	return ""
}

func (m *DriverWalletOrder) GetType() DriverWalletOrder_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DriverWalletOrder_TYPE_NONE
}

func (m *DriverWalletOrder) GetStatus() DriverWalletOrder_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DriverWalletOrder_CREATED
}

func (m *DriverWalletOrder) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DriverWalletOrder) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *DriverWalletOrder) GetAdjustReason() DriverWalletOrder_AdjustReason {
	if m != nil && m.AdjustReason != nil {
		return *m.AdjustReason
	}
	return DriverWalletOrder_REASON_OTHERS
}

func (m *DriverWalletOrder) GetCancelReason() DriverWalletOrder_CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return DriverWalletOrder_OTHERS
}

func (m *DriverWalletOrder) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *DriverWalletOrder) GetEscrowCerts() []*Certificate {
	if m != nil {
		return m.EscrowCerts
	}
	return nil
}

func (m *DriverWalletOrder) GetEscrowNo() string {
	if m != nil && m.EscrowNo != nil {
		return *m.EscrowNo
	}
	return ""
}

func (m *DriverWalletOrder) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *DriverWalletOrder) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *DriverWalletOrder) GetTransactionRef() uint64 {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return 0
}

func (m *DriverWalletOrder) GetPaymentMethod() PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *DriverWalletOrder) GetPaymentChannelId() uint64 {
	if m != nil && m.PaymentChannelId != nil {
		return *m.PaymentChannelId
	}
	return 0
}

func (m *DriverWalletOrder) GetPaymentChannelOption() string {
	if m != nil && m.PaymentChannelOption != nil {
		return *m.PaymentChannelOption
	}
	return ""
}

func (m *DriverWalletOrder) GetPaymentLink() string {
	if m != nil && m.PaymentLink != nil {
		return *m.PaymentLink
	}
	return ""
}

func (m *DriverWalletOrder) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *DriverWalletOrder) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *DriverWalletOrder) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *DriverWalletOrder) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *DriverWalletOrder) GetAdjustTime() uint64 {
	if m != nil && m.AdjustTime != nil {
		return *m.AdjustTime
	}
	return 0
}

func (m *DriverWalletOrder) GetRejectTime() uint64 {
	if m != nil && m.RejectTime != nil {
		return *m.RejectTime
	}
	return 0
}

func (m *DriverWalletOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *DriverWalletOrder) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *DriverWalletOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverWalletOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverWalletOrder) GetPayoutMode() PayoutMode {
	if m != nil && m.PayoutMode != nil {
		return *m.PayoutMode
	}
	return PayoutMode_PAYOUT_NONE
}

func (m *DriverWalletOrder) GetPaymentErrorCode() string {
	if m != nil && m.PaymentErrorCode != nil {
		return *m.PaymentErrorCode
	}
	return ""
}

func (m *DriverWalletOrder) GetAuditResult() DriverWalletOrder_AuditResult {
	if m != nil && m.AuditResult != nil {
		return *m.AuditResult
	}
	return DriverWalletOrder_AUDIT_RESULT_NONE
}

func (m *DriverWalletOrder) GetAuditRemark() string {
	if m != nil && m.AuditRemark != nil {
		return *m.AuditRemark
	}
	return ""
}

func (m *DriverWalletOrder) GetAuditOperator() string {
	if m != nil && m.AuditOperator != nil {
		return *m.AuditOperator
	}
	return ""
}

func (m *DriverWalletOrder) GetAuditTime() uint64 {
	if m != nil && m.AuditTime != nil {
		return *m.AuditTime
	}
	return 0
}

func (m *DriverWalletOrder) GetCancelSource() DriverWalletOrder_CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return DriverWalletOrder_CANCEL_OTHERS
}

func (m *DriverWalletOrder) GetEstimateApproveTime() uint64 {
	if m != nil && m.EstimateApproveTime != nil {
		return *m.EstimateApproveTime
	}
	return 0
}

func (m *DriverWalletOrder) GetPayoutNotifyTime() uint64 {
	if m != nil && m.PayoutNotifyTime != nil {
		return *m.PayoutNotifyTime
	}
	return 0
}

func (m *DriverWalletOrder) GetBankAccountHolder() string {
	if m != nil && m.BankAccountHolder != nil {
		return *m.BankAccountHolder
	}
	return ""
}

func (m *DriverWalletOrder) GetShopeeUserId() uint64 {
	if m != nil && m.ShopeeUserId != nil {
		return *m.ShopeeUserId
	}
	return 0
}

func (m *DriverWalletOrder) GetWithdrawalChannel() WithdrawalChannelType {
	if m != nil && m.WithdrawalChannel != nil {
		return *m.WithdrawalChannel
	}
	return WithdrawalChannelType_BANK_CHANNEL
}

func (m *DriverWalletOrder) GetShopeeUserName() string {
	if m != nil && m.ShopeeUserName != nil {
		return *m.ShopeeUserName
	}
	return ""
}

func (m *DriverWalletOrder) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

type StoreSettlement struct {
	Id               *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SettlementSource *SettlementSource `protobuf:"varint,2,opt,name=settlement_source,json=settlementSource,enum=foody_base.SettlementSource" json:"settlement_source,omitempty"`
	SettlementMode   *SettlementMode   `protobuf:"varint,3,opt,name=settlement_mode,json=settlementMode,enum=foody_base.SettlementMode" json:"settlement_mode,omitempty"`
	SettlementStatus *SettlementStatus `protobuf:"varint,4,opt,name=settlement_status,json=settlementStatus,enum=foody_base.SettlementStatus" json:"settlement_status,omitempty"`
	//费用相关
	Amount              *StoreSettlement_Amount       `protobuf:"bytes,5,opt,name=amount" json:"amount,omitempty"`
	IsFromCompensation  *bool                         `protobuf:"varint,6,opt,name=is_from_compensation,json=isFromCompensation" json:"is_from_compensation,omitempty"`
	SettlementErrorCode *SettlementErrorCode          `protobuf:"varint,7,opt,name=settlement_error_code,json=settlementErrorCode,enum=foody_base.SettlementErrorCode" json:"settlement_error_code,omitempty"`
	ClearingFlag        *StoreSettlement_ClearingFlag `protobuf:"bytes,8,opt,name=clearing_flag,json=clearingFlag" json:"clearing_flag,omitempty"`
	//关联id
	TransactionRef *string        `protobuf:"bytes,10,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	ReferenceType  *ReferenceType `protobuf:"varint,11,opt,name=reference_type,json=referenceType,enum=foody_base.ReferenceType" json:"reference_type,omitempty"`
	ReferenceId    *uint64        `protobuf:"varint,12,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	//TH字段
	WalletSettlementId *uint64             `protobuf:"varint,13,opt,name=wallet_settlement_id,json=walletSettlementId" json:"wallet_settlement_id,omitempty"`
	SettlementDetailId *uint64             `protobuf:"varint,14,opt,name=settlement_detail_id,json=settlementDetailId" json:"settlement_detail_id,omitempty"`
	WalletId           *uint64             `protobuf:"varint,15,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	WalletType         *MerchantWalletType `protobuf:"varint,16,opt,name=wallet_type,json=walletType,enum=foody_base.MerchantWalletType" json:"wallet_type,omitempty"`
	//门店相关
	StoreId             *uint64         `protobuf:"varint,20,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	MerchantId          *uint64         `protobuf:"varint,21,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	StoreName           *string         `protobuf:"bytes,22,opt,name=store_name,json=storeName" json:"store_name,omitempty"`
	StoreSettlementMode *SettlementMode `protobuf:"varint,23,opt,name=store_settlement_mode,json=storeSettlementMode,enum=foody_base.SettlementMode" json:"store_settlement_mode,omitempty"`
	//运营操作
	Certificates []*Certificate `protobuf:"bytes,30,rep,name=certificates" json:"certificates,omitempty"`
	Remark       *string        `protobuf:"bytes,31,opt,name=remark" json:"remark,omitempty"`
	CancelReason *CancelReason  `protobuf:"varint,32,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	//时间戳
	CancelTime           *uint64  `protobuf:"varint,40,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CompleteTime         *uint64  `protobuf:"varint,41,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,42,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,43,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ProcessingTime       *uint64  `protobuf:"varint,44,opt,name=processing_time,json=processingTime" json:"processing_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreSettlement) Reset()         { *m = StoreSettlement{} }
func (m *StoreSettlement) String() string { return proto.CompactTextString(m) }
func (*StoreSettlement) ProtoMessage()    {}
func (*StoreSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{41}
}
func (m *StoreSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSettlement.Merge(m, src)
}
func (m *StoreSettlement) XXX_Size() int {
	return m.Size()
}
func (m *StoreSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSettlement proto.InternalMessageInfo

func (m *StoreSettlement) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StoreSettlement) GetSettlementSource() SettlementSource {
	if m != nil && m.SettlementSource != nil {
		return *m.SettlementSource
	}
	return SettlementSource_SOURCE_ALL
}

func (m *StoreSettlement) GetSettlementMode() SettlementMode {
	if m != nil && m.SettlementMode != nil {
		return *m.SettlementMode
	}
	return SettlementMode_MODE_WALLET
}

func (m *StoreSettlement) GetSettlementStatus() SettlementStatus {
	if m != nil && m.SettlementStatus != nil {
		return *m.SettlementStatus
	}
	return SettlementStatus_SETTLEMENT_CREATED
}

func (m *StoreSettlement) GetAmount() *StoreSettlement_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *StoreSettlement) GetIsFromCompensation() bool {
	if m != nil && m.IsFromCompensation != nil {
		return *m.IsFromCompensation
	}
	return false
}

func (m *StoreSettlement) GetSettlementErrorCode() SettlementErrorCode {
	if m != nil && m.SettlementErrorCode != nil {
		return *m.SettlementErrorCode
	}
	return SettlementErrorCode_SSP_SERVER_ERROR
}

func (m *StoreSettlement) GetClearingFlag() *StoreSettlement_ClearingFlag {
	if m != nil {
		return m.ClearingFlag
	}
	return nil
}

func (m *StoreSettlement) GetTransactionRef() string {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return ""
}

func (m *StoreSettlement) GetReferenceType() ReferenceType {
	if m != nil && m.ReferenceType != nil {
		return *m.ReferenceType
	}
	return ReferenceType_RELATED_SETTLEMENT
}

func (m *StoreSettlement) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *StoreSettlement) GetWalletSettlementId() uint64 {
	if m != nil && m.WalletSettlementId != nil {
		return *m.WalletSettlementId
	}
	return 0
}

func (m *StoreSettlement) GetSettlementDetailId() uint64 {
	if m != nil && m.SettlementDetailId != nil {
		return *m.SettlementDetailId
	}
	return 0
}

func (m *StoreSettlement) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *StoreSettlement) GetWalletType() MerchantWalletType {
	if m != nil && m.WalletType != nil {
		return *m.WalletType
	}
	return MerchantWalletType_UNKNOWN_WALLET
}

func (m *StoreSettlement) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *StoreSettlement) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *StoreSettlement) GetStoreName() string {
	if m != nil && m.StoreName != nil {
		return *m.StoreName
	}
	return ""
}

func (m *StoreSettlement) GetStoreSettlementMode() SettlementMode {
	if m != nil && m.StoreSettlementMode != nil {
		return *m.StoreSettlementMode
	}
	return SettlementMode_MODE_WALLET
}

func (m *StoreSettlement) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *StoreSettlement) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *StoreSettlement) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *StoreSettlement) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *StoreSettlement) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *StoreSettlement) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *StoreSettlement) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *StoreSettlement) GetProcessingTime() uint64 {
	if m != nil && m.ProcessingTime != nil {
		return *m.ProcessingTime
	}
	return 0
}

type StoreSettlement_Amount struct {
	ItemSubtotal   *uint64 `protobuf:"varint,1,opt,name=item_subtotal,json=itemSubtotal" json:"item_subtotal,omitempty"`
	Amount         *int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Commission     *uint64 `protobuf:"varint,3,opt,name=commission" json:"commission,omitempty"`
	CommissionRate *uint64 `protobuf:"varint,4,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	StoreSubsidy   *uint64 `protobuf:"varint,5,opt,name=store_subsidy,json=storeSubsidy" json:"store_subsidy,omitempty"`
	TaxRate        *uint64 `protobuf:"varint,6,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	// TH/MY 增加
	Vat                       *Vat          `protobuf:"varint,7,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	VatRate                   *uint64       `protobuf:"varint,8,opt,name=vat_rate,json=vatRate" json:"vat_rate,omitempty"`
	VatAmount                 *uint64       `protobuf:"varint,9,opt,name=vat_amount,json=vatAmount" json:"vat_amount,omitempty"`
	Wht                       *Wht          `protobuf:"varint,10,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	WhtRate                   *uint64       `protobuf:"varint,11,opt,name=wht_rate,json=whtRate" json:"wht_rate,omitempty"`
	WhtAmount                 *uint64       `protobuf:"varint,12,opt,name=wht_amount,json=whtAmount" json:"wht_amount,omitempty"`
	VatCalculate              *VatCalculate `protobuf:"varint,13,opt,name=vat_calculate,json=vatCalculate,enum=foody_base.VatCalculate" json:"vat_calculate,omitempty"`
	ItemVoucherSubsidy        *uint64       `protobuf:"varint,14,opt,name=item_voucher_subsidy,json=itemVoucherSubsidy" json:"item_voucher_subsidy,omitempty"`
	ShippingFeeVoucherSubsidy *uint64       `protobuf:"varint,15,opt,name=shipping_fee_voucher_subsidy,json=shippingFeeVoucherSubsidy" json:"shipping_fee_voucher_subsidy,omitempty"`
	// MY 增加
	DeliveryCost              *uint64  `protobuf:"varint,16,opt,name=delivery_cost,json=deliveryCost" json:"delivery_cost,omitempty"`
	ItemDiscountsSubsidy      *uint64  `protobuf:"varint,17,opt,name=item_discounts_subsidy,json=itemDiscountsSubsidy" json:"item_discounts_subsidy,omitempty"`
	FlashsaleDiscountsSubsidy *uint64  `protobuf:"varint,18,opt,name=flashsale_discounts_subsidy,json=flashsaleDiscountsSubsidy" json:"flashsale_discounts_subsidy,omitempty"`
	SurchargeFee              *uint64  `protobuf:"varint,19,opt,name=surcharge_fee,json=surchargeFee" json:"surcharge_fee,omitempty"`
	SurchargeRate             *uint64  `protobuf:"varint,20,opt,name=surcharge_rate,json=surchargeRate" json:"surcharge_rate,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *StoreSettlement_Amount) Reset()         { *m = StoreSettlement_Amount{} }
func (m *StoreSettlement_Amount) String() string { return proto.CompactTextString(m) }
func (*StoreSettlement_Amount) ProtoMessage()    {}
func (*StoreSettlement_Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{41, 0}
}
func (m *StoreSettlement_Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSettlement_Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSettlement_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreSettlement_Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSettlement_Amount.Merge(m, src)
}
func (m *StoreSettlement_Amount) XXX_Size() int {
	return m.Size()
}
func (m *StoreSettlement_Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSettlement_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSettlement_Amount proto.InternalMessageInfo

func (m *StoreSettlement_Amount) GetItemSubtotal() uint64 {
	if m != nil && m.ItemSubtotal != nil {
		return *m.ItemSubtotal
	}
	return 0
}

func (m *StoreSettlement_Amount) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *StoreSettlement_Amount) GetCommission() uint64 {
	if m != nil && m.Commission != nil {
		return *m.Commission
	}
	return 0
}

func (m *StoreSettlement_Amount) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

func (m *StoreSettlement_Amount) GetStoreSubsidy() uint64 {
	if m != nil && m.StoreSubsidy != nil {
		return *m.StoreSubsidy
	}
	return 0
}

func (m *StoreSettlement_Amount) GetTaxRate() uint64 {
	if m != nil && m.TaxRate != nil {
		return *m.TaxRate
	}
	return 0
}

func (m *StoreSettlement_Amount) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *StoreSettlement_Amount) GetVatRate() uint64 {
	if m != nil && m.VatRate != nil {
		return *m.VatRate
	}
	return 0
}

func (m *StoreSettlement_Amount) GetVatAmount() uint64 {
	if m != nil && m.VatAmount != nil {
		return *m.VatAmount
	}
	return 0
}

func (m *StoreSettlement_Amount) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *StoreSettlement_Amount) GetWhtRate() uint64 {
	if m != nil && m.WhtRate != nil {
		return *m.WhtRate
	}
	return 0
}

func (m *StoreSettlement_Amount) GetWhtAmount() uint64 {
	if m != nil && m.WhtAmount != nil {
		return *m.WhtAmount
	}
	return 0
}

func (m *StoreSettlement_Amount) GetVatCalculate() VatCalculate {
	if m != nil && m.VatCalculate != nil {
		return *m.VatCalculate
	}
	return VatCalculate_VAT_CALCULATE_UNKNOWN
}

func (m *StoreSettlement_Amount) GetItemVoucherSubsidy() uint64 {
	if m != nil && m.ItemVoucherSubsidy != nil {
		return *m.ItemVoucherSubsidy
	}
	return 0
}

func (m *StoreSettlement_Amount) GetShippingFeeVoucherSubsidy() uint64 {
	if m != nil && m.ShippingFeeVoucherSubsidy != nil {
		return *m.ShippingFeeVoucherSubsidy
	}
	return 0
}

func (m *StoreSettlement_Amount) GetDeliveryCost() uint64 {
	if m != nil && m.DeliveryCost != nil {
		return *m.DeliveryCost
	}
	return 0
}

func (m *StoreSettlement_Amount) GetItemDiscountsSubsidy() uint64 {
	if m != nil && m.ItemDiscountsSubsidy != nil {
		return *m.ItemDiscountsSubsidy
	}
	return 0
}

func (m *StoreSettlement_Amount) GetFlashsaleDiscountsSubsidy() uint64 {
	if m != nil && m.FlashsaleDiscountsSubsidy != nil {
		return *m.FlashsaleDiscountsSubsidy
	}
	return 0
}

func (m *StoreSettlement_Amount) GetSurchargeFee() uint64 {
	if m != nil && m.SurchargeFee != nil {
		return *m.SurchargeFee
	}
	return 0
}

func (m *StoreSettlement_Amount) GetSurchargeRate() uint64 {
	if m != nil && m.SurchargeRate != nil {
		return *m.SurchargeRate
	}
	return 0
}

type StoreSettlement_ClearingFlag struct {
	IsUseMerchantWalletOriginal *bool    `protobuf:"varint,1,opt,name=is_use_merchant_wallet_original,json=isUseMerchantWalletOriginal" json:"is_use_merchant_wallet_original,omitempty"`
	IsUseMerchantWallet         *bool    `protobuf:"varint,2,opt,name=is_use_merchant_wallet,json=isUseMerchantWallet" json:"is_use_merchant_wallet,omitempty"`
	IsMerchantDelivery          *bool    `protobuf:"varint,3,opt,name=is_merchant_delivery,json=isMerchantDelivery" json:"is_merchant_delivery,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *StoreSettlement_ClearingFlag) Reset()         { *m = StoreSettlement_ClearingFlag{} }
func (m *StoreSettlement_ClearingFlag) String() string { return proto.CompactTextString(m) }
func (*StoreSettlement_ClearingFlag) ProtoMessage()    {}
func (*StoreSettlement_ClearingFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{41, 1}
}
func (m *StoreSettlement_ClearingFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSettlement_ClearingFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSettlement_ClearingFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreSettlement_ClearingFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSettlement_ClearingFlag.Merge(m, src)
}
func (m *StoreSettlement_ClearingFlag) XXX_Size() int {
	return m.Size()
}
func (m *StoreSettlement_ClearingFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSettlement_ClearingFlag.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSettlement_ClearingFlag proto.InternalMessageInfo

func (m *StoreSettlement_ClearingFlag) GetIsUseMerchantWalletOriginal() bool {
	if m != nil && m.IsUseMerchantWalletOriginal != nil {
		return *m.IsUseMerchantWalletOriginal
	}
	return false
}

func (m *StoreSettlement_ClearingFlag) GetIsUseMerchantWallet() bool {
	if m != nil && m.IsUseMerchantWallet != nil {
		return *m.IsUseMerchantWallet
	}
	return false
}

func (m *StoreSettlement_ClearingFlag) GetIsMerchantDelivery() bool {
	if m != nil && m.IsMerchantDelivery != nil {
		return *m.IsMerchantDelivery
	}
	return false
}

type DriverSettlement struct {
	Id                   *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SettlementMode       *SettlementMode   `protobuf:"varint,2,opt,name=settlement_mode,json=settlementMode,enum=foody_base.SettlementMode" json:"settlement_mode,omitempty"`
	SettlementSource     *SettlementSource `protobuf:"varint,3,opt,name=settlement_source,json=settlementSource,enum=foody_base.SettlementSource" json:"settlement_source,omitempty"`
	SettlementStatus     *SettlementStatus `protobuf:"varint,4,opt,name=settlement_status,json=settlementStatus,enum=foody_base.SettlementStatus" json:"settlement_status,omitempty"`
	Amount               *int64            `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	DriverId             *uint64           `protobuf:"varint,6,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	WalletId             *uint64           `protobuf:"varint,7,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	ReferenceId          *uint64           `protobuf:"varint,8,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	ReferenceType        *ReferenceType    `protobuf:"varint,9,opt,name=reference_type,json=referenceType,enum=foody_base.ReferenceType" json:"reference_type,omitempty"`
	OrderAmount          *Order_Amount     `protobuf:"bytes,10,opt,name=order_amount,json=orderAmount" json:"order_amount,omitempty"`
	DeliveryAmount       *DeliveryAmount   `protobuf:"bytes,11,opt,name=delivery_amount,json=deliveryAmount" json:"delivery_amount,omitempty"`
	Remark               *string           `protobuf:"bytes,12,opt,name=remark" json:"remark,omitempty"`
	Certificates         []*Certificate    `protobuf:"bytes,13,rep,name=certificates" json:"certificates,omitempty"`
	CancelReason         *CancelReason     `protobuf:"varint,14,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	PaymentId            *uint64           `protobuf:"varint,15,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	CreateTime           *uint64           `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64           `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CompleteTime         *uint64           `protobuf:"varint,18,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime           *uint64           `protobuf:"varint,19,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	IsFromCompensation   *bool             `protobuf:"varint,20,opt,name=is_from_compensation,json=isFromCompensation" json:"is_from_compensation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DriverSettlement) Reset()         { *m = DriverSettlement{} }
func (m *DriverSettlement) String() string { return proto.CompactTextString(m) }
func (*DriverSettlement) ProtoMessage()    {}
func (*DriverSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{42}
}
func (m *DriverSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverSettlement.Merge(m, src)
}
func (m *DriverSettlement) XXX_Size() int {
	return m.Size()
}
func (m *DriverSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_DriverSettlement proto.InternalMessageInfo

func (m *DriverSettlement) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverSettlement) GetSettlementMode() SettlementMode {
	if m != nil && m.SettlementMode != nil {
		return *m.SettlementMode
	}
	return SettlementMode_MODE_WALLET
}

func (m *DriverSettlement) GetSettlementSource() SettlementSource {
	if m != nil && m.SettlementSource != nil {
		return *m.SettlementSource
	}
	return SettlementSource_SOURCE_ALL
}

func (m *DriverSettlement) GetSettlementStatus() SettlementStatus {
	if m != nil && m.SettlementStatus != nil {
		return *m.SettlementStatus
	}
	return SettlementStatus_SETTLEMENT_CREATED
}

func (m *DriverSettlement) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DriverSettlement) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverSettlement) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *DriverSettlement) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *DriverSettlement) GetReferenceType() ReferenceType {
	if m != nil && m.ReferenceType != nil {
		return *m.ReferenceType
	}
	return ReferenceType_RELATED_SETTLEMENT
}

func (m *DriverSettlement) GetOrderAmount() *Order_Amount {
	if m != nil {
		return m.OrderAmount
	}
	return nil
}

func (m *DriverSettlement) GetDeliveryAmount() *DeliveryAmount {
	if m != nil {
		return m.DeliveryAmount
	}
	return nil
}

func (m *DriverSettlement) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *DriverSettlement) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *DriverSettlement) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *DriverSettlement) GetPaymentId() uint64 {
	if m != nil && m.PaymentId != nil {
		return *m.PaymentId
	}
	return 0
}

func (m *DriverSettlement) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverSettlement) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverSettlement) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *DriverSettlement) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *DriverSettlement) GetIsFromCompensation() bool {
	if m != nil && m.IsFromCompensation != nil {
		return *m.IsFromCompensation
	}
	return false
}

type SPXDriverSettlement struct {
	Id                   *uint64                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ServiceType          *ServiceType                `protobuf:"varint,2,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	SettlementType       *SettlementType             `protobuf:"varint,3,opt,name=settlement_type,json=settlementType,enum=foody_base.SettlementType" json:"settlement_type,omitempty"`
	SettlementStatus     *SettlementStatus           `protobuf:"varint,4,opt,name=settlement_status,json=settlementStatus,enum=foody_base.SettlementStatus" json:"settlement_status,omitempty"`
	DriverId             *uint64                     `protobuf:"varint,5,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	WalletId             *uint64                     `protobuf:"varint,6,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	ReferenceId          *uint64                     `protobuf:"varint,7,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	ReferenceType        *ReferenceType              `protobuf:"varint,8,opt,name=reference_type,json=referenceType,enum=foody_base.ReferenceType" json:"reference_type,omitempty"`
	PaymentId            *uint64                     `protobuf:"varint,9,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	Amount               *SPXDriverSettlement_Amount `protobuf:"bytes,10,opt,name=amount" json:"amount,omitempty"`
	Remark               *string                     `protobuf:"bytes,11,opt,name=remark" json:"remark,omitempty"`
	Certificates         []*Certificate              `protobuf:"bytes,12,rep,name=certificates" json:"certificates,omitempty"`
	CancelReason         *CancelReason               `protobuf:"varint,13,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	CreateTime           *uint64                     `protobuf:"varint,14,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                     `protobuf:"varint,15,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CompleteTime         *uint64                     `protobuf:"varint,16,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime           *uint64                     `protobuf:"varint,17,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	IsFromCompensation   *bool                       `protobuf:"varint,18,opt,name=is_from_compensation,json=isFromCompensation" json:"is_from_compensation,omitempty"`
	Extend               *string                     `protobuf:"bytes,19,opt,name=extend" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SPXDriverSettlement) Reset()         { *m = SPXDriverSettlement{} }
func (m *SPXDriverSettlement) String() string { return proto.CompactTextString(m) }
func (*SPXDriverSettlement) ProtoMessage()    {}
func (*SPXDriverSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{43}
}
func (m *SPXDriverSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXDriverSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXDriverSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXDriverSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXDriverSettlement.Merge(m, src)
}
func (m *SPXDriverSettlement) XXX_Size() int {
	return m.Size()
}
func (m *SPXDriverSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXDriverSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_SPXDriverSettlement proto.InternalMessageInfo

func (m *SPXDriverSettlement) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXDriverSettlement) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXDriverSettlement) GetSettlementType() SettlementType {
	if m != nil && m.SettlementType != nil {
		return *m.SettlementType
	}
	return SettlementType_TYPE_SHIPPING_FEE
}

func (m *SPXDriverSettlement) GetSettlementStatus() SettlementStatus {
	if m != nil && m.SettlementStatus != nil {
		return *m.SettlementStatus
	}
	return SettlementStatus_SETTLEMENT_CREATED
}

func (m *SPXDriverSettlement) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *SPXDriverSettlement) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *SPXDriverSettlement) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *SPXDriverSettlement) GetReferenceType() ReferenceType {
	if m != nil && m.ReferenceType != nil {
		return *m.ReferenceType
	}
	return ReferenceType_RELATED_SETTLEMENT
}

func (m *SPXDriverSettlement) GetPaymentId() uint64 {
	if m != nil && m.PaymentId != nil {
		return *m.PaymentId
	}
	return 0
}

func (m *SPXDriverSettlement) GetAmount() *SPXDriverSettlement_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *SPXDriverSettlement) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *SPXDriverSettlement) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *SPXDriverSettlement) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *SPXDriverSettlement) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXDriverSettlement) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SPXDriverSettlement) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *SPXDriverSettlement) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *SPXDriverSettlement) GetIsFromCompensation() bool {
	if m != nil && m.IsFromCompensation != nil {
		return *m.IsFromCompensation
	}
	return false
}

func (m *SPXDriverSettlement) GetExtend() string {
	if m != nil && m.Extend != nil {
		return *m.Extend
	}
	return ""
}

type SPXDriverSettlement_Amount struct {
	Amount               *int64   `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	CollectionAmount     *uint64  `protobuf:"varint,2,opt,name=collection_amount,json=collectionAmount" json:"collection_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPXDriverSettlement_Amount) Reset()         { *m = SPXDriverSettlement_Amount{} }
func (m *SPXDriverSettlement_Amount) String() string { return proto.CompactTextString(m) }
func (*SPXDriverSettlement_Amount) ProtoMessage()    {}
func (*SPXDriverSettlement_Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{43, 0}
}
func (m *SPXDriverSettlement_Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXDriverSettlement_Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXDriverSettlement_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXDriverSettlement_Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXDriverSettlement_Amount.Merge(m, src)
}
func (m *SPXDriverSettlement_Amount) XXX_Size() int {
	return m.Size()
}
func (m *SPXDriverSettlement_Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXDriverSettlement_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_SPXDriverSettlement_Amount proto.InternalMessageInfo

func (m *SPXDriverSettlement_Amount) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *SPXDriverSettlement_Amount) GetCollectionAmount() uint64 {
	if m != nil && m.CollectionAmount != nil {
		return *m.CollectionAmount
	}
	return 0
}

type ReturnOrder struct {
	Id                        *uint64                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId                   *uint64                   `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	OrderCancelSource         *CancelSource             `protobuf:"varint,3,opt,name=order_cancel_source,json=orderCancelSource,enum=foody_base.CancelSource" json:"order_cancel_source,omitempty"`                           // Deprecated: Do not use.
	OrderCancelResponsibility *Responsibility           `protobuf:"varint,4,opt,name=order_cancel_responsibility,json=orderCancelResponsibility,enum=foody_base.Responsibility" json:"order_cancel_responsibility,omitempty"` // Deprecated: Do not use.
	OrderCancelReason         *ReturnOrder_ReturnReason `protobuf:"varint,5,opt,name=order_cancel_reason,json=orderCancelReason,enum=foody_base.ReturnOrder_ReturnReason" json:"order_cancel_reason,omitempty"`               // Deprecated: Do not use.
	OrderCancelRemark         *string                   `protobuf:"bytes,6,opt,name=order_cancel_remark,json=orderCancelRemark" json:"order_cancel_remark,omitempty"`                                                         // Deprecated: Do not use.
	OrderCancelCerts          []*Certificate            `protobuf:"bytes,7,rep,name=order_cancel_certs,json=orderCancelCerts" json:"order_cancel_certs,omitempty"`
	OrderReferenceStatus      *OrderStatus              `protobuf:"varint,8,opt,name=order_reference_status,json=orderReferenceStatus,enum=foody_base.OrderStatus" json:"order_reference_status,omitempty"`
	RefundType                *ReturnOrder_RefundType   `protobuf:"varint,9,opt,name=refund_type,json=refundType,enum=foody_base.ReturnOrder_RefundType" json:"refund_type,omitempty"`
	RefundAmount              *uint64                   `protobuf:"varint,10,opt,name=refund_amount,json=refundAmount" json:"refund_amount,omitempty"`
	ReturnStatus              *ReturnOrder_ReturnStatus `protobuf:"varint,11,opt,name=return_status,json=returnStatus,enum=foody_base.ReturnOrder_ReturnStatus" json:"return_status,omitempty"`
	CancelSource              *CancelSource             `protobuf:"varint,12,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	InitiationTime            *uint64                   `protobuf:"varint,13,opt,name=initiation_time,json=initiationTime" json:"initiation_time,omitempty"`
	ApproveTime               *uint64                   `protobuf:"varint,14,opt,name=approve_time,json=approveTime" json:"approve_time,omitempty"`
	CompleteTime              *uint64                   `protobuf:"varint,15,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime                *uint64                   `protobuf:"varint,16,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CreateTime                *uint64                   `protobuf:"varint,17,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime                *uint64                   `protobuf:"varint,18,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ReturnType                *ReturnOrder_ReturnType   `protobuf:"varint,19,opt,name=return_type,json=returnType,enum=foody_base.ReturnOrder_ReturnType" json:"return_type,omitempty"`
	ReturnReason              *ReturnOrder_ReturnReason `protobuf:"varint,20,opt,name=return_reason,json=returnReason,enum=foody_base.ReturnOrder_ReturnReason" json:"return_reason,omitempty"`
	ReturnRemark              *string                   `protobuf:"bytes,21,opt,name=return_remark,json=returnRemark" json:"return_remark,omitempty"`
	Responsibility            *Responsibility           `protobuf:"varint,22,opt,name=responsibility,enum=foody_base.Responsibility" json:"responsibility,omitempty"`
	StoreChargebackAmount     *uint64                   `protobuf:"varint,23,opt,name=store_chargeback_amount,json=storeChargebackAmount" json:"store_chargeback_amount,omitempty"`
	Creator                   *string                   `protobuf:"bytes,24,opt,name=creator" json:"creator,omitempty"`
	BuyerId                   *uint64                   `protobuf:"varint,25,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	ReturnSource              *ReturnSource             `protobuf:"varint,26,opt,name=return_source,json=returnSource,enum=foody_base.ReturnSource" json:"return_source,omitempty"`
	Proposer                  *Proposer                 `protobuf:"varint,27,opt,name=proposer,enum=foody_base.Proposer" json:"proposer,omitempty"`
	OfflineRefundMethod       *Refund_RefundMethod      `protobuf:"varint,28,opt,name=offline_refund_method,json=offlineRefundMethod,enum=foody_base.Refund_RefundMethod" json:"offline_refund_method,omitempty"`
	StoreChargebackType       *StoreChargeBackType      `protobuf:"varint,29,opt,name=store_chargeback_type,json=storeChargebackType,enum=foody_base.StoreChargeBackType" json:"store_chargeback_type,omitempty"`
	StoreChargebackMethod     *StoreChargebackMethod    `protobuf:"varint,30,opt,name=store_chargeback_method,json=storeChargebackMethod,enum=foody_base.StoreChargebackMethod" json:"store_chargeback_method,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                  `json:"-"`
	XXX_unrecognized          []byte                    `json:"-"`
	XXX_sizecache             int32                     `json:"-"`
}

func (m *ReturnOrder) Reset()         { *m = ReturnOrder{} }
func (m *ReturnOrder) String() string { return proto.CompactTextString(m) }
func (*ReturnOrder) ProtoMessage()    {}
func (*ReturnOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{44}
}
func (m *ReturnOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnOrder.Merge(m, src)
}
func (m *ReturnOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReturnOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnOrder proto.InternalMessageInfo

func (m *ReturnOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ReturnOrder) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

// Deprecated: Do not use.
func (m *ReturnOrder) GetOrderCancelSource() CancelSource {
	if m != nil && m.OrderCancelSource != nil {
		return *m.OrderCancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

// Deprecated: Do not use.
func (m *ReturnOrder) GetOrderCancelResponsibility() Responsibility {
	if m != nil && m.OrderCancelResponsibility != nil {
		return *m.OrderCancelResponsibility
	}
	return Responsibility_UNKNOWN
}

// Deprecated: Do not use.
func (m *ReturnOrder) GetOrderCancelReason() ReturnOrder_ReturnReason {
	if m != nil && m.OrderCancelReason != nil {
		return *m.OrderCancelReason
	}
	return ReturnOrder_RESERVED
}

// Deprecated: Do not use.
func (m *ReturnOrder) GetOrderCancelRemark() string {
	if m != nil && m.OrderCancelRemark != nil {
		return *m.OrderCancelRemark
	}
	return ""
}

func (m *ReturnOrder) GetOrderCancelCerts() []*Certificate {
	if m != nil {
		return m.OrderCancelCerts
	}
	return nil
}

func (m *ReturnOrder) GetOrderReferenceStatus() OrderStatus {
	if m != nil && m.OrderReferenceStatus != nil {
		return *m.OrderReferenceStatus
	}
	return OrderStatus_ORDER_CREATED
}

func (m *ReturnOrder) GetRefundType() ReturnOrder_RefundType {
	if m != nil && m.RefundType != nil {
		return *m.RefundType
	}
	return ReturnOrder_REFUND_NONE
}

func (m *ReturnOrder) GetRefundAmount() uint64 {
	if m != nil && m.RefundAmount != nil {
		return *m.RefundAmount
	}
	return 0
}

func (m *ReturnOrder) GetReturnStatus() ReturnOrder_ReturnStatus {
	if m != nil && m.ReturnStatus != nil {
		return *m.ReturnStatus
	}
	return ReturnOrder_RETURN_CREATED
}

func (m *ReturnOrder) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *ReturnOrder) GetInitiationTime() uint64 {
	if m != nil && m.InitiationTime != nil {
		return *m.InitiationTime
	}
	return 0
}

func (m *ReturnOrder) GetApproveTime() uint64 {
	if m != nil && m.ApproveTime != nil {
		return *m.ApproveTime
	}
	return 0
}

func (m *ReturnOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *ReturnOrder) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ReturnOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ReturnOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ReturnOrder) GetReturnType() ReturnOrder_ReturnType {
	if m != nil && m.ReturnType != nil {
		return *m.ReturnType
	}
	return ReturnOrder_RETURN_TYPE_ORDER_CANCELLED
}

func (m *ReturnOrder) GetReturnReason() ReturnOrder_ReturnReason {
	if m != nil && m.ReturnReason != nil {
		return *m.ReturnReason
	}
	return ReturnOrder_RESERVED
}

func (m *ReturnOrder) GetReturnRemark() string {
	if m != nil && m.ReturnRemark != nil {
		return *m.ReturnRemark
	}
	return ""
}

func (m *ReturnOrder) GetResponsibility() Responsibility {
	if m != nil && m.Responsibility != nil {
		return *m.Responsibility
	}
	return Responsibility_UNKNOWN
}

func (m *ReturnOrder) GetStoreChargebackAmount() uint64 {
	if m != nil && m.StoreChargebackAmount != nil {
		return *m.StoreChargebackAmount
	}
	return 0
}

func (m *ReturnOrder) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *ReturnOrder) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *ReturnOrder) GetReturnSource() ReturnSource {
	if m != nil && m.ReturnSource != nil {
		return *m.ReturnSource
	}
	return ReturnSource_RETURN_BUYER
}

func (m *ReturnOrder) GetProposer() Proposer {
	if m != nil && m.Proposer != nil {
		return *m.Proposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *ReturnOrder) GetOfflineRefundMethod() Refund_RefundMethod {
	if m != nil && m.OfflineRefundMethod != nil {
		return *m.OfflineRefundMethod
	}
	return Refund_REFUND_METHOD_DEFAULT
}

func (m *ReturnOrder) GetStoreChargebackType() StoreChargeBackType {
	if m != nil && m.StoreChargebackType != nil {
		return *m.StoreChargebackType
	}
	return StoreChargeBackType_CHARGEBACK_TYPE_NONE
}

func (m *ReturnOrder) GetStoreChargebackMethod() StoreChargebackMethod {
	if m != nil && m.StoreChargebackMethod != nil {
		return *m.StoreChargebackMethod
	}
	return StoreChargebackMethod_CHARGEBACK_METHOD_DEFAULT
}

type Refund struct {
	Id                          *uint64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ReturnId                    *uint64                 `protobuf:"varint,2,opt,name=return_id,json=returnId" json:"return_id,omitempty"`
	OrderId                     *uint64                 `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	PaymentTransactionRef       *uint64                 `protobuf:"varint,4,opt,name=payment_transaction_ref,json=paymentTransactionRef" json:"payment_transaction_ref,omitempty"`
	RefundTransactionRef        *uint64                 `protobuf:"varint,5,opt,name=refund_transaction_ref,json=refundTransactionRef" json:"refund_transaction_ref,omitempty"`
	RefundAmount                *uint64                 `protobuf:"varint,6,opt,name=refund_amount,json=refundAmount" json:"refund_amount,omitempty"`
	RefundStatus                *RefundStatus           `protobuf:"varint,7,opt,name=refund_status,json=refundStatus,enum=foody_base.RefundStatus" json:"refund_status,omitempty"`
	InitiationTime              *uint64                 `protobuf:"varint,8,opt,name=initiation_time,json=initiationTime" json:"initiation_time,omitempty"`
	RefundTime                  *uint64                 `protobuf:"varint,9,opt,name=refund_time,json=refundTime" json:"refund_time,omitempty"`
	CreateTime                  *uint64                 `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime                  *uint64                 `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CheckoutId                  *uint64                 `protobuf:"varint,12,opt,name=checkout_id,json=checkoutId" json:"checkout_id,omitempty"`
	ReturnType                  *ReturnOrder_ReturnType `protobuf:"varint,13,opt,name=return_type,json=returnType,enum=foody_base.ReturnOrder_ReturnType" json:"return_type,omitempty"`
	Operator                    *string                 `protobuf:"bytes,14,opt,name=operator" json:"operator,omitempty"`
	RefundMethod                *Refund_RefundMethod    `protobuf:"varint,15,opt,name=refund_method,json=refundMethod,enum=foody_base.Refund_RefundMethod" json:"refund_method,omitempty"`
	OfflineRefundTransactionRef *string                 `protobuf:"bytes,16,opt,name=offline_refund_transaction_ref,json=offlineRefundTransactionRef" json:"offline_refund_transaction_ref,omitempty"`
	BuyerId                     *uint64                 `protobuf:"varint,17,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	RefundMode                  *Refund_RefundMode      `protobuf:"varint,18,opt,name=refund_mode,json=refundMode,enum=foody_base.Refund_RefundMode" json:"refund_mode,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                `json:"-"`
	XXX_unrecognized            []byte                  `json:"-"`
	XXX_sizecache               int32                   `json:"-"`
}

func (m *Refund) Reset()         { *m = Refund{} }
func (m *Refund) String() string { return proto.CompactTextString(m) }
func (*Refund) ProtoMessage()    {}
func (*Refund) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{45}
}
func (m *Refund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Refund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Refund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refund.Merge(m, src)
}
func (m *Refund) XXX_Size() int {
	return m.Size()
}
func (m *Refund) XXX_DiscardUnknown() {
	xxx_messageInfo_Refund.DiscardUnknown(m)
}

var xxx_messageInfo_Refund proto.InternalMessageInfo

func (m *Refund) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Refund) GetReturnId() uint64 {
	if m != nil && m.ReturnId != nil {
		return *m.ReturnId
	}
	return 0
}

func (m *Refund) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *Refund) GetPaymentTransactionRef() uint64 {
	if m != nil && m.PaymentTransactionRef != nil {
		return *m.PaymentTransactionRef
	}
	return 0
}

func (m *Refund) GetRefundTransactionRef() uint64 {
	if m != nil && m.RefundTransactionRef != nil {
		return *m.RefundTransactionRef
	}
	return 0
}

func (m *Refund) GetRefundAmount() uint64 {
	if m != nil && m.RefundAmount != nil {
		return *m.RefundAmount
	}
	return 0
}

func (m *Refund) GetRefundStatus() RefundStatus {
	if m != nil && m.RefundStatus != nil {
		return *m.RefundStatus
	}
	return RefundStatus_REFUND_CREATED
}

func (m *Refund) GetInitiationTime() uint64 {
	if m != nil && m.InitiationTime != nil {
		return *m.InitiationTime
	}
	return 0
}

func (m *Refund) GetRefundTime() uint64 {
	if m != nil && m.RefundTime != nil {
		return *m.RefundTime
	}
	return 0
}

func (m *Refund) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Refund) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Refund) GetCheckoutId() uint64 {
	if m != nil && m.CheckoutId != nil {
		return *m.CheckoutId
	}
	return 0
}

func (m *Refund) GetReturnType() ReturnOrder_ReturnType {
	if m != nil && m.ReturnType != nil {
		return *m.ReturnType
	}
	return ReturnOrder_RETURN_TYPE_ORDER_CANCELLED
}

func (m *Refund) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Refund) GetRefundMethod() Refund_RefundMethod {
	if m != nil && m.RefundMethod != nil {
		return *m.RefundMethod
	}
	return Refund_REFUND_METHOD_DEFAULT
}

func (m *Refund) GetOfflineRefundTransactionRef() string {
	if m != nil && m.OfflineRefundTransactionRef != nil {
		return *m.OfflineRefundTransactionRef
	}
	return ""
}

func (m *Refund) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *Refund) GetRefundMode() Refund_RefundMode {
	if m != nil && m.RefundMode != nil {
		return *m.RefundMode
	}
	return Refund_REFUND_MODE_AUTO
}

type UnionCity struct {
	State                *string  `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	City                 *string  `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	District             *string  `protobuf:"bytes,3,opt,name=district" json:"district,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnionCity) Reset()         { *m = UnionCity{} }
func (m *UnionCity) String() string { return proto.CompactTextString(m) }
func (*UnionCity) ProtoMessage()    {}
func (*UnionCity) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{46}
}
func (m *UnionCity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnionCity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnionCity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnionCity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnionCity.Merge(m, src)
}
func (m *UnionCity) XXX_Size() int {
	return m.Size()
}
func (m *UnionCity) XXX_DiscardUnknown() {
	xxx_messageInfo_UnionCity.DiscardUnknown(m)
}

var xxx_messageInfo_UnionCity proto.InternalMessageInfo

func (m *UnionCity) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *UnionCity) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *UnionCity) GetDistrict() string {
	if m != nil && m.District != nil {
		return *m.District
	}
	return ""
}

type MassChangeLog struct {
	Id                   *uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MassType             *MassType          `protobuf:"varint,2,opt,name=mass_type,json=massType,enum=foody_base.MassType" json:"mass_type,omitempty"`
	ChangeType           *ChangeType        `protobuf:"varint,3,opt,name=change_type,json=changeType,enum=foody_base.ChangeType" json:"change_type,omitempty"`
	Filename             *string            `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	FileHash             *string            `protobuf:"bytes,5,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Operator             *string            `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	OperateTime          *uint64            `protobuf:"varint,7,opt,name=operate_time,json=operateTime" json:"operate_time,omitempty"`
	CreateTime           *uint64            `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	OperateSource        *Source            `protobuf:"varint,9,opt,name=operate_source,json=operateSource,enum=foody_base.Source" json:"operate_source,omitempty"`
	Content              *string            `protobuf:"bytes,10,opt,name=content" json:"content,omitempty"`
	LogType              *MassChangeLogType `protobuf:"varint,11,opt,name=log_type,json=logType,enum=foody_base.MassChangeLogType" json:"log_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MassChangeLog) Reset()         { *m = MassChangeLog{} }
func (m *MassChangeLog) String() string { return proto.CompactTextString(m) }
func (*MassChangeLog) ProtoMessage()    {}
func (*MassChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{47}
}
func (m *MassChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MassChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MassChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MassChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MassChangeLog.Merge(m, src)
}
func (m *MassChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *MassChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_MassChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_MassChangeLog proto.InternalMessageInfo

func (m *MassChangeLog) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MassChangeLog) GetMassType() MassType {
	if m != nil && m.MassType != nil {
		return *m.MassType
	}
	return MassType_MASS_TYPE_STORE_BUSINESS_INFO
}

func (m *MassChangeLog) GetChangeType() ChangeType {
	if m != nil && m.ChangeType != nil {
		return *m.ChangeType
	}
	return ChangeType_CHANGE_TYPE_CREATE
}

func (m *MassChangeLog) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *MassChangeLog) GetFileHash() string {
	if m != nil && m.FileHash != nil {
		return *m.FileHash
	}
	return ""
}

func (m *MassChangeLog) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *MassChangeLog) GetOperateTime() uint64 {
	if m != nil && m.OperateTime != nil {
		return *m.OperateTime
	}
	return 0
}

func (m *MassChangeLog) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MassChangeLog) GetOperateSource() Source {
	if m != nil && m.OperateSource != nil {
		return *m.OperateSource
	}
	return Source_SOURCE_UNKOWN
}

func (m *MassChangeLog) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *MassChangeLog) GetLogType() MassChangeLogType {
	if m != nil && m.LogType != nil {
		return *m.LogType
	}
	return MassChangeLogType_MASS_CHANGE_LOG_FILE
}

type OrderDiscountCampaign struct {
	Id                   *uint64                                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CampaignName         *string                                `protobuf:"bytes,2,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	PromotionType        *OrderDiscountCampaign_PromotionType   `protobuf:"varint,3,opt,name=promotion_type,json=promotionType,enum=foody_base.OrderDiscountCampaign_PromotionType" json:"promotion_type,omitempty"`
	PromotionStatus      *OrderDiscountCampaign_PromotionStatus `protobuf:"varint,4,opt,name=promotion_status,json=promotionStatus,enum=foody_base.OrderDiscountCampaign_PromotionStatus" json:"promotion_status,omitempty"`
	DiscountType         *OrderDiscountCampaign_DiscountType    `protobuf:"varint,5,opt,name=discount_type,json=discountType,enum=foody_base.OrderDiscountCampaign_DiscountType" json:"discount_type,omitempty"`
	DiscountPercentage   *uint64                                `protobuf:"varint,6,opt,name=discount_percentage,json=discountPercentage" json:"discount_percentage,omitempty"`
	DiscountCap          *uint64                                `protobuf:"varint,7,opt,name=discount_cap,json=discountCap" json:"discount_cap,omitempty"`
	DiscountAmount       *uint64                                `protobuf:"varint,8,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	MinSpend             *uint64                                `protobuf:"varint,9,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	Stock                *uint64                                `protobuf:"varint,10,opt,name=stock" json:"stock,omitempty"`
	UsedQuantity         *uint64                                `protobuf:"varint,11,opt,name=used_quantity,json=usedQuantity" json:"used_quantity,omitempty"`
	LimitPerDay          *uint64                                `protobuf:"varint,12,opt,name=limit_per_day,json=limitPerDay" json:"limit_per_day,omitempty"`
	LimitPerUser         *uint64                                `protobuf:"varint,13,opt,name=limit_per_user,json=limitPerUser" json:"limit_per_user,omitempty"`
	StartTime            *uint64                                `protobuf:"varint,14,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64                                `protobuf:"varint,15,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	UserTags             *string                                `protobuf:"bytes,16,opt,name=user_tags,json=userTags" json:"user_tags,omitempty"`
	PartnerType          *PartnerType                           `protobuf:"varint,17,opt,name=partner_type,json=partnerType,enum=foody_base.PartnerType" json:"partner_type,omitempty"`
	StoreFilename        *string                                `protobuf:"bytes,18,opt,name=store_filename,json=storeFilename" json:"store_filename,omitempty"`
	PaymentMethods       []PaymentMethod                        `protobuf:"varint,19,rep,name=payment_methods,json=paymentMethods,enum=foody_base.PaymentMethod" json:"payment_methods,omitempty"`
	Label                *string                                `protobuf:"bytes,20,opt,name=label" json:"label,omitempty"`
	Creator              *string                                `protobuf:"bytes,21,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64                                `protobuf:"varint,22,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                `protobuf:"varint,23,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	LocationGroupIds     []uint64                               `protobuf:"varint,24,rep,name=location_group_ids,json=locationGroupIds" json:"location_group_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *OrderDiscountCampaign) Reset()         { *m = OrderDiscountCampaign{} }
func (m *OrderDiscountCampaign) String() string { return proto.CompactTextString(m) }
func (*OrderDiscountCampaign) ProtoMessage()    {}
func (*OrderDiscountCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{48}
}
func (m *OrderDiscountCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDiscountCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDiscountCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDiscountCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDiscountCampaign.Merge(m, src)
}
func (m *OrderDiscountCampaign) XXX_Size() int {
	return m.Size()
}
func (m *OrderDiscountCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDiscountCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDiscountCampaign proto.InternalMessageInfo

func (m *OrderDiscountCampaign) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OrderDiscountCampaign) GetCampaignName() string {
	if m != nil && m.CampaignName != nil {
		return *m.CampaignName
	}
	return ""
}

func (m *OrderDiscountCampaign) GetPromotionType() OrderDiscountCampaign_PromotionType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return OrderDiscountCampaign_SHIPPING_FEE
}

func (m *OrderDiscountCampaign) GetPromotionStatus() OrderDiscountCampaign_PromotionStatus {
	if m != nil && m.PromotionStatus != nil {
		return *m.PromotionStatus
	}
	return OrderDiscountCampaign_ENABLED
}

func (m *OrderDiscountCampaign) GetDiscountType() OrderDiscountCampaign_DiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return OrderDiscountCampaign_PERCENTAGE
}

func (m *OrderDiscountCampaign) GetDiscountPercentage() uint64 {
	if m != nil && m.DiscountPercentage != nil {
		return *m.DiscountPercentage
	}
	return 0
}

func (m *OrderDiscountCampaign) GetDiscountCap() uint64 {
	if m != nil && m.DiscountCap != nil {
		return *m.DiscountCap
	}
	return 0
}

func (m *OrderDiscountCampaign) GetDiscountAmount() uint64 {
	if m != nil && m.DiscountAmount != nil {
		return *m.DiscountAmount
	}
	return 0
}

func (m *OrderDiscountCampaign) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

func (m *OrderDiscountCampaign) GetStock() uint64 {
	if m != nil && m.Stock != nil {
		return *m.Stock
	}
	return 0
}

func (m *OrderDiscountCampaign) GetUsedQuantity() uint64 {
	if m != nil && m.UsedQuantity != nil {
		return *m.UsedQuantity
	}
	return 0
}

func (m *OrderDiscountCampaign) GetLimitPerDay() uint64 {
	if m != nil && m.LimitPerDay != nil {
		return *m.LimitPerDay
	}
	return 0
}

func (m *OrderDiscountCampaign) GetLimitPerUser() uint64 {
	if m != nil && m.LimitPerUser != nil {
		return *m.LimitPerUser
	}
	return 0
}

func (m *OrderDiscountCampaign) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *OrderDiscountCampaign) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *OrderDiscountCampaign) GetUserTags() string {
	if m != nil && m.UserTags != nil {
		return *m.UserTags
	}
	return ""
}

func (m *OrderDiscountCampaign) GetPartnerType() PartnerType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return PartnerType_PARTNER_LISTED
}

func (m *OrderDiscountCampaign) GetStoreFilename() string {
	if m != nil && m.StoreFilename != nil {
		return *m.StoreFilename
	}
	return ""
}

func (m *OrderDiscountCampaign) GetPaymentMethods() []PaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func (m *OrderDiscountCampaign) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *OrderDiscountCampaign) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *OrderDiscountCampaign) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OrderDiscountCampaign) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *OrderDiscountCampaign) GetLocationGroupIds() []uint64 {
	if m != nil {
		return m.LocationGroupIds
	}
	return nil
}

type UserAttribute struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAttribute) Reset()         { *m = UserAttribute{} }
func (m *UserAttribute) String() string { return proto.CompactTextString(m) }
func (*UserAttribute) ProtoMessage()    {}
func (*UserAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{49}
}
func (m *UserAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAttribute.Merge(m, src)
}
func (m *UserAttribute) XXX_Size() int {
	return m.Size()
}
func (m *UserAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_UserAttribute proto.InternalMessageInfo

func (m *UserAttribute) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *UserAttribute) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type VoucherIdentifier struct {
	PromotionId          *uint64              `protobuf:"varint,1,opt,name=promotion_id,json=promotionId" json:"promotion_id,omitempty"`
	VoucherCode          *string              `protobuf:"bytes,2,opt,name=voucher_code,json=voucherCode" json:"voucher_code,omitempty"`
	Signature            *string              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	RewardType           *Voucher_Reward_Type `protobuf:"varint,4,opt,name=reward_type,json=rewardType,enum=foody_base.Voucher_Reward_Type" json:"reward_type,omitempty"`
	Prefix               *string              `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	Length               *int32               `protobuf:"varint,6,opt,name=length" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VoucherIdentifier) Reset()         { *m = VoucherIdentifier{} }
func (m *VoucherIdentifier) String() string { return proto.CompactTextString(m) }
func (*VoucherIdentifier) ProtoMessage()    {}
func (*VoucherIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{50}
}
func (m *VoucherIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherIdentifier.Merge(m, src)
}
func (m *VoucherIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *VoucherIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherIdentifier proto.InternalMessageInfo

func (m *VoucherIdentifier) GetPromotionId() uint64 {
	if m != nil && m.PromotionId != nil {
		return *m.PromotionId
	}
	return 0
}

func (m *VoucherIdentifier) GetVoucherCode() string {
	if m != nil && m.VoucherCode != nil {
		return *m.VoucherCode
	}
	return ""
}

func (m *VoucherIdentifier) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *VoucherIdentifier) GetRewardType() Voucher_Reward_Type {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return Voucher_DISCOUNT
}

func (m *VoucherIdentifier) GetPrefix() string {
	if m != nil && m.Prefix != nil {
		return *m.Prefix
	}
	return ""
}

func (m *VoucherIdentifier) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type DistributionRule struct {
	DistributionMethod   *uint32  `protobuf:"varint,1,opt,name=distribution_method,json=distributionMethod" json:"distribution_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributionRule) Reset()         { *m = DistributionRule{} }
func (m *DistributionRule) String() string { return proto.CompactTextString(m) }
func (*DistributionRule) ProtoMessage()    {}
func (*DistributionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{51}
}
func (m *DistributionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionRule.Merge(m, src)
}
func (m *DistributionRule) XXX_Size() int {
	return m.Size()
}
func (m *DistributionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionRule.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionRule proto.InternalMessageInfo

func (m *DistributionRule) GetDistributionMethod() uint32 {
	if m != nil && m.DistributionMethod != nil {
		return *m.DistributionMethod
	}
	return 0
}

type ValidityStatus struct {
	QuotaStatus          *VoucherQuotaStatus `protobuf:"varint,1,opt,name=quota_status,json=quotaStatus,enum=foody_base.VoucherQuotaStatus" json:"quota_status,omitempty"`
	TimeStatus           *VoucherTimeStatus  `protobuf:"varint,2,opt,name=time_status,json=timeStatus,enum=foody_base.VoucherTimeStatus" json:"time_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ValidityStatus) Reset()         { *m = ValidityStatus{} }
func (m *ValidityStatus) String() string { return proto.CompactTextString(m) }
func (*ValidityStatus) ProtoMessage()    {}
func (*ValidityStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{52}
}
func (m *ValidityStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidityStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidityStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidityStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidityStatus.Merge(m, src)
}
func (m *ValidityStatus) XXX_Size() int {
	return m.Size()
}
func (m *ValidityStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidityStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ValidityStatus proto.InternalMessageInfo

func (m *ValidityStatus) GetQuotaStatus() VoucherQuotaStatus {
	if m != nil && m.QuotaStatus != nil {
		return *m.QuotaStatus
	}
	return VoucherQuotaStatus_VOUCHER_QUOTA_STATUS_HAS_QUOTA
}

func (m *ValidityStatus) GetTimeStatus() VoucherTimeStatus {
	if m != nil && m.TimeStatus != nil {
		return *m.TimeStatus
	}
	return VoucherTimeStatus_VOUCHER_TIME_STATUS_UPCOMING
}

type MultiLangTxt struct {
	Language             *string  `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Key                  *string  `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiLangTxt) Reset()         { *m = MultiLangTxt{} }
func (m *MultiLangTxt) String() string { return proto.CompactTextString(m) }
func (*MultiLangTxt) ProtoMessage()    {}
func (*MultiLangTxt) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{53}
}
func (m *MultiLangTxt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiLangTxt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiLangTxt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiLangTxt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiLangTxt.Merge(m, src)
}
func (m *MultiLangTxt) XXX_Size() int {
	return m.Size()
}
func (m *MultiLangTxt) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiLangTxt.DiscardUnknown(m)
}

var xxx_messageInfo_MultiLangTxt proto.InternalMessageInfo

func (m *MultiLangTxt) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *MultiLangTxt) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *MultiLangTxt) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type VoucherTAndC struct {
	SectionTitle         *string  `protobuf:"bytes,1,opt,name=section_title,json=sectionTitle" json:"section_title,omitempty"`
	SectionContent       *string  `protobuf:"bytes,2,opt,name=section_content,json=sectionContent" json:"section_content,omitempty"`
	SectionTitleKey      *string  `protobuf:"bytes,3,opt,name=section_title_key,json=sectionTitleKey" json:"section_title_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoucherTAndC) Reset()         { *m = VoucherTAndC{} }
func (m *VoucherTAndC) String() string { return proto.CompactTextString(m) }
func (*VoucherTAndC) ProtoMessage()    {}
func (*VoucherTAndC) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{54}
}
func (m *VoucherTAndC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherTAndC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherTAndC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherTAndC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherTAndC.Merge(m, src)
}
func (m *VoucherTAndC) XXX_Size() int {
	return m.Size()
}
func (m *VoucherTAndC) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherTAndC.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherTAndC proto.InternalMessageInfo

func (m *VoucherTAndC) GetSectionTitle() string {
	if m != nil && m.SectionTitle != nil {
		return *m.SectionTitle
	}
	return ""
}

func (m *VoucherTAndC) GetSectionContent() string {
	if m != nil && m.SectionContent != nil {
		return *m.SectionContent
	}
	return ""
}

func (m *VoucherTAndC) GetSectionTitleKey() string {
	if m != nil && m.SectionTitleKey != nil {
		return *m.SectionTitleKey
	}
	return ""
}

type DisplayInfo struct {
	Icon                 *string                     `protobuf:"bytes,1,opt,name=icon" json:"icon,omitempty"`
	IconText             *string                     `protobuf:"bytes,2,opt,name=icon_text,json=iconText" json:"icon_text,omitempty"`
	Title                *string                     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Label                *string                     `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	CustomizedLabels     []*MultiLangTxt             `protobuf:"bytes,5,rep,name=customized_labels,json=customizedLabels" json:"customized_labels,omitempty"`
	TcSectionList        []*VoucherTAndC             `protobuf:"bytes,6,rep,name=tc_section_list,json=tcSectionList" json:"tc_section_list,omitempty"`
	DisplayOnLandingPage *bool                       `protobuf:"varint,7,opt,name=display_on_landing_page,json=displayOnLandingPage" json:"display_on_landing_page,omitempty"`
	BrowseListTags       *VoucherCustomisedLabelList `protobuf:"bytes,8,opt,name=browse_list_tags,json=browseListTags" json:"browse_list_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DisplayInfo) Reset()         { *m = DisplayInfo{} }
func (m *DisplayInfo) String() string { return proto.CompactTextString(m) }
func (*DisplayInfo) ProtoMessage()    {}
func (*DisplayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{55}
}
func (m *DisplayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisplayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisplayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisplayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisplayInfo.Merge(m, src)
}
func (m *DisplayInfo) XXX_Size() int {
	return m.Size()
}
func (m *DisplayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DisplayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DisplayInfo proto.InternalMessageInfo

func (m *DisplayInfo) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *DisplayInfo) GetIconText() string {
	if m != nil && m.IconText != nil {
		return *m.IconText
	}
	return ""
}

func (m *DisplayInfo) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *DisplayInfo) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *DisplayInfo) GetCustomizedLabels() []*MultiLangTxt {
	if m != nil {
		return m.CustomizedLabels
	}
	return nil
}

func (m *DisplayInfo) GetTcSectionList() []*VoucherTAndC {
	if m != nil {
		return m.TcSectionList
	}
	return nil
}

func (m *DisplayInfo) GetDisplayOnLandingPage() bool {
	if m != nil && m.DisplayOnLandingPage != nil {
		return *m.DisplayOnLandingPage
	}
	return false
}

func (m *DisplayInfo) GetBrowseListTags() *VoucherCustomisedLabelList {
	if m != nil {
		return m.BrowseListTags
	}
	return nil
}

type ExtraInfo struct {
	DisplayInfo          *DisplayInfo `protobuf:"bytes,1,opt,name=display_info,json=displayInfo" json:"display_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExtraInfo) Reset()         { *m = ExtraInfo{} }
func (m *ExtraInfo) String() string { return proto.CompactTextString(m) }
func (*ExtraInfo) ProtoMessage()    {}
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{56}
}
func (m *ExtraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraInfo.Merge(m, src)
}
func (m *ExtraInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExtraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraInfo proto.InternalMessageInfo

func (m *ExtraInfo) GetDisplayInfo() *DisplayInfo {
	if m != nil {
		return m.DisplayInfo
	}
	return nil
}

type PaymentMethodScope struct {
	PaymentMethods       []PaymentMethod `protobuf:"varint,1,rep,name=payment_methods,json=paymentMethods,enum=foody_base.PaymentMethod" json:"payment_methods,omitempty"`
	SpmChannelIds        []uint64        `protobuf:"varint,2,rep,name=spm_channel_ids,json=spmChannelIds" json:"spm_channel_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PaymentMethodScope) Reset()         { *m = PaymentMethodScope{} }
func (m *PaymentMethodScope) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodScope) ProtoMessage()    {}
func (*PaymentMethodScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{57}
}
func (m *PaymentMethodScope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentMethodScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentMethodScope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentMethodScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodScope.Merge(m, src)
}
func (m *PaymentMethodScope) XXX_Size() int {
	return m.Size()
}
func (m *PaymentMethodScope) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodScope.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodScope proto.InternalMessageInfo

func (m *PaymentMethodScope) GetPaymentMethods() []PaymentMethod {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func (m *PaymentMethodScope) GetSpmChannelIds() []uint64 {
	if m != nil {
		return m.SpmChannelIds
	}
	return nil
}

type PaymentRules struct {
	PaymentMethodScope   *PaymentMethodScope `protobuf:"bytes,1,opt,name=payment_method_scope,json=paymentMethodScope" json:"payment_method_scope,omitempty"`
	OrderScope           *OrderScope         `protobuf:"bytes,2,opt,name=order_scope,json=orderScope" json:"order_scope,omitempty"`
	CreditCardBins       []string            `protobuf:"bytes,3,rep,name=CreditCardBins" json:"CreditCardBins,omitempty"`
	VoucherPaymentTypes  []int32             `protobuf:"varint,4,rep,name=voucher_payment_types,json=voucherPaymentTypes" json:"voucher_payment_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PaymentRules) Reset()         { *m = PaymentRules{} }
func (m *PaymentRules) String() string { return proto.CompactTextString(m) }
func (*PaymentRules) ProtoMessage()    {}
func (*PaymentRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{58}
}
func (m *PaymentRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRules.Merge(m, src)
}
func (m *PaymentRules) XXX_Size() int {
	return m.Size()
}
func (m *PaymentRules) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRules.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRules proto.InternalMessageInfo

func (m *PaymentRules) GetPaymentMethodScope() *PaymentMethodScope {
	if m != nil {
		return m.PaymentMethodScope
	}
	return nil
}

func (m *PaymentRules) GetOrderScope() *OrderScope {
	if m != nil {
		return m.OrderScope
	}
	return nil
}

func (m *PaymentRules) GetCreditCardBins() []string {
	if m != nil {
		return m.CreditCardBins
	}
	return nil
}

func (m *PaymentRules) GetVoucherPaymentTypes() []int32 {
	if m != nil {
		return m.VoucherPaymentTypes
	}
	return nil
}

type LocationScope struct {
	LocationGroupIds     []uint64 `protobuf:"varint,1,rep,name=location_group_ids,json=locationGroupIds" json:"location_group_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationScope) Reset()         { *m = LocationScope{} }
func (m *LocationScope) String() string { return proto.CompactTextString(m) }
func (*LocationScope) ProtoMessage()    {}
func (*LocationScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{59}
}
func (m *LocationScope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationScope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationScope.Merge(m, src)
}
func (m *LocationScope) XXX_Size() int {
	return m.Size()
}
func (m *LocationScope) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationScope.DiscardUnknown(m)
}

var xxx_messageInfo_LocationScope proto.InternalMessageInfo

func (m *LocationScope) GetLocationGroupIds() []uint64 {
	if m != nil {
		return m.LocationGroupIds
	}
	return nil
}

type OrderScope struct {
	MinSpend             *uint64  `protobuf:"varint,1,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderScope) Reset()         { *m = OrderScope{} }
func (m *OrderScope) String() string { return proto.CompactTextString(m) }
func (*OrderScope) ProtoMessage()    {}
func (*OrderScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{60}
}
func (m *OrderScope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderScope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderScope.Merge(m, src)
}
func (m *OrderScope) XXX_Size() int {
	return m.Size()
}
func (m *OrderScope) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderScope.DiscardUnknown(m)
}

var xxx_messageInfo_OrderScope proto.InternalMessageInfo

func (m *OrderScope) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

type StoreScope struct {
	ScopeType            *StoreScope_StoreScopeType `protobuf:"varint,1,opt,name=scope_type,json=scopeType,enum=foody_base.StoreScope_StoreScopeType" json:"scope_type,omitempty"`
	StoreIds             []uint64                   `protobuf:"varint,2,rep,name=store_ids,json=storeIds" json:"store_ids,omitempty"`
	ExcludeStoreIds      []uint64                   `protobuf:"varint,3,rep,name=exclude_store_ids,json=excludeStoreIds" json:"exclude_store_ids,omitempty"`
	StorePartnerTypes    []uint32                   `protobuf:"varint,4,rep,name=store_partner_types,json=storePartnerTypes" json:"store_partner_types,omitempty"`
	StoreTagIds          []uint64                   `protobuf:"varint,5,rep,name=store_tag_ids,json=storeTagIds" json:"store_tag_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *StoreScope) Reset()         { *m = StoreScope{} }
func (m *StoreScope) String() string { return proto.CompactTextString(m) }
func (*StoreScope) ProtoMessage()    {}
func (*StoreScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{61}
}
func (m *StoreScope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreScope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreScope.Merge(m, src)
}
func (m *StoreScope) XXX_Size() int {
	return m.Size()
}
func (m *StoreScope) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreScope.DiscardUnknown(m)
}

var xxx_messageInfo_StoreScope proto.InternalMessageInfo

func (m *StoreScope) GetScopeType() StoreScope_StoreScopeType {
	if m != nil && m.ScopeType != nil {
		return *m.ScopeType
	}
	return StoreScope_SHOPEE_FOOD_STORE_SCOPE_ALL
}

func (m *StoreScope) GetStoreIds() []uint64 {
	if m != nil {
		return m.StoreIds
	}
	return nil
}

func (m *StoreScope) GetExcludeStoreIds() []uint64 {
	if m != nil {
		return m.ExcludeStoreIds
	}
	return nil
}

func (m *StoreScope) GetStorePartnerTypes() []uint32 {
	if m != nil {
		return m.StorePartnerTypes
	}
	return nil
}

func (m *StoreScope) GetStoreTagIds() []uint64 {
	if m != nil {
		return m.StoreTagIds
	}
	return nil
}

type ProductRules struct {
	LocationScope        *LocationScope `protobuf:"bytes,1,opt,name=location_scope,json=locationScope" json:"location_scope,omitempty"`
	StoreScope           *StoreScope    `protobuf:"bytes,2,opt,name=store_scope,json=storeScope" json:"store_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProductRules) Reset()         { *m = ProductRules{} }
func (m *ProductRules) String() string { return proto.CompactTextString(m) }
func (*ProductRules) ProtoMessage()    {}
func (*ProductRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{62}
}
func (m *ProductRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductRules.Merge(m, src)
}
func (m *ProductRules) XXX_Size() int {
	return m.Size()
}
func (m *ProductRules) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductRules.DiscardUnknown(m)
}

var xxx_messageInfo_ProductRules proto.InternalMessageInfo

func (m *ProductRules) GetLocationScope() *LocationScope {
	if m != nil {
		return m.LocationScope
	}
	return nil
}

func (m *ProductRules) GetStoreScope() *StoreScope {
	if m != nil {
		return m.StoreScope
	}
	return nil
}

type UserRules struct {
	UserAttributes       []*UserAttribute `protobuf:"bytes,1,rep,name=user_attributes,json=userAttributes" json:"user_attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserRules) Reset()         { *m = UserRules{} }
func (m *UserRules) String() string { return proto.CompactTextString(m) }
func (*UserRules) ProtoMessage()    {}
func (*UserRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{63}
}
func (m *UserRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRules.Merge(m, src)
}
func (m *UserRules) XXX_Size() int {
	return m.Size()
}
func (m *UserRules) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRules.DiscardUnknown(m)
}

var xxx_messageInfo_UserRules proto.InternalMessageInfo

func (m *UserRules) GetUserAttributes() []*UserAttribute {
	if m != nil {
		return m.UserAttributes
	}
	return nil
}

type Reward struct {
	Amount               *int64   `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Percentage           *int64   `protobuf:"varint,2,opt,name=percentage" json:"percentage,omitempty"`
	Cap                  *int64   `protobuf:"varint,3,opt,name=cap" json:"cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{64}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Reward) GetPercentage() int64 {
	if m != nil && m.Percentage != nil {
		return *m.Percentage
	}
	return 0
}

func (m *Reward) GetCap() int64 {
	if m != nil && m.Cap != nil {
		return *m.Cap
	}
	return 0
}

type VoucherRewardDiscount struct {
	RewardDiscount       *uint64  `protobuf:"varint,1,opt,name=reward_discount,json=rewardDiscount" json:"reward_discount,omitempty"`
	RewardCoin           *uint64  `protobuf:"varint,2,opt,name=reward_coin,json=rewardCoin" json:"reward_coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoucherRewardDiscount) Reset()         { *m = VoucherRewardDiscount{} }
func (m *VoucherRewardDiscount) String() string { return proto.CompactTextString(m) }
func (*VoucherRewardDiscount) ProtoMessage()    {}
func (*VoucherRewardDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{65}
}
func (m *VoucherRewardDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherRewardDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherRewardDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherRewardDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherRewardDiscount.Merge(m, src)
}
func (m *VoucherRewardDiscount) XXX_Size() int {
	return m.Size()
}
func (m *VoucherRewardDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherRewardDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherRewardDiscount proto.InternalMessageInfo

func (m *VoucherRewardDiscount) GetRewardDiscount() uint64 {
	if m != nil && m.RewardDiscount != nil {
		return *m.RewardDiscount
	}
	return 0
}

func (m *VoucherRewardDiscount) GetRewardCoin() uint64 {
	if m != nil && m.RewardCoin != nil {
		return *m.RewardCoin
	}
	return 0
}

type UserVoucher struct {
	UserVoucherId        *uint64            `protobuf:"varint,1,opt,name=user_voucher_id,json=userVoucherId" json:"user_voucher_id,omitempty"`
	UserId               *uint64            `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	VoucherIdentifier    *VoucherIdentifier `protobuf:"bytes,3,opt,name=voucher_identifier,json=voucherIdentifier" json:"voucher_identifier,omitempty"`
	UsageCount           *uint64            `protobuf:"varint,4,opt,name=usage_count,json=usageCount" json:"usage_count,omitempty"`
	UsageLimit           *uint64            `protobuf:"varint,5,opt,name=usage_limit,json=usageLimit" json:"usage_limit,omitempty"`
	Voucher              *Voucher           `protobuf:"bytes,6,opt,name=voucher" json:"voucher,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UserVoucher) Reset()         { *m = UserVoucher{} }
func (m *UserVoucher) String() string { return proto.CompactTextString(m) }
func (*UserVoucher) ProtoMessage()    {}
func (*UserVoucher) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{66}
}
func (m *UserVoucher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserVoucher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserVoucher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserVoucher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserVoucher.Merge(m, src)
}
func (m *UserVoucher) XXX_Size() int {
	return m.Size()
}
func (m *UserVoucher) XXX_DiscardUnknown() {
	xxx_messageInfo_UserVoucher.DiscardUnknown(m)
}

var xxx_messageInfo_UserVoucher proto.InternalMessageInfo

func (m *UserVoucher) GetUserVoucherId() uint64 {
	if m != nil && m.UserVoucherId != nil {
		return *m.UserVoucherId
	}
	return 0
}

func (m *UserVoucher) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserVoucher) GetVoucherIdentifier() *VoucherIdentifier {
	if m != nil {
		return m.VoucherIdentifier
	}
	return nil
}

func (m *UserVoucher) GetUsageCount() uint64 {
	if m != nil && m.UsageCount != nil {
		return *m.UsageCount
	}
	return 0
}

func (m *UserVoucher) GetUsageLimit() uint64 {
	if m != nil && m.UsageLimit != nil {
		return *m.UsageLimit
	}
	return 0
}

func (m *UserVoucher) GetVoucher() *Voucher {
	if m != nil {
		return m.Voucher
	}
	return nil
}

type Voucher struct {
	Identifier                 *VoucherIdentifier     `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	RewardType                 *Voucher_Reward_Type   `protobuf:"varint,2,opt,name=reward_type,json=rewardType,enum=foody_base.Voucher_Reward_Type" json:"reward_type,omitempty"`
	RewardDiscount             *uint64                `protobuf:"varint,3,opt,name=reward_discount,json=rewardDiscount" json:"reward_discount,omitempty"`
	RewardCoin                 *int64                 `protobuf:"varint,4,opt,name=reward_coin,json=rewardCoin" json:"reward_coin,omitempty"`
	RewardCoinEquivalentCash   *uint64                `protobuf:"varint,5,opt,name=reward_coin_equivalent_cash,json=rewardCoinEquivalentCash" json:"reward_coin_equivalent_cash,omitempty"`
	RewardShippingFeeDiscount  *uint64                `protobuf:"varint,6,opt,name=reward_shipping_fee_discount,json=rewardShippingFeeDiscount" json:"reward_shipping_fee_discount,omitempty"`
	Title                      *string                `protobuf:"bytes,7,opt,name=title" json:"title,omitempty"`
	CreateTime                 *uint64                `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	CreatedBy                  *string                `protobuf:"bytes,9,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Description                *string                `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	DistributionStartTime      *uint64                `protobuf:"varint,11,opt,name=distribution_start_time,json=distributionStartTime" json:"distribution_start_time,omitempty"`
	DistributionEndTime        *uint64                `protobuf:"varint,12,opt,name=distribution_end_time,json=distributionEndTime" json:"distribution_end_time,omitempty"`
	DistributionRule           *DistributionRule      `protobuf:"bytes,13,opt,name=distribution_rule,json=distributionRule" json:"distribution_rule,omitempty"`
	DistributionTotalLimit     *uint64                `protobuf:"varint,14,opt,name=distribution_total_limit,json=distributionTotalLimit" json:"distribution_total_limit,omitempty"`
	DistributionTotalCount     *uint64                `protobuf:"varint,15,opt,name=distribution_total_count,json=distributionTotalCount" json:"distribution_total_count,omitempty"`
	DistributionValidityStatus *ValidityStatus        `protobuf:"bytes,16,opt,name=distribution_validity_status,json=distributionValidityStatus" json:"distribution_validity_status,omitempty"`
	ExtraInfo                  *ExtraInfo             `protobuf:"bytes,17,opt,name=extra_info,json=extraInfo" json:"extra_info,omitempty"`
	VoucherName                *string                `protobuf:"bytes,18,opt,name=voucher_name,json=voucherName" json:"voucher_name,omitempty"`
	PaymentRules               *PaymentRules          `protobuf:"bytes,19,opt,name=payment_rules,json=paymentRules" json:"payment_rules,omitempty"`
	ProductRules               *ProductRules          `protobuf:"bytes,20,opt,name=product_rules,json=productRules" json:"product_rules,omitempty"`
	Reward                     *Reward                `protobuf:"bytes,21,opt,name=reward" json:"reward,omitempty"`
	VoucherRewardType          *VoucherRewardType     `protobuf:"varint,22,opt,name=voucher_reward_type,json=voucherRewardType,enum=foody_base.VoucherRewardType" json:"voucher_reward_type,omitempty"`
	UpdateTime                 *uint64                `protobuf:"varint,23,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	UpdatedBy                  *string                `protobuf:"bytes,24,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	UsageDurationHrs           *uint32                `protobuf:"varint,25,opt,name=usage_duration_hrs,json=usageDurationHrs" json:"usage_duration_hrs,omitempty"`
	UsageStartTime             *uint64                `protobuf:"varint,26,opt,name=usage_start_time,json=usageStartTime" json:"usage_start_time,omitempty"`
	UsageEndTime               *uint64                `protobuf:"varint,27,opt,name=usage_end_time,json=usageEndTime" json:"usage_end_time,omitempty"`
	UsagePerUserLimit          *uint64                `protobuf:"varint,28,opt,name=usage_per_user_limit,json=usagePerUserLimit" json:"usage_per_user_limit,omitempty"`
	UsageTotalCount            *uint64                `protobuf:"varint,29,opt,name=usage_total_count,json=usageTotalCount" json:"usage_total_count,omitempty"`
	UsageTotalLimit            *uint64                `protobuf:"varint,30,opt,name=usage_total_limit,json=usageTotalLimit" json:"usage_total_limit,omitempty"`
	UsageValidityStatus        *ValidityStatus        `protobuf:"bytes,31,opt,name=usage_validity_status,json=usageValidityStatus" json:"usage_validity_status,omitempty"`
	UserRules                  *UserRules             `protobuf:"bytes,32,opt,name=user_rules,json=userRules" json:"user_rules,omitempty"`
	VoucherId                  *uint64                `protobuf:"varint,33,opt,name=voucher_id,json=voucherId" json:"voucher_id,omitempty"`
	VoucherCode                *string                `protobuf:"bytes,34,opt,name=voucher_code,json=voucherCode" json:"voucher_code,omitempty"`
	VoucherStatus              *VoucherStatus         `protobuf:"varint,35,opt,name=voucher_status,json=voucherStatus,enum=foody_base.VoucherStatus" json:"voucher_status,omitempty"`
	ServiceType                *ServiceType           `protobuf:"varint,36,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	VoucherRewardDiscount      *VoucherRewardDiscount `protobuf:"bytes,37,opt,name=voucher_reward_discount,json=voucherRewardDiscount" json:"voucher_reward_discount,omitempty"`
	CoFundCampaignId           *uint64                `protobuf:"varint,38,opt,name=co_fund_campaign_id,json=coFundCampaignId" json:"co_fund_campaign_id,omitempty"`
	MerchantSubsidyAmount      *uint64                `protobuf:"varint,39,opt,name=merchant_subsidy_amount,json=merchantSubsidyAmount" json:"merchant_subsidy_amount,omitempty"`
	NonClaimableByCode         *bool                  `protobuf:"varint,40,opt,name=non_claimable_by_code,json=nonClaimableByCode" json:"non_claimable_by_code,omitempty"`
	SuffixLength               *int32                 `protobuf:"varint,41,opt,name=suffix_length,json=suffixLength" json:"suffix_length,omitempty"`
	VoucherType                *Voucher_Type          `protobuf:"varint,42,opt,name=voucher_type,json=voucherType,enum=foody_base.Voucher_Type" json:"voucher_type,omitempty"`
	Source                     *int32                 `protobuf:"varint,43,opt,name=source" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}               `json:"-"`
	XXX_unrecognized           []byte                 `json:"-"`
	XXX_sizecache              int32                  `json:"-"`
}

func (m *Voucher) Reset()         { *m = Voucher{} }
func (m *Voucher) String() string { return proto.CompactTextString(m) }
func (*Voucher) ProtoMessage()    {}
func (*Voucher) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{67}
}
func (m *Voucher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voucher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voucher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voucher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voucher.Merge(m, src)
}
func (m *Voucher) XXX_Size() int {
	return m.Size()
}
func (m *Voucher) XXX_DiscardUnknown() {
	xxx_messageInfo_Voucher.DiscardUnknown(m)
}

var xxx_messageInfo_Voucher proto.InternalMessageInfo

func (m *Voucher) GetIdentifier() *VoucherIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Voucher) GetRewardType() Voucher_Reward_Type {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return Voucher_DISCOUNT
}

func (m *Voucher) GetRewardDiscount() uint64 {
	if m != nil && m.RewardDiscount != nil {
		return *m.RewardDiscount
	}
	return 0
}

func (m *Voucher) GetRewardCoin() int64 {
	if m != nil && m.RewardCoin != nil {
		return *m.RewardCoin
	}
	return 0
}

func (m *Voucher) GetRewardCoinEquivalentCash() uint64 {
	if m != nil && m.RewardCoinEquivalentCash != nil {
		return *m.RewardCoinEquivalentCash
	}
	return 0
}

func (m *Voucher) GetRewardShippingFeeDiscount() uint64 {
	if m != nil && m.RewardShippingFeeDiscount != nil {
		return *m.RewardShippingFeeDiscount
	}
	return 0
}

func (m *Voucher) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Voucher) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Voucher) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *Voucher) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Voucher) GetDistributionStartTime() uint64 {
	if m != nil && m.DistributionStartTime != nil {
		return *m.DistributionStartTime
	}
	return 0
}

func (m *Voucher) GetDistributionEndTime() uint64 {
	if m != nil && m.DistributionEndTime != nil {
		return *m.DistributionEndTime
	}
	return 0
}

func (m *Voucher) GetDistributionRule() *DistributionRule {
	if m != nil {
		return m.DistributionRule
	}
	return nil
}

func (m *Voucher) GetDistributionTotalLimit() uint64 {
	if m != nil && m.DistributionTotalLimit != nil {
		return *m.DistributionTotalLimit
	}
	return 0
}

func (m *Voucher) GetDistributionTotalCount() uint64 {
	if m != nil && m.DistributionTotalCount != nil {
		return *m.DistributionTotalCount
	}
	return 0
}

func (m *Voucher) GetDistributionValidityStatus() *ValidityStatus {
	if m != nil {
		return m.DistributionValidityStatus
	}
	return nil
}

func (m *Voucher) GetExtraInfo() *ExtraInfo {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *Voucher) GetVoucherName() string {
	if m != nil && m.VoucherName != nil {
		return *m.VoucherName
	}
	return ""
}

func (m *Voucher) GetPaymentRules() *PaymentRules {
	if m != nil {
		return m.PaymentRules
	}
	return nil
}

func (m *Voucher) GetProductRules() *ProductRules {
	if m != nil {
		return m.ProductRules
	}
	return nil
}

func (m *Voucher) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *Voucher) GetVoucherRewardType() VoucherRewardType {
	if m != nil && m.VoucherRewardType != nil {
		return *m.VoucherRewardType
	}
	return VoucherRewardType_VOUCHER_REWARD_PRODUCT_DISCOUNT
}

func (m *Voucher) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Voucher) GetUpdatedBy() string {
	if m != nil && m.UpdatedBy != nil {
		return *m.UpdatedBy
	}
	return ""
}

func (m *Voucher) GetUsageDurationHrs() uint32 {
	if m != nil && m.UsageDurationHrs != nil {
		return *m.UsageDurationHrs
	}
	return 0
}

func (m *Voucher) GetUsageStartTime() uint64 {
	if m != nil && m.UsageStartTime != nil {
		return *m.UsageStartTime
	}
	return 0
}

func (m *Voucher) GetUsageEndTime() uint64 {
	if m != nil && m.UsageEndTime != nil {
		return *m.UsageEndTime
	}
	return 0
}

func (m *Voucher) GetUsagePerUserLimit() uint64 {
	if m != nil && m.UsagePerUserLimit != nil {
		return *m.UsagePerUserLimit
	}
	return 0
}

func (m *Voucher) GetUsageTotalCount() uint64 {
	if m != nil && m.UsageTotalCount != nil {
		return *m.UsageTotalCount
	}
	return 0
}

func (m *Voucher) GetUsageTotalLimit() uint64 {
	if m != nil && m.UsageTotalLimit != nil {
		return *m.UsageTotalLimit
	}
	return 0
}

func (m *Voucher) GetUsageValidityStatus() *ValidityStatus {
	if m != nil {
		return m.UsageValidityStatus
	}
	return nil
}

func (m *Voucher) GetUserRules() *UserRules {
	if m != nil {
		return m.UserRules
	}
	return nil
}

func (m *Voucher) GetVoucherId() uint64 {
	if m != nil && m.VoucherId != nil {
		return *m.VoucherId
	}
	return 0
}

func (m *Voucher) GetVoucherCode() string {
	if m != nil && m.VoucherCode != nil {
		return *m.VoucherCode
	}
	return ""
}

func (m *Voucher) GetVoucherStatus() VoucherStatus {
	if m != nil && m.VoucherStatus != nil {
		return *m.VoucherStatus
	}
	return VoucherStatus_VOUCHER_STATUS_DISABLED
}

func (m *Voucher) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *Voucher) GetVoucherRewardDiscount() *VoucherRewardDiscount {
	if m != nil {
		return m.VoucherRewardDiscount
	}
	return nil
}

func (m *Voucher) GetCoFundCampaignId() uint64 {
	if m != nil && m.CoFundCampaignId != nil {
		return *m.CoFundCampaignId
	}
	return 0
}

func (m *Voucher) GetMerchantSubsidyAmount() uint64 {
	if m != nil && m.MerchantSubsidyAmount != nil {
		return *m.MerchantSubsidyAmount
	}
	return 0
}

func (m *Voucher) GetNonClaimableByCode() bool {
	if m != nil && m.NonClaimableByCode != nil {
		return *m.NonClaimableByCode
	}
	return false
}

func (m *Voucher) GetSuffixLength() int32 {
	if m != nil && m.SuffixLength != nil {
		return *m.SuffixLength
	}
	return 0
}

func (m *Voucher) GetVoucherType() Voucher_Type {
	if m != nil && m.VoucherType != nil {
		return *m.VoucherType
	}
	return Voucher_Type_VOUCHER_SPX
}

func (m *Voucher) GetSource() int32 {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return 0
}

type VoucherCustomisedLabelList struct {
	Labels               []*VoucherCustomisedLabel `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VoucherCustomisedLabelList) Reset()         { *m = VoucherCustomisedLabelList{} }
func (m *VoucherCustomisedLabelList) String() string { return proto.CompactTextString(m) }
func (*VoucherCustomisedLabelList) ProtoMessage()    {}
func (*VoucherCustomisedLabelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{68}
}
func (m *VoucherCustomisedLabelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherCustomisedLabelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherCustomisedLabelList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherCustomisedLabelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherCustomisedLabelList.Merge(m, src)
}
func (m *VoucherCustomisedLabelList) XXX_Size() int {
	return m.Size()
}
func (m *VoucherCustomisedLabelList) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherCustomisedLabelList.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherCustomisedLabelList proto.InternalMessageInfo

func (m *VoucherCustomisedLabelList) GetLabels() []*VoucherCustomisedLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

// voucher customised label supports multi language
type VoucherCustomisedLabel struct {
	Label                []*MultiLangTxt `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
	Color                *int32          `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
	ImageHash            *string         `protobuf:"bytes,3,opt,name=image_hash,json=imageHash" json:"image_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VoucherCustomisedLabel) Reset()         { *m = VoucherCustomisedLabel{} }
func (m *VoucherCustomisedLabel) String() string { return proto.CompactTextString(m) }
func (*VoucherCustomisedLabel) ProtoMessage()    {}
func (*VoucherCustomisedLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{69}
}
func (m *VoucherCustomisedLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherCustomisedLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherCustomisedLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherCustomisedLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherCustomisedLabel.Merge(m, src)
}
func (m *VoucherCustomisedLabel) XXX_Size() int {
	return m.Size()
}
func (m *VoucherCustomisedLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherCustomisedLabel.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherCustomisedLabel proto.InternalMessageInfo

func (m *VoucherCustomisedLabel) GetLabel() []*MultiLangTxt {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *VoucherCustomisedLabel) GetColor() int32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *VoucherCustomisedLabel) GetImageHash() string {
	if m != nil && m.ImageHash != nil {
		return *m.ImageHash
	}
	return ""
}

type VoucherTaskFile struct {
	Name                 *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FileType             *VoucherTaskFile_FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,enum=foody_base.VoucherTaskFile_FileType" json:"file_type,omitempty"`
	Url                  *string                   `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Hash                 *string                   `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	CreateTime           *uint64                   `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VoucherTaskFile) Reset()         { *m = VoucherTaskFile{} }
func (m *VoucherTaskFile) String() string { return proto.CompactTextString(m) }
func (*VoucherTaskFile) ProtoMessage()    {}
func (*VoucherTaskFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{70}
}
func (m *VoucherTaskFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherTaskFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherTaskFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherTaskFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherTaskFile.Merge(m, src)
}
func (m *VoucherTaskFile) XXX_Size() int {
	return m.Size()
}
func (m *VoucherTaskFile) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherTaskFile.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherTaskFile proto.InternalMessageInfo

func (m *VoucherTaskFile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VoucherTaskFile) GetFileType() VoucherTaskFile_FileType {
	if m != nil && m.FileType != nil {
		return *m.FileType
	}
	return VoucherTaskFile_FILE_TYPE_CSV
}

func (m *VoucherTaskFile) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *VoucherTaskFile) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *VoucherTaskFile) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type VoucherClaimStatus struct {
	VoucherId            *uint64  `protobuf:"varint,1,opt,name=voucher_id,json=voucherId" json:"voucher_id,omitempty"`
	VoucherCode          *string  `protobuf:"bytes,2,opt,name=voucher_code,json=voucherCode" json:"voucher_code,omitempty"`
	Claimed              *bool    `protobuf:"varint,3,opt,name=claimed" json:"claimed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoucherClaimStatus) Reset()         { *m = VoucherClaimStatus{} }
func (m *VoucherClaimStatus) String() string { return proto.CompactTextString(m) }
func (*VoucherClaimStatus) ProtoMessage()    {}
func (*VoucherClaimStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{71}
}
func (m *VoucherClaimStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherClaimStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherClaimStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherClaimStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherClaimStatus.Merge(m, src)
}
func (m *VoucherClaimStatus) XXX_Size() int {
	return m.Size()
}
func (m *VoucherClaimStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherClaimStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherClaimStatus proto.InternalMessageInfo

func (m *VoucherClaimStatus) GetVoucherId() uint64 {
	if m != nil && m.VoucherId != nil {
		return *m.VoucherId
	}
	return 0
}

func (m *VoucherClaimStatus) GetVoucherCode() string {
	if m != nil && m.VoucherCode != nil {
		return *m.VoucherCode
	}
	return ""
}

func (m *VoucherClaimStatus) GetClaimed() bool {
	if m != nil && m.Claimed != nil {
		return *m.Claimed
	}
	return false
}

type VoucherTask struct {
	Id                   *uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TaskType             *VoucherTaskType   `protobuf:"varint,2,opt,name=task_type,json=taskType,enum=foody_base.VoucherTaskType" json:"task_type,omitempty"`
	TaskStatus           *VoucherTaskStatus `protobuf:"varint,3,opt,name=task_status,json=taskStatus,enum=foody_base.VoucherTaskStatus" json:"task_status,omitempty"`
	SuccessCount         *int32             `protobuf:"varint,4,opt,name=success_count,json=successCount" json:"success_count,omitempty"`
	FailCount            *int32             `protobuf:"varint,5,opt,name=fail_count,json=failCount" json:"fail_count,omitempty"`
	ExecuteCount         *int32             `protobuf:"varint,6,opt,name=execute_count,json=executeCount" json:"execute_count,omitempty"`
	TotalCount           *int32             `protobuf:"varint,7,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	StartTime            *uint64            `protobuf:"varint,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	UploadTime           *uint64            `protobuf:"varint,9,opt,name=upload_time,json=uploadTime" json:"upload_time,omitempty"`
	Operator             *string            `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty"`
	UploadFile           *VoucherTaskFile   `protobuf:"bytes,11,opt,name=upload_file,json=uploadFile" json:"upload_file,omitempty"`
	ResultFiles          []*VoucherTaskFile `protobuf:"bytes,12,rep,name=result_files,json=resultFiles" json:"result_files,omitempty"`
	UserAttribute        *UserAttribute     `protobuf:"bytes,13,opt,name=user_attribute,json=userAttribute" json:"user_attribute,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VoucherTask) Reset()         { *m = VoucherTask{} }
func (m *VoucherTask) String() string { return proto.CompactTextString(m) }
func (*VoucherTask) ProtoMessage()    {}
func (*VoucherTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{72}
}
func (m *VoucherTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherTask.Merge(m, src)
}
func (m *VoucherTask) XXX_Size() int {
	return m.Size()
}
func (m *VoucherTask) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherTask.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherTask proto.InternalMessageInfo

func (m *VoucherTask) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VoucherTask) GetTaskType() VoucherTaskType {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return VoucherTaskType_TASK_TYPE_DISPATCH_VOUCHER_BY_USER_ID
}

func (m *VoucherTask) GetTaskStatus() VoucherTaskStatus {
	if m != nil && m.TaskStatus != nil {
		return *m.TaskStatus
	}
	return VoucherTaskStatus_TASK_STATUS_PENDING
}

func (m *VoucherTask) GetSuccessCount() int32 {
	if m != nil && m.SuccessCount != nil {
		return *m.SuccessCount
	}
	return 0
}

func (m *VoucherTask) GetFailCount() int32 {
	if m != nil && m.FailCount != nil {
		return *m.FailCount
	}
	return 0
}

func (m *VoucherTask) GetExecuteCount() int32 {
	if m != nil && m.ExecuteCount != nil {
		return *m.ExecuteCount
	}
	return 0
}

func (m *VoucherTask) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *VoucherTask) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *VoucherTask) GetUploadTime() uint64 {
	if m != nil && m.UploadTime != nil {
		return *m.UploadTime
	}
	return 0
}

func (m *VoucherTask) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *VoucherTask) GetUploadFile() *VoucherTaskFile {
	if m != nil {
		return m.UploadFile
	}
	return nil
}

func (m *VoucherTask) GetResultFiles() []*VoucherTaskFile {
	if m != nil {
		return m.ResultFiles
	}
	return nil
}

func (m *VoucherTask) GetUserAttribute() *UserAttribute {
	if m != nil {
		return m.UserAttribute
	}
	return nil
}

type SpendCoins struct {
	Coins                *int64   `protobuf:"varint,1,opt,name=coins" json:"coins,omitempty"`
	Discount             *uint64  `protobuf:"varint,2,opt,name=discount" json:"discount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpendCoins) Reset()         { *m = SpendCoins{} }
func (m *SpendCoins) String() string { return proto.CompactTextString(m) }
func (*SpendCoins) ProtoMessage()    {}
func (*SpendCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{73}
}
func (m *SpendCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendCoins.Merge(m, src)
}
func (m *SpendCoins) XXX_Size() int {
	return m.Size()
}
func (m *SpendCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendCoins.DiscardUnknown(m)
}

var xxx_messageInfo_SpendCoins proto.InternalMessageInfo

func (m *SpendCoins) GetCoins() int64 {
	if m != nil && m.Coins != nil {
		return *m.Coins
	}
	return 0
}

func (m *SpendCoins) GetDiscount() uint64 {
	if m != nil && m.Discount != nil {
		return *m.Discount
	}
	return 0
}

type OrderDiscount struct {
	CampaignId           *uint64                              `protobuf:"varint,1,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	PromotionType        *OrderDiscountCampaign_PromotionType `protobuf:"varint,2,opt,name=promotion_type,json=promotionType,enum=foody_base.OrderDiscountCampaign_PromotionType" json:"promotion_type,omitempty"`
	Discount             *uint64                              `protobuf:"varint,3,opt,name=discount" json:"discount,omitempty"`
	CampaignName         *string                              `protobuf:"bytes,4,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *OrderDiscount) Reset()         { *m = OrderDiscount{} }
func (m *OrderDiscount) String() string { return proto.CompactTextString(m) }
func (*OrderDiscount) ProtoMessage()    {}
func (*OrderDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{74}
}
func (m *OrderDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderDiscount.Merge(m, src)
}
func (m *OrderDiscount) XXX_Size() int {
	return m.Size()
}
func (m *OrderDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_OrderDiscount proto.InternalMessageInfo

func (m *OrderDiscount) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *OrderDiscount) GetPromotionType() OrderDiscountCampaign_PromotionType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return OrderDiscountCampaign_SHIPPING_FEE
}

func (m *OrderDiscount) GetDiscount() uint64 {
	if m != nil && m.Discount != nil {
		return *m.Discount
	}
	return 0
}

func (m *OrderDiscount) GetCampaignName() string {
	if m != nil && m.CampaignName != nil {
		return *m.CampaignName
	}
	return ""
}

type EarnCoins struct {
	Type                 *EarnCoins_Type `protobuf:"varint,1,opt,name=type,enum=foody_base.EarnCoins_Type" json:"type,omitempty"`
	Coins                *int64          `protobuf:"varint,2,opt,name=coins" json:"coins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EarnCoins) Reset()         { *m = EarnCoins{} }
func (m *EarnCoins) String() string { return proto.CompactTextString(m) }
func (*EarnCoins) ProtoMessage()    {}
func (*EarnCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{75}
}
func (m *EarnCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EarnCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EarnCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EarnCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarnCoins.Merge(m, src)
}
func (m *EarnCoins) XXX_Size() int {
	return m.Size()
}
func (m *EarnCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_EarnCoins.DiscardUnknown(m)
}

var xxx_messageInfo_EarnCoins proto.InternalMessageInfo

func (m *EarnCoins) GetType() EarnCoins_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return EarnCoins_ORDER
}

func (m *EarnCoins) GetCoins() int64 {
	if m != nil && m.Coins != nil {
		return *m.Coins
	}
	return 0
}

type Promotion struct {
	Voucher              *Voucher            `protobuf:"bytes,1,opt,name=voucher" json:"voucher,omitempty"` // Deprecated: Do not use.
	SpendCoins           *SpendCoins         `protobuf:"bytes,2,opt,name=spend_coins,json=spendCoins" json:"spend_coins,omitempty"`
	OrderDiscounts       []*OrderDiscount    `protobuf:"bytes,3,rep,name=order_discounts,json=orderDiscounts" json:"order_discounts,omitempty"`
	EarnCoins            *EarnCoins          `protobuf:"bytes,4,opt,name=earn_coins,json=earnCoins" json:"earn_coins,omitempty"`
	Vouchers             []*Voucher          `protobuf:"bytes,5,rep,name=vouchers" json:"vouchers,omitempty"`
	FlashSaleOrderItem   *FlashSaleOrderItem `protobuf:"bytes,6,opt,name=flash_sale_order_item,json=flashSaleOrderItem" json:"flash_sale_order_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Promotion) Reset()         { *m = Promotion{} }
func (m *Promotion) String() string { return proto.CompactTextString(m) }
func (*Promotion) ProtoMessage()    {}
func (*Promotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{76}
}
func (m *Promotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Promotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Promotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Promotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Promotion.Merge(m, src)
}
func (m *Promotion) XXX_Size() int {
	return m.Size()
}
func (m *Promotion) XXX_DiscardUnknown() {
	xxx_messageInfo_Promotion.DiscardUnknown(m)
}

var xxx_messageInfo_Promotion proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *Promotion) GetVoucher() *Voucher {
	if m != nil {
		return m.Voucher
	}
	return nil
}

func (m *Promotion) GetSpendCoins() *SpendCoins {
	if m != nil {
		return m.SpendCoins
	}
	return nil
}

func (m *Promotion) GetOrderDiscounts() []*OrderDiscount {
	if m != nil {
		return m.OrderDiscounts
	}
	return nil
}

func (m *Promotion) GetEarnCoins() *EarnCoins {
	if m != nil {
		return m.EarnCoins
	}
	return nil
}

func (m *Promotion) GetVouchers() []*Voucher {
	if m != nil {
		return m.Vouchers
	}
	return nil
}

func (m *Promotion) GetFlashSaleOrderItem() *FlashSaleOrderItem {
	if m != nil {
		return m.FlashSaleOrderItem
	}
	return nil
}

type ItemDiscountCampaign struct {
	Id                    *uint64                           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CampaignName          *string                           `protobuf:"bytes,2,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	PromotionType         *ItemDiscountType                 `protobuf:"varint,3,opt,name=promotion_type,json=promotionType,enum=foody_base.ItemDiscountType" json:"promotion_type,omitempty"`
	StartTime             *uint64                           `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime               *uint64                           `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	PromotionStatus       *ItemDiscountCampaign_Status      `protobuf:"varint,6,opt,name=promotion_status,json=promotionStatus,enum=foody_base.ItemDiscountCampaign_Status" json:"promotion_status,omitempty"`
	ItemQuantity          *uint64                           `protobuf:"varint,7,opt,name=item_quantity,json=itemQuantity" json:"item_quantity,omitempty"`
	StoreId               *uint64                           `protobuf:"varint,8,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Creator               *string                           `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	CreateTime            *uint64                           `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime            *uint64                           `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	MaxDiscountPercentage *uint32                           `protobuf:"varint,12,opt,name=max_discount_percentage,json=maxDiscountPercentage" json:"max_discount_percentage,omitempty"`
	ItemDiscounts         []*ItemDiscount                   `protobuf:"bytes,13,rep,name=item_discounts,json=itemDiscounts" json:"item_discounts,omitempty"`
	DiscountType          *DiscountType                     `protobuf:"varint,14,opt,name=discount_type,json=discountType,enum=foody_base.DiscountType" json:"discount_type,omitempty"`
	CreatorSource         *ItemDiscountCreatorSource        `protobuf:"varint,15,opt,name=creator_source,json=creatorSource,enum=foody_base.ItemDiscountCreatorSource" json:"creator_source,omitempty"`
	MaxDiscountAmount     *uint64                           `protobuf:"varint,16,opt,name=max_discount_amount,json=maxDiscountAmount" json:"max_discount_amount,omitempty"`
	Note                  *string                           `protobuf:"bytes,17,opt,name=note" json:"note,omitempty"`
	Purpose               *string                           `protobuf:"bytes,18,opt,name=purpose" json:"purpose,omitempty"`
	UserTags              *string                           `protobuf:"bytes,19,opt,name=user_tags,json=userTags" json:"user_tags,omitempty"`
	AppliedTimes          *ItemDiscountCampaignAppliedTimes `protobuf:"bytes,20,opt,name=applied_times,json=appliedTimes" json:"applied_times,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                          `json:"-"`
	XXX_unrecognized      []byte                            `json:"-"`
	XXX_sizecache         int32                             `json:"-"`
}

func (m *ItemDiscountCampaign) Reset()         { *m = ItemDiscountCampaign{} }
func (m *ItemDiscountCampaign) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountCampaign) ProtoMessage()    {}
func (*ItemDiscountCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{77}
}
func (m *ItemDiscountCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountCampaign.Merge(m, src)
}
func (m *ItemDiscountCampaign) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountCampaign proto.InternalMessageInfo

func (m *ItemDiscountCampaign) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemDiscountCampaign) GetCampaignName() string {
	if m != nil && m.CampaignName != nil {
		return *m.CampaignName
	}
	return ""
}

func (m *ItemDiscountCampaign) GetPromotionType() ItemDiscountType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return ItemDiscountType_None
}

func (m *ItemDiscountCampaign) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ItemDiscountCampaign) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *ItemDiscountCampaign) GetPromotionStatus() ItemDiscountCampaign_Status {
	if m != nil && m.PromotionStatus != nil {
		return *m.PromotionStatus
	}
	return ItemDiscountCampaign_DISABLED
}

func (m *ItemDiscountCampaign) GetItemQuantity() uint64 {
	if m != nil && m.ItemQuantity != nil {
		return *m.ItemQuantity
	}
	return 0
}

func (m *ItemDiscountCampaign) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *ItemDiscountCampaign) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *ItemDiscountCampaign) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ItemDiscountCampaign) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ItemDiscountCampaign) GetMaxDiscountPercentage() uint32 {
	if m != nil && m.MaxDiscountPercentage != nil {
		return *m.MaxDiscountPercentage
	}
	return 0
}

func (m *ItemDiscountCampaign) GetItemDiscounts() []*ItemDiscount {
	if m != nil {
		return m.ItemDiscounts
	}
	return nil
}

func (m *ItemDiscountCampaign) GetDiscountType() DiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return DiscountType_PRICE
}

func (m *ItemDiscountCampaign) GetCreatorSource() ItemDiscountCreatorSource {
	if m != nil && m.CreatorSource != nil {
		return *m.CreatorSource
	}
	return ItemDiscountCreatorSource_CREATOR_ADMIN
}

func (m *ItemDiscountCampaign) GetMaxDiscountAmount() uint64 {
	if m != nil && m.MaxDiscountAmount != nil {
		return *m.MaxDiscountAmount
	}
	return 0
}

func (m *ItemDiscountCampaign) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *ItemDiscountCampaign) GetPurpose() string {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return ""
}

func (m *ItemDiscountCampaign) GetUserTags() string {
	if m != nil && m.UserTags != nil {
		return *m.UserTags
	}
	return ""
}

func (m *ItemDiscountCampaign) GetAppliedTimes() *ItemDiscountCampaignAppliedTimes {
	if m != nil {
		return m.AppliedTimes
	}
	return nil
}

type ItemDiscount struct {
	Id                   *uint64                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DishId               *uint64                    `protobuf:"varint,2,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	DiscountPrice        *uint64                    `protobuf:"varint,3,opt,name=discount_price,json=discountPrice" json:"discount_price,omitempty"`
	LimitPerOrder        *uint64                    `protobuf:"varint,4,opt,name=limit_per_order,json=limitPerOrder" json:"limit_per_order,omitempty"`
	DiscountStatus       *ItemDiscount_Status       `protobuf:"varint,5,opt,name=discount_status,json=discountStatus,enum=foody_base.ItemDiscount_Status" json:"discount_status,omitempty"`
	CampaignId           *uint64                    `protobuf:"varint,6,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	StoreId              *uint64                    `protobuf:"varint,7,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Creator              *string                    `protobuf:"bytes,8,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64                    `protobuf:"varint,9,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                    `protobuf:"varint,10,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CampaignStartTime    *uint64                    `protobuf:"varint,11,opt,name=campaign_start_time,json=campaignStartTime" json:"campaign_start_time,omitempty"`
	CampaignEndTime      *uint64                    `protobuf:"varint,12,opt,name=campaign_end_time,json=campaignEndTime" json:"campaign_end_time,omitempty"`
	DiscountPercentage   *uint32                    `protobuf:"varint,13,opt,name=discount_percentage,json=discountPercentage" json:"discount_percentage,omitempty"`
	GroupId              *string                    `protobuf:"bytes,14,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	DiscountType         *DiscountType              `protobuf:"varint,15,opt,name=discount_type,json=discountType,enum=foody_base.DiscountType" json:"discount_type,omitempty"`
	DiscountAmount       *uint64                    `protobuf:"varint,16,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	CreatorSource        *ItemDiscountCreatorSource `protobuf:"varint,17,opt,name=creator_source,json=creatorSource,enum=foody_base.ItemDiscountCreatorSource" json:"creator_source,omitempty"`
	Stock                *uint32                    `protobuf:"varint,18,opt,name=stock" json:"stock,omitempty"`
	SoldNum              *uint32                    `protobuf:"varint,19,opt,name=sold_num,json=soldNum" json:"sold_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ItemDiscount) Reset()         { *m = ItemDiscount{} }
func (m *ItemDiscount) String() string { return proto.CompactTextString(m) }
func (*ItemDiscount) ProtoMessage()    {}
func (*ItemDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{78}
}
func (m *ItemDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscount.Merge(m, src)
}
func (m *ItemDiscount) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscount proto.InternalMessageInfo

func (m *ItemDiscount) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemDiscount) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *ItemDiscount) GetDiscountPrice() uint64 {
	if m != nil && m.DiscountPrice != nil {
		return *m.DiscountPrice
	}
	return 0
}

func (m *ItemDiscount) GetLimitPerOrder() uint64 {
	if m != nil && m.LimitPerOrder != nil {
		return *m.LimitPerOrder
	}
	return 0
}

func (m *ItemDiscount) GetDiscountStatus() ItemDiscount_Status {
	if m != nil && m.DiscountStatus != nil {
		return *m.DiscountStatus
	}
	return ItemDiscount_DISABLED
}

func (m *ItemDiscount) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *ItemDiscount) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *ItemDiscount) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *ItemDiscount) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ItemDiscount) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ItemDiscount) GetCampaignStartTime() uint64 {
	if m != nil && m.CampaignStartTime != nil {
		return *m.CampaignStartTime
	}
	return 0
}

func (m *ItemDiscount) GetCampaignEndTime() uint64 {
	if m != nil && m.CampaignEndTime != nil {
		return *m.CampaignEndTime
	}
	return 0
}

func (m *ItemDiscount) GetDiscountPercentage() uint32 {
	if m != nil && m.DiscountPercentage != nil {
		return *m.DiscountPercentage
	}
	return 0
}

func (m *ItemDiscount) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *ItemDiscount) GetDiscountType() DiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return DiscountType_PRICE
}

func (m *ItemDiscount) GetDiscountAmount() uint64 {
	if m != nil && m.DiscountAmount != nil {
		return *m.DiscountAmount
	}
	return 0
}

func (m *ItemDiscount) GetCreatorSource() ItemDiscountCreatorSource {
	if m != nil && m.CreatorSource != nil {
		return *m.CreatorSource
	}
	return ItemDiscountCreatorSource_CREATOR_ADMIN
}

func (m *ItemDiscount) GetStock() uint32 {
	if m != nil && m.Stock != nil {
		return *m.Stock
	}
	return 0
}

func (m *ItemDiscount) GetSoldNum() uint32 {
	if m != nil && m.SoldNum != nil {
		return *m.SoldNum
	}
	return 0
}

type ItemDiscountRecord struct {
	Id                   *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ItemDiscountId       *uint64                        `protobuf:"varint,2,opt,name=item_discount_id,json=itemDiscountId" json:"item_discount_id,omitempty"`
	OrderId              *uint64                        `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	OrderItemId          *uint64                        `protobuf:"varint,4,opt,name=order_item_id,json=orderItemId" json:"order_item_id,omitempty"`
	BuyerId              *uint64                        `protobuf:"varint,5,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	StoreId              *uint64                        `protobuf:"varint,6,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DishId               *uint64                        `protobuf:"varint,7,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	Quantity             *uint32                        `protobuf:"varint,8,opt,name=quantity" json:"quantity,omitempty"`
	ReturnQuantity       *uint32                        `protobuf:"varint,9,opt,name=return_quantity,json=returnQuantity" json:"return_quantity,omitempty"`
	CancelQuantity       *uint32                        `protobuf:"varint,10,opt,name=cancel_quantity,json=cancelQuantity" json:"cancel_quantity,omitempty"`
	SoldStatus           *ItemDiscountRecord_SoldStatus `protobuf:"varint,11,opt,name=sold_status,json=soldStatus,enum=foody_base.ItemDiscountRecord_SoldStatus" json:"sold_status,omitempty"`
	CreateTime           *uint64                        `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                        `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ReturnTime           *uint64                        `protobuf:"varint,14,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CancelTime           *uint64                        `protobuf:"varint,15,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ItemDiscountRecord) Reset()         { *m = ItemDiscountRecord{} }
func (m *ItemDiscountRecord) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountRecord) ProtoMessage()    {}
func (*ItemDiscountRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{79}
}
func (m *ItemDiscountRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountRecord.Merge(m, src)
}
func (m *ItemDiscountRecord) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountRecord proto.InternalMessageInfo

func (m *ItemDiscountRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ItemDiscountRecord) GetItemDiscountId() uint64 {
	if m != nil && m.ItemDiscountId != nil {
		return *m.ItemDiscountId
	}
	return 0
}

func (m *ItemDiscountRecord) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *ItemDiscountRecord) GetOrderItemId() uint64 {
	if m != nil && m.OrderItemId != nil {
		return *m.OrderItemId
	}
	return 0
}

func (m *ItemDiscountRecord) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *ItemDiscountRecord) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *ItemDiscountRecord) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *ItemDiscountRecord) GetQuantity() uint32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *ItemDiscountRecord) GetReturnQuantity() uint32 {
	if m != nil && m.ReturnQuantity != nil {
		return *m.ReturnQuantity
	}
	return 0
}

func (m *ItemDiscountRecord) GetCancelQuantity() uint32 {
	if m != nil && m.CancelQuantity != nil {
		return *m.CancelQuantity
	}
	return 0
}

func (m *ItemDiscountRecord) GetSoldStatus() ItemDiscountRecord_SoldStatus {
	if m != nil && m.SoldStatus != nil {
		return *m.SoldStatus
	}
	return ItemDiscountRecord_SoldInited
}

func (m *ItemDiscountRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ItemDiscountRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ItemDiscountRecord) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *ItemDiscountRecord) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

type PromotionObject struct {
	PromotionId          *uint64                              `protobuf:"varint,1,opt,name=promotion_id,json=promotionId" json:"promotion_id,omitempty"`
	PromotionName        *string                              `protobuf:"bytes,2,opt,name=promotion_name,json=promotionName" json:"promotion_name,omitempty"`
	PromotionToolId      *uint64                              `protobuf:"varint,3,opt,name=promotion_tool_id,json=promotionToolId" json:"promotion_tool_id,omitempty"`
	StoreId              *uint64                              `protobuf:"varint,4,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	PromotionType        *PromotionObject_PromotionType       `protobuf:"varint,5,opt,name=promotion_type,json=promotionType,enum=foody_base.PromotionObject_PromotionType" json:"promotion_type,omitempty"`
	StartTime            *uint64                              `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64                              `protobuf:"varint,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Status               *PromotionObject_PromotionStatus     `protobuf:"varint,8,opt,name=status,enum=foody_base.PromotionObject_PromotionStatus" json:"status,omitempty"`
	ShowStatus           *PromotionObject_PromotionShowStatus `protobuf:"varint,9,opt,name=show_status,json=showStatus,enum=foody_base.PromotionObject_PromotionShowStatus" json:"show_status,omitempty"`
	ExtInfo              *PromotionObject_PromotionExtInfo    `protobuf:"bytes,10,opt,name=ext_info,json=extInfo" json:"ext_info,omitempty"`
	CreateTime           *uint64                              `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                              `protobuf:"varint,12,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	PromotionNameInfo    *PromotionObject_PromotionNameInfo   `protobuf:"bytes,13,opt,name=promotion_name_info,json=promotionNameInfo" json:"promotion_name_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *PromotionObject) Reset()         { *m = PromotionObject{} }
func (m *PromotionObject) String() string { return proto.CompactTextString(m) }
func (*PromotionObject) ProtoMessage()    {}
func (*PromotionObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80}
}
func (m *PromotionObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionObject.Merge(m, src)
}
func (m *PromotionObject) XXX_Size() int {
	return m.Size()
}
func (m *PromotionObject) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionObject.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionObject proto.InternalMessageInfo

func (m *PromotionObject) GetPromotionId() uint64 {
	if m != nil && m.PromotionId != nil {
		return *m.PromotionId
	}
	return 0
}

func (m *PromotionObject) GetPromotionName() string {
	if m != nil && m.PromotionName != nil {
		return *m.PromotionName
	}
	return ""
}

func (m *PromotionObject) GetPromotionToolId() uint64 {
	if m != nil && m.PromotionToolId != nil {
		return *m.PromotionToolId
	}
	return 0
}

func (m *PromotionObject) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *PromotionObject) GetPromotionType() PromotionObject_PromotionType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return PromotionObject_ITEM_DISCOUNT
}

func (m *PromotionObject) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *PromotionObject) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *PromotionObject) GetStatus() PromotionObject_PromotionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return PromotionObject_DISABLED
}

func (m *PromotionObject) GetShowStatus() PromotionObject_PromotionShowStatus {
	if m != nil && m.ShowStatus != nil {
		return *m.ShowStatus
	}
	return PromotionObject_PENDING
}

func (m *PromotionObject) GetExtInfo() *PromotionObject_PromotionExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func (m *PromotionObject) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PromotionObject) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PromotionObject) GetPromotionNameInfo() *PromotionObject_PromotionNameInfo {
	if m != nil {
		return m.PromotionNameInfo
	}
	return nil
}

type PromotionObject_PromotionExtInfo struct {
	Tags                 []string     `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	PromotionImage       *string      `protobuf:"bytes,2,opt,name=promotion_image,json=promotionImage" json:"promotion_image,omitempty"`
	Buttons              []*Button    `protobuf:"bytes,3,rep,name=buttons" json:"buttons,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	ReviewStatus         *string      `protobuf:"bytes,5,opt,name=review_status,json=reviewStatus" json:"review_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PromotionObject_PromotionExtInfo) Reset()         { *m = PromotionObject_PromotionExtInfo{} }
func (m *PromotionObject_PromotionExtInfo) String() string { return proto.CompactTextString(m) }
func (*PromotionObject_PromotionExtInfo) ProtoMessage()    {}
func (*PromotionObject_PromotionExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80, 0}
}
func (m *PromotionObject_PromotionExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionObject_PromotionExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionObject_PromotionExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionObject_PromotionExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionObject_PromotionExtInfo.Merge(m, src)
}
func (m *PromotionObject_PromotionExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *PromotionObject_PromotionExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionObject_PromotionExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionObject_PromotionExtInfo proto.InternalMessageInfo

func (m *PromotionObject_PromotionExtInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PromotionObject_PromotionExtInfo) GetPromotionImage() string {
	if m != nil && m.PromotionImage != nil {
		return *m.PromotionImage
	}
	return ""
}

func (m *PromotionObject_PromotionExtInfo) GetButtons() []*Button {
	if m != nil {
		return m.Buttons
	}
	return nil
}

func (m *PromotionObject_PromotionExtInfo) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *PromotionObject_PromotionExtInfo) GetReviewStatus() string {
	if m != nil && m.ReviewStatus != nil {
		return *m.ReviewStatus
	}
	return ""
}

type PromotionObject_PromotionNameInfo struct {
	MultiLangName        []*MultiLangTxt `protobuf:"bytes,1,rep,name=multi_lang_name,json=multiLangName" json:"multi_lang_name,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PromotionObject_PromotionNameInfo) Reset()         { *m = PromotionObject_PromotionNameInfo{} }
func (m *PromotionObject_PromotionNameInfo) String() string { return proto.CompactTextString(m) }
func (*PromotionObject_PromotionNameInfo) ProtoMessage()    {}
func (*PromotionObject_PromotionNameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{80, 1}
}
func (m *PromotionObject_PromotionNameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionObject_PromotionNameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionObject_PromotionNameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionObject_PromotionNameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionObject_PromotionNameInfo.Merge(m, src)
}
func (m *PromotionObject_PromotionNameInfo) XXX_Size() int {
	return m.Size()
}
func (m *PromotionObject_PromotionNameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionObject_PromotionNameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionObject_PromotionNameInfo proto.InternalMessageInfo

func (m *PromotionObject_PromotionNameInfo) GetMultiLangName() []*MultiLangTxt {
	if m != nil {
		return m.MultiLangName
	}
	return nil
}

func (m *PromotionObject_PromotionNameInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Button struct {
	ButtonName           *string            `protobuf:"bytes,1,opt,name=button_name,json=buttonName" json:"button_name,omitempty"`
	TransifyKey          *string            `protobuf:"bytes,2,opt,name=transify_key,json=transifyKey" json:"transify_key,omitempty"`
	RedirectInfo         *RedirectInfo      `protobuf:"bytes,3,opt,name=redirect_info,json=redirectInfo" json:"redirect_info,omitempty"`
	ButtonType           *Button_ButtonType `protobuf:"varint,4,opt,name=button_type,json=buttonType,enum=foody_base.Button_ButtonType" json:"button_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Button) Reset()         { *m = Button{} }
func (m *Button) String() string { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()    {}
func (*Button) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{81}
}
func (m *Button) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Button) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Button.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Button) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Button.Merge(m, src)
}
func (m *Button) XXX_Size() int {
	return m.Size()
}
func (m *Button) XXX_DiscardUnknown() {
	xxx_messageInfo_Button.DiscardUnknown(m)
}

var xxx_messageInfo_Button proto.InternalMessageInfo

func (m *Button) GetButtonName() string {
	if m != nil && m.ButtonName != nil {
		return *m.ButtonName
	}
	return ""
}

func (m *Button) GetTransifyKey() string {
	if m != nil && m.TransifyKey != nil {
		return *m.TransifyKey
	}
	return ""
}

func (m *Button) GetRedirectInfo() *RedirectInfo {
	if m != nil {
		return m.RedirectInfo
	}
	return nil
}

func (m *Button) GetButtonType() Button_ButtonType {
	if m != nil && m.ButtonType != nil {
		return *m.ButtonType
	}
	return Button_PRIMARY
}

type Attribute struct {
	KeyInfo              *Attribute_KeyInfo       `protobuf:"bytes,1,opt,name=key_info,json=keyInfo" json:"key_info,omitempty"`
	ValueInfo            *Attribute_ValueInfo     `protobuf:"bytes,2,opt,name=value_info,json=valueInfo" json:"value_info,omitempty"`
	AttributeType        *Attribute_AttributeType `protobuf:"varint,3,opt,name=attribute_type,json=attributeType,enum=foody_base.Attribute_AttributeType" json:"attribute_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetKeyInfo() *Attribute_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Attribute) GetValueInfo() *Attribute_ValueInfo {
	if m != nil {
		return m.ValueInfo
	}
	return nil
}

func (m *Attribute) GetAttributeType() Attribute_AttributeType {
	if m != nil && m.AttributeType != nil {
		return *m.AttributeType
	}
	return Attribute_TEXT
}

type Attribute_KeyInfo struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	TransifyKey          *string  `protobuf:"bytes,2,opt,name=transify_key,json=transifyKey" json:"transify_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribute_KeyInfo) Reset()         { *m = Attribute_KeyInfo{} }
func (m *Attribute_KeyInfo) String() string { return proto.CompactTextString(m) }
func (*Attribute_KeyInfo) ProtoMessage()    {}
func (*Attribute_KeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82, 0}
}
func (m *Attribute_KeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute_KeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute_KeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute_KeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute_KeyInfo.Merge(m, src)
}
func (m *Attribute_KeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *Attribute_KeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute_KeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute_KeyInfo proto.InternalMessageInfo

func (m *Attribute_KeyInfo) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Attribute_KeyInfo) GetTransifyKey() string {
	if m != nil && m.TransifyKey != nil {
		return *m.TransifyKey
	}
	return ""
}

type Attribute_ValueInfo struct {
	Value                *string                            `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	TransifyKey          *string                            `protobuf:"bytes,2,opt,name=transify_key,json=transifyKey" json:"transify_key,omitempty"`
	Type                 *Attribute_ValueInfo_ValueInfoType `protobuf:"varint,3,opt,name=type,enum=foody_base.Attribute_ValueInfo_ValueInfoType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *Attribute_ValueInfo) Reset()         { *m = Attribute_ValueInfo{} }
func (m *Attribute_ValueInfo) String() string { return proto.CompactTextString(m) }
func (*Attribute_ValueInfo) ProtoMessage()    {}
func (*Attribute_ValueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{82, 1}
}
func (m *Attribute_ValueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute_ValueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute_ValueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute_ValueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute_ValueInfo.Merge(m, src)
}
func (m *Attribute_ValueInfo) XXX_Size() int {
	return m.Size()
}
func (m *Attribute_ValueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute_ValueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute_ValueInfo proto.InternalMessageInfo

func (m *Attribute_ValueInfo) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Attribute_ValueInfo) GetTransifyKey() string {
	if m != nil && m.TransifyKey != nil {
		return *m.TransifyKey
	}
	return ""
}

func (m *Attribute_ValueInfo) GetType() Attribute_ValueInfo_ValueInfoType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Attribute_ValueInfo_STRING
}

type RedirectInfo struct {
	RedirectUrl          *string                   `protobuf:"bytes,1,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
	ParamPairs           []*RedirectInfo_ParamPair `protobuf:"bytes,2,rep,name=param_pairs,json=paramPairs" json:"param_pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RedirectInfo) Reset()         { *m = RedirectInfo{} }
func (m *RedirectInfo) String() string { return proto.CompactTextString(m) }
func (*RedirectInfo) ProtoMessage()    {}
func (*RedirectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{83}
}
func (m *RedirectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedirectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedirectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedirectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectInfo.Merge(m, src)
}
func (m *RedirectInfo) XXX_Size() int {
	return m.Size()
}
func (m *RedirectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectInfo proto.InternalMessageInfo

func (m *RedirectInfo) GetRedirectUrl() string {
	if m != nil && m.RedirectUrl != nil {
		return *m.RedirectUrl
	}
	return ""
}

func (m *RedirectInfo) GetParamPairs() []*RedirectInfo_ParamPair {
	if m != nil {
		return m.ParamPairs
	}
	return nil
}

type RedirectInfo_ParamPair struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedirectInfo_ParamPair) Reset()         { *m = RedirectInfo_ParamPair{} }
func (m *RedirectInfo_ParamPair) String() string { return proto.CompactTextString(m) }
func (*RedirectInfo_ParamPair) ProtoMessage()    {}
func (*RedirectInfo_ParamPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{83, 0}
}
func (m *RedirectInfo_ParamPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedirectInfo_ParamPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedirectInfo_ParamPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedirectInfo_ParamPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedirectInfo_ParamPair.Merge(m, src)
}
func (m *RedirectInfo_ParamPair) XXX_Size() int {
	return m.Size()
}
func (m *RedirectInfo_ParamPair) XXX_DiscardUnknown() {
	xxx_messageInfo_RedirectInfo_ParamPair.DiscardUnknown(m)
}

var xxx_messageInfo_RedirectInfo_ParamPair proto.InternalMessageInfo

func (m *RedirectInfo_ParamPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *RedirectInfo_ParamPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type PromotionTool struct {
	Id                   *uint64                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PromotionToolType    *PromotionTool_PromotionToolType    `protobuf:"varint,2,opt,name=promotion_tool_type,json=promotionToolType,enum=foody_base.PromotionTool_PromotionToolType" json:"promotion_tool_type,omitempty"`
	ExtInfo              *PromotionTool_PromotionToolExtInfo `protobuf:"bytes,3,opt,name=ext_info,json=extInfo" json:"ext_info,omitempty"`
	CreateTime           *uint64                             `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                             `protobuf:"varint,5,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WhitelistScope       *PromotionTool_WhiteListScope       `protobuf:"varint,6,opt,name=whitelist_scope,json=whitelistScope,enum=foody_base.PromotionTool_WhiteListScope" json:"whitelist_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *PromotionTool) Reset()         { *m = PromotionTool{} }
func (m *PromotionTool) String() string { return proto.CompactTextString(m) }
func (*PromotionTool) ProtoMessage()    {}
func (*PromotionTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84}
}
func (m *PromotionTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionTool.Merge(m, src)
}
func (m *PromotionTool) XXX_Size() int {
	return m.Size()
}
func (m *PromotionTool) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionTool.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionTool proto.InternalMessageInfo

func (m *PromotionTool) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PromotionTool) GetPromotionToolType() PromotionTool_PromotionToolType {
	if m != nil && m.PromotionToolType != nil {
		return *m.PromotionToolType
	}
	return PromotionTool_ITEM_DISCOUNT
}

func (m *PromotionTool) GetExtInfo() *PromotionTool_PromotionToolExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func (m *PromotionTool) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PromotionTool) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PromotionTool) GetWhitelistScope() PromotionTool_WhiteListScope {
	if m != nil && m.WhitelistScope != nil {
		return *m.WhitelistScope
	}
	return PromotionTool_NONE
}

type PromotionTool_PromotionToolExtInfo struct {
	PromotionToolNameInfo *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo `protobuf:"bytes,1,opt,name=promotion_tool_name_info,json=promotionToolNameInfo" json:"promotion_tool_name_info,omitempty"`
	RedirectInfo          *RedirectInfo                                             `protobuf:"bytes,2,opt,name=redirect_info,json=redirectInfo" json:"redirect_info,omitempty"`
	DescriptionInfo       *PromotionTool_PromotionToolExtInfo_DescriptionInfo       `protobuf:"bytes,3,opt,name=description_info,json=descriptionInfo" json:"description_info,omitempty"`
	Logo                  *string                                                   `protobuf:"bytes,4,opt,name=logo" json:"logo,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                                  `json:"-"`
	XXX_unrecognized      []byte                                                    `json:"-"`
	XXX_sizecache         int32                                                     `json:"-"`
}

func (m *PromotionTool_PromotionToolExtInfo) Reset()         { *m = PromotionTool_PromotionToolExtInfo{} }
func (m *PromotionTool_PromotionToolExtInfo) String() string { return proto.CompactTextString(m) }
func (*PromotionTool_PromotionToolExtInfo) ProtoMessage()    {}
func (*PromotionTool_PromotionToolExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84, 0}
}
func (m *PromotionTool_PromotionToolExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionTool_PromotionToolExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionTool_PromotionToolExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionTool_PromotionToolExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo.Merge(m, src)
}
func (m *PromotionTool_PromotionToolExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *PromotionTool_PromotionToolExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionTool_PromotionToolExtInfo proto.InternalMessageInfo

func (m *PromotionTool_PromotionToolExtInfo) GetPromotionToolNameInfo() *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo {
	if m != nil {
		return m.PromotionToolNameInfo
	}
	return nil
}

func (m *PromotionTool_PromotionToolExtInfo) GetRedirectInfo() *RedirectInfo {
	if m != nil {
		return m.RedirectInfo
	}
	return nil
}

func (m *PromotionTool_PromotionToolExtInfo) GetDescriptionInfo() *PromotionTool_PromotionToolExtInfo_DescriptionInfo {
	if m != nil {
		return m.DescriptionInfo
	}
	return nil
}

func (m *PromotionTool_PromotionToolExtInfo) GetLogo() string {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return ""
}

type PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo struct {
	PromotionToolName    *string  `protobuf:"bytes,1,opt,name=promotion_tool_name,json=promotionToolName" json:"promotion_tool_name,omitempty"`
	TransifyKey          *string  `protobuf:"bytes,2,opt,name=transify_key,json=transifyKey" json:"transify_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) Reset() {
	*m = PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo{}
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) String() string {
	return proto.CompactTextString(m)
}
func (*PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) ProtoMessage() {}
func (*PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84, 0, 0}
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo.Merge(m, src)
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) XXX_Size() int {
	return m.Size()
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo proto.InternalMessageInfo

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) GetPromotionToolName() string {
	if m != nil && m.PromotionToolName != nil {
		return *m.PromotionToolName
	}
	return ""
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) GetTransifyKey() string {
	if m != nil && m.TransifyKey != nil {
		return *m.TransifyKey
	}
	return ""
}

type PromotionTool_PromotionToolExtInfo_DescriptionInfo struct {
	Description          *string  `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	TransifyKey          *string  `protobuf:"bytes,2,opt,name=transify_key,json=transifyKey" json:"transify_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) Reset() {
	*m = PromotionTool_PromotionToolExtInfo_DescriptionInfo{}
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) String() string {
	return proto.CompactTextString(m)
}
func (*PromotionTool_PromotionToolExtInfo_DescriptionInfo) ProtoMessage() {}
func (*PromotionTool_PromotionToolExtInfo_DescriptionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{84, 0, 1}
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionTool_PromotionToolExtInfo_DescriptionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo_DescriptionInfo.Merge(m, src)
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionTool_PromotionToolExtInfo_DescriptionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionTool_PromotionToolExtInfo_DescriptionInfo proto.InternalMessageInfo

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) GetTransifyKey() string {
	if m != nil && m.TransifyKey != nil {
		return *m.TransifyKey
	}
	return ""
}

type EventPromotion struct {
	Id                     *uint64                                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EventId                *uint64                                  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventPromotionNameInfo *EventPromotion_EventPromotionNameInfo   `protobuf:"bytes,3,opt,name=event_promotion_name_info,json=eventPromotionNameInfo" json:"event_promotion_name_info,omitempty"`
	StoreId                *uint64                                  `protobuf:"varint,4,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	PromotionType          *EventPromotion_PromotionType            `protobuf:"varint,5,opt,name=promotion_type,json=promotionType,enum=foody_base.EventPromotion_PromotionType" json:"promotion_type,omitempty"`
	StartTime              *uint64                                  `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime                *uint64                                  `protobuf:"varint,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	JoinedTime             *uint64                                  `protobuf:"varint,8,opt,name=joined_time,json=joinedTime" json:"joined_time,omitempty"`
	ShowStatus             *EventPromotion_EventPromotionShowStatus `protobuf:"varint,9,opt,name=show_status,json=showStatus,enum=foody_base.EventPromotion_EventPromotionShowStatus" json:"show_status,omitempty"`
	StoreSessionStatus     *EventPromotion_StoreSessionStatus       `protobuf:"varint,10,opt,name=store_session_status,json=storeSessionStatus,enum=foody_base.EventPromotion_StoreSessionStatus" json:"store_session_status,omitempty"`
	Status                 *EventPromotion_EventPromotionStatus     `protobuf:"varint,11,opt,name=status,enum=foody_base.EventPromotion_EventPromotionStatus" json:"status,omitempty"`
	ExtInfo                *EventPromotion_EventPromotionExtInfo    `protobuf:"bytes,12,opt,name=ext_info,json=extInfo" json:"ext_info,omitempty"`
	CreateTime             *uint64                                  `protobuf:"varint,13,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime             *uint64                                  `protobuf:"varint,14,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	RegisterStartTime      *uint64                                  `protobuf:"varint,15,opt,name=register_start_time,json=registerStartTime" json:"register_start_time,omitempty"`
	RegisterEndTime        *uint64                                  `protobuf:"varint,16,opt,name=register_end_time,json=registerEndTime" json:"register_end_time,omitempty"`
	SyncTime               *uint64                                  `protobuf:"varint,17,opt,name=sync_time,json=syncTime" json:"sync_time,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                 `json:"-"`
	XXX_unrecognized       []byte                                   `json:"-"`
	XXX_sizecache          int32                                    `json:"-"`
}

func (m *EventPromotion) Reset()         { *m = EventPromotion{} }
func (m *EventPromotion) String() string { return proto.CompactTextString(m) }
func (*EventPromotion) ProtoMessage()    {}
func (*EventPromotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85}
}
func (m *EventPromotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPromotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPromotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPromotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPromotion.Merge(m, src)
}
func (m *EventPromotion) XXX_Size() int {
	return m.Size()
}
func (m *EventPromotion) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPromotion.DiscardUnknown(m)
}

var xxx_messageInfo_EventPromotion proto.InternalMessageInfo

func (m *EventPromotion) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EventPromotion) GetEventId() uint64 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *EventPromotion) GetEventPromotionNameInfo() *EventPromotion_EventPromotionNameInfo {
	if m != nil {
		return m.EventPromotionNameInfo
	}
	return nil
}

func (m *EventPromotion) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *EventPromotion) GetPromotionType() EventPromotion_PromotionType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return EventPromotion_ITEM_DISCOUNT
}

func (m *EventPromotion) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *EventPromotion) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *EventPromotion) GetJoinedTime() uint64 {
	if m != nil && m.JoinedTime != nil {
		return *m.JoinedTime
	}
	return 0
}

func (m *EventPromotion) GetShowStatus() EventPromotion_EventPromotionShowStatus {
	if m != nil && m.ShowStatus != nil {
		return *m.ShowStatus
	}
	return EventPromotion_PENDING
}

func (m *EventPromotion) GetStoreSessionStatus() EventPromotion_StoreSessionStatus {
	if m != nil && m.StoreSessionStatus != nil {
		return *m.StoreSessionStatus
	}
	return EventPromotion_INVITED
}

func (m *EventPromotion) GetStatus() EventPromotion_EventPromotionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EventPromotion_DISABLED
}

func (m *EventPromotion) GetExtInfo() *EventPromotion_EventPromotionExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func (m *EventPromotion) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *EventPromotion) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *EventPromotion) GetRegisterStartTime() uint64 {
	if m != nil && m.RegisterStartTime != nil {
		return *m.RegisterStartTime
	}
	return 0
}

func (m *EventPromotion) GetRegisterEndTime() uint64 {
	if m != nil && m.RegisterEndTime != nil {
		return *m.RegisterEndTime
	}
	return 0
}

func (m *EventPromotion) GetSyncTime() uint64 {
	if m != nil && m.SyncTime != nil {
		return *m.SyncTime
	}
	return 0
}

type EventPromotion_EventPromotionExtInfo struct {
	Tags                 []string     `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	PromotionImage       *string      `protobuf:"bytes,2,opt,name=promotion_image,json=promotionImage" json:"promotion_image,omitempty"`
	Buttons              []*Button    `protobuf:"bytes,3,rep,name=buttons" json:"buttons,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	ReviewStatus         *string      `protobuf:"bytes,5,opt,name=review_status,json=reviewStatus" json:"review_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EventPromotion_EventPromotionExtInfo) Reset()         { *m = EventPromotion_EventPromotionExtInfo{} }
func (m *EventPromotion_EventPromotionExtInfo) String() string { return proto.CompactTextString(m) }
func (*EventPromotion_EventPromotionExtInfo) ProtoMessage()    {}
func (*EventPromotion_EventPromotionExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 0}
}
func (m *EventPromotion_EventPromotionExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPromotion_EventPromotionExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPromotion_EventPromotionExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPromotion_EventPromotionExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPromotion_EventPromotionExtInfo.Merge(m, src)
}
func (m *EventPromotion_EventPromotionExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *EventPromotion_EventPromotionExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPromotion_EventPromotionExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventPromotion_EventPromotionExtInfo proto.InternalMessageInfo

func (m *EventPromotion_EventPromotionExtInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventPromotion_EventPromotionExtInfo) GetPromotionImage() string {
	if m != nil && m.PromotionImage != nil {
		return *m.PromotionImage
	}
	return ""
}

func (m *EventPromotion_EventPromotionExtInfo) GetButtons() []*Button {
	if m != nil {
		return m.Buttons
	}
	return nil
}

func (m *EventPromotion_EventPromotionExtInfo) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EventPromotion_EventPromotionExtInfo) GetReviewStatus() string {
	if m != nil && m.ReviewStatus != nil {
		return *m.ReviewStatus
	}
	return ""
}

type EventPromotion_EventPromotionNameInfo struct {
	MultiLangName        []*MultiLangTxt `protobuf:"bytes,1,rep,name=multi_lang_name,json=multiLangName" json:"multi_lang_name,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventPromotion_EventPromotionNameInfo) Reset()         { *m = EventPromotion_EventPromotionNameInfo{} }
func (m *EventPromotion_EventPromotionNameInfo) String() string { return proto.CompactTextString(m) }
func (*EventPromotion_EventPromotionNameInfo) ProtoMessage()    {}
func (*EventPromotion_EventPromotionNameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{85, 1}
}
func (m *EventPromotion_EventPromotionNameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPromotion_EventPromotionNameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPromotion_EventPromotionNameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPromotion_EventPromotionNameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPromotion_EventPromotionNameInfo.Merge(m, src)
}
func (m *EventPromotion_EventPromotionNameInfo) XXX_Size() int {
	return m.Size()
}
func (m *EventPromotion_EventPromotionNameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPromotion_EventPromotionNameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventPromotion_EventPromotionNameInfo proto.InternalMessageInfo

func (m *EventPromotion_EventPromotionNameInfo) GetMultiLangName() []*MultiLangTxt {
	if m != nil {
		return m.MultiLangName
	}
	return nil
}

func (m *EventPromotion_EventPromotionNameInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type EventObject struct {
	EventId              *uint64                     `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventNameInfo        *EventObject_EventNameInfo  `protobuf:"bytes,2,opt,name=event_name_info,json=eventNameInfo" json:"event_name_info,omitempty"`
	PromotionType        *EventObject_PromotionType  `protobuf:"varint,3,opt,name=promotion_type,json=promotionType,enum=foody_base.EventObject_PromotionType" json:"promotion_type,omitempty"`
	RegisterStartTime    *uint64                     `protobuf:"varint,4,opt,name=register_start_time,json=registerStartTime" json:"register_start_time,omitempty"`
	RegisterEndTime      *uint64                     `protobuf:"varint,5,opt,name=register_end_time,json=registerEndTime" json:"register_end_time,omitempty"`
	StartTime            *uint64                     `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64                     `protobuf:"varint,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	EventExtInfo         *EventObject_EventExtInfo   `protobuf:"bytes,8,opt,name=event_ext_info,json=eventExtInfo" json:"event_ext_info,omitempty"`
	WhitelistScope       *EventObject_WhiteListScope `protobuf:"varint,9,opt,name=whitelist_scope,json=whitelistScope,enum=foody_base.EventObject_WhiteListScope" json:"whitelist_scope,omitempty"`
	CreateTime           *uint64                     `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                     `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Status               *EventObject_EventStatus    `protobuf:"varint,12,opt,name=status,enum=foody_base.EventObject_EventStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *EventObject) Reset()         { *m = EventObject{} }
func (m *EventObject) String() string { return proto.CompactTextString(m) }
func (*EventObject) ProtoMessage()    {}
func (*EventObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86}
}
func (m *EventObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObject.Merge(m, src)
}
func (m *EventObject) XXX_Size() int {
	return m.Size()
}
func (m *EventObject) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObject.DiscardUnknown(m)
}

var xxx_messageInfo_EventObject proto.InternalMessageInfo

func (m *EventObject) GetEventId() uint64 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *EventObject) GetEventNameInfo() *EventObject_EventNameInfo {
	if m != nil {
		return m.EventNameInfo
	}
	return nil
}

func (m *EventObject) GetPromotionType() EventObject_PromotionType {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return EventObject_ITEM_DISCOUNT
}

func (m *EventObject) GetRegisterStartTime() uint64 {
	if m != nil && m.RegisterStartTime != nil {
		return *m.RegisterStartTime
	}
	return 0
}

func (m *EventObject) GetRegisterEndTime() uint64 {
	if m != nil && m.RegisterEndTime != nil {
		return *m.RegisterEndTime
	}
	return 0
}

func (m *EventObject) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *EventObject) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *EventObject) GetEventExtInfo() *EventObject_EventExtInfo {
	if m != nil {
		return m.EventExtInfo
	}
	return nil
}

func (m *EventObject) GetWhitelistScope() EventObject_WhiteListScope {
	if m != nil && m.WhitelistScope != nil {
		return *m.WhitelistScope
	}
	return EventObject_NONE
}

func (m *EventObject) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *EventObject) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *EventObject) GetStatus() EventObject_EventStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EventObject_DISABLED
}

type EventObject_EventExtInfo struct {
	Tags                 []string      `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	MainBanner           *string       `protobuf:"bytes,2,opt,name=main_banner,json=mainBanner" json:"main_banner,omitempty"`
	PromotionListImage   *string       `protobuf:"bytes,3,opt,name=promotion_list_image,json=promotionListImage" json:"promotion_list_image,omitempty"`
	Attributes           []*Attribute  `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	RedirectInfo         *RedirectInfo `protobuf:"bytes,5,opt,name=redirect_info,json=redirectInfo" json:"redirect_info,omitempty"`
	Buttons              []*Button     `protobuf:"bytes,6,rep,name=buttons" json:"buttons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EventObject_EventExtInfo) Reset()         { *m = EventObject_EventExtInfo{} }
func (m *EventObject_EventExtInfo) String() string { return proto.CompactTextString(m) }
func (*EventObject_EventExtInfo) ProtoMessage()    {}
func (*EventObject_EventExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86, 0}
}
func (m *EventObject_EventExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObject_EventExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObject_EventExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObject_EventExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObject_EventExtInfo.Merge(m, src)
}
func (m *EventObject_EventExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *EventObject_EventExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObject_EventExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventObject_EventExtInfo proto.InternalMessageInfo

func (m *EventObject_EventExtInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventObject_EventExtInfo) GetMainBanner() string {
	if m != nil && m.MainBanner != nil {
		return *m.MainBanner
	}
	return ""
}

func (m *EventObject_EventExtInfo) GetPromotionListImage() string {
	if m != nil && m.PromotionListImage != nil {
		return *m.PromotionListImage
	}
	return ""
}

func (m *EventObject_EventExtInfo) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EventObject_EventExtInfo) GetRedirectInfo() *RedirectInfo {
	if m != nil {
		return m.RedirectInfo
	}
	return nil
}

func (m *EventObject_EventExtInfo) GetButtons() []*Button {
	if m != nil {
		return m.Buttons
	}
	return nil
}

type EventObject_EventNameInfo struct {
	MultiLangName        []*MultiLangTxt `protobuf:"bytes,1,rep,name=multi_lang_name,json=multiLangName" json:"multi_lang_name,omitempty"`
	Name                 *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventObject_EventNameInfo) Reset()         { *m = EventObject_EventNameInfo{} }
func (m *EventObject_EventNameInfo) String() string { return proto.CompactTextString(m) }
func (*EventObject_EventNameInfo) ProtoMessage()    {}
func (*EventObject_EventNameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{86, 1}
}
func (m *EventObject_EventNameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObject_EventNameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObject_EventNameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObject_EventNameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObject_EventNameInfo.Merge(m, src)
}
func (m *EventObject_EventNameInfo) XXX_Size() int {
	return m.Size()
}
func (m *EventObject_EventNameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObject_EventNameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventObject_EventNameInfo proto.InternalMessageInfo

func (m *EventObject_EventNameInfo) GetMultiLangName() []*MultiLangTxt {
	if m != nil {
		return m.MultiLangName
	}
	return nil
}

func (m *EventObject_EventNameInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type WhiteList struct {
	EventId              *uint64                    `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	StoreId              *uint64                    `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Status               *WhiteList_WhiteListStatus `protobuf:"varint,3,opt,name=status,enum=foody_base.WhiteList_WhiteListStatus" json:"status,omitempty"`
	CreateTime           *uint64                    `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                    `protobuf:"varint,5,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	SyncTime             *uint64                    `protobuf:"varint,6,opt,name=sync_time,json=syncTime" json:"sync_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WhiteList) Reset()         { *m = WhiteList{} }
func (m *WhiteList) String() string { return proto.CompactTextString(m) }
func (*WhiteList) ProtoMessage()    {}
func (*WhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{87}
}
func (m *WhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteList.Merge(m, src)
}
func (m *WhiteList) XXX_Size() int {
	return m.Size()
}
func (m *WhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteList proto.InternalMessageInfo

func (m *WhiteList) GetEventId() uint64 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *WhiteList) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *WhiteList) GetStatus() WhiteList_WhiteListStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return WhiteList_VALID
}

func (m *WhiteList) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WhiteList) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WhiteList) GetSyncTime() uint64 {
	if m != nil && m.SyncTime != nil {
		return *m.SyncTime
	}
	return 0
}

type Tip struct {
	Id                   *uint64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuyerId              *uint64        `protobuf:"varint,2,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	DriverId             *uint64        `protobuf:"varint,3,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	WalletId             *uint64        `protobuf:"varint,4,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	OrderId              *uint64        `protobuf:"varint,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	TipStatus            *Tip_TipStatus `protobuf:"varint,6,opt,name=tip_status,json=tipStatus,enum=foody_base.Tip_TipStatus" json:"tip_status,omitempty"`
	Amount               *uint64        `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	TransactionRef       *uint64        `protobuf:"varint,8,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	PaymentMethod        *PaymentMethod `protobuf:"varint,9,opt,name=payment_method,json=paymentMethod,enum=foody_base.PaymentMethod" json:"payment_method,omitempty"`
	PaymentChannelId     *uint64        `protobuf:"varint,10,opt,name=payment_channel_id,json=paymentChannelId" json:"payment_channel_id,omitempty"`
	PaymentChannelOption *string        `protobuf:"bytes,11,opt,name=payment_channel_option,json=paymentChannelOption" json:"payment_channel_option,omitempty"`
	PaymentLink          *string        `protobuf:"bytes,12,opt,name=payment_link,json=paymentLink" json:"payment_link,omitempty"`
	Currency             *string        `protobuf:"bytes,13,opt,name=currency" json:"currency,omitempty"`
	Region               *string        `protobuf:"bytes,14,opt,name=region" json:"region,omitempty"`
	InitialTime          *uint64        `protobuf:"varint,15,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	PaymentTime          *uint64        `protobuf:"varint,16,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	CancelTime           *uint64        `protobuf:"varint,17,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CompleteTime         *uint64        `protobuf:"varint,18,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CreateTime           *uint64        `protobuf:"varint,19,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64        `protobuf:"varint,20,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	DeliveryOrderId      *uint64        `protobuf:"varint,21,opt,name=delivery_order_id,json=deliveryOrderId" json:"delivery_order_id,omitempty"`
	ExpressId            *uint64        `protobuf:"varint,22,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	ServiceType          *ServiceType   `protobuf:"varint,23,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	OldId                *uint64        `protobuf:"varint,24,opt,name=old_id,json=oldId" json:"old_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Tip) Reset()         { *m = Tip{} }
func (m *Tip) String() string { return proto.CompactTextString(m) }
func (*Tip) ProtoMessage()    {}
func (*Tip) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{88}
}
func (m *Tip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tip.Merge(m, src)
}
func (m *Tip) XXX_Size() int {
	return m.Size()
}
func (m *Tip) XXX_DiscardUnknown() {
	xxx_messageInfo_Tip.DiscardUnknown(m)
}

var xxx_messageInfo_Tip proto.InternalMessageInfo

func (m *Tip) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Tip) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *Tip) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *Tip) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *Tip) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *Tip) GetTipStatus() Tip_TipStatus {
	if m != nil && m.TipStatus != nil {
		return *m.TipStatus
	}
	return Tip_TIP_NONE
}

func (m *Tip) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *Tip) GetTransactionRef() uint64 {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return 0
}

func (m *Tip) GetPaymentMethod() PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *Tip) GetPaymentChannelId() uint64 {
	if m != nil && m.PaymentChannelId != nil {
		return *m.PaymentChannelId
	}
	return 0
}

func (m *Tip) GetPaymentChannelOption() string {
	if m != nil && m.PaymentChannelOption != nil {
		return *m.PaymentChannelOption
	}
	return ""
}

func (m *Tip) GetPaymentLink() string {
	if m != nil && m.PaymentLink != nil {
		return *m.PaymentLink
	}
	return ""
}

func (m *Tip) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *Tip) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *Tip) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *Tip) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *Tip) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *Tip) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *Tip) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Tip) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Tip) GetDeliveryOrderId() uint64 {
	if m != nil && m.DeliveryOrderId != nil {
		return *m.DeliveryOrderId
	}
	return 0
}

func (m *Tip) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

func (m *Tip) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *Tip) GetOldId() uint64 {
	if m != nil && m.OldId != nil {
		return *m.OldId
	}
	return 0
}

type StoreChargeback struct {
	Id                   *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StoreId              *uint64                `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	ReturnId             *uint64                `protobuf:"varint,3,opt,name=return_id,json=returnId" json:"return_id,omitempty"`
	OrderId              *uint64                `protobuf:"varint,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ChargebackStatus     *ChargebackStatus      `protobuf:"varint,5,opt,name=chargeback_status,json=chargebackStatus,enum=foody_base.ChargebackStatus" json:"chargeback_status,omitempty"`
	ChargebackAmount     *uint64                `protobuf:"varint,6,opt,name=chargeback_amount,json=chargebackAmount" json:"chargeback_amount,omitempty"`
	CompleteTime         *uint64                `protobuf:"varint,7,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime           *uint64                `protobuf:"varint,8,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	Operator             *string                `protobuf:"bytes,9,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64                `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ChargebackMethod     *StoreChargebackMethod `protobuf:"varint,12,opt,name=chargeback_method,json=chargebackMethod,enum=foody_base.StoreChargebackMethod" json:"chargeback_method,omitempty"`
	TransactionRef       *string                `protobuf:"bytes,13,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StoreChargeback) Reset()         { *m = StoreChargeback{} }
func (m *StoreChargeback) String() string { return proto.CompactTextString(m) }
func (*StoreChargeback) ProtoMessage()    {}
func (*StoreChargeback) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{89}
}
func (m *StoreChargeback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreChargeback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreChargeback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreChargeback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreChargeback.Merge(m, src)
}
func (m *StoreChargeback) XXX_Size() int {
	return m.Size()
}
func (m *StoreChargeback) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreChargeback.DiscardUnknown(m)
}

var xxx_messageInfo_StoreChargeback proto.InternalMessageInfo

func (m *StoreChargeback) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StoreChargeback) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *StoreChargeback) GetReturnId() uint64 {
	if m != nil && m.ReturnId != nil {
		return *m.ReturnId
	}
	return 0
}

func (m *StoreChargeback) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *StoreChargeback) GetChargebackStatus() ChargebackStatus {
	if m != nil && m.ChargebackStatus != nil {
		return *m.ChargebackStatus
	}
	return ChargebackStatus_CHARGEBACK_CREATED
}

func (m *StoreChargeback) GetChargebackAmount() uint64 {
	if m != nil && m.ChargebackAmount != nil {
		return *m.ChargebackAmount
	}
	return 0
}

func (m *StoreChargeback) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *StoreChargeback) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *StoreChargeback) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *StoreChargeback) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *StoreChargeback) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *StoreChargeback) GetChargebackMethod() StoreChargebackMethod {
	if m != nil && m.ChargebackMethod != nil {
		return *m.ChargebackMethod
	}
	return StoreChargebackMethod_CHARGEBACK_METHOD_DEFAULT
}

func (m *StoreChargeback) GetTransactionRef() string {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return ""
}

type BaseRule struct {
	Point                *uint32      `protobuf:"varint,1,opt,name=point" json:"point,omitempty"`
	WeekBits             *uint32      `protobuf:"varint,2,opt,name=week_bits,json=weekBits" json:"week_bits,omitempty"`
	IntervalStart        *uint64      `protobuf:"varint,3,opt,name=interval_start,json=intervalStart" json:"interval_start,omitempty"`
	IntervalEnd          *uint64      `protobuf:"varint,4,opt,name=interval_end,json=intervalEnd" json:"interval_end,omitempty"`
	ServiceType          *ServiceType `protobuf:"varint,5,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BaseRule) Reset()         { *m = BaseRule{} }
func (m *BaseRule) String() string { return proto.CompactTextString(m) }
func (*BaseRule) ProtoMessage()    {}
func (*BaseRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{90}
}
func (m *BaseRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRule.Merge(m, src)
}
func (m *BaseRule) XXX_Size() int {
	return m.Size()
}
func (m *BaseRule) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRule.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRule proto.InternalMessageInfo

func (m *BaseRule) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *BaseRule) GetWeekBits() uint32 {
	if m != nil && m.WeekBits != nil {
		return *m.WeekBits
	}
	return 0
}

func (m *BaseRule) GetIntervalStart() uint64 {
	if m != nil && m.IntervalStart != nil {
		return *m.IntervalStart
	}
	return 0
}

func (m *BaseRule) GetIntervalEnd() uint64 {
	if m != nil && m.IntervalEnd != nil {
		return *m.IntervalEnd
	}
	return 0
}

func (m *BaseRule) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

type SpecialRule struct {
	Point                *uint32               `protobuf:"varint,1,opt,name=point" json:"point,omitempty"`
	Type                 *SpecialRule_RuleType `protobuf:"varint,2,opt,name=type,enum=foody_base.SpecialRule_RuleType" json:"type,omitempty"`
	Detail               *SpecialRule_Detail   `protobuf:"bytes,3,opt,name=detail" json:"detail,omitempty"`
	ServiceType          *ServiceType          `protobuf:"varint,4,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SpecialRule) Reset()         { *m = SpecialRule{} }
func (m *SpecialRule) String() string { return proto.CompactTextString(m) }
func (*SpecialRule) ProtoMessage()    {}
func (*SpecialRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91}
}
func (m *SpecialRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRule.Merge(m, src)
}
func (m *SpecialRule) XXX_Size() int {
	return m.Size()
}
func (m *SpecialRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRule.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRule proto.InternalMessageInfo

func (m *SpecialRule) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *SpecialRule) GetType() SpecialRule_RuleType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SpecialRule_TIME
}

func (m *SpecialRule) GetDetail() *SpecialRule_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *SpecialRule) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

type SpecialRule_TimeRule struct {
	WeekBits             *uint32  `protobuf:"varint,1,opt,name=week_bits,json=weekBits" json:"week_bits,omitempty"`
	IntervalStart        *uint64  `protobuf:"varint,2,opt,name=interval_start,json=intervalStart" json:"interval_start,omitempty"`
	IntervalEnd          *uint64  `protobuf:"varint,3,opt,name=interval_end,json=intervalEnd" json:"interval_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialRule_TimeRule) Reset()         { *m = SpecialRule_TimeRule{} }
func (m *SpecialRule_TimeRule) String() string { return proto.CompactTextString(m) }
func (*SpecialRule_TimeRule) ProtoMessage()    {}
func (*SpecialRule_TimeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91, 0}
}
func (m *SpecialRule_TimeRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialRule_TimeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialRule_TimeRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialRule_TimeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRule_TimeRule.Merge(m, src)
}
func (m *SpecialRule_TimeRule) XXX_Size() int {
	return m.Size()
}
func (m *SpecialRule_TimeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRule_TimeRule.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRule_TimeRule proto.InternalMessageInfo

func (m *SpecialRule_TimeRule) GetWeekBits() uint32 {
	if m != nil && m.WeekBits != nil {
		return *m.WeekBits
	}
	return 0
}

func (m *SpecialRule_TimeRule) GetIntervalStart() uint64 {
	if m != nil && m.IntervalStart != nil {
		return *m.IntervalStart
	}
	return 0
}

func (m *SpecialRule_TimeRule) GetIntervalEnd() uint64 {
	if m != nil && m.IntervalEnd != nil {
		return *m.IntervalEnd
	}
	return 0
}

type SpecialRule_LocationGroupRule struct {
	LocationGroupIds         []uint64 `protobuf:"varint,1,rep,name=location_group_ids,json=locationGroupIds" json:"location_group_ids,omitempty"`
	LocationGroupDescription *string  `protobuf:"bytes,2,opt,name=location_group_description,json=locationGroupDescription" json:"location_group_description,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *SpecialRule_LocationGroupRule) Reset()         { *m = SpecialRule_LocationGroupRule{} }
func (m *SpecialRule_LocationGroupRule) String() string { return proto.CompactTextString(m) }
func (*SpecialRule_LocationGroupRule) ProtoMessage()    {}
func (*SpecialRule_LocationGroupRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91, 1}
}
func (m *SpecialRule_LocationGroupRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialRule_LocationGroupRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialRule_LocationGroupRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialRule_LocationGroupRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRule_LocationGroupRule.Merge(m, src)
}
func (m *SpecialRule_LocationGroupRule) XXX_Size() int {
	return m.Size()
}
func (m *SpecialRule_LocationGroupRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRule_LocationGroupRule.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRule_LocationGroupRule proto.InternalMessageInfo

func (m *SpecialRule_LocationGroupRule) GetLocationGroupIds() []uint64 {
	if m != nil {
		return m.LocationGroupIds
	}
	return nil
}

func (m *SpecialRule_LocationGroupRule) GetLocationGroupDescription() string {
	if m != nil && m.LocationGroupDescription != nil {
		return *m.LocationGroupDescription
	}
	return ""
}

type SpecialRule_OrderStackRule struct {
	IsPickUpPointEnabled  *Enabled `protobuf:"varint,1,opt,name=is_pick_up_point_enabled,json=isPickUpPointEnabled,enum=foody_base.Enabled" json:"is_pick_up_point_enabled,omitempty"`
	IsDropOffPointEnabled *Enabled `protobuf:"varint,2,opt,name=is_drop_off_point_enabled,json=isDropOffPointEnabled,enum=foody_base.Enabled" json:"is_drop_off_point_enabled,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SpecialRule_OrderStackRule) Reset()         { *m = SpecialRule_OrderStackRule{} }
func (m *SpecialRule_OrderStackRule) String() string { return proto.CompactTextString(m) }
func (*SpecialRule_OrderStackRule) ProtoMessage()    {}
func (*SpecialRule_OrderStackRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91, 2}
}
func (m *SpecialRule_OrderStackRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialRule_OrderStackRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialRule_OrderStackRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialRule_OrderStackRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRule_OrderStackRule.Merge(m, src)
}
func (m *SpecialRule_OrderStackRule) XXX_Size() int {
	return m.Size()
}
func (m *SpecialRule_OrderStackRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRule_OrderStackRule.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRule_OrderStackRule proto.InternalMessageInfo

func (m *SpecialRule_OrderStackRule) GetIsPickUpPointEnabled() Enabled {
	if m != nil && m.IsPickUpPointEnabled != nil {
		return *m.IsPickUpPointEnabled
	}
	return Enabled_DISABLED
}

func (m *SpecialRule_OrderStackRule) GetIsDropOffPointEnabled() Enabled {
	if m != nil && m.IsDropOffPointEnabled != nil {
		return *m.IsDropOffPointEnabled
	}
	return Enabled_DISABLED
}

type SpecialRule_Detail struct {
	TimeRule             *SpecialRule_TimeRule          `protobuf:"bytes,1,opt,name=time_rule,json=timeRule" json:"time_rule,omitempty"`
	LocationGroupRule    *SpecialRule_LocationGroupRule `protobuf:"bytes,2,opt,name=location_group_rule,json=locationGroupRule" json:"location_group_rule,omitempty"`
	OrderStackRule       *SpecialRule_OrderStackRule    `protobuf:"bytes,3,opt,name=order_stack_rule,json=orderStackRule" json:"order_stack_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SpecialRule_Detail) Reset()         { *m = SpecialRule_Detail{} }
func (m *SpecialRule_Detail) String() string { return proto.CompactTextString(m) }
func (*SpecialRule_Detail) ProtoMessage()    {}
func (*SpecialRule_Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{91, 3}
}
func (m *SpecialRule_Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialRule_Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialRule_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialRule_Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialRule_Detail.Merge(m, src)
}
func (m *SpecialRule_Detail) XXX_Size() int {
	return m.Size()
}
func (m *SpecialRule_Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialRule_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialRule_Detail proto.InternalMessageInfo

func (m *SpecialRule_Detail) GetTimeRule() *SpecialRule_TimeRule {
	if m != nil {
		return m.TimeRule
	}
	return nil
}

func (m *SpecialRule_Detail) GetLocationGroupRule() *SpecialRule_LocationGroupRule {
	if m != nil {
		return m.LocationGroupRule
	}
	return nil
}

func (m *SpecialRule_Detail) GetOrderStackRule() *SpecialRule_OrderStackRule {
	if m != nil {
		return m.OrderStackRule
	}
	return nil
}

type IncentivePlan struct {
	Id                       *uint64                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PlanName                 *string                    `protobuf:"bytes,2,opt,name=plan_name,json=planName" json:"plan_name,omitempty"`
	Description              *string                    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	PlanStatus               *IncentivePlan_PlanStatus  `protobuf:"varint,4,opt,name=plan_status,json=planStatus,enum=foody_base.IncentivePlan_PlanStatus" json:"plan_status,omitempty"`
	CashRules                []*IncentivePlan_CashRule  `protobuf:"bytes,5,rep,name=cash_rules,json=cashRules" json:"cash_rules,omitempty"`
	Requirement              *IncentivePlan_Requirement `protobuf:"bytes,6,opt,name=requirement" json:"requirement,omitempty"`
	BaseRule                 *BaseRule                  `protobuf:"bytes,7,opt,name=base_rule,json=baseRule" json:"base_rule,omitempty"`
	SpecialRules             []*SpecialRule             `protobuf:"bytes,8,rep,name=special_rules,json=specialRules" json:"special_rules,omitempty"`
	Creator                  *string                    `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	StartTime                *uint64                    `protobuf:"varint,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime                  *uint64                    `protobuf:"varint,11,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	CreateTime               *uint64                    `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime               *uint64                    `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	LocationGroupDescription *string                    `protobuf:"bytes,14,opt,name=location_group_description,json=locationGroupDescription" json:"location_group_description,omitempty"`
	Timezone                 *string                    `protobuf:"bytes,15,opt,name=timezone" json:"timezone,omitempty"`
	BaseRules                []*BaseRule                `protobuf:"bytes,16,rep,name=base_rules,json=baseRules" json:"base_rules,omitempty"`
	Rank                     *uint32                    `protobuf:"varint,17,opt,name=rank" json:"rank,omitempty"`
	CashConversionRuleId     *uint64                    `protobuf:"varint,18,opt,name=cash_conversion_rule_id,json=cashConversionRuleId" json:"cash_conversion_rule_id,omitempty"`
	ValidTime                *uint64                    `protobuf:"varint,19,opt,name=valid_time,json=validTime" json:"valid_time,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *IncentivePlan) Reset()         { *m = IncentivePlan{} }
func (m *IncentivePlan) String() string { return proto.CompactTextString(m) }
func (*IncentivePlan) ProtoMessage()    {}
func (*IncentivePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{92}
}
func (m *IncentivePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlan.Merge(m, src)
}
func (m *IncentivePlan) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlan.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlan proto.InternalMessageInfo

func (m *IncentivePlan) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IncentivePlan) GetPlanName() string {
	if m != nil && m.PlanName != nil {
		return *m.PlanName
	}
	return ""
}

func (m *IncentivePlan) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *IncentivePlan) GetPlanStatus() IncentivePlan_PlanStatus {
	if m != nil && m.PlanStatus != nil {
		return *m.PlanStatus
	}
	return IncentivePlan_NORMAL
}

func (m *IncentivePlan) GetCashRules() []*IncentivePlan_CashRule {
	if m != nil {
		return m.CashRules
	}
	return nil
}

func (m *IncentivePlan) GetRequirement() *IncentivePlan_Requirement {
	if m != nil {
		return m.Requirement
	}
	return nil
}

func (m *IncentivePlan) GetBaseRule() *BaseRule {
	if m != nil {
		return m.BaseRule
	}
	return nil
}

func (m *IncentivePlan) GetSpecialRules() []*SpecialRule {
	if m != nil {
		return m.SpecialRules
	}
	return nil
}

func (m *IncentivePlan) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *IncentivePlan) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *IncentivePlan) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *IncentivePlan) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *IncentivePlan) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *IncentivePlan) GetLocationGroupDescription() string {
	if m != nil && m.LocationGroupDescription != nil {
		return *m.LocationGroupDescription
	}
	return ""
}

func (m *IncentivePlan) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *IncentivePlan) GetBaseRules() []*BaseRule {
	if m != nil {
		return m.BaseRules
	}
	return nil
}

func (m *IncentivePlan) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *IncentivePlan) GetCashConversionRuleId() uint64 {
	if m != nil && m.CashConversionRuleId != nil {
		return *m.CashConversionRuleId
	}
	return 0
}

func (m *IncentivePlan) GetValidTime() uint64 {
	if m != nil && m.ValidTime != nil {
		return *m.ValidTime
	}
	return 0
}

type IncentivePlan_CashRule struct {
	Point                *uint32  `protobuf:"varint,1,opt,name=point" json:"point,omitempty"`
	Amount               *uint64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncentivePlan_CashRule) Reset()         { *m = IncentivePlan_CashRule{} }
func (m *IncentivePlan_CashRule) String() string { return proto.CompactTextString(m) }
func (*IncentivePlan_CashRule) ProtoMessage()    {}
func (*IncentivePlan_CashRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{92, 0}
}
func (m *IncentivePlan_CashRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlan_CashRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlan_CashRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlan_CashRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlan_CashRule.Merge(m, src)
}
func (m *IncentivePlan_CashRule) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlan_CashRule) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlan_CashRule.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlan_CashRule proto.InternalMessageInfo

func (m *IncentivePlan_CashRule) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *IncentivePlan_CashRule) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type IncentivePlan_Requirement struct {
	MinCompletionRate    *uint32  `protobuf:"varint,1,opt,name=min_completion_rate,json=minCompletionRate" json:"min_completion_rate,omitempty"`
	MinRatingScore       *float32 `protobuf:"fixed32,2,opt,name=min_rating_score,json=minRatingScore" json:"min_rating_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncentivePlan_Requirement) Reset()         { *m = IncentivePlan_Requirement{} }
func (m *IncentivePlan_Requirement) String() string { return proto.CompactTextString(m) }
func (*IncentivePlan_Requirement) ProtoMessage()    {}
func (*IncentivePlan_Requirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{92, 1}
}
func (m *IncentivePlan_Requirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlan_Requirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlan_Requirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlan_Requirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlan_Requirement.Merge(m, src)
}
func (m *IncentivePlan_Requirement) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlan_Requirement) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlan_Requirement.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlan_Requirement proto.InternalMessageInfo

func (m *IncentivePlan_Requirement) GetMinCompletionRate() uint32 {
	if m != nil && m.MinCompletionRate != nil {
		return *m.MinCompletionRate
	}
	return 0
}

func (m *IncentivePlan_Requirement) GetMinRatingScore() float32 {
	if m != nil && m.MinRatingScore != nil {
		return *m.MinRatingScore
	}
	return 0
}

type IncentiveTask struct {
	Id                   *uint64                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId             *uint64                            `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	PlanId               *uint64                            `protobuf:"varint,3,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`
	TaskDate             *uint32                            `protobuf:"varint,4,opt,name=task_date,json=taskDate" json:"task_date,omitempty"`
	StartTime            *uint64                            `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64                            `protobuf:"varint,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Point                *uint32                            `protobuf:"varint,7,opt,name=point" json:"point,omitempty"`
	CreditStatus         *IncentiveTask_CreditStatus        `protobuf:"varint,8,opt,name=credit_status,json=creditStatus,enum=foody_base.IncentiveTask_CreditStatus" json:"credit_status,omitempty"`
	Amount               *uint64                            `protobuf:"varint,9,opt,name=amount" json:"amount,omitempty"`
	CreateTime           *uint64                            `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                            `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	TaskStatus           *IncentiveTask_TaskStatus          `protobuf:"varint,12,opt,name=task_status,json=taskStatus,enum=foody_base.IncentiveTask_TaskStatus" json:"task_status,omitempty"`
	TaxInclusiveAmount   *uint64                            `protobuf:"varint,13,opt,name=tax_inclusive_amount,json=taxInclusiveAmount" json:"tax_inclusive_amount,omitempty"`
	PointSettlementType  *IncentiveTask_PointSettlementType `protobuf:"varint,14,opt,name=point_settlement_type,json=pointSettlementType,enum=foody_base.IncentiveTask_PointSettlementType" json:"point_settlement_type,omitempty"`
	RemainingOrder       *uint32                            `protobuf:"varint,15,opt,name=remaining_order,json=remainingOrder" json:"remaining_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *IncentiveTask) Reset()         { *m = IncentiveTask{} }
func (m *IncentiveTask) String() string { return proto.CompactTextString(m) }
func (*IncentiveTask) ProtoMessage()    {}
func (*IncentiveTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{93}
}
func (m *IncentiveTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveTask.Merge(m, src)
}
func (m *IncentiveTask) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveTask) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveTask.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveTask proto.InternalMessageInfo

func (m *IncentiveTask) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IncentiveTask) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *IncentiveTask) GetPlanId() uint64 {
	if m != nil && m.PlanId != nil {
		return *m.PlanId
	}
	return 0
}

func (m *IncentiveTask) GetTaskDate() uint32 {
	if m != nil && m.TaskDate != nil {
		return *m.TaskDate
	}
	return 0
}

func (m *IncentiveTask) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *IncentiveTask) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *IncentiveTask) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *IncentiveTask) GetCreditStatus() IncentiveTask_CreditStatus {
	if m != nil && m.CreditStatus != nil {
		return *m.CreditStatus
	}
	return IncentiveTask_CREATED
}

func (m *IncentiveTask) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *IncentiveTask) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *IncentiveTask) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *IncentiveTask) GetTaskStatus() IncentiveTask_TaskStatus {
	if m != nil && m.TaskStatus != nil {
		return *m.TaskStatus
	}
	return IncentiveTask_TASK_DEFAULT
}

func (m *IncentiveTask) GetTaxInclusiveAmount() uint64 {
	if m != nil && m.TaxInclusiveAmount != nil {
		return *m.TaxInclusiveAmount
	}
	return 0
}

func (m *IncentiveTask) GetPointSettlementType() IncentiveTask_PointSettlementType {
	if m != nil && m.PointSettlementType != nil {
		return *m.PointSettlementType
	}
	return IncentiveTask_POINT_SETTLEMENT_TYPE_UNKNOWN
}

func (m *IncentiveTask) GetRemainingOrder() uint32 {
	if m != nil && m.RemainingOrder != nil {
		return *m.RemainingOrder
	}
	return 0
}

type CashConversionRule struct {
	Id                   *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RuleName             *string                        `protobuf:"bytes,2,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
	CashRules            []*CashConversionRule_CashRule `protobuf:"bytes,3,rep,name=cash_rules,json=cashRules" json:"cash_rules,omitempty"`
	IsSelectionEnabled   *Enabled                       `protobuf:"varint,4,opt,name=is_selection_enabled,json=isSelectionEnabled,enum=foody_base.Enabled" json:"is_selection_enabled,omitempty"`
	Creator              *string                        `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64                        `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                        `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CashConversionRule) Reset()         { *m = CashConversionRule{} }
func (m *CashConversionRule) String() string { return proto.CompactTextString(m) }
func (*CashConversionRule) ProtoMessage()    {}
func (*CashConversionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{94}
}
func (m *CashConversionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CashConversionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CashConversionRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CashConversionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CashConversionRule.Merge(m, src)
}
func (m *CashConversionRule) XXX_Size() int {
	return m.Size()
}
func (m *CashConversionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CashConversionRule.DiscardUnknown(m)
}

var xxx_messageInfo_CashConversionRule proto.InternalMessageInfo

func (m *CashConversionRule) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CashConversionRule) GetRuleName() string {
	if m != nil && m.RuleName != nil {
		return *m.RuleName
	}
	return ""
}

func (m *CashConversionRule) GetCashRules() []*CashConversionRule_CashRule {
	if m != nil {
		return m.CashRules
	}
	return nil
}

func (m *CashConversionRule) GetIsSelectionEnabled() Enabled {
	if m != nil && m.IsSelectionEnabled != nil {
		return *m.IsSelectionEnabled
	}
	return Enabled_DISABLED
}

func (m *CashConversionRule) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *CashConversionRule) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *CashConversionRule) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type CashConversionRule_CashRule struct {
	Point                *uint32  `protobuf:"varint,1,opt,name=point" json:"point,omitempty"`
	Amount               *uint64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CashConversionRule_CashRule) Reset()         { *m = CashConversionRule_CashRule{} }
func (m *CashConversionRule_CashRule) String() string { return proto.CompactTextString(m) }
func (*CashConversionRule_CashRule) ProtoMessage()    {}
func (*CashConversionRule_CashRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{94, 0}
}
func (m *CashConversionRule_CashRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CashConversionRule_CashRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CashConversionRule_CashRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CashConversionRule_CashRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CashConversionRule_CashRule.Merge(m, src)
}
func (m *CashConversionRule_CashRule) XXX_Size() int {
	return m.Size()
}
func (m *CashConversionRule_CashRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CashConversionRule_CashRule.DiscardUnknown(m)
}

var xxx_messageInfo_CashConversionRule_CashRule proto.InternalMessageInfo

func (m *CashConversionRule_CashRule) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *CashConversionRule_CashRule) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type IncentiveSettlement struct {
	Id                   *uint64                               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId             *uint64                               `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	SettlementDate       *uint32                               `protobuf:"varint,3,opt,name=settlement_date,json=settlementDate" json:"settlement_date,omitempty"`
	SettlementStatus     *IncentiveSettlement_SettlementStatus `protobuf:"varint,4,opt,name=settlement_status,json=settlementStatus,enum=foody_base.IncentiveSettlement_SettlementStatus" json:"settlement_status,omitempty"`
	Point                *uint32                               `protobuf:"varint,5,opt,name=point" json:"point,omitempty"`
	TaxInclusiveAmount   *uint64                               `protobuf:"varint,6,opt,name=tax_inclusive_amount,json=taxInclusiveAmount" json:"tax_inclusive_amount,omitempty"`
	Amount               *uint64                               `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	CreditStatus         *IncentiveSettlement_CreditStatus     `protobuf:"varint,8,opt,name=credit_status,json=creditStatus,enum=foody_base.IncentiveSettlement_CreditStatus" json:"credit_status,omitempty"`
	CashConversionRuleId *uint64                               `protobuf:"varint,9,opt,name=cash_conversion_rule_id,json=cashConversionRuleId" json:"cash_conversion_rule_id,omitempty"`
	CreateTime           *uint64                               `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                               `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *IncentiveSettlement) Reset()         { *m = IncentiveSettlement{} }
func (m *IncentiveSettlement) String() string { return proto.CompactTextString(m) }
func (*IncentiveSettlement) ProtoMessage()    {}
func (*IncentiveSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{95}
}
func (m *IncentiveSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveSettlement.Merge(m, src)
}
func (m *IncentiveSettlement) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveSettlement proto.InternalMessageInfo

func (m *IncentiveSettlement) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IncentiveSettlement) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *IncentiveSettlement) GetSettlementDate() uint32 {
	if m != nil && m.SettlementDate != nil {
		return *m.SettlementDate
	}
	return 0
}

func (m *IncentiveSettlement) GetSettlementStatus() IncentiveSettlement_SettlementStatus {
	if m != nil && m.SettlementStatus != nil {
		return *m.SettlementStatus
	}
	return IncentiveSettlement_INCENTIVE_SETTLEMENT_STATUS_DEFAULT
}

func (m *IncentiveSettlement) GetPoint() uint32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *IncentiveSettlement) GetTaxInclusiveAmount() uint64 {
	if m != nil && m.TaxInclusiveAmount != nil {
		return *m.TaxInclusiveAmount
	}
	return 0
}

func (m *IncentiveSettlement) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *IncentiveSettlement) GetCreditStatus() IncentiveSettlement_CreditStatus {
	if m != nil && m.CreditStatus != nil {
		return *m.CreditStatus
	}
	return IncentiveSettlement_INCENTIVE_SETTLEMENT_CREDIT_STATUS_CREATE
}

func (m *IncentiveSettlement) GetCashConversionRuleId() uint64 {
	if m != nil && m.CashConversionRuleId != nil {
		return *m.CashConversionRuleId
	}
	return 0
}

func (m *IncentiveSettlement) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *IncentiveSettlement) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type VoucherRecord struct {
	Id                   *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VoucherId            *uint64               `protobuf:"varint,2,opt,name=voucher_id,json=voucherId" json:"voucher_id,omitempty"`
	VoucherCode          *string               `protobuf:"bytes,3,opt,name=voucher_code,json=voucherCode" json:"voucher_code,omitempty"`
	Signature            *string               `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	ReferenceId          *string               `protobuf:"bytes,5,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	TccTransactionId     *string               `protobuf:"bytes,6,opt,name=tcc_transaction_id,json=tccTransactionId" json:"tcc_transaction_id,omitempty"`
	OrderId              *uint64               `protobuf:"varint,7,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	StoreId              *uint64               `protobuf:"varint,8,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	BuyerId              *uint64               `protobuf:"varint,9,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	Data                 *string               `protobuf:"bytes,10,opt,name=data" json:"data,omitempty"`
	Status               *VoucherRecord_Status `protobuf:"varint,11,opt,name=status,enum=foody_base.VoucherRecord_Status" json:"status,omitempty"`
	CompleteTime         *uint64               `protobuf:"varint,12,opt,name=CompleteTime" json:"CompleteTime,omitempty"`
	ReturnTime           *uint64               `protobuf:"varint,13,opt,name=ReturnTime" json:"ReturnTime,omitempty"`
	CancelTime           *uint64               `protobuf:"varint,14,opt,name=CancelTime" json:"CancelTime,omitempty"`
	CreateTime           *uint64               `protobuf:"varint,15,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *uint64               `protobuf:"varint,16,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	AntiFraud            *string               `protobuf:"bytes,17,opt,name=anti_fraud,json=antiFraud" json:"anti_fraud,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VoucherRecord) Reset()         { *m = VoucherRecord{} }
func (m *VoucherRecord) String() string { return proto.CompactTextString(m) }
func (*VoucherRecord) ProtoMessage()    {}
func (*VoucherRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{96}
}
func (m *VoucherRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherRecord.Merge(m, src)
}
func (m *VoucherRecord) XXX_Size() int {
	return m.Size()
}
func (m *VoucherRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherRecord proto.InternalMessageInfo

func (m *VoucherRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VoucherRecord) GetVoucherId() uint64 {
	if m != nil && m.VoucherId != nil {
		return *m.VoucherId
	}
	return 0
}

func (m *VoucherRecord) GetVoucherCode() string {
	if m != nil && m.VoucherCode != nil {
		return *m.VoucherCode
	}
	return ""
}

func (m *VoucherRecord) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *VoucherRecord) GetReferenceId() string {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return ""
}

func (m *VoucherRecord) GetTccTransactionId() string {
	if m != nil && m.TccTransactionId != nil {
		return *m.TccTransactionId
	}
	return ""
}

func (m *VoucherRecord) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *VoucherRecord) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *VoucherRecord) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *VoucherRecord) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

func (m *VoucherRecord) GetStatus() VoucherRecord_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return VoucherRecord_CREATED
}

func (m *VoucherRecord) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *VoucherRecord) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *VoucherRecord) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *VoucherRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *VoucherRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *VoucherRecord) GetAntiFraud() string {
	if m != nil && m.AntiFraud != nil {
		return *m.AntiFraud
	}
	return ""
}

type AntiFraud struct {
	DeviceFingerprint    *string  `protobuf:"bytes,1,opt,name=DeviceFingerprint" json:"DeviceFingerprint,omitempty"`
	TongdunBlackbox      *string  `protobuf:"bytes,2,opt,name=TongdunBlackbox" json:"TongdunBlackbox,omitempty"`
	SecurityDf           *string  `protobuf:"bytes,3,opt,name=SecurityDf" json:"SecurityDf,omitempty"`
	Ip                   *string  `protobuf:"bytes,4,opt,name=Ip" json:"Ip,omitempty"`
	AppVersionName       *string  `protobuf:"bytes,5,opt,name=AppVersionName" json:"AppVersionName,omitempty"`
	UserAgentType        *uint64  `protobuf:"varint,6,opt,name=UserAgentType" json:"UserAgentType,omitempty"`
	AppType              *uint64  `protobuf:"varint,7,opt,name=AppType" json:"AppType,omitempty"`
	RnVersion            *string  `protobuf:"bytes,8,opt,name=rn_version,json=rnVersion" json:"rn_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AntiFraud) Reset()         { *m = AntiFraud{} }
func (m *AntiFraud) String() string { return proto.CompactTextString(m) }
func (*AntiFraud) ProtoMessage()    {}
func (*AntiFraud) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{97}
}
func (m *AntiFraud) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AntiFraud) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AntiFraud.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AntiFraud) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntiFraud.Merge(m, src)
}
func (m *AntiFraud) XXX_Size() int {
	return m.Size()
}
func (m *AntiFraud) XXX_DiscardUnknown() {
	xxx_messageInfo_AntiFraud.DiscardUnknown(m)
}

var xxx_messageInfo_AntiFraud proto.InternalMessageInfo

func (m *AntiFraud) GetDeviceFingerprint() string {
	if m != nil && m.DeviceFingerprint != nil {
		return *m.DeviceFingerprint
	}
	return ""
}

func (m *AntiFraud) GetTongdunBlackbox() string {
	if m != nil && m.TongdunBlackbox != nil {
		return *m.TongdunBlackbox
	}
	return ""
}

func (m *AntiFraud) GetSecurityDf() string {
	if m != nil && m.SecurityDf != nil {
		return *m.SecurityDf
	}
	return ""
}

func (m *AntiFraud) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *AntiFraud) GetAppVersionName() string {
	if m != nil && m.AppVersionName != nil {
		return *m.AppVersionName
	}
	return ""
}

func (m *AntiFraud) GetUserAgentType() uint64 {
	if m != nil && m.UserAgentType != nil {
		return *m.UserAgentType
	}
	return 0
}

func (m *AntiFraud) GetAppType() uint64 {
	if m != nil && m.AppType != nil {
		return *m.AppType
	}
	return 0
}

func (m *AntiFraud) GetRnVersion() string {
	if m != nil && m.RnVersion != nil {
		return *m.RnVersion
	}
	return ""
}

type DriverWalletPayment struct {
	Id                   *uint64                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MerchantId           *uint64                            `protobuf:"varint,2,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	PaymentType          *DriverWalletPayment_PaymentType   `protobuf:"varint,3,opt,name=payment_type,json=paymentType,enum=foody_base.DriverWalletPayment_PaymentType" json:"payment_type,omitempty"`
	DriverId             *uint64                            `protobuf:"varint,4,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	Amount               *uint64                            `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	PaymentStatus        *DriverWalletPayment_PaymentStatus `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,enum=foody_base.DriverWalletPayment_PaymentStatus" json:"payment_status,omitempty"`
	ReferenceId          *uint64                            `protobuf:"varint,7,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	InitTime             *uint64                            `protobuf:"varint,8,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	CompleteTime         *uint64                            `protobuf:"varint,9,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	RevokeTime           *uint64                            `protobuf:"varint,10,opt,name=revoke_time,json=revokeTime" json:"revoke_time,omitempty"`
	CreateTime           *uint64                            `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                            `protobuf:"varint,12,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ServiceType          *ServiceType                       `protobuf:"varint,13,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *DriverWalletPayment) Reset()         { *m = DriverWalletPayment{} }
func (m *DriverWalletPayment) String() string { return proto.CompactTextString(m) }
func (*DriverWalletPayment) ProtoMessage()    {}
func (*DriverWalletPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{98}
}
func (m *DriverWalletPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverWalletPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverWalletPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverWalletPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverWalletPayment.Merge(m, src)
}
func (m *DriverWalletPayment) XXX_Size() int {
	return m.Size()
}
func (m *DriverWalletPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverWalletPayment.DiscardUnknown(m)
}

var xxx_messageInfo_DriverWalletPayment proto.InternalMessageInfo

func (m *DriverWalletPayment) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverWalletPayment) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *DriverWalletPayment) GetPaymentType() DriverWalletPayment_PaymentType {
	if m != nil && m.PaymentType != nil {
		return *m.PaymentType
	}
	return DriverWalletPayment_PAY_OUT
}

func (m *DriverWalletPayment) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverWalletPayment) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DriverWalletPayment) GetPaymentStatus() DriverWalletPayment_PaymentStatus {
	if m != nil && m.PaymentStatus != nil {
		return *m.PaymentStatus
	}
	return DriverWalletPayment_INITED
}

func (m *DriverWalletPayment) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *DriverWalletPayment) GetInitTime() uint64 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *DriverWalletPayment) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *DriverWalletPayment) GetRevokeTime() uint64 {
	if m != nil && m.RevokeTime != nil {
		return *m.RevokeTime
	}
	return 0
}

func (m *DriverWalletPayment) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverWalletPayment) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverWalletPayment) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

type DriverWalletRecord struct {
	Id                   *uint64                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	WalletId             *uint64                             `protobuf:"varint,2,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	Amount               *uint64                             `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Balance              *int64                              `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	Currency             *string                             `protobuf:"bytes,5,opt,name=currency" json:"currency,omitempty"`
	TransactionType      *DriverWalletRecord_TransactionType `protobuf:"varint,6,opt,name=transaction_type,json=transactionType,enum=foody_base.DriverWalletRecord_TransactionType" json:"transaction_type,omitempty"`
	IsRevoked            *bool                               `protobuf:"varint,7,opt,name=is_revoked,json=isRevoked" json:"is_revoked,omitempty"`
	TransactionId        *uint64                             `protobuf:"varint,8,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Tag                  *RecordTag                          `protobuf:"varint,9,opt,name=tag,enum=foody_base.RecordTag" json:"tag,omitempty"`
	Remark               *string                             `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`
	Extend               *string                             `protobuf:"bytes,11,opt,name=extend" json:"extend,omitempty"`
	CreateTime           *uint64                             `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                             `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	AmountType           *DriverWalletRecord_AmountType      `protobuf:"varint,14,opt,name=amount_type,json=amountType,enum=foody_base.DriverWalletRecord_AmountType" json:"amount_type,omitempty"`
	BalanceVersion       *uint64                             `protobuf:"varint,15,opt,name=balance_version,json=balanceVersion" json:"balance_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DriverWalletRecord) Reset()         { *m = DriverWalletRecord{} }
func (m *DriverWalletRecord) String() string { return proto.CompactTextString(m) }
func (*DriverWalletRecord) ProtoMessage()    {}
func (*DriverWalletRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{99}
}
func (m *DriverWalletRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverWalletRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverWalletRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverWalletRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverWalletRecord.Merge(m, src)
}
func (m *DriverWalletRecord) XXX_Size() int {
	return m.Size()
}
func (m *DriverWalletRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverWalletRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DriverWalletRecord proto.InternalMessageInfo

func (m *DriverWalletRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverWalletRecord) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *DriverWalletRecord) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *DriverWalletRecord) GetBalance() int64 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

func (m *DriverWalletRecord) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *DriverWalletRecord) GetTransactionType() DriverWalletRecord_TransactionType {
	if m != nil && m.TransactionType != nil {
		return *m.TransactionType
	}
	return DriverWalletRecord_TOP_UP
}

func (m *DriverWalletRecord) GetIsRevoked() bool {
	if m != nil && m.IsRevoked != nil {
		return *m.IsRevoked
	}
	return false
}

func (m *DriverWalletRecord) GetTransactionId() uint64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *DriverWalletRecord) GetTag() RecordTag {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return RecordTag_TAG_FINE
}

func (m *DriverWalletRecord) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *DriverWalletRecord) GetExtend() string {
	if m != nil && m.Extend != nil {
		return *m.Extend
	}
	return ""
}

func (m *DriverWalletRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverWalletRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *DriverWalletRecord) GetAmountType() DriverWalletRecord_AmountType {
	if m != nil && m.AmountType != nil {
		return *m.AmountType
	}
	return DriverWalletRecord_CREDIT
}

func (m *DriverWalletRecord) GetBalanceVersion() uint64 {
	if m != nil && m.BalanceVersion != nil {
		return *m.BalanceVersion
	}
	return 0
}

type Penalty struct {
	Id              *uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId        *uint64           `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	PenaltyCategory *Penalty_Category `protobuf:"varint,3,opt,name=penalty_category,json=penaltyCategory,enum=foody_base.Penalty_Category" json:"penalty_category,omitempty"`
	PenaltySource   *QualitySource    `protobuf:"varint,4,opt,name=penalty_source,json=penaltySource,enum=foody_base.QualitySource" json:"penalty_source,omitempty"`
	//suspension
	SuspensionType    *Penalty_SuspensionType `protobuf:"varint,5,opt,name=suspension_type,json=suspensionType,enum=foody_base.Penalty_SuspensionType" json:"suspension_type,omitempty"`
	SuspensionSeconds *uint32                 `protobuf:"varint,6,opt,name=suspension_seconds,json=suspensionSeconds" json:"suspension_seconds,omitempty"`
	//fine
	FineType      *Penalty_FineType `protobuf:"varint,7,opt,name=fine_type,json=fineType,enum=foody_base.Penalty_FineType" json:"fine_type,omitempty"`
	FineAmount    *uint64           `protobuf:"varint,8,opt,name=fine_amount,json=fineAmount" json:"fine_amount,omitempty"`
	FinePaymentId *uint64           `protobuf:"varint,9,opt,name=fine_payment_id,json=finePaymentId" json:"fine_payment_id,omitempty"`
	//point
	Points             *uint32 `protobuf:"varint,10,opt,name=points" json:"points,omitempty"`
	PointsResetSeconds *uint32 `protobuf:"varint,11,opt,name=points_reset_seconds,json=pointsResetSeconds" json:"points_reset_seconds,omitempty"`
	PointsResetTime    *uint64 `protobuf:"varint,12,opt,name=points_reset_time,json=pointsResetTime" json:"points_reset_time,omitempty"`
	CurrentPoints      *uint32 `protobuf:"varint,13,opt,name=current_points,json=currentPoints" json:"current_points,omitempty"`
	//状态
	PenaltyStatus    *Penalty_Status `protobuf:"varint,20,opt,name=penalty_status,json=penaltyStatus,enum=foody_base.Penalty_Status" json:"penalty_status,omitempty"`
	InitialTime      *uint64         `protobuf:"varint,21,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	PenalizeTime     *uint64         `protobuf:"varint,22,opt,name=penalize_time,json=penalizeTime" json:"penalize_time,omitempty"`
	PenalizeFailTime *uint64         `protobuf:"varint,23,opt,name=penalize_fail_time,json=penalizeFailTime" json:"penalize_fail_time,omitempty"`
	RevokeTime       *uint64         `protobuf:"varint,24,opt,name=revoke_time,json=revokeTime" json:"revoke_time,omitempty"`
	//运营
	RevokeReason *string `protobuf:"bytes,30,opt,name=revoke_reason,json=revokeReason" json:"revoke_reason,omitempty"`
	Operator     *string `protobuf:"bytes,31,opt,name=operator" json:"operator,omitempty"`
	Creator      *string `protobuf:"bytes,32,opt,name=creator" json:"creator,omitempty"`
	//关联
	ParentIds            []uint64     `protobuf:"varint,34,rep,name=parent_ids,json=parentIds" json:"parent_ids,omitempty"`
	ViolationIds         []uint64     `protobuf:"varint,35,rep,name=violation_ids,json=violationIds" json:"violation_ids,omitempty"`
	DeliveryOrderId      *uint64      `protobuf:"varint,36,opt,name=delivery_order_id,json=deliveryOrderId" json:"delivery_order_id,omitempty"`
	RuleGroup            *string      `protobuf:"bytes,37,opt,name=rule_group,json=ruleGroup" json:"rule_group,omitempty"`
	CreateTime           *uint64      `protobuf:"varint,41,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64      `protobuf:"varint,42,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	EstimateExecuteTime  *uint64      `protobuf:"varint,43,opt,name=estimate_execute_time,json=estimateExecuteTime" json:"estimate_execute_time,omitempty"`
	EventTime            *uint64      `protobuf:"varint,44,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	ViolationId          *uint64      `protobuf:"varint,45,opt,name=violation_id,json=violationId" json:"violation_id,omitempty"`
	ServiceType          *ServiceType `protobuf:"varint,46,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	ExpressId            *uint64      `protobuf:"varint,47,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Penalty) Reset()         { *m = Penalty{} }
func (m *Penalty) String() string { return proto.CompactTextString(m) }
func (*Penalty) ProtoMessage()    {}
func (*Penalty) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{100}
}
func (m *Penalty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Penalty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Penalty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Penalty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Penalty.Merge(m, src)
}
func (m *Penalty) XXX_Size() int {
	return m.Size()
}
func (m *Penalty) XXX_DiscardUnknown() {
	xxx_messageInfo_Penalty.DiscardUnknown(m)
}

var xxx_messageInfo_Penalty proto.InternalMessageInfo

func (m *Penalty) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Penalty) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *Penalty) GetPenaltyCategory() Penalty_Category {
	if m != nil && m.PenaltyCategory != nil {
		return *m.PenaltyCategory
	}
	return Penalty_WARNING
}

func (m *Penalty) GetPenaltySource() QualitySource {
	if m != nil && m.PenaltySource != nil {
		return *m.PenaltySource
	}
	return QualitySource_QUALITY_SOURCE_UNKNOWN
}

func (m *Penalty) GetSuspensionType() Penalty_SuspensionType {
	if m != nil && m.SuspensionType != nil {
		return *m.SuspensionType
	}
	return Penalty_DEFAULT
}

func (m *Penalty) GetSuspensionSeconds() uint32 {
	if m != nil && m.SuspensionSeconds != nil {
		return *m.SuspensionSeconds
	}
	return 0
}

func (m *Penalty) GetFineType() Penalty_FineType {
	if m != nil && m.FineType != nil {
		return *m.FineType
	}
	return Penalty_TYPE_FINE_DEFAULT
}

func (m *Penalty) GetFineAmount() uint64 {
	if m != nil && m.FineAmount != nil {
		return *m.FineAmount
	}
	return 0
}

func (m *Penalty) GetFinePaymentId() uint64 {
	if m != nil && m.FinePaymentId != nil {
		return *m.FinePaymentId
	}
	return 0
}

func (m *Penalty) GetPoints() uint32 {
	if m != nil && m.Points != nil {
		return *m.Points
	}
	return 0
}

func (m *Penalty) GetPointsResetSeconds() uint32 {
	if m != nil && m.PointsResetSeconds != nil {
		return *m.PointsResetSeconds
	}
	return 0
}

func (m *Penalty) GetPointsResetTime() uint64 {
	if m != nil && m.PointsResetTime != nil {
		return *m.PointsResetTime
	}
	return 0
}

func (m *Penalty) GetCurrentPoints() uint32 {
	if m != nil && m.CurrentPoints != nil {
		return *m.CurrentPoints
	}
	return 0
}

func (m *Penalty) GetPenaltyStatus() Penalty_Status {
	if m != nil && m.PenaltyStatus != nil {
		return *m.PenaltyStatus
	}
	return Penalty_INITIATED
}

func (m *Penalty) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *Penalty) GetPenalizeTime() uint64 {
	if m != nil && m.PenalizeTime != nil {
		return *m.PenalizeTime
	}
	return 0
}

func (m *Penalty) GetPenalizeFailTime() uint64 {
	if m != nil && m.PenalizeFailTime != nil {
		return *m.PenalizeFailTime
	}
	return 0
}

func (m *Penalty) GetRevokeTime() uint64 {
	if m != nil && m.RevokeTime != nil {
		return *m.RevokeTime
	}
	return 0
}

func (m *Penalty) GetRevokeReason() string {
	if m != nil && m.RevokeReason != nil {
		return *m.RevokeReason
	}
	return ""
}

func (m *Penalty) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Penalty) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Penalty) GetParentIds() []uint64 {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

func (m *Penalty) GetViolationIds() []uint64 {
	if m != nil {
		return m.ViolationIds
	}
	return nil
}

func (m *Penalty) GetDeliveryOrderId() uint64 {
	if m != nil && m.DeliveryOrderId != nil {
		return *m.DeliveryOrderId
	}
	return 0
}

func (m *Penalty) GetRuleGroup() string {
	if m != nil && m.RuleGroup != nil {
		return *m.RuleGroup
	}
	return ""
}

func (m *Penalty) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Penalty) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Penalty) GetEstimateExecuteTime() uint64 {
	if m != nil && m.EstimateExecuteTime != nil {
		return *m.EstimateExecuteTime
	}
	return 0
}

func (m *Penalty) GetEventTime() uint64 {
	if m != nil && m.EventTime != nil {
		return *m.EventTime
	}
	return 0
}

func (m *Penalty) GetViolationId() uint64 {
	if m != nil && m.ViolationId != nil {
		return *m.ViolationId
	}
	return 0
}

func (m *Penalty) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *Penalty) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

type Violation struct {
	Id               *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId         *uint64 `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	DeliveryOrderId  *string `protobuf:"bytes,3,opt,name=delivery_order_id,json=deliveryOrderId" json:"delivery_order_id,omitempty"`
	EventDescription *string `protobuf:"bytes,4,opt,name=event_description,json=eventDescription" json:"event_description,omitempty"`
	EventTime        *uint64 `protobuf:"varint,5,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	//关联规则
	RuleCode             *string `protobuf:"bytes,10,opt,name=rule_code,json=ruleCode" json:"rule_code,omitempty"`
	RuleDescription      *string `protobuf:"bytes,11,opt,name=rule_description,json=ruleDescription" json:"rule_description,omitempty"`
	RuleName             *string `protobuf:"bytes,12,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
	RuleGroup            *string `protobuf:"bytes,13,opt,name=rule_group,json=ruleGroup" json:"rule_group,omitempty"`
	RuleGroupDescription *string `protobuf:"bytes,14,opt,name=rule_group_description,json=ruleGroupDescription" json:"rule_group_description,omitempty"`
	//状态信息
	ViolationStatus    *Violation_Status `protobuf:"varint,20,opt,name=violation_status,json=violationStatus,enum=foody_base.Violation_Status" json:"violation_status,omitempty"`
	InitialTime        *uint64           `protobuf:"varint,21,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	NoNeedPenalizeTime *uint64           `protobuf:"varint,22,opt,name=no_need_penalize_time,json=noNeedPenalizeTime" json:"no_need_penalize_time,omitempty"`
	PenalizingTime     *uint64           `protobuf:"varint,23,opt,name=penalizing_time,json=penalizingTime" json:"penalizing_time,omitempty"`
	PenalizeTime       *uint64           `protobuf:"varint,24,opt,name=penalize_time,json=penalizeTime" json:"penalize_time,omitempty"`
	PenalizeFailTime   *uint64           `protobuf:"varint,25,opt,name=penalize_fail_time,json=penalizeFailTime" json:"penalize_fail_time,omitempty"`
	RevokeTime         *uint64           `protobuf:"varint,26,opt,name=revoke_time,json=revokeTime" json:"revoke_time,omitempty"`
	//违规上下文
	ViolationSource          *QualitySource `protobuf:"varint,30,opt,name=violation_source,json=violationSource,enum=foody_base.QualitySource" json:"violation_source,omitempty"`
	Creator                  *string        `protobuf:"bytes,31,opt,name=creator" json:"creator,omitempty"`
	CreatorShift             *uint32        `protobuf:"varint,32,opt,name=creator_shift,json=creatorShift" json:"creator_shift,omitempty"`
	CustomizedFineAmount     *uint64        `protobuf:"varint,33,opt,name=customized_fine_amount,json=customizedFineAmount" json:"customized_fine_amount,omitempty"`
	ShippingFeeFineAmount    *uint64        `protobuf:"varint,34,opt,name=shipping_fee_fine_amount,json=shippingFeeFineAmount" json:"shipping_fee_fine_amount,omitempty"`
	IncentiveBonusFineEnable *uint32        `protobuf:"varint,35,opt,name=incentive_bonus_fine_enable,json=incentiveBonusFineEnable" json:"incentive_bonus_fine_enable,omitempty"`
	//运营操作
	RevokeReason   *string `protobuf:"bytes,40,opt,name=revoke_reason,json=revokeReason" json:"revoke_reason,omitempty"`
	RevokeOperator *string `protobuf:"bytes,41,opt,name=revoke_operator,json=revokeOperator" json:"revoke_operator,omitempty"`
	//时间戳
	CreateTime           *uint64      `protobuf:"varint,42,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64      `protobuf:"varint,43,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ServiceType          *ServiceType `protobuf:"varint,44,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	ExpressId            *uint64      `protobuf:"varint,45,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Violation) Reset()         { *m = Violation{} }
func (m *Violation) String() string { return proto.CompactTextString(m) }
func (*Violation) ProtoMessage()    {}
func (*Violation) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{101}
}
func (m *Violation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Violation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Violation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Violation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Violation.Merge(m, src)
}
func (m *Violation) XXX_Size() int {
	return m.Size()
}
func (m *Violation) XXX_DiscardUnknown() {
	xxx_messageInfo_Violation.DiscardUnknown(m)
}

var xxx_messageInfo_Violation proto.InternalMessageInfo

func (m *Violation) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Violation) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *Violation) GetDeliveryOrderId() string {
	if m != nil && m.DeliveryOrderId != nil {
		return *m.DeliveryOrderId
	}
	return ""
}

func (m *Violation) GetEventDescription() string {
	if m != nil && m.EventDescription != nil {
		return *m.EventDescription
	}
	return ""
}

func (m *Violation) GetEventTime() uint64 {
	if m != nil && m.EventTime != nil {
		return *m.EventTime
	}
	return 0
}

func (m *Violation) GetRuleCode() string {
	if m != nil && m.RuleCode != nil {
		return *m.RuleCode
	}
	return ""
}

func (m *Violation) GetRuleDescription() string {
	if m != nil && m.RuleDescription != nil {
		return *m.RuleDescription
	}
	return ""
}

func (m *Violation) GetRuleName() string {
	if m != nil && m.RuleName != nil {
		return *m.RuleName
	}
	return ""
}

func (m *Violation) GetRuleGroup() string {
	if m != nil && m.RuleGroup != nil {
		return *m.RuleGroup
	}
	return ""
}

func (m *Violation) GetRuleGroupDescription() string {
	if m != nil && m.RuleGroupDescription != nil {
		return *m.RuleGroupDescription
	}
	return ""
}

func (m *Violation) GetViolationStatus() Violation_Status {
	if m != nil && m.ViolationStatus != nil {
		return *m.ViolationStatus
	}
	return Violation_INITIATED
}

func (m *Violation) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *Violation) GetNoNeedPenalizeTime() uint64 {
	if m != nil && m.NoNeedPenalizeTime != nil {
		return *m.NoNeedPenalizeTime
	}
	return 0
}

func (m *Violation) GetPenalizingTime() uint64 {
	if m != nil && m.PenalizingTime != nil {
		return *m.PenalizingTime
	}
	return 0
}

func (m *Violation) GetPenalizeTime() uint64 {
	if m != nil && m.PenalizeTime != nil {
		return *m.PenalizeTime
	}
	return 0
}

func (m *Violation) GetPenalizeFailTime() uint64 {
	if m != nil && m.PenalizeFailTime != nil {
		return *m.PenalizeFailTime
	}
	return 0
}

func (m *Violation) GetRevokeTime() uint64 {
	if m != nil && m.RevokeTime != nil {
		return *m.RevokeTime
	}
	return 0
}

func (m *Violation) GetViolationSource() QualitySource {
	if m != nil && m.ViolationSource != nil {
		return *m.ViolationSource
	}
	return QualitySource_QUALITY_SOURCE_UNKNOWN
}

func (m *Violation) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Violation) GetCreatorShift() uint32 {
	if m != nil && m.CreatorShift != nil {
		return *m.CreatorShift
	}
	return 0
}

func (m *Violation) GetCustomizedFineAmount() uint64 {
	if m != nil && m.CustomizedFineAmount != nil {
		return *m.CustomizedFineAmount
	}
	return 0
}

func (m *Violation) GetShippingFeeFineAmount() uint64 {
	if m != nil && m.ShippingFeeFineAmount != nil {
		return *m.ShippingFeeFineAmount
	}
	return 0
}

func (m *Violation) GetIncentiveBonusFineEnable() uint32 {
	if m != nil && m.IncentiveBonusFineEnable != nil {
		return *m.IncentiveBonusFineEnable
	}
	return 0
}

func (m *Violation) GetRevokeReason() string {
	if m != nil && m.RevokeReason != nil {
		return *m.RevokeReason
	}
	return ""
}

func (m *Violation) GetRevokeOperator() string {
	if m != nil && m.RevokeOperator != nil {
		return *m.RevokeOperator
	}
	return ""
}

func (m *Violation) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Violation) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Violation) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *Violation) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

type Quality struct {
	Id                      *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId                *uint64  `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	Point                   *int32   `protobuf:"varint,3,opt,name=point" json:"point,omitempty"`
	RestrictWithdrawEndTime *uint64  `protobuf:"varint,4,opt,name=restrict_withdraw_end_time,json=restrictWithdrawEndTime" json:"restrict_withdraw_end_time,omitempty"`
	RestrictCheckinEndTime  *uint64  `protobuf:"varint,5,opt,name=restrict_checkin_end_time,json=restrictCheckinEndTime" json:"restrict_checkin_end_time,omitempty"`
	TerminateEnabled        *Enabled `protobuf:"varint,6,opt,name=terminate_enabled,json=terminateEnabled,enum=foody_base.Enabled" json:"terminate_enabled,omitempty"`
	CreateTime              *uint64  `protobuf:"varint,7,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime              *uint64  `protobuf:"varint,8,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Quality) Reset()         { *m = Quality{} }
func (m *Quality) String() string { return proto.CompactTextString(m) }
func (*Quality) ProtoMessage()    {}
func (*Quality) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{102}
}
func (m *Quality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quality.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quality.Merge(m, src)
}
func (m *Quality) XXX_Size() int {
	return m.Size()
}
func (m *Quality) XXX_DiscardUnknown() {
	xxx_messageInfo_Quality.DiscardUnknown(m)
}

var xxx_messageInfo_Quality proto.InternalMessageInfo

func (m *Quality) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Quality) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *Quality) GetPoint() int32 {
	if m != nil && m.Point != nil {
		return *m.Point
	}
	return 0
}

func (m *Quality) GetRestrictWithdrawEndTime() uint64 {
	if m != nil && m.RestrictWithdrawEndTime != nil {
		return *m.RestrictWithdrawEndTime
	}
	return 0
}

func (m *Quality) GetRestrictCheckinEndTime() uint64 {
	if m != nil && m.RestrictCheckinEndTime != nil {
		return *m.RestrictCheckinEndTime
	}
	return 0
}

func (m *Quality) GetTerminateEnabled() Enabled {
	if m != nil && m.TerminateEnabled != nil {
		return *m.TerminateEnabled
	}
	return Enabled_DISABLED
}

func (m *Quality) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Quality) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type OrderConfig struct {
	Id                     *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MerchantConfirmTimeout *uint64  `protobuf:"varint,2,opt,name=merchant_confirm_timeout,json=merchantConfirmTimeout" json:"merchant_confirm_timeout,omitempty"`
	Operator               *string  `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
	CreateTime             *uint64  `protobuf:"varint,101,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime             *uint64  `protobuf:"varint,102,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *OrderConfig) Reset()         { *m = OrderConfig{} }
func (m *OrderConfig) String() string { return proto.CompactTextString(m) }
func (*OrderConfig) ProtoMessage()    {}
func (*OrderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{103}
}
func (m *OrderConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderConfig.Merge(m, src)
}
func (m *OrderConfig) XXX_Size() int {
	return m.Size()
}
func (m *OrderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OrderConfig proto.InternalMessageInfo

func (m *OrderConfig) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *OrderConfig) GetMerchantConfirmTimeout() uint64 {
	if m != nil && m.MerchantConfirmTimeout != nil {
		return *m.MerchantConfirmTimeout
	}
	return 0
}

func (m *OrderConfig) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *OrderConfig) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *OrderConfig) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type PaymentConfig struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PaymentMethod        *uint32  `protobuf:"varint,2,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Switch               *uint32  `protobuf:"varint,3,opt,name=switch" json:"switch,omitempty"`
	ChannelId            *uint32  `protobuf:"varint,4,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Operator             *string  `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentConfig) Reset()         { *m = PaymentConfig{} }
func (m *PaymentConfig) String() string { return proto.CompactTextString(m) }
func (*PaymentConfig) ProtoMessage()    {}
func (*PaymentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{104}
}
func (m *PaymentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentConfig.Merge(m, src)
}
func (m *PaymentConfig) XXX_Size() int {
	return m.Size()
}
func (m *PaymentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentConfig proto.InternalMessageInfo

func (m *PaymentConfig) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PaymentConfig) GetPaymentMethod() uint32 {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return 0
}

func (m *PaymentConfig) GetSwitch() uint32 {
	if m != nil && m.Switch != nil {
		return *m.Switch
	}
	return 0
}

func (m *PaymentConfig) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *PaymentConfig) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *PaymentConfig) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PaymentConfig) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type Area struct {
	Id                   *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AreaName             *string               `protobuf:"bytes,2,opt,name=area_name,json=areaName" json:"area_name,omitempty"`
	AreaStatus           *Area_Status          `protobuf:"varint,3,opt,name=area_status,json=areaStatus,enum=foody_base.Area_Status" json:"area_status,omitempty"`
	Creator              *string               `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64               `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64               `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Timezone             *string               `protobuf:"bytes,7,opt,name=timezone" json:"timezone,omitempty"`
	ServiceTypeFlag      *Area_ServiceTypeFlag `protobuf:"bytes,8,opt,name=service_type_flag,json=serviceTypeFlag" json:"service_type_flag,omitempty"`
	Operator             *string               `protobuf:"bytes,9,opt,name=operator" json:"operator,omitempty"`
	HiddenTime           *uint64               `protobuf:"varint,10,opt,name=hidden_time,json=hiddenTime" json:"hidden_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Area) Reset()         { *m = Area{} }
func (m *Area) String() string { return proto.CompactTextString(m) }
func (*Area) ProtoMessage()    {}
func (*Area) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{105}
}
func (m *Area) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Area) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Area.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Area) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Area.Merge(m, src)
}
func (m *Area) XXX_Size() int {
	return m.Size()
}
func (m *Area) XXX_DiscardUnknown() {
	xxx_messageInfo_Area.DiscardUnknown(m)
}

var xxx_messageInfo_Area proto.InternalMessageInfo

func (m *Area) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Area) GetAreaName() string {
	if m != nil && m.AreaName != nil {
		return *m.AreaName
	}
	return ""
}

func (m *Area) GetAreaStatus() Area_Status {
	if m != nil && m.AreaStatus != nil {
		return *m.AreaStatus
	}
	return Area_INACTIVE
}

func (m *Area) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Area) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Area) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Area) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Area) GetServiceTypeFlag() *Area_ServiceTypeFlag {
	if m != nil {
		return m.ServiceTypeFlag
	}
	return nil
}

func (m *Area) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *Area) GetHiddenTime() uint64 {
	if m != nil && m.HiddenTime != nil {
		return *m.HiddenTime
	}
	return 0
}

type Area_ServiceTypeFlag struct {
	FoodEnabled             *Enabled `protobuf:"varint,1,opt,name=food_enabled,json=foodEnabled,enum=foody_base.Enabled" json:"food_enabled,omitempty"`
	SpxInstantShopeeEnabled *Enabled `protobuf:"varint,2,opt,name=spx_instant_shopee_enabled,json=spxInstantShopeeEnabled,enum=foody_base.Enabled" json:"spx_instant_shopee_enabled,omitempty"`
	SpxInstantEnabled       *Enabled `protobuf:"varint,3,opt,name=spx_instant_enabled,json=spxInstantEnabled,enum=foody_base.Enabled" json:"spx_instant_enabled,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Area_ServiceTypeFlag) Reset()         { *m = Area_ServiceTypeFlag{} }
func (m *Area_ServiceTypeFlag) String() string { return proto.CompactTextString(m) }
func (*Area_ServiceTypeFlag) ProtoMessage()    {}
func (*Area_ServiceTypeFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{105, 0}
}
func (m *Area_ServiceTypeFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Area_ServiceTypeFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Area_ServiceTypeFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Area_ServiceTypeFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Area_ServiceTypeFlag.Merge(m, src)
}
func (m *Area_ServiceTypeFlag) XXX_Size() int {
	return m.Size()
}
func (m *Area_ServiceTypeFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_Area_ServiceTypeFlag.DiscardUnknown(m)
}

var xxx_messageInfo_Area_ServiceTypeFlag proto.InternalMessageInfo

func (m *Area_ServiceTypeFlag) GetFoodEnabled() Enabled {
	if m != nil && m.FoodEnabled != nil {
		return *m.FoodEnabled
	}
	return Enabled_DISABLED
}

func (m *Area_ServiceTypeFlag) GetSpxInstantShopeeEnabled() Enabled {
	if m != nil && m.SpxInstantShopeeEnabled != nil {
		return *m.SpxInstantShopeeEnabled
	}
	return Enabled_DISABLED
}

func (m *Area_ServiceTypeFlag) GetSpxInstantEnabled() Enabled {
	if m != nil && m.SpxInstantEnabled != nil {
		return *m.SpxInstantEnabled
	}
	return Enabled_DISABLED
}

type District struct {
	Id                   *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DistrictName         *string               `protobuf:"bytes,2,opt,name=district_name,json=districtName" json:"district_name,omitempty"`
	CityId               *uint64               `protobuf:"varint,3,opt,name=city_id,json=cityId" json:"city_id,omitempty"`
	CityName             *string               `protobuf:"bytes,4,opt,name=city_name,json=cityName" json:"city_name,omitempty"`
	StateName            *string               `protobuf:"bytes,5,opt,name=state_name,json=stateName" json:"state_name,omitempty"`
	AreaId               *uint64               `protobuf:"varint,6,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	Status               *District_Status      `protobuf:"varint,7,opt,name=status,enum=foody_base.District_Status" json:"status,omitempty"`
	CreateTime           *uint64               `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64               `protobuf:"varint,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ServiceTypeFlag      *Area_ServiceTypeFlag `protobuf:"bytes,10,opt,name=service_type_flag,json=serviceTypeFlag" json:"service_type_flag,omitempty"`
	Version              *uint32               `protobuf:"varint,11,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *District) Reset()         { *m = District{} }
func (m *District) String() string { return proto.CompactTextString(m) }
func (*District) ProtoMessage()    {}
func (*District) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{106}
}
func (m *District) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *District) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_District.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *District) XXX_Merge(src proto.Message) {
	xxx_messageInfo_District.Merge(m, src)
}
func (m *District) XXX_Size() int {
	return m.Size()
}
func (m *District) XXX_DiscardUnknown() {
	xxx_messageInfo_District.DiscardUnknown(m)
}

var xxx_messageInfo_District proto.InternalMessageInfo

func (m *District) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *District) GetDistrictName() string {
	if m != nil && m.DistrictName != nil {
		return *m.DistrictName
	}
	return ""
}

func (m *District) GetCityId() uint64 {
	if m != nil && m.CityId != nil {
		return *m.CityId
	}
	return 0
}

func (m *District) GetCityName() string {
	if m != nil && m.CityName != nil {
		return *m.CityName
	}
	return ""
}

func (m *District) GetStateName() string {
	if m != nil && m.StateName != nil {
		return *m.StateName
	}
	return ""
}

func (m *District) GetAreaId() uint64 {
	if m != nil && m.AreaId != nil {
		return *m.AreaId
	}
	return 0
}

func (m *District) GetStatus() District_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return District_INACTIVE
}

func (m *District) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *District) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *District) GetServiceTypeFlag() *Area_ServiceTypeFlag {
	if m != nil {
		return m.ServiceTypeFlag
	}
	return nil
}

func (m *District) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type LocationGroup struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	GroupName            *string  `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	AreaId               *uint64  `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	IsDefault            *uint32  `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	Creator              *string  `protobuf:"bytes,5,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Timezone             *string  `protobuf:"bytes,8,opt,name=timezone" json:"timezone,omitempty"`
	HiddenTime           *uint64  `protobuf:"varint,9,opt,name=hidden_time,json=hiddenTime" json:"hidden_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationGroup) Reset()         { *m = LocationGroup{} }
func (m *LocationGroup) String() string { return proto.CompactTextString(m) }
func (*LocationGroup) ProtoMessage()    {}
func (*LocationGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{107}
}
func (m *LocationGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationGroup.Merge(m, src)
}
func (m *LocationGroup) XXX_Size() int {
	return m.Size()
}
func (m *LocationGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationGroup.DiscardUnknown(m)
}

var xxx_messageInfo_LocationGroup proto.InternalMessageInfo

func (m *LocationGroup) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *LocationGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *LocationGroup) GetAreaId() uint64 {
	if m != nil && m.AreaId != nil {
		return *m.AreaId
	}
	return 0
}

func (m *LocationGroup) GetIsDefault() uint32 {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return 0
}

func (m *LocationGroup) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *LocationGroup) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LocationGroup) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *LocationGroup) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *LocationGroup) GetHiddenTime() uint64 {
	if m != nil && m.HiddenTime != nil {
		return *m.HiddenTime
	}
	return 0
}

type DistrictLocationGroupBinding struct {
	DistrictId           *uint64  `protobuf:"varint,1,opt,name=district_id,json=districtId" json:"district_id,omitempty"`
	LocationGroupId      *uint64  `protobuf:"varint,2,opt,name=location_group_id,json=locationGroupId" json:"location_group_id,omitempty"`
	IsDefault            *uint32  `protobuf:"varint,3,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,4,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,5,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistrictLocationGroupBinding) Reset()         { *m = DistrictLocationGroupBinding{} }
func (m *DistrictLocationGroupBinding) String() string { return proto.CompactTextString(m) }
func (*DistrictLocationGroupBinding) ProtoMessage()    {}
func (*DistrictLocationGroupBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{108}
}
func (m *DistrictLocationGroupBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistrictLocationGroupBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistrictLocationGroupBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistrictLocationGroupBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistrictLocationGroupBinding.Merge(m, src)
}
func (m *DistrictLocationGroupBinding) XXX_Size() int {
	return m.Size()
}
func (m *DistrictLocationGroupBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_DistrictLocationGroupBinding.DiscardUnknown(m)
}

var xxx_messageInfo_DistrictLocationGroupBinding proto.InternalMessageInfo

func (m *DistrictLocationGroupBinding) GetDistrictId() uint64 {
	if m != nil && m.DistrictId != nil {
		return *m.DistrictId
	}
	return 0
}

func (m *DistrictLocationGroupBinding) GetLocationGroupId() uint64 {
	if m != nil && m.LocationGroupId != nil {
		return *m.LocationGroupId
	}
	return 0
}

func (m *DistrictLocationGroupBinding) GetIsDefault() uint32 {
	if m != nil && m.IsDefault != nil {
		return *m.IsDefault
	}
	return 0
}

func (m *DistrictLocationGroupBinding) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DistrictLocationGroupBinding) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type AlgoParameterConfig struct {
	Id                   *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Module               *AlgoParameterConfig_Module    `protobuf:"varint,2,opt,name=module,enum=foody_base.AlgoParameterConfig_Module" json:"module,omitempty"`
	Priority             *AlgoParameterConfig_Priority  `protobuf:"varint,3,opt,name=priority,enum=foody_base.AlgoParameterConfig_Priority" json:"priority,omitempty"`
	AreaId               *uint64                        `protobuf:"varint,4,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	AreaName             *string                        `protobuf:"bytes,5,opt,name=area_name,json=areaName" json:"area_name,omitempty"`
	DistrictId           *uint64                        `protobuf:"varint,6,opt,name=district_id,json=districtId" json:"district_id,omitempty"`
	DistrictName         *string                        `protobuf:"bytes,7,opt,name=district_name,json=districtName" json:"district_name,omitempty"`
	Parameter            *AlgoParameterConfig_Parameter `protobuf:"bytes,8,opt,name=parameter" json:"parameter,omitempty"`
	Creator              *string                        `protobuf:"bytes,9,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64                        `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                        `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ServiceType          *ServiceType                   `protobuf:"varint,12,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *AlgoParameterConfig) Reset()         { *m = AlgoParameterConfig{} }
func (m *AlgoParameterConfig) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig) ProtoMessage()    {}
func (*AlgoParameterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109}
}
func (m *AlgoParameterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig.Merge(m, src)
}
func (m *AlgoParameterConfig) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig proto.InternalMessageInfo

func (m *AlgoParameterConfig) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *AlgoParameterConfig) GetModule() AlgoParameterConfig_Module {
	if m != nil && m.Module != nil {
		return *m.Module
	}
	return AlgoParameterConfig_Module_Unknown
}

func (m *AlgoParameterConfig) GetPriority() AlgoParameterConfig_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return AlgoParameterConfig_Priority_Unknown
}

func (m *AlgoParameterConfig) GetAreaId() uint64 {
	if m != nil && m.AreaId != nil {
		return *m.AreaId
	}
	return 0
}

func (m *AlgoParameterConfig) GetAreaName() string {
	if m != nil && m.AreaName != nil {
		return *m.AreaName
	}
	return ""
}

func (m *AlgoParameterConfig) GetDistrictId() uint64 {
	if m != nil && m.DistrictId != nil {
		return *m.DistrictId
	}
	return 0
}

func (m *AlgoParameterConfig) GetDistrictName() string {
	if m != nil && m.DistrictName != nil {
		return *m.DistrictName
	}
	return ""
}

func (m *AlgoParameterConfig) GetParameter() *AlgoParameterConfig_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *AlgoParameterConfig) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *AlgoParameterConfig) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *AlgoParameterConfig) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *AlgoParameterConfig) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

type AlgoParameterConfig_Parameter struct {
	OrderFlow                  *AlgoParameterConfig_OrderFlow                  `protobuf:"bytes,1,opt,name=order_flow,json=orderFlow" json:"order_flow,omitempty"`
	DriverFiltering            *AlgoParameterConfig_DriverFiltering            `protobuf:"bytes,2,opt,name=driver_filtering,json=driverFiltering" json:"driver_filtering,omitempty"`
	MatchAssessment            *AlgoParameterConfig_MatchAssessment            `protobuf:"bytes,3,opt,name=match_assessment,json=matchAssessment" json:"match_assessment,omitempty"`
	Eta                        *AlgoParameterConfig_ETA                        `protobuf:"bytes,4,opt,name=eta" json:"eta,omitempty"`
	ShippingFee                *AlgoParameterConfig_ShippingFee                `protobuf:"bytes,5,opt,name=shipping_fee,json=shippingFee" json:"shipping_fee,omitempty"`
	BuyerShippingFee           *AlgoParameterConfig_BuyerShippingFee           `protobuf:"bytes,6,opt,name=buyer_shipping_fee,json=buyerShippingFee" json:"buyer_shipping_fee,omitempty"`
	DriverShippingFee          *AlgoParameterConfig_DriverShippingFee          `protobuf:"bytes,7,opt,name=driver_shipping_fee,json=driverShippingFee" json:"driver_shipping_fee,omitempty"`
	ServiceFee                 *AlgoParameterConfig_ServiceFee                 `protobuf:"bytes,8,opt,name=service_fee,json=serviceFee" json:"service_fee,omitempty"`
	DffSetting                 *AlgoParameterConfig_DFFSetting                 `protobuf:"bytes,9,opt,name=dff_setting,json=dffSetting" json:"dff_setting,omitempty"`
	InsuranceFee               *AlgoParameterConfig_InsuranceFee               `protobuf:"bytes,11,opt,name=insurance_fee,json=insuranceFee" json:"insurance_fee,omitempty"`
	InstantShopeeShippingFee   *AlgoParameterConfig_InstantShopeeShippingFee   `protobuf:"bytes,12,opt,name=instant_shopee_shipping_fee,json=instantShopeeShippingFee" json:"instant_shopee_shipping_fee,omitempty"`
	InstantDeliveryShippingFee *AlgoParameterConfig_InstantDeliveryShippingFee `protobuf:"bytes,13,opt,name=instant_delivery_shipping_fee,json=instantDeliveryShippingFee" json:"instant_delivery_shipping_fee,omitempty"`
	SmallOrderFee              *AlgoParameterConfig_SmallOrderFee              `protobuf:"bytes,14,opt,name=small_order_fee,json=smallOrderFee" json:"small_order_fee,omitempty"`
	NonPartnerFee              *AlgoParameterConfig_NonPartnerFee              `protobuf:"bytes,15,opt,name=non_partner_fee,json=nonPartnerFee" json:"non_partner_fee,omitempty"`
	WorkingHours               *AlgoParameterConfig_WorkingHours               `protobuf:"bytes,16,opt,name=working_hours,json=workingHours" json:"working_hours,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                        `json:"-"`
	XXX_unrecognized           []byte                                          `json:"-"`
	XXX_sizecache              int32                                           `json:"-"`
}

func (m *AlgoParameterConfig_Parameter) Reset()         { *m = AlgoParameterConfig_Parameter{} }
func (m *AlgoParameterConfig_Parameter) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_Parameter) ProtoMessage()    {}
func (*AlgoParameterConfig_Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 0}
}
func (m *AlgoParameterConfig_Parameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_Parameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_Parameter.Merge(m, src)
}
func (m *AlgoParameterConfig_Parameter) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_Parameter proto.InternalMessageInfo

func (m *AlgoParameterConfig_Parameter) GetOrderFlow() *AlgoParameterConfig_OrderFlow {
	if m != nil {
		return m.OrderFlow
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetDriverFiltering() *AlgoParameterConfig_DriverFiltering {
	if m != nil {
		return m.DriverFiltering
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetMatchAssessment() *AlgoParameterConfig_MatchAssessment {
	if m != nil {
		return m.MatchAssessment
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetEta() *AlgoParameterConfig_ETA {
	if m != nil {
		return m.Eta
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetShippingFee() *AlgoParameterConfig_ShippingFee {
	if m != nil {
		return m.ShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetBuyerShippingFee() *AlgoParameterConfig_BuyerShippingFee {
	if m != nil {
		return m.BuyerShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetDriverShippingFee() *AlgoParameterConfig_DriverShippingFee {
	if m != nil {
		return m.DriverShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetServiceFee() *AlgoParameterConfig_ServiceFee {
	if m != nil {
		return m.ServiceFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetDffSetting() *AlgoParameterConfig_DFFSetting {
	if m != nil {
		return m.DffSetting
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetInsuranceFee() *AlgoParameterConfig_InsuranceFee {
	if m != nil {
		return m.InsuranceFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetInstantShopeeShippingFee() *AlgoParameterConfig_InstantShopeeShippingFee {
	if m != nil {
		return m.InstantShopeeShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetInstantDeliveryShippingFee() *AlgoParameterConfig_InstantDeliveryShippingFee {
	if m != nil {
		return m.InstantDeliveryShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetSmallOrderFee() *AlgoParameterConfig_SmallOrderFee {
	if m != nil {
		return m.SmallOrderFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetNonPartnerFee() *AlgoParameterConfig_NonPartnerFee {
	if m != nil {
		return m.NonPartnerFee
	}
	return nil
}

func (m *AlgoParameterConfig_Parameter) GetWorkingHours() *AlgoParameterConfig_WorkingHours {
	if m != nil {
		return m.WorkingHours
	}
	return nil
}

type AlgoParameterConfig_OrderFlow struct {
	MinCompletionRate    *uint32  `protobuf:"varint,1,opt,name=min_completion_rate,json=minCompletionRate" json:"min_completion_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_OrderFlow) Reset()         { *m = AlgoParameterConfig_OrderFlow{} }
func (m *AlgoParameterConfig_OrderFlow) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_OrderFlow) ProtoMessage()    {}
func (*AlgoParameterConfig_OrderFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 1}
}
func (m *AlgoParameterConfig_OrderFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_OrderFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_OrderFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_OrderFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_OrderFlow.Merge(m, src)
}
func (m *AlgoParameterConfig_OrderFlow) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_OrderFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_OrderFlow.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_OrderFlow proto.InternalMessageInfo

func (m *AlgoParameterConfig_OrderFlow) GetMinCompletionRate() uint32 {
	if m != nil && m.MinCompletionRate != nil {
		return *m.MinCompletionRate
	}
	return 0
}

type AlgoParameterConfig_DriverFiltering struct {
	MaxMerchantDistance       *uint64  `protobuf:"varint,1,opt,name=max_merchant_distance,json=maxMerchantDistance" json:"max_merchant_distance,omitempty"`
	MinBalance                *int64   `protobuf:"varint,2,opt,name=min_balance,json=minBalance" json:"min_balance,omitempty"`
	MaxAllowedNegativeBalance *int64   `protobuf:"varint,3,opt,name=max_allowed_negative_balance,json=maxAllowedNegativeBalance" json:"max_allowed_negative_balance,omitempty"`
	AssignSameBuyerInterval   *uint64  `protobuf:"varint,4,opt,name=assign_same_buyer_interval,json=assignSameBuyerInterval" json:"assign_same_buyer_interval,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *AlgoParameterConfig_DriverFiltering) Reset()         { *m = AlgoParameterConfig_DriverFiltering{} }
func (m *AlgoParameterConfig_DriverFiltering) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_DriverFiltering) ProtoMessage()    {}
func (*AlgoParameterConfig_DriverFiltering) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 2}
}
func (m *AlgoParameterConfig_DriverFiltering) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_DriverFiltering) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_DriverFiltering.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_DriverFiltering) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_DriverFiltering.Merge(m, src)
}
func (m *AlgoParameterConfig_DriverFiltering) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_DriverFiltering) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_DriverFiltering.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_DriverFiltering proto.InternalMessageInfo

func (m *AlgoParameterConfig_DriverFiltering) GetMaxMerchantDistance() uint64 {
	if m != nil && m.MaxMerchantDistance != nil {
		return *m.MaxMerchantDistance
	}
	return 0
}

func (m *AlgoParameterConfig_DriverFiltering) GetMinBalance() int64 {
	if m != nil && m.MinBalance != nil {
		return *m.MinBalance
	}
	return 0
}

func (m *AlgoParameterConfig_DriverFiltering) GetMaxAllowedNegativeBalance() int64 {
	if m != nil && m.MaxAllowedNegativeBalance != nil {
		return *m.MaxAllowedNegativeBalance
	}
	return 0
}

func (m *AlgoParameterConfig_DriverFiltering) GetAssignSameBuyerInterval() uint64 {
	if m != nil && m.AssignSameBuyerInterval != nil {
		return *m.AssignSameBuyerInterval
	}
	return 0
}

type AlgoParameterConfig_MatchAssessment struct {
	MerchantDistanceWeight *uint64  `protobuf:"varint,1,opt,name=merchant_distance_weight,json=merchantDistanceWeight" json:"merchant_distance_weight,omitempty"`
	AutoAcceptanceWeight   *uint64  `protobuf:"varint,2,opt,name=auto_acceptance_weight,json=autoAcceptanceWeight" json:"auto_acceptance_weight,omitempty"`
	CompletionRateWeight   *uint64  `protobuf:"varint,3,opt,name=completion_rate_weight,json=completionRateWeight" json:"completion_rate_weight,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AlgoParameterConfig_MatchAssessment) Reset()         { *m = AlgoParameterConfig_MatchAssessment{} }
func (m *AlgoParameterConfig_MatchAssessment) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_MatchAssessment) ProtoMessage()    {}
func (*AlgoParameterConfig_MatchAssessment) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 3}
}
func (m *AlgoParameterConfig_MatchAssessment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_MatchAssessment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_MatchAssessment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_MatchAssessment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_MatchAssessment.Merge(m, src)
}
func (m *AlgoParameterConfig_MatchAssessment) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_MatchAssessment) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_MatchAssessment.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_MatchAssessment proto.InternalMessageInfo

func (m *AlgoParameterConfig_MatchAssessment) GetMerchantDistanceWeight() uint64 {
	if m != nil && m.MerchantDistanceWeight != nil {
		return *m.MerchantDistanceWeight
	}
	return 0
}

func (m *AlgoParameterConfig_MatchAssessment) GetAutoAcceptanceWeight() uint64 {
	if m != nil && m.AutoAcceptanceWeight != nil {
		return *m.AutoAcceptanceWeight
	}
	return 0
}

func (m *AlgoParameterConfig_MatchAssessment) GetCompletionRateWeight() uint64 {
	if m != nil && m.CompletionRateWeight != nil {
		return *m.CompletionRateWeight
	}
	return 0
}

type AlgoParameterConfig_ETA struct {
	CheckoutPage         *AlgoParameterConfig_ETA_Base `protobuf:"bytes,1,opt,name=checkout_page,json=checkoutPage" json:"checkout_page,omitempty"`
	StoreListing         *AlgoParameterConfig_ETA_Base `protobuf:"bytes,2,opt,name=store_listing,json=storeListing" json:"store_listing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AlgoParameterConfig_ETA) Reset()         { *m = AlgoParameterConfig_ETA{} }
func (m *AlgoParameterConfig_ETA) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ETA) ProtoMessage()    {}
func (*AlgoParameterConfig_ETA) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 4}
}
func (m *AlgoParameterConfig_ETA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ETA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ETA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ETA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ETA.Merge(m, src)
}
func (m *AlgoParameterConfig_ETA) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ETA) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ETA.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ETA proto.InternalMessageInfo

func (m *AlgoParameterConfig_ETA) GetCheckoutPage() *AlgoParameterConfig_ETA_Base {
	if m != nil {
		return m.CheckoutPage
	}
	return nil
}

func (m *AlgoParameterConfig_ETA) GetStoreListing() *AlgoParameterConfig_ETA_Base {
	if m != nil {
		return m.StoreListing
	}
	return nil
}

type AlgoParameterConfig_ETA_Base struct {
	FixedTime            *uint64  `protobuf:"varint,1,opt,name=fixed_time,json=fixedTime" json:"fixed_time,omitempty"`
	DriverSpeed          *uint64  `protobuf:"varint,2,opt,name=driver_speed,json=driverSpeed" json:"driver_speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_ETA_Base) Reset()         { *m = AlgoParameterConfig_ETA_Base{} }
func (m *AlgoParameterConfig_ETA_Base) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ETA_Base) ProtoMessage()    {}
func (*AlgoParameterConfig_ETA_Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 4, 0}
}
func (m *AlgoParameterConfig_ETA_Base) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ETA_Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ETA_Base.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ETA_Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ETA_Base.Merge(m, src)
}
func (m *AlgoParameterConfig_ETA_Base) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ETA_Base) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ETA_Base.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ETA_Base proto.InternalMessageInfo

func (m *AlgoParameterConfig_ETA_Base) GetFixedTime() uint64 {
	if m != nil && m.FixedTime != nil {
		return *m.FixedTime
	}
	return 0
}

func (m *AlgoParameterConfig_ETA_Base) GetDriverSpeed() uint64 {
	if m != nil && m.DriverSpeed != nil {
		return *m.DriverSpeed
	}
	return 0
}

type AlgoParameterConfig_ShippingFee struct {
	MinShippingFee       *uint64  `protobuf:"varint,1,opt,name=min_shipping_fee,json=minShippingFee" json:"min_shipping_fee,omitempty"`
	Fare                 *uint64  `protobuf:"varint,2,opt,name=fare" json:"fare,omitempty"`
	CommissionRate       *uint64  `protobuf:"varint,3,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_ShippingFee) Reset()         { *m = AlgoParameterConfig_ShippingFee{} }
func (m *AlgoParameterConfig_ShippingFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ShippingFee) ProtoMessage()    {}
func (*AlgoParameterConfig_ShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 5}
}
func (m *AlgoParameterConfig_ShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_ShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_ShippingFee) GetMinShippingFee() uint64 {
	if m != nil && m.MinShippingFee != nil {
		return *m.MinShippingFee
	}
	return 0
}

func (m *AlgoParameterConfig_ShippingFee) GetFare() uint64 {
	if m != nil && m.Fare != nil {
		return *m.Fare
	}
	return 0
}

func (m *AlgoParameterConfig_ShippingFee) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

// Tier 配送距离区间，区间左开右必，第一个区间必须以0开始，区间必须是连续的；0 < 区间总数 <= 10
type AlgoParameterConfig_ShippingFeeTier struct {
	TierStart            *uint64  `protobuf:"varint,1,opt,name=tier_start,json=tierStart" json:"tier_start,omitempty"`
	TierEnd              *uint64  `protobuf:"varint,2,opt,name=tier_end,json=tierEnd" json:"tier_end,omitempty"`
	FixedFee             *uint64  `protobuf:"varint,3,opt,name=fixed_fee,json=fixedFee" json:"fixed_fee,omitempty"`
	Fare                 *uint64  `protobuf:"varint,4,opt,name=fare" json:"fare,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_ShippingFeeTier) Reset()         { *m = AlgoParameterConfig_ShippingFeeTier{} }
func (m *AlgoParameterConfig_ShippingFeeTier) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ShippingFeeTier) ProtoMessage()    {}
func (*AlgoParameterConfig_ShippingFeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 6}
}
func (m *AlgoParameterConfig_ShippingFeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ShippingFeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ShippingFeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ShippingFeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ShippingFeeTier.Merge(m, src)
}
func (m *AlgoParameterConfig_ShippingFeeTier) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ShippingFeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ShippingFeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ShippingFeeTier proto.InternalMessageInfo

func (m *AlgoParameterConfig_ShippingFeeTier) GetTierStart() uint64 {
	if m != nil && m.TierStart != nil {
		return *m.TierStart
	}
	return 0
}

func (m *AlgoParameterConfig_ShippingFeeTier) GetTierEnd() uint64 {
	if m != nil && m.TierEnd != nil {
		return *m.TierEnd
	}
	return 0
}

func (m *AlgoParameterConfig_ShippingFeeTier) GetFixedFee() uint64 {
	if m != nil && m.FixedFee != nil {
		return *m.FixedFee
	}
	return 0
}

func (m *AlgoParameterConfig_ShippingFeeTier) GetFare() uint64 {
	if m != nil && m.Fare != nil {
		return *m.Fare
	}
	return 0
}

type AlgoParameterConfig_BaseShippingFee struct {
	MinShippingFee       *uint64                                `protobuf:"varint,1,opt,name=min_shipping_fee,json=minShippingFee" json:"min_shipping_fee,omitempty"`
	Tiers                []*AlgoParameterConfig_ShippingFeeTier `protobuf:"bytes,2,rep,name=tiers" json:"tiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *AlgoParameterConfig_BaseShippingFee) Reset()         { *m = AlgoParameterConfig_BaseShippingFee{} }
func (m *AlgoParameterConfig_BaseShippingFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_BaseShippingFee) ProtoMessage()    {}
func (*AlgoParameterConfig_BaseShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 7}
}
func (m *AlgoParameterConfig_BaseShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_BaseShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_BaseShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_BaseShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_BaseShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_BaseShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_BaseShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_BaseShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_BaseShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_BaseShippingFee) GetMinShippingFee() uint64 {
	if m != nil && m.MinShippingFee != nil {
		return *m.MinShippingFee
	}
	return 0
}

func (m *AlgoParameterConfig_BaseShippingFee) GetTiers() []*AlgoParameterConfig_ShippingFeeTier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

// 非TH地区由于不区分partner，这里让非TH地区的partner_shipping_fee和non_partner_shipping_fee 配置相同参数
type AlgoParameterConfig_BuyerShippingFee struct {
	PartnerShippingFee    *AlgoParameterConfig_BaseShippingFee `protobuf:"bytes,1,opt,name=partner_shipping_fee,json=partnerShippingFee" json:"partner_shipping_fee,omitempty"`
	NonPartnerShippingFee *AlgoParameterConfig_BaseShippingFee `protobuf:"bytes,2,opt,name=non_partner_shipping_fee,json=nonPartnerShippingFee" json:"non_partner_shipping_fee,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                             `json:"-"`
	XXX_unrecognized      []byte                               `json:"-"`
	XXX_sizecache         int32                                `json:"-"`
}

func (m *AlgoParameterConfig_BuyerShippingFee) Reset()         { *m = AlgoParameterConfig_BuyerShippingFee{} }
func (m *AlgoParameterConfig_BuyerShippingFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_BuyerShippingFee) ProtoMessage()    {}
func (*AlgoParameterConfig_BuyerShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 8}
}
func (m *AlgoParameterConfig_BuyerShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_BuyerShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_BuyerShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_BuyerShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_BuyerShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_BuyerShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_BuyerShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_BuyerShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_BuyerShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_BuyerShippingFee) GetPartnerShippingFee() *AlgoParameterConfig_BaseShippingFee {
	if m != nil {
		return m.PartnerShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_BuyerShippingFee) GetNonPartnerShippingFee() *AlgoParameterConfig_BaseShippingFee {
	if m != nil {
		return m.NonPartnerShippingFee
	}
	return nil
}

type AlgoParameterConfig_DriverShippingFee struct {
	ShippingFee          *AlgoParameterConfig_BaseShippingFee `protobuf:"bytes,1,opt,name=shipping_fee,json=shippingFee" json:"shipping_fee,omitempty"`
	CommissionRate       *uint64                              `protobuf:"varint,2,opt,name=commission_rate,json=commissionRate" json:"commission_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *AlgoParameterConfig_DriverShippingFee) Reset()         { *m = AlgoParameterConfig_DriverShippingFee{} }
func (m *AlgoParameterConfig_DriverShippingFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_DriverShippingFee) ProtoMessage()    {}
func (*AlgoParameterConfig_DriverShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 9}
}
func (m *AlgoParameterConfig_DriverShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_DriverShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_DriverShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_DriverShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_DriverShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_DriverShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_DriverShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_DriverShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_DriverShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_DriverShippingFee) GetShippingFee() *AlgoParameterConfig_BaseShippingFee {
	if m != nil {
		return m.ShippingFee
	}
	return nil
}

func (m *AlgoParameterConfig_DriverShippingFee) GetCommissionRate() uint64 {
	if m != nil && m.CommissionRate != nil {
		return *m.CommissionRate
	}
	return 0
}

type AlgoParameterConfig_ServiceFee struct {
	NormalIntervals      []*AlgoParameterConfig_ServiceFeeInterval `protobuf:"bytes,1,rep,name=normal_intervals,json=normalIntervals" json:"normal_intervals,omitempty"`
	ListedIntervals      []*AlgoParameterConfig_ServiceFeeInterval `protobuf:"bytes,2,rep,name=listed_intervals,json=listedIntervals" json:"listed_intervals,omitempty"`
	ValidTime            *uint64                                   `protobuf:"varint,3,opt,name=ValidTime" json:"ValidTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *AlgoParameterConfig_ServiceFee) Reset()         { *m = AlgoParameterConfig_ServiceFee{} }
func (m *AlgoParameterConfig_ServiceFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ServiceFee) ProtoMessage()    {}
func (*AlgoParameterConfig_ServiceFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 10}
}
func (m *AlgoParameterConfig_ServiceFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ServiceFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ServiceFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ServiceFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ServiceFee.Merge(m, src)
}
func (m *AlgoParameterConfig_ServiceFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ServiceFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ServiceFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ServiceFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_ServiceFee) GetNormalIntervals() []*AlgoParameterConfig_ServiceFeeInterval {
	if m != nil {
		return m.NormalIntervals
	}
	return nil
}

func (m *AlgoParameterConfig_ServiceFee) GetListedIntervals() []*AlgoParameterConfig_ServiceFeeInterval {
	if m != nil {
		return m.ListedIntervals
	}
	return nil
}

func (m *AlgoParameterConfig_ServiceFee) GetValidTime() uint64 {
	if m != nil && m.ValidTime != nil {
		return *m.ValidTime
	}
	return 0
}

type AlgoParameterConfig_ServiceFeeInterval struct {
	CommissionRangEnd    *float32 `protobuf:"fixed32,1,opt,name=commission_rang_end,json=commissionRangEnd" json:"commission_rang_end,omitempty"`
	ServiceFee           *uint64  `protobuf:"varint,2,opt,name=service_fee,json=serviceFee" json:"service_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_ServiceFeeInterval) Reset() {
	*m = AlgoParameterConfig_ServiceFeeInterval{}
}
func (m *AlgoParameterConfig_ServiceFeeInterval) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_ServiceFeeInterval) ProtoMessage()    {}
func (*AlgoParameterConfig_ServiceFeeInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 11}
}
func (m *AlgoParameterConfig_ServiceFeeInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_ServiceFeeInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_ServiceFeeInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_ServiceFeeInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_ServiceFeeInterval.Merge(m, src)
}
func (m *AlgoParameterConfig_ServiceFeeInterval) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_ServiceFeeInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_ServiceFeeInterval.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_ServiceFeeInterval proto.InternalMessageInfo

func (m *AlgoParameterConfig_ServiceFeeInterval) GetCommissionRangEnd() float32 {
	if m != nil && m.CommissionRangEnd != nil {
		return *m.CommissionRangEnd
	}
	return 0
}

func (m *AlgoParameterConfig_ServiceFeeInterval) GetServiceFee() uint64 {
	if m != nil && m.ServiceFee != nil {
		return *m.ServiceFee
	}
	return 0
}

type AlgoParameterConfig_InsuranceTier struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	InsurancePremium     *uint64  `protobuf:"varint,2,opt,name=insurance_premium,json=insurancePremium" json:"insurance_premium,omitempty"`
	SumAssured           *uint64  `protobuf:"varint,3,opt,name=sum_assured,json=sumAssured" json:"sum_assured,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_InsuranceTier) Reset()         { *m = AlgoParameterConfig_InsuranceTier{} }
func (m *AlgoParameterConfig_InsuranceTier) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_InsuranceTier) ProtoMessage()    {}
func (*AlgoParameterConfig_InsuranceTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 12}
}
func (m *AlgoParameterConfig_InsuranceTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_InsuranceTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_InsuranceTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_InsuranceTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_InsuranceTier.Merge(m, src)
}
func (m *AlgoParameterConfig_InsuranceTier) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_InsuranceTier) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_InsuranceTier.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_InsuranceTier proto.InternalMessageInfo

func (m *AlgoParameterConfig_InsuranceTier) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AlgoParameterConfig_InsuranceTier) GetInsurancePremium() uint64 {
	if m != nil && m.InsurancePremium != nil {
		return *m.InsurancePremium
	}
	return 0
}

func (m *AlgoParameterConfig_InsuranceTier) GetSumAssured() uint64 {
	if m != nil && m.SumAssured != nil {
		return *m.SumAssured
	}
	return 0
}

type AlgoParameterConfig_InsuranceFee struct {
	Tiers                []*AlgoParameterConfig_InsuranceTier `protobuf:"bytes,1,rep,name=tiers" json:"tiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *AlgoParameterConfig_InsuranceFee) Reset()         { *m = AlgoParameterConfig_InsuranceFee{} }
func (m *AlgoParameterConfig_InsuranceFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_InsuranceFee) ProtoMessage()    {}
func (*AlgoParameterConfig_InsuranceFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 13}
}
func (m *AlgoParameterConfig_InsuranceFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_InsuranceFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_InsuranceFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_InsuranceFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_InsuranceFee.Merge(m, src)
}
func (m *AlgoParameterConfig_InsuranceFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_InsuranceFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_InsuranceFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_InsuranceFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_InsuranceFee) GetTiers() []*AlgoParameterConfig_InsuranceTier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

type AlgoParameterConfig_DFFSetting struct {
	Mode                 *AlgoParameterConfig_DFFSetting_DFFSettingMode `protobuf:"varint,1,opt,name=mode,enum=foody_base.AlgoParameterConfig_DFFSetting_DFFSettingMode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *AlgoParameterConfig_DFFSetting) Reset()         { *m = AlgoParameterConfig_DFFSetting{} }
func (m *AlgoParameterConfig_DFFSetting) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_DFFSetting) ProtoMessage()    {}
func (*AlgoParameterConfig_DFFSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 14}
}
func (m *AlgoParameterConfig_DFFSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_DFFSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_DFFSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_DFFSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_DFFSetting.Merge(m, src)
}
func (m *AlgoParameterConfig_DFFSetting) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_DFFSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_DFFSetting.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_DFFSetting proto.InternalMessageInfo

func (m *AlgoParameterConfig_DFFSetting) GetMode() AlgoParameterConfig_DFFSetting_DFFSettingMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return AlgoParameterConfig_DFFSetting_DFF_ONLY
}

type AlgoParameterConfig_InstantShopeeShippingFee struct {
	BaseShippingFee      *uint64  `protobuf:"varint,1,opt,name=base_shipping_fee,json=baseShippingFee" json:"base_shipping_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_InstantShopeeShippingFee) Reset() {
	*m = AlgoParameterConfig_InstantShopeeShippingFee{}
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) String() string {
	return proto.CompactTextString(m)
}
func (*AlgoParameterConfig_InstantShopeeShippingFee) ProtoMessage() {}
func (*AlgoParameterConfig_InstantShopeeShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 15}
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_InstantShopeeShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_InstantShopeeShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_InstantShopeeShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_InstantShopeeShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_InstantShopeeShippingFee) GetBaseShippingFee() uint64 {
	if m != nil && m.BaseShippingFee != nil {
		return *m.BaseShippingFee
	}
	return 0
}

type AlgoParameterConfig_InstantDeliveryShippingFee struct {
	BaseShippingFee      *uint64  `protobuf:"varint,1,opt,name=base_shipping_fee,json=baseShippingFee" json:"base_shipping_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) Reset() {
	*m = AlgoParameterConfig_InstantDeliveryShippingFee{}
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) String() string {
	return proto.CompactTextString(m)
}
func (*AlgoParameterConfig_InstantDeliveryShippingFee) ProtoMessage() {}
func (*AlgoParameterConfig_InstantDeliveryShippingFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 16}
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_InstantDeliveryShippingFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_InstantDeliveryShippingFee.Merge(m, src)
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_InstantDeliveryShippingFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_InstantDeliveryShippingFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) GetBaseShippingFee() uint64 {
	if m != nil && m.BaseShippingFee != nil {
		return *m.BaseShippingFee
	}
	return 0
}

type AlgoParameterConfig_SmallOrderFee struct {
	MinSpend             *uint64  `protobuf:"varint,1,opt,name=min_spend,json=minSpend" json:"min_spend,omitempty"`
	SmallOrderFee        *uint64  `protobuf:"varint,2,opt,name=small_order_fee,json=smallOrderFee" json:"small_order_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_SmallOrderFee) Reset()         { *m = AlgoParameterConfig_SmallOrderFee{} }
func (m *AlgoParameterConfig_SmallOrderFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_SmallOrderFee) ProtoMessage()    {}
func (*AlgoParameterConfig_SmallOrderFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 17}
}
func (m *AlgoParameterConfig_SmallOrderFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_SmallOrderFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_SmallOrderFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_SmallOrderFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_SmallOrderFee.Merge(m, src)
}
func (m *AlgoParameterConfig_SmallOrderFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_SmallOrderFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_SmallOrderFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_SmallOrderFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_SmallOrderFee) GetMinSpend() uint64 {
	if m != nil && m.MinSpend != nil {
		return *m.MinSpend
	}
	return 0
}

func (m *AlgoParameterConfig_SmallOrderFee) GetSmallOrderFee() uint64 {
	if m != nil && m.SmallOrderFee != nil {
		return *m.SmallOrderFee
	}
	return 0
}

type AlgoParameterConfig_NonPartnerFee struct {
	NonPartnerFee        *uint64  `protobuf:"varint,1,opt,name=non_partner_fee,json=nonPartnerFee" json:"non_partner_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_NonPartnerFee) Reset()         { *m = AlgoParameterConfig_NonPartnerFee{} }
func (m *AlgoParameterConfig_NonPartnerFee) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_NonPartnerFee) ProtoMessage()    {}
func (*AlgoParameterConfig_NonPartnerFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 18}
}
func (m *AlgoParameterConfig_NonPartnerFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_NonPartnerFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_NonPartnerFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_NonPartnerFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_NonPartnerFee.Merge(m, src)
}
func (m *AlgoParameterConfig_NonPartnerFee) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_NonPartnerFee) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_NonPartnerFee.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_NonPartnerFee proto.InternalMessageInfo

func (m *AlgoParameterConfig_NonPartnerFee) GetNonPartnerFee() uint64 {
	if m != nil && m.NonPartnerFee != nil {
		return *m.NonPartnerFee
	}
	return 0
}

type AlgoParameterConfig_WorkingHours struct {
	StartTime            *uint32  `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint32  `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlgoParameterConfig_WorkingHours) Reset()         { *m = AlgoParameterConfig_WorkingHours{} }
func (m *AlgoParameterConfig_WorkingHours) String() string { return proto.CompactTextString(m) }
func (*AlgoParameterConfig_WorkingHours) ProtoMessage()    {}
func (*AlgoParameterConfig_WorkingHours) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{109, 19}
}
func (m *AlgoParameterConfig_WorkingHours) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlgoParameterConfig_WorkingHours) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlgoParameterConfig_WorkingHours.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlgoParameterConfig_WorkingHours) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlgoParameterConfig_WorkingHours.Merge(m, src)
}
func (m *AlgoParameterConfig_WorkingHours) XXX_Size() int {
	return m.Size()
}
func (m *AlgoParameterConfig_WorkingHours) XXX_DiscardUnknown() {
	xxx_messageInfo_AlgoParameterConfig_WorkingHours.DiscardUnknown(m)
}

var xxx_messageInfo_AlgoParameterConfig_WorkingHours proto.InternalMessageInfo

func (m *AlgoParameterConfig_WorkingHours) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *AlgoParameterConfig_WorkingHours) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type ContentRule struct {
	// for store listing
	PartnerTypes         []PartnerType     `protobuf:"varint,1,rep,name=partner_types,json=partnerTypes,enum=foody_base.PartnerType" json:"partner_types,omitempty"`
	RatingScoreMin       *float32          `protobuf:"fixed32,2,opt,name=rating_score_min,json=ratingScoreMin" json:"rating_score_min,omitempty"`
	RatingScoreMax       *float32          `protobuf:"fixed32,3,opt,name=rating_score_max,json=ratingScoreMax" json:"rating_score_max,omitempty"`
	StoreTags            []uint64          `protobuf:"varint,4,rep,name=store_tags,json=storeTags" json:"store_tags,omitempty"`
	StoreCategories      []*StoreCategory  `protobuf:"bytes,5,rep,name=store_categories,json=storeCategories" json:"store_categories,omitempty"`
	StoreTagsLogic       *ContentRuleLogic `protobuf:"varint,6,opt,name=store_tags_logic,json=storeTagsLogic,enum=foody_base.ContentRuleLogic" json:"store_tags_logic,omitempty"`
	StoreCategoriesLogic *ContentRuleLogic `protobuf:"varint,7,opt,name=store_categories_logic,json=storeCategoriesLogic,enum=foody_base.ContentRuleLogic" json:"store_categories_logic,omitempty"`
	// for item listing
	DishTags             []uint64          `protobuf:"varint,8,rep,name=dish_tags,json=dishTags" json:"dish_tags,omitempty"`
	DishTagsLogic        *ContentRuleLogic `protobuf:"varint,9,opt,name=dish_tags_logic,json=dishTagsLogic,enum=foody_base.ContentRuleLogic" json:"dish_tags_logic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ContentRule) Reset()         { *m = ContentRule{} }
func (m *ContentRule) String() string { return proto.CompactTextString(m) }
func (*ContentRule) ProtoMessage()    {}
func (*ContentRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{110}
}
func (m *ContentRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRule.Merge(m, src)
}
func (m *ContentRule) XXX_Size() int {
	return m.Size()
}
func (m *ContentRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRule.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRule proto.InternalMessageInfo

func (m *ContentRule) GetPartnerTypes() []PartnerType {
	if m != nil {
		return m.PartnerTypes
	}
	return nil
}

func (m *ContentRule) GetRatingScoreMin() float32 {
	if m != nil && m.RatingScoreMin != nil {
		return *m.RatingScoreMin
	}
	return 0
}

func (m *ContentRule) GetRatingScoreMax() float32 {
	if m != nil && m.RatingScoreMax != nil {
		return *m.RatingScoreMax
	}
	return 0
}

func (m *ContentRule) GetStoreTags() []uint64 {
	if m != nil {
		return m.StoreTags
	}
	return nil
}

func (m *ContentRule) GetStoreCategories() []*StoreCategory {
	if m != nil {
		return m.StoreCategories
	}
	return nil
}

func (m *ContentRule) GetStoreTagsLogic() ContentRuleLogic {
	if m != nil && m.StoreTagsLogic != nil {
		return *m.StoreTagsLogic
	}
	return ContentRuleLogic_RULE_LOGIC_OR
}

func (m *ContentRule) GetStoreCategoriesLogic() ContentRuleLogic {
	if m != nil && m.StoreCategoriesLogic != nil {
		return *m.StoreCategoriesLogic
	}
	return ContentRuleLogic_RULE_LOGIC_OR
}

func (m *ContentRule) GetDishTags() []uint64 {
	if m != nil {
		return m.DishTags
	}
	return nil
}

func (m *ContentRule) GetDishTagsLogic() ContentRuleLogic {
	if m != nil && m.DishTagsLogic != nil {
		return *m.DishTagsLogic
	}
	return ContentRuleLogic_RULE_LOGIC_OR
}

type Overlay struct {
	Id                   *uint64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LogoImage            *string             `protobuf:"bytes,3,opt,name=logo_image,json=logoImage" json:"logo_image,omitempty"`
	BannerImage          *string             `protobuf:"bytes,4,opt,name=banner_image,json=bannerImage" json:"banner_image,omitempty"`
	Priority             *uint32             `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	StoreTagIds          []uint64            `protobuf:"varint,6,rep,name=store_tag_ids,json=storeTagIds" json:"store_tag_ids,omitempty"`
	TagsLogic            *Overlay_TagsLogic  `protobuf:"varint,7,opt,name=tags_logic,json=tagsLogic,enum=foody_base.Overlay_TagsLogic" json:"tags_logic,omitempty"`
	Status               *Overlay_Status     `protobuf:"varint,8,opt,name=status,enum=foody_base.Overlay_Status" json:"status,omitempty"`
	EffectiveTime        *uint64             `protobuf:"varint,9,opt,name=effective_time,json=effectiveTime" json:"effective_time,omitempty"`
	ExpireTime           *uint64             `protobuf:"varint,10,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	Creator              *string             `protobuf:"bytes,11,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64             `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64             `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ShowStatus           *Overlay_ShowStatus `protobuf:"varint,14,opt,name=show_status,json=showStatus,enum=foody_base.Overlay_ShowStatus" json:"show_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Overlay) Reset()         { *m = Overlay{} }
func (m *Overlay) String() string { return proto.CompactTextString(m) }
func (*Overlay) ProtoMessage()    {}
func (*Overlay) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{111}
}
func (m *Overlay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Overlay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Overlay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Overlay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Overlay.Merge(m, src)
}
func (m *Overlay) XXX_Size() int {
	return m.Size()
}
func (m *Overlay) XXX_DiscardUnknown() {
	xxx_messageInfo_Overlay.DiscardUnknown(m)
}

var xxx_messageInfo_Overlay proto.InternalMessageInfo

func (m *Overlay) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Overlay) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Overlay) GetLogoImage() string {
	if m != nil && m.LogoImage != nil {
		return *m.LogoImage
	}
	return ""
}

func (m *Overlay) GetBannerImage() string {
	if m != nil && m.BannerImage != nil {
		return *m.BannerImage
	}
	return ""
}

func (m *Overlay) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Overlay) GetStoreTagIds() []uint64 {
	if m != nil {
		return m.StoreTagIds
	}
	return nil
}

func (m *Overlay) GetTagsLogic() Overlay_TagsLogic {
	if m != nil && m.TagsLogic != nil {
		return *m.TagsLogic
	}
	return Overlay_TAGS_LOGIC_AND
}

func (m *Overlay) GetStatus() Overlay_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Overlay_STATUS_DISABLED
}

func (m *Overlay) GetEffectiveTime() uint64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *Overlay) GetExpireTime() uint64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *Overlay) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *Overlay) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *Overlay) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *Overlay) GetShowStatus() Overlay_ShowStatus {
	if m != nil && m.ShowStatus != nil {
		return *m.ShowStatus
	}
	return Overlay_ONGOING
}

type TimeRange struct {
	StartTime            *uint64  `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64  `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{112}
}
func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(m, src)
}
func (m *TimeRange) XXX_Size() int {
	return m.Size()
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TimeRange) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type MerchantWalletAdjustmentOrder struct {
	Id                   *uint64                                         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AdjustmentStatus     *MerchantWalletAdjustmentOrder_AdjustmentStatus `protobuf:"varint,2,opt,name=adjustment_status,json=adjustmentStatus,enum=foody_base.MerchantWalletAdjustmentOrder_AdjustmentStatus" json:"adjustment_status,omitempty"`
	SettlementDetailId   *uint64                                         `protobuf:"varint,3,opt,name=settlement_detail_id,json=settlementDetailId" json:"settlement_detail_id,omitempty"`
	StoreId              *uint64                                         `protobuf:"varint,4,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	MerchantId           *uint64                                         `protobuf:"varint,5,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	WalletId             *uint64                                         `protobuf:"varint,6,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	WalletType           *MerchantWalletType                             `protobuf:"varint,7,opt,name=wallet_type,json=walletType,enum=foody_base.MerchantWalletType" json:"wallet_type,omitempty"`
	Amount               *uint64                                         `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	AmountType           *MerchantWalletAdjustmentOrder_AmountType       `protobuf:"varint,9,opt,name=amount_type,json=amountType,enum=foody_base.MerchantWalletAdjustmentOrder_AmountType" json:"amount_type,omitempty"`
	InitialTime          *uint64                                         `protobuf:"varint,10,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	ApprovedTime         *uint64                                         `protobuf:"varint,11,opt,name=approved_time,json=approvedTime" json:"approved_time,omitempty"`
	CompleteTime         *uint64                                         `protobuf:"varint,12,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	FailedTime           *uint64                                         `protobuf:"varint,13,opt,name=failed_time,json=failedTime" json:"failed_time,omitempty"`
	Remark               *string                                         `protobuf:"bytes,14,opt,name=remark" json:"remark,omitempty"`
	Auditor              *string                                         `protobuf:"bytes,15,opt,name=auditor" json:"auditor,omitempty"`
	AuditResult          *MerchantWalletAdjustmentOrder_AuditResult      `protobuf:"varint,16,opt,name=audit_result,json=auditResult,enum=foody_base.MerchantWalletAdjustmentOrder_AuditResult" json:"audit_result,omitempty"`
	RejectReason         *MerchantWalletAdjustmentOrder_RejectReason     `protobuf:"varint,17,opt,name=reject_reason,json=rejectReason,enum=foody_base.MerchantWalletAdjustmentOrder_RejectReason" json:"reject_reason,omitempty"`
	Creator              *string                                         `protobuf:"bytes,18,opt,name=creator" json:"creator,omitempty"`
	CreateTime           *uint64                                         `protobuf:"varint,19,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                         `protobuf:"varint,20,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	ReferenceId          *uint64                                         `protobuf:"varint,21,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	Reason               *string                                         `protobuf:"bytes,22,opt,name=reason" json:"reason,omitempty"`
	AuditRemark          *string                                         `protobuf:"bytes,23,opt,name=audit_remark,json=auditRemark" json:"audit_remark,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *MerchantWalletAdjustmentOrder) Reset()         { *m = MerchantWalletAdjustmentOrder{} }
func (m *MerchantWalletAdjustmentOrder) String() string { return proto.CompactTextString(m) }
func (*MerchantWalletAdjustmentOrder) ProtoMessage()    {}
func (*MerchantWalletAdjustmentOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{113}
}
func (m *MerchantWalletAdjustmentOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantWalletAdjustmentOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantWalletAdjustmentOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerchantWalletAdjustmentOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantWalletAdjustmentOrder.Merge(m, src)
}
func (m *MerchantWalletAdjustmentOrder) XXX_Size() int {
	return m.Size()
}
func (m *MerchantWalletAdjustmentOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantWalletAdjustmentOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantWalletAdjustmentOrder proto.InternalMessageInfo

func (m *MerchantWalletAdjustmentOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetAdjustmentStatus() MerchantWalletAdjustmentOrder_AdjustmentStatus {
	if m != nil && m.AdjustmentStatus != nil {
		return *m.AdjustmentStatus
	}
	return MerchantWalletAdjustmentOrder_INITED
}

func (m *MerchantWalletAdjustmentOrder) GetSettlementDetailId() uint64 {
	if m != nil && m.SettlementDetailId != nil {
		return *m.SettlementDetailId
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetWalletType() MerchantWalletType {
	if m != nil && m.WalletType != nil {
		return *m.WalletType
	}
	return MerchantWalletType_UNKNOWN_WALLET
}

func (m *MerchantWalletAdjustmentOrder) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetAmountType() MerchantWalletAdjustmentOrder_AmountType {
	if m != nil && m.AmountType != nil {
		return *m.AmountType
	}
	return MerchantWalletAdjustmentOrder_CREDIT
}

func (m *MerchantWalletAdjustmentOrder) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetApprovedTime() uint64 {
	if m != nil && m.ApprovedTime != nil {
		return *m.ApprovedTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetFailedTime() uint64 {
	if m != nil && m.FailedTime != nil {
		return *m.FailedTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *MerchantWalletAdjustmentOrder) GetAuditor() string {
	if m != nil && m.Auditor != nil {
		return *m.Auditor
	}
	return ""
}

func (m *MerchantWalletAdjustmentOrder) GetAuditResult() MerchantWalletAdjustmentOrder_AuditResult {
	if m != nil && m.AuditResult != nil {
		return *m.AuditResult
	}
	return MerchantWalletAdjustmentOrder_UNKNOWN
}

func (m *MerchantWalletAdjustmentOrder) GetRejectReason() MerchantWalletAdjustmentOrder_RejectReason {
	if m != nil && m.RejectReason != nil {
		return *m.RejectReason
	}
	return MerchantWalletAdjustmentOrder_DEFAULT
}

func (m *MerchantWalletAdjustmentOrder) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *MerchantWalletAdjustmentOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetReferenceId() uint64 {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return 0
}

func (m *MerchantWalletAdjustmentOrder) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *MerchantWalletAdjustmentOrder) GetAuditRemark() string {
	if m != nil && m.AuditRemark != nil {
		return *m.AuditRemark
	}
	return ""
}

type WalletSettlementOrder struct {
	Id               *uint64                                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SettlementStatus *WalletSettlementOrder_SettlementStatus `protobuf:"varint,2,opt,name=settlement_status,json=settlementStatus,enum=foody_base.WalletSettlementOrder_SettlementStatus" json:"settlement_status,omitempty"`
	WalletType       *MerchantWalletType                     `protobuf:"varint,3,opt,name=wallet_type,json=walletType,enum=foody_base.MerchantWalletType" json:"wallet_type,omitempty"`
	//关联
	WalletWithdrawOrderId *uint64                               `protobuf:"varint,4,opt,name=wallet_withdraw_order_id,json=walletWithdrawOrderId" json:"wallet_withdraw_order_id,omitempty"`
	WalletTxnId           *uint64                               `protobuf:"varint,5,opt,name=wallet_txn_id,json=walletTxnId" json:"wallet_txn_id,omitempty"`
	StoreId               *uint64                               `protobuf:"varint,6,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	MerchantId            *uint64                               `protobuf:"varint,7,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	WalletId              *uint64                               `protobuf:"varint,8,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	ClosingDate           *uint32                               `protobuf:"varint,11,opt,name=closing_date,json=closingDate" json:"closing_date,omitempty"`
	CreateTime            *uint64                               `protobuf:"varint,12,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime            *uint64                               `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	InitialTime           *uint64                               `protobuf:"varint,14,opt,name=initial_time,json=initialTime" json:"initial_time,omitempty"`
	ProcessingTime        *uint64                               `protobuf:"varint,15,opt,name=processing_time,json=processingTime" json:"processing_time,omitempty"`
	CompletedTime         *uint64                               `protobuf:"varint,16,opt,name=completed_time,json=completedTime" json:"completed_time,omitempty"`
	FailedTime            *uint64                               `protobuf:"varint,17,opt,name=failed_time,json=failedTime" json:"failed_time,omitempty"`
	LastErrorCode         *int64                                `protobuf:"varint,18,opt,name=last_error_code,json=lastErrorCode" json:"last_error_code,omitempty"`
	Amount                *WalletSettlementOrder_Amount         `protobuf:"bytes,20,opt,name=amount" json:"amount,omitempty"`
	Flag                  *WalletSettlementOrder_Flag           `protobuf:"bytes,21,opt,name=flag" json:"flag,omitempty"`
	StoreShardList        *WalletSettlementOrder_StoreShardList `protobuf:"bytes,22,opt,name=store_shard_list,json=storeShardList" json:"store_shard_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                              `json:"-"`
	XXX_unrecognized      []byte                                `json:"-"`
	XXX_sizecache         int32                                 `json:"-"`
}

func (m *WalletSettlementOrder) Reset()         { *m = WalletSettlementOrder{} }
func (m *WalletSettlementOrder) String() string { return proto.CompactTextString(m) }
func (*WalletSettlementOrder) ProtoMessage()    {}
func (*WalletSettlementOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{114}
}
func (m *WalletSettlementOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletSettlementOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletSettlementOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletSettlementOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletSettlementOrder.Merge(m, src)
}
func (m *WalletSettlementOrder) XXX_Size() int {
	return m.Size()
}
func (m *WalletSettlementOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletSettlementOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WalletSettlementOrder proto.InternalMessageInfo

func (m *WalletSettlementOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WalletSettlementOrder) GetSettlementStatus() WalletSettlementOrder_SettlementStatus {
	if m != nil && m.SettlementStatus != nil {
		return *m.SettlementStatus
	}
	return WalletSettlementOrder_INITED
}

func (m *WalletSettlementOrder) GetWalletType() MerchantWalletType {
	if m != nil && m.WalletType != nil {
		return *m.WalletType
	}
	return MerchantWalletType_UNKNOWN_WALLET
}

func (m *WalletSettlementOrder) GetWalletWithdrawOrderId() uint64 {
	if m != nil && m.WalletWithdrawOrderId != nil {
		return *m.WalletWithdrawOrderId
	}
	return 0
}

func (m *WalletSettlementOrder) GetWalletTxnId() uint64 {
	if m != nil && m.WalletTxnId != nil {
		return *m.WalletTxnId
	}
	return 0
}

func (m *WalletSettlementOrder) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *WalletSettlementOrder) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *WalletSettlementOrder) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *WalletSettlementOrder) GetClosingDate() uint32 {
	if m != nil && m.ClosingDate != nil {
		return *m.ClosingDate
	}
	return 0
}

func (m *WalletSettlementOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetInitialTime() uint64 {
	if m != nil && m.InitialTime != nil {
		return *m.InitialTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetProcessingTime() uint64 {
	if m != nil && m.ProcessingTime != nil {
		return *m.ProcessingTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetCompletedTime() uint64 {
	if m != nil && m.CompletedTime != nil {
		return *m.CompletedTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetFailedTime() uint64 {
	if m != nil && m.FailedTime != nil {
		return *m.FailedTime
	}
	return 0
}

func (m *WalletSettlementOrder) GetLastErrorCode() int64 {
	if m != nil && m.LastErrorCode != nil {
		return *m.LastErrorCode
	}
	return 0
}

func (m *WalletSettlementOrder) GetAmount() *WalletSettlementOrder_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WalletSettlementOrder) GetFlag() *WalletSettlementOrder_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *WalletSettlementOrder) GetStoreShardList() *WalletSettlementOrder_StoreShardList {
	if m != nil {
		return m.StoreShardList
	}
	return nil
}

//费用
type WalletSettlementOrder_Amount struct {
	Amount               *uint64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	FeeAmount            *uint64  `protobuf:"varint,2,opt,name=fee_amount,json=feeAmount" json:"fee_amount,omitempty"`
	WhtAmount            *uint64  `protobuf:"varint,3,opt,name=wht_amount,json=whtAmount" json:"wht_amount,omitempty"`
	PreDeductionAmount   *uint64  `protobuf:"varint,4,opt,name=pre_deduction_amount,json=preDeductionAmount" json:"pre_deduction_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletSettlementOrder_Amount) Reset()         { *m = WalletSettlementOrder_Amount{} }
func (m *WalletSettlementOrder_Amount) String() string { return proto.CompactTextString(m) }
func (*WalletSettlementOrder_Amount) ProtoMessage()    {}
func (*WalletSettlementOrder_Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{114, 0}
}
func (m *WalletSettlementOrder_Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletSettlementOrder_Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletSettlementOrder_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletSettlementOrder_Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletSettlementOrder_Amount.Merge(m, src)
}
func (m *WalletSettlementOrder_Amount) XXX_Size() int {
	return m.Size()
}
func (m *WalletSettlementOrder_Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletSettlementOrder_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_WalletSettlementOrder_Amount proto.InternalMessageInfo

func (m *WalletSettlementOrder_Amount) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *WalletSettlementOrder_Amount) GetFeeAmount() uint64 {
	if m != nil && m.FeeAmount != nil {
		return *m.FeeAmount
	}
	return 0
}

func (m *WalletSettlementOrder_Amount) GetWhtAmount() uint64 {
	if m != nil && m.WhtAmount != nil {
		return *m.WhtAmount
	}
	return 0
}

func (m *WalletSettlementOrder_Amount) GetPreDeductionAmount() uint64 {
	if m != nil && m.PreDeductionAmount != nil {
		return *m.PreDeductionAmount
	}
	return 0
}

type WalletSettlementOrder_Flag struct {
	IsSettlementCombined *bool    `protobuf:"varint,1,opt,name=is_settlement_combined,json=isSettlementCombined" json:"is_settlement_combined,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletSettlementOrder_Flag) Reset()         { *m = WalletSettlementOrder_Flag{} }
func (m *WalletSettlementOrder_Flag) String() string { return proto.CompactTextString(m) }
func (*WalletSettlementOrder_Flag) ProtoMessage()    {}
func (*WalletSettlementOrder_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{114, 1}
}
func (m *WalletSettlementOrder_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletSettlementOrder_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletSettlementOrder_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletSettlementOrder_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletSettlementOrder_Flag.Merge(m, src)
}
func (m *WalletSettlementOrder_Flag) XXX_Size() int {
	return m.Size()
}
func (m *WalletSettlementOrder_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletSettlementOrder_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_WalletSettlementOrder_Flag proto.InternalMessageInfo

func (m *WalletSettlementOrder_Flag) GetIsSettlementCombined() bool {
	if m != nil && m.IsSettlementCombined != nil {
		return *m.IsSettlementCombined
	}
	return false
}

type WalletSettlementOrder_StoreShardList struct {
	Shard                []uint32 `protobuf:"varint,1,rep,name=shard" json:"shard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletSettlementOrder_StoreShardList) Reset()         { *m = WalletSettlementOrder_StoreShardList{} }
func (m *WalletSettlementOrder_StoreShardList) String() string { return proto.CompactTextString(m) }
func (*WalletSettlementOrder_StoreShardList) ProtoMessage()    {}
func (*WalletSettlementOrder_StoreShardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{114, 2}
}
func (m *WalletSettlementOrder_StoreShardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletSettlementOrder_StoreShardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletSettlementOrder_StoreShardList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletSettlementOrder_StoreShardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletSettlementOrder_StoreShardList.Merge(m, src)
}
func (m *WalletSettlementOrder_StoreShardList) XXX_Size() int {
	return m.Size()
}
func (m *WalletSettlementOrder_StoreShardList) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletSettlementOrder_StoreShardList.DiscardUnknown(m)
}

var xxx_messageInfo_WalletSettlementOrder_StoreShardList proto.InternalMessageInfo

func (m *WalletSettlementOrder_StoreShardList) GetShard() []uint32 {
	if m != nil {
		return m.Shard
	}
	return nil
}

type MerchantWalletWithdrawOrder struct {
	Id                   *uint64                                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	WithdrawStatus       *MerchantWalletWithdrawOrder_WithdrawStatus `protobuf:"varint,2,opt,name=withdraw_status,json=withdrawStatus,enum=foody_base.MerchantWalletWithdrawOrder_WithdrawStatus" json:"withdraw_status,omitempty"`
	WalletType           *MerchantWalletType                         `protobuf:"varint,3,opt,name=wallet_type,json=walletType,enum=foody_base.MerchantWalletType" json:"wallet_type,omitempty"`
	WalletTxnId          *uint64                                     `protobuf:"varint,4,opt,name=wallet_txn_id,json=walletTxnId" json:"wallet_txn_id,omitempty"`
	StoreId              *uint64                                     `protobuf:"varint,5,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	MerchantId           *uint64                                     `protobuf:"varint,6,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	WalletId             *uint64                                     `protobuf:"varint,7,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	Amount               *int64                                      `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	PaymentMethod        *MerchantWalletWithdrawOrder_PaymentMethod  `protobuf:"varint,9,opt,name=payment_method,json=paymentMethod,enum=foody_base.MerchantWalletWithdrawOrder_PaymentMethod" json:"payment_method,omitempty"`
	ActualPayoutAmount   *uint64                                     `protobuf:"varint,10,opt,name=actual_payout_amount,json=actualPayoutAmount" json:"actual_payout_amount,omitempty"`
	CreateTime           *uint64                                     `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	ProcessingTime       *uint64                                     `protobuf:"varint,12,opt,name=processing_time,json=processingTime" json:"processing_time,omitempty"`
	UpdateTime           *uint64                                     `protobuf:"varint,13,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CompletedTime        *uint64                                     `protobuf:"varint,14,opt,name=completed_time,json=completedTime" json:"completed_time,omitempty"`
	FailedTime           *uint64                                     `protobuf:"varint,15,opt,name=failed_time,json=failedTime" json:"failed_time,omitempty"`
	LastErrorCode        *int64                                      `protobuf:"varint,16,opt,name=last_error_code,json=lastErrorCode" json:"last_error_code,omitempty"`
	PayoutMode           *MerchantWalletWithdrawOrder_PayoutMode     `protobuf:"varint,17,opt,name=payout_mode,json=payoutMode,enum=foody_base.MerchantWalletWithdrawOrder_PayoutMode" json:"payout_mode,omitempty"`
	BankName             *string                                     `protobuf:"bytes,18,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	BankId               *uint64                                     `protobuf:"varint,19,opt,name=bank_id,json=bankId" json:"bank_id,omitempty"`
	BankAccountNo        *string                                     `protobuf:"bytes,20,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankAccountName      *string                                     `protobuf:"bytes,21,opt,name=bank_account_name,json=bankAccountName" json:"bank_account_name,omitempty"`
	TransactionRef       *string                                     `protobuf:"bytes,22,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	Remark               *string                                     `protobuf:"bytes,23,opt,name=remark" json:"remark,omitempty"`
	WalletTxnSn          *string                                     `protobuf:"bytes,24,opt,name=wallet_txn_sn,json=walletTxnSn" json:"wallet_txn_sn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *MerchantWalletWithdrawOrder) Reset()         { *m = MerchantWalletWithdrawOrder{} }
func (m *MerchantWalletWithdrawOrder) String() string { return proto.CompactTextString(m) }
func (*MerchantWalletWithdrawOrder) ProtoMessage()    {}
func (*MerchantWalletWithdrawOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{115}
}
func (m *MerchantWalletWithdrawOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantWalletWithdrawOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantWalletWithdrawOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerchantWalletWithdrawOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantWalletWithdrawOrder.Merge(m, src)
}
func (m *MerchantWalletWithdrawOrder) XXX_Size() int {
	return m.Size()
}
func (m *MerchantWalletWithdrawOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantWalletWithdrawOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantWalletWithdrawOrder proto.InternalMessageInfo

func (m *MerchantWalletWithdrawOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetWithdrawStatus() MerchantWalletWithdrawOrder_WithdrawStatus {
	if m != nil && m.WithdrawStatus != nil {
		return *m.WithdrawStatus
	}
	return MerchantWalletWithdrawOrder_INITED
}

func (m *MerchantWalletWithdrawOrder) GetWalletType() MerchantWalletType {
	if m != nil && m.WalletType != nil {
		return *m.WalletType
	}
	return MerchantWalletType_UNKNOWN_WALLET
}

func (m *MerchantWalletWithdrawOrder) GetWalletTxnId() uint64 {
	if m != nil && m.WalletTxnId != nil {
		return *m.WalletTxnId
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetPaymentMethod() MerchantWalletWithdrawOrder_PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return MerchantWalletWithdrawOrder_BANK
}

func (m *MerchantWalletWithdrawOrder) GetActualPayoutAmount() uint64 {
	if m != nil && m.ActualPayoutAmount != nil {
		return *m.ActualPayoutAmount
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetProcessingTime() uint64 {
	if m != nil && m.ProcessingTime != nil {
		return *m.ProcessingTime
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetCompletedTime() uint64 {
	if m != nil && m.CompletedTime != nil {
		return *m.CompletedTime
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetFailedTime() uint64 {
	if m != nil && m.FailedTime != nil {
		return *m.FailedTime
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetLastErrorCode() int64 {
	if m != nil && m.LastErrorCode != nil {
		return *m.LastErrorCode
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetPayoutMode() MerchantWalletWithdrawOrder_PayoutMode {
	if m != nil && m.PayoutMode != nil {
		return *m.PayoutMode
	}
	return MerchantWalletWithdrawOrder_UNKOWN
}

func (m *MerchantWalletWithdrawOrder) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *MerchantWalletWithdrawOrder) GetBankId() uint64 {
	if m != nil && m.BankId != nil {
		return *m.BankId
	}
	return 0
}

func (m *MerchantWalletWithdrawOrder) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *MerchantWalletWithdrawOrder) GetBankAccountName() string {
	if m != nil && m.BankAccountName != nil {
		return *m.BankAccountName
	}
	return ""
}

func (m *MerchantWalletWithdrawOrder) GetTransactionRef() string {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return ""
}

func (m *MerchantWalletWithdrawOrder) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *MerchantWalletWithdrawOrder) GetWalletTxnSn() string {
	if m != nil && m.WalletTxnSn != nil {
		return *m.WalletTxnSn
	}
	return ""
}

type ExpressContent struct {
	Id                       *uint64                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId                  *uint64                     `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ServiceType              *ServiceType                `protobuf:"varint,3,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	ExpressStatus            *ExpressStatus              `protobuf:"varint,4,opt,name=express_status,json=expressStatus,enum=foody_base.ExpressStatus" json:"express_status,omitempty"`
	CollectFrom              *ExpressContent_CollectFrom `protobuf:"varint,5,opt,name=collect_from,json=collectFrom,enum=foody_base.ExpressContent_CollectFrom" json:"collect_from,omitempty"`
	CollectAmount            *uint64                     `protobuf:"varint,6,opt,name=collect_amount,json=collectAmount" json:"collect_amount,omitempty"`
	PayTo                    *ExpressContent_PayTo       `protobuf:"varint,7,opt,name=pay_to,json=payTo,enum=foody_base.ExpressContent_PayTo" json:"pay_to,omitempty"`
	PayAmount                *uint64                     `protobuf:"varint,8,opt,name=pay_amount,json=payAmount" json:"pay_amount,omitempty"`
	DepositAmount            *uint64                     `protobuf:"varint,9,opt,name=deposit_amount,json=depositAmount" json:"deposit_amount,omitempty"`
	Timezone                 *string                     `protobuf:"bytes,10,opt,name=timezone" json:"timezone,omitempty"`
	Flag                     *uint64                     `protobuf:"varint,11,opt,name=flag" json:"flag,omitempty"`
	CancelSource             *CancelSource               `protobuf:"varint,12,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelProposer           *Proposer                   `protobuf:"varint,13,opt,name=cancel_proposer,json=cancelProposer,enum=foody_base.Proposer" json:"cancel_proposer,omitempty"`
	CancelReason             *SPXCancelReason            `protobuf:"varint,14,opt,name=cancel_reason,json=cancelReason,enum=foody_base.SPXCancelReason" json:"cancel_reason,omitempty"`
	CancelCerts              []*Certificate              `protobuf:"bytes,15,rep,name=cancel_certs,json=cancelCerts" json:"cancel_certs,omitempty"`
	CancelRemark             *string                     `protobuf:"bytes,16,opt,name=cancel_remark,json=cancelRemark" json:"cancel_remark,omitempty"`
	CreateTime               *uint64                     `protobuf:"varint,17,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	AssignTime               *uint64                     `protobuf:"varint,18,opt,name=assign_time,json=assignTime" json:"assign_time,omitempty"`
	ArriveTime               *uint64                     `protobuf:"varint,19,opt,name=arrive_time,json=arriveTime" json:"arrive_time,omitempty"`
	PickupTime               *uint64                     `protobuf:"varint,20,opt,name=pickup_time,json=pickupTime" json:"pickup_time,omitempty"`
	CompleteTime             *uint64                     `protobuf:"varint,21,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	ReturnTime               *uint64                     `protobuf:"varint,22,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CancelTime               *uint64                     `protobuf:"varint,23,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	UpdateTime               *uint64                     `protobuf:"varint,24,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	EstimatePickupDuration   *uint64                     `protobuf:"varint,25,opt,name=estimate_pickup_duration,json=estimatePickupDuration" json:"estimate_pickup_duration,omitempty"`
	EstimateDeliveryDuration *uint64                     `protobuf:"varint,26,opt,name=estimate_delivery_duration,json=estimateDeliveryDuration" json:"estimate_delivery_duration,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                    `json:"-"`
	XXX_unrecognized         []byte                      `json:"-"`
	XXX_sizecache            int32                       `json:"-"`
}

func (m *ExpressContent) Reset()         { *m = ExpressContent{} }
func (m *ExpressContent) String() string { return proto.CompactTextString(m) }
func (*ExpressContent) ProtoMessage()    {}
func (*ExpressContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{116}
}
func (m *ExpressContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressContent.Merge(m, src)
}
func (m *ExpressContent) XXX_Size() int {
	return m.Size()
}
func (m *ExpressContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressContent.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressContent proto.InternalMessageInfo

func (m *ExpressContent) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExpressContent) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *ExpressContent) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *ExpressContent) GetExpressStatus() ExpressStatus {
	if m != nil && m.ExpressStatus != nil {
		return *m.ExpressStatus
	}
	return ExpressStatus_EXPRESS_CREATED
}

func (m *ExpressContent) GetCollectFrom() ExpressContent_CollectFrom {
	if m != nil && m.CollectFrom != nil {
		return *m.CollectFrom
	}
	return ExpressContent_FROM_NONE
}

func (m *ExpressContent) GetCollectAmount() uint64 {
	if m != nil && m.CollectAmount != nil {
		return *m.CollectAmount
	}
	return 0
}

func (m *ExpressContent) GetPayTo() ExpressContent_PayTo {
	if m != nil && m.PayTo != nil {
		return *m.PayTo
	}
	return ExpressContent_TO_NONE
}

func (m *ExpressContent) GetPayAmount() uint64 {
	if m != nil && m.PayAmount != nil {
		return *m.PayAmount
	}
	return 0
}

func (m *ExpressContent) GetDepositAmount() uint64 {
	if m != nil && m.DepositAmount != nil {
		return *m.DepositAmount
	}
	return 0
}

func (m *ExpressContent) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *ExpressContent) GetFlag() uint64 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *ExpressContent) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *ExpressContent) GetCancelProposer() Proposer {
	if m != nil && m.CancelProposer != nil {
		return *m.CancelProposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *ExpressContent) GetCancelReason() SPXCancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return SPXCancelReason_SPX_RESERVED
}

func (m *ExpressContent) GetCancelCerts() []*Certificate {
	if m != nil {
		return m.CancelCerts
	}
	return nil
}

func (m *ExpressContent) GetCancelRemark() string {
	if m != nil && m.CancelRemark != nil {
		return *m.CancelRemark
	}
	return ""
}

func (m *ExpressContent) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExpressContent) GetAssignTime() uint64 {
	if m != nil && m.AssignTime != nil {
		return *m.AssignTime
	}
	return 0
}

func (m *ExpressContent) GetArriveTime() uint64 {
	if m != nil && m.ArriveTime != nil {
		return *m.ArriveTime
	}
	return 0
}

func (m *ExpressContent) GetPickupTime() uint64 {
	if m != nil && m.PickupTime != nil {
		return *m.PickupTime
	}
	return 0
}

func (m *ExpressContent) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *ExpressContent) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *ExpressContent) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ExpressContent) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ExpressContent) GetEstimatePickupDuration() uint64 {
	if m != nil && m.EstimatePickupDuration != nil {
		return *m.EstimatePickupDuration
	}
	return 0
}

func (m *ExpressContent) GetEstimateDeliveryDuration() uint64 {
	if m != nil && m.EstimateDeliveryDuration != nil {
		return *m.EstimateDeliveryDuration
	}
	return 0
}

type ExpressDelivery struct {
	Id                   *uint64                         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PackageId            *uint64                         `protobuf:"varint,2,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	ExpressId            *uint64                         `protobuf:"varint,3,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	DriverId             *uint64                         `protobuf:"varint,4,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	ServiceType          *ServiceType                    `protobuf:"varint,5,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	DeliveryStatus       *ExpressDeliveryStatus          `protobuf:"varint,6,opt,name=delivery_status,json=deliveryStatus,enum=foody_base.ExpressDeliveryStatus" json:"delivery_status,omitempty"`
	PickupName           *string                         `protobuf:"bytes,8,opt,name=pickup_name,json=pickupName" json:"pickup_name,omitempty"`
	PickupCerts          []*Certificate                  `protobuf:"bytes,9,rep,name=pickup_certs,json=pickupCerts" json:"pickup_certs,omitempty"`
	PickupRemark         *string                         `protobuf:"bytes,10,opt,name=pickup_remark,json=pickupRemark" json:"pickup_remark,omitempty"`
	DeliveryName         *string                         `protobuf:"bytes,12,opt,name=delivery_name,json=deliveryName" json:"delivery_name,omitempty"`
	DeliveryType         *ExpressDelivery_DeliveryType   `protobuf:"varint,13,opt,name=delivery_type,json=deliveryType,enum=foody_base.ExpressDelivery_DeliveryType" json:"delivery_type,omitempty"`
	DeliveryCerts        []*Certificate                  `protobuf:"bytes,14,rep,name=delivery_certs,json=deliveryCerts" json:"delivery_certs,omitempty"`
	DeliveryRemark       *string                         `protobuf:"bytes,15,opt,name=delivery_remark,json=deliveryRemark" json:"delivery_remark,omitempty"`
	DeliveryReason       *ExpressDelivery_CompleteReason `protobuf:"varint,17,opt,name=delivery_reason,json=deliveryReason,enum=foody_base.ExpressDelivery_CompleteReason" json:"delivery_reason,omitempty"`
	ReturnName           *string                         `protobuf:"bytes,20,opt,name=return_name,json=returnName" json:"return_name,omitempty"`
	ReturnCerts          []*Certificate                  `protobuf:"bytes,21,rep,name=return_certs,json=returnCerts" json:"return_certs,omitempty"`
	ReturnRemark         *string                         `protobuf:"bytes,22,opt,name=return_remark,json=returnRemark" json:"return_remark,omitempty"`
	ReturnReason         *ExpressDelivery_ReturnReason   `protobuf:"varint,24,opt,name=return_reason,json=returnReason,enum=foody_base.ExpressDelivery_ReturnReason" json:"return_reason,omitempty"`
	ShippingSurgeFee     *uint64                         `protobuf:"varint,25,opt,name=shipping_surge_fee,json=shippingSurgeFee" json:"shipping_surge_fee,omitempty"`
	ShippingIncome       *uint64                         `protobuf:"varint,26,opt,name=shipping_income,json=shippingIncome" json:"shipping_income,omitempty"`
	Timezone             *string                         `protobuf:"bytes,27,opt,name=timezone" json:"timezone,omitempty"`
	OnholdFlag           *ExpressDelivery_OnHoldFlag     `protobuf:"varint,28,opt,name=onhold_flag,json=onholdFlag,enum=foody_base.ExpressDelivery_OnHoldFlag" json:"onhold_flag,omitempty"`
	CancelProposer       *Proposer                       `protobuf:"varint,29,opt,name=cancel_proposer,json=cancelProposer,enum=foody_base.Proposer" json:"cancel_proposer,omitempty"`
	CancelSource         *CancelSource                   `protobuf:"varint,30,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelReason         *SPXCancelReason                `protobuf:"varint,31,opt,name=cancel_reason,json=cancelReason,enum=foody_base.SPXCancelReason" json:"cancel_reason,omitempty"`
	CreateTime           *uint64                         `protobuf:"varint,32,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	ArriveTime           *uint64                         `protobuf:"varint,33,opt,name=arrive_time,json=arriveTime" json:"arrive_time,omitempty"`
	PickupTime           *uint64                         `protobuf:"varint,34,opt,name=pickup_time,json=pickupTime" json:"pickup_time,omitempty"`
	CompleteTime         *uint64                         `protobuf:"varint,35,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	ReturnDeadline       *uint64                         `protobuf:"varint,36,opt,name=return_deadline,json=returnDeadline" json:"return_deadline,omitempty"`
	ReturnTime           *uint64                         `protobuf:"varint,37,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CancelTime           *uint64                         `protobuf:"varint,38,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	UpdateTime           *uint64                         `protobuf:"varint,39,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	GeoTracking          *ExpressDelivery_GeoTracking    `protobuf:"bytes,40,opt,name=geo_tracking,json=geoTracking" json:"geo_tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ExpressDelivery) Reset()         { *m = ExpressDelivery{} }
func (m *ExpressDelivery) String() string { return proto.CompactTextString(m) }
func (*ExpressDelivery) ProtoMessage()    {}
func (*ExpressDelivery) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117}
}
func (m *ExpressDelivery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressDelivery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressDelivery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressDelivery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressDelivery.Merge(m, src)
}
func (m *ExpressDelivery) XXX_Size() int {
	return m.Size()
}
func (m *ExpressDelivery) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressDelivery.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressDelivery proto.InternalMessageInfo

func (m *ExpressDelivery) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExpressDelivery) GetPackageId() uint64 {
	if m != nil && m.PackageId != nil {
		return *m.PackageId
	}
	return 0
}

func (m *ExpressDelivery) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

func (m *ExpressDelivery) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *ExpressDelivery) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *ExpressDelivery) GetDeliveryStatus() ExpressDeliveryStatus {
	if m != nil && m.DeliveryStatus != nil {
		return *m.DeliveryStatus
	}
	return ExpressDeliveryStatus_EXPRESS_DELIVERY_CREATED
}

func (m *ExpressDelivery) GetPickupName() string {
	if m != nil && m.PickupName != nil {
		return *m.PickupName
	}
	return ""
}

func (m *ExpressDelivery) GetPickupCerts() []*Certificate {
	if m != nil {
		return m.PickupCerts
	}
	return nil
}

func (m *ExpressDelivery) GetPickupRemark() string {
	if m != nil && m.PickupRemark != nil {
		return *m.PickupRemark
	}
	return ""
}

func (m *ExpressDelivery) GetDeliveryName() string {
	if m != nil && m.DeliveryName != nil {
		return *m.DeliveryName
	}
	return ""
}

func (m *ExpressDelivery) GetDeliveryType() ExpressDelivery_DeliveryType {
	if m != nil && m.DeliveryType != nil {
		return *m.DeliveryType
	}
	return ExpressDelivery_UNKNOWN
}

func (m *ExpressDelivery) GetDeliveryCerts() []*Certificate {
	if m != nil {
		return m.DeliveryCerts
	}
	return nil
}

func (m *ExpressDelivery) GetDeliveryRemark() string {
	if m != nil && m.DeliveryRemark != nil {
		return *m.DeliveryRemark
	}
	return ""
}

func (m *ExpressDelivery) GetDeliveryReason() ExpressDelivery_CompleteReason {
	if m != nil && m.DeliveryReason != nil {
		return *m.DeliveryReason
	}
	return ExpressDelivery_DELIVERED_DEFAULT
}

func (m *ExpressDelivery) GetReturnName() string {
	if m != nil && m.ReturnName != nil {
		return *m.ReturnName
	}
	return ""
}

func (m *ExpressDelivery) GetReturnCerts() []*Certificate {
	if m != nil {
		return m.ReturnCerts
	}
	return nil
}

func (m *ExpressDelivery) GetReturnRemark() string {
	if m != nil && m.ReturnRemark != nil {
		return *m.ReturnRemark
	}
	return ""
}

func (m *ExpressDelivery) GetReturnReason() ExpressDelivery_ReturnReason {
	if m != nil && m.ReturnReason != nil {
		return *m.ReturnReason
	}
	return ExpressDelivery_RETURNED_DEFAULT
}

func (m *ExpressDelivery) GetShippingSurgeFee() uint64 {
	if m != nil && m.ShippingSurgeFee != nil {
		return *m.ShippingSurgeFee
	}
	return 0
}

func (m *ExpressDelivery) GetShippingIncome() uint64 {
	if m != nil && m.ShippingIncome != nil {
		return *m.ShippingIncome
	}
	return 0
}

func (m *ExpressDelivery) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *ExpressDelivery) GetOnholdFlag() ExpressDelivery_OnHoldFlag {
	if m != nil && m.OnholdFlag != nil {
		return *m.OnholdFlag
	}
	return ExpressDelivery_DEFAULT
}

func (m *ExpressDelivery) GetCancelProposer() Proposer {
	if m != nil && m.CancelProposer != nil {
		return *m.CancelProposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *ExpressDelivery) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *ExpressDelivery) GetCancelReason() SPXCancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return SPXCancelReason_SPX_RESERVED
}

func (m *ExpressDelivery) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExpressDelivery) GetArriveTime() uint64 {
	if m != nil && m.ArriveTime != nil {
		return *m.ArriveTime
	}
	return 0
}

func (m *ExpressDelivery) GetPickupTime() uint64 {
	if m != nil && m.PickupTime != nil {
		return *m.PickupTime
	}
	return 0
}

func (m *ExpressDelivery) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *ExpressDelivery) GetReturnDeadline() uint64 {
	if m != nil && m.ReturnDeadline != nil {
		return *m.ReturnDeadline
	}
	return 0
}

func (m *ExpressDelivery) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *ExpressDelivery) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ExpressDelivery) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ExpressDelivery) GetGeoTracking() *ExpressDelivery_GeoTracking {
	if m != nil {
		return m.GeoTracking
	}
	return nil
}

type ExpressDelivery_GeoTracking struct {
	ArriveGeo            *Geo     `protobuf:"bytes,1,opt,name=arrive_geo,json=arriveGeo" json:"arrive_geo,omitempty"`
	PickupGeo            *Geo     `protobuf:"bytes,2,opt,name=pickup_geo,json=pickupGeo" json:"pickup_geo,omitempty"`
	CompleteGeo          *Geo     `protobuf:"bytes,3,opt,name=complete_geo,json=completeGeo" json:"complete_geo,omitempty"`
	AcceptGeo            *Geo     `protobuf:"bytes,4,opt,name=accept_geo,json=acceptGeo" json:"accept_geo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpressDelivery_GeoTracking) Reset()         { *m = ExpressDelivery_GeoTracking{} }
func (m *ExpressDelivery_GeoTracking) String() string { return proto.CompactTextString(m) }
func (*ExpressDelivery_GeoTracking) ProtoMessage()    {}
func (*ExpressDelivery_GeoTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{117, 0}
}
func (m *ExpressDelivery_GeoTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressDelivery_GeoTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressDelivery_GeoTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressDelivery_GeoTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressDelivery_GeoTracking.Merge(m, src)
}
func (m *ExpressDelivery_GeoTracking) XXX_Size() int {
	return m.Size()
}
func (m *ExpressDelivery_GeoTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressDelivery_GeoTracking.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressDelivery_GeoTracking proto.InternalMessageInfo

func (m *ExpressDelivery_GeoTracking) GetArriveGeo() *Geo {
	if m != nil {
		return m.ArriveGeo
	}
	return nil
}

func (m *ExpressDelivery_GeoTracking) GetPickupGeo() *Geo {
	if m != nil {
		return m.PickupGeo
	}
	return nil
}

func (m *ExpressDelivery_GeoTracking) GetCompleteGeo() *Geo {
	if m != nil {
		return m.CompleteGeo
	}
	return nil
}

func (m *ExpressDelivery_GeoTracking) GetAcceptGeo() *Geo {
	if m != nil {
		return m.AcceptGeo
	}
	return nil
}

type ExpressPackage struct {
	Id                   *uint64               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ExpressId            *uint64               `protobuf:"varint,2,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	ServiceType          *ServiceType          `protobuf:"varint,3,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	Category             *PackageCategory      `protobuf:"varint,4,opt,name=category,enum=foody_base.PackageCategory" json:"category,omitempty"`
	PackageStatus        *ExpressPackageStatus `protobuf:"varint,5,opt,name=package_status,json=packageStatus,enum=foody_base.ExpressPackageStatus" json:"package_status,omitempty"`
	PickupAddress        *DeliveryAddress      `protobuf:"bytes,6,opt,name=pickup_address,json=pickupAddress" json:"pickup_address,omitempty"`
	DeliveryAddress      *DeliveryAddress      `protobuf:"bytes,7,opt,name=delivery_address,json=deliveryAddress" json:"delivery_address,omitempty"`
	DeliveryDistance     *uint64               `protobuf:"varint,8,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	Weight               *uint32               `protobuf:"varint,9,opt,name=weight" json:"weight,omitempty"`
	Length               *uint32               `protobuf:"varint,10,opt,name=length" json:"length,omitempty"`
	Width                *uint32               `protobuf:"varint,11,opt,name=width" json:"width,omitempty"`
	Height               *uint32               `protobuf:"varint,12,opt,name=height" json:"height,omitempty"`
	Remark               *string               `protobuf:"bytes,13,opt,name=remark" json:"remark,omitempty"`
	CreateTime           *uint64               `protobuf:"varint,14,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	CompleteTime         *uint64               `protobuf:"varint,15,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	ReturnTime           *uint64               `protobuf:"varint,16,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CancelTime           *uint64               `protobuf:"varint,17,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	UpdateTime           *uint64               `protobuf:"varint,18,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExpressPackage) Reset()         { *m = ExpressPackage{} }
func (m *ExpressPackage) String() string { return proto.CompactTextString(m) }
func (*ExpressPackage) ProtoMessage()    {}
func (*ExpressPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{118}
}
func (m *ExpressPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressPackage.Merge(m, src)
}
func (m *ExpressPackage) XXX_Size() int {
	return m.Size()
}
func (m *ExpressPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressPackage.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressPackage proto.InternalMessageInfo

func (m *ExpressPackage) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExpressPackage) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

func (m *ExpressPackage) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *ExpressPackage) GetCategory() PackageCategory {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return PackageCategory_EXPRESS_PACKAGE_FILE
}

func (m *ExpressPackage) GetPackageStatus() ExpressPackageStatus {
	if m != nil && m.PackageStatus != nil {
		return *m.PackageStatus
	}
	return ExpressPackageStatus_EXPRESS_PACKAGE_CREATED
}

func (m *ExpressPackage) GetPickupAddress() *DeliveryAddress {
	if m != nil {
		return m.PickupAddress
	}
	return nil
}

func (m *ExpressPackage) GetDeliveryAddress() *DeliveryAddress {
	if m != nil {
		return m.DeliveryAddress
	}
	return nil
}

func (m *ExpressPackage) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *ExpressPackage) GetWeight() uint32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *ExpressPackage) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *ExpressPackage) GetWidth() uint32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *ExpressPackage) GetHeight() uint32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *ExpressPackage) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *ExpressPackage) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExpressPackage) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *ExpressPackage) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *ExpressPackage) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ExpressPackage) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type ExpressAssignment struct {
	Id                   *uint64                          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ExpressId            *uint64                          `protobuf:"varint,2,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	DriverId             *uint64                          `protobuf:"varint,3,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	ServiceType          *ServiceType                     `protobuf:"varint,4,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	AssignmentStatus     *ExpressAssignmentStatus         `protobuf:"varint,5,opt,name=assignment_status,json=assignmentStatus,enum=foody_base.ExpressAssignmentStatus" json:"assignment_status,omitempty"`
	PaymentId            *uint64                          `protobuf:"varint,6,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	DepositAmount        *uint64                          `protobuf:"varint,7,opt,name=deposit_amount,json=depositAmount" json:"deposit_amount,omitempty"`
	DepositStatus        *ExpressAssignment_DepositStatus `protobuf:"varint,8,opt,name=deposit_status,json=depositStatus,enum=foody_base.ExpressAssignment_DepositStatus" json:"deposit_status,omitempty"`
	CancelSource         *CancelSource                    `protobuf:"varint,9,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelReason         *SPXCancelReason                 `protobuf:"varint,10,opt,name=cancel_reason,json=cancelReason,enum=foody_base.SPXCancelReason" json:"cancel_reason,omitempty"`
	CancelCerts          []*Certificate                   `protobuf:"bytes,11,rep,name=cancel_certs,json=cancelCerts" json:"cancel_certs,omitempty"`
	CancelRemark         *string                          `protobuf:"bytes,12,opt,name=cancel_remark,json=cancelRemark" json:"cancel_remark,omitempty"`
	CreateTime           *uint64                          `protobuf:"varint,13,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	AssignTime           *uint64                          `protobuf:"varint,14,opt,name=assign_time,json=assignTime" json:"assign_time,omitempty"`
	CompleteTime         *uint64                          `protobuf:"varint,15,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime           *uint64                          `protobuf:"varint,16,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	UpdateTime           *uint64                          `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	EstimatePickupTime   *uint64                          `protobuf:"varint,18,opt,name=estimate_pickup_time,json=estimatePickupTime" json:"estimate_pickup_time,omitempty"`
	CancelProposer       *Proposer                        `protobuf:"varint,100,opt,name=cancel_proposer,json=cancelProposer,enum=foody_base.Proposer" json:"cancel_proposer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ExpressAssignment) Reset()         { *m = ExpressAssignment{} }
func (m *ExpressAssignment) String() string { return proto.CompactTextString(m) }
func (*ExpressAssignment) ProtoMessage()    {}
func (*ExpressAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{119}
}
func (m *ExpressAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressAssignment.Merge(m, src)
}
func (m *ExpressAssignment) XXX_Size() int {
	return m.Size()
}
func (m *ExpressAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressAssignment proto.InternalMessageInfo

func (m *ExpressAssignment) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExpressAssignment) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

func (m *ExpressAssignment) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *ExpressAssignment) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *ExpressAssignment) GetAssignmentStatus() ExpressAssignmentStatus {
	if m != nil && m.AssignmentStatus != nil {
		return *m.AssignmentStatus
	}
	return ExpressAssignmentStatus_EXPRESS_ASSIGNMENT_CREATED
}

func (m *ExpressAssignment) GetPaymentId() uint64 {
	if m != nil && m.PaymentId != nil {
		return *m.PaymentId
	}
	return 0
}

func (m *ExpressAssignment) GetDepositAmount() uint64 {
	if m != nil && m.DepositAmount != nil {
		return *m.DepositAmount
	}
	return 0
}

func (m *ExpressAssignment) GetDepositStatus() ExpressAssignment_DepositStatus {
	if m != nil && m.DepositStatus != nil {
		return *m.DepositStatus
	}
	return ExpressAssignment_DEPOSIT_DEFAULT
}

func (m *ExpressAssignment) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *ExpressAssignment) GetCancelReason() SPXCancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return SPXCancelReason_SPX_RESERVED
}

func (m *ExpressAssignment) GetCancelCerts() []*Certificate {
	if m != nil {
		return m.CancelCerts
	}
	return nil
}

func (m *ExpressAssignment) GetCancelRemark() string {
	if m != nil && m.CancelRemark != nil {
		return *m.CancelRemark
	}
	return ""
}

func (m *ExpressAssignment) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExpressAssignment) GetAssignTime() uint64 {
	if m != nil && m.AssignTime != nil {
		return *m.AssignTime
	}
	return 0
}

func (m *ExpressAssignment) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *ExpressAssignment) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ExpressAssignment) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ExpressAssignment) GetEstimatePickupTime() uint64 {
	if m != nil && m.EstimatePickupTime != nil {
		return *m.EstimatePickupTime
	}
	return 0
}

func (m *ExpressAssignment) GetCancelProposer() Proposer {
	if m != nil && m.CancelProposer != nil {
		return *m.CancelProposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

type ExpressDeliveryPackage struct {
	Package              *ExpressPackage  `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
	Delivery             *ExpressDelivery `protobuf:"bytes,2,opt,name=delivery" json:"delivery,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ExpressDeliveryPackage) Reset()         { *m = ExpressDeliveryPackage{} }
func (m *ExpressDeliveryPackage) String() string { return proto.CompactTextString(m) }
func (*ExpressDeliveryPackage) ProtoMessage()    {}
func (*ExpressDeliveryPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{120}
}
func (m *ExpressDeliveryPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressDeliveryPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressDeliveryPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressDeliveryPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressDeliveryPackage.Merge(m, src)
}
func (m *ExpressDeliveryPackage) XXX_Size() int {
	return m.Size()
}
func (m *ExpressDeliveryPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressDeliveryPackage.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressDeliveryPackage proto.InternalMessageInfo

func (m *ExpressDeliveryPackage) GetPackage() *ExpressPackage {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *ExpressDeliveryPackage) GetDelivery() *ExpressDelivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

type ExpressAuditOrder struct {
	Id                   *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeliveryId           *uint64                        `protobuf:"varint,2,opt,name=delivery_id,json=deliveryId" json:"delivery_id,omitempty"`
	ExpressId            *uint64                        `protobuf:"varint,3,opt,name=express_id,json=expressId" json:"express_id,omitempty"`
	DriverId             *uint64                        `protobuf:"varint,4,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	ServiceType          *ServiceType                   `protobuf:"varint,5,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	AuditType            *ExpressAuditOrder_AuditType   `protobuf:"varint,6,opt,name=audit_type,json=auditType,enum=foody_base.ExpressAuditOrder_AuditType" json:"audit_type,omitempty"`
	OrderStatus          *ExpressAuditOrder_OrderStatus `protobuf:"varint,7,opt,name=order_status,json=orderStatus,enum=foody_base.ExpressAuditOrder_OrderStatus" json:"order_status,omitempty"`
	Source               *Source                        `protobuf:"varint,8,opt,name=source,enum=foody_base.Source" json:"source,omitempty"`
	Reason               *SPXCancelReason               `protobuf:"varint,9,opt,name=reason,enum=foody_base.SPXCancelReason" json:"reason,omitempty"`
	Certs                []*Certificate                 `protobuf:"bytes,10,rep,name=certs" json:"certs,omitempty"`
	Remark               *string                        `protobuf:"bytes,11,opt,name=remark" json:"remark,omitempty"`
	Proposer             *Proposer                      `protobuf:"varint,12,opt,name=proposer,enum=foody_base.Proposer" json:"proposer,omitempty"`
	Creator              *string                        `protobuf:"bytes,13,opt,name=creator" json:"creator,omitempty"`
	AuditCerts           []*Certificate                 `protobuf:"bytes,14,rep,name=audit_certs,json=auditCerts" json:"audit_certs,omitempty"`
	AuditRemark          *string                        `protobuf:"bytes,15,opt,name=audit_remark,json=auditRemark" json:"audit_remark,omitempty"`
	Auditor              *string                        `protobuf:"bytes,16,opt,name=auditor" json:"auditor,omitempty"`
	CancelSource         *CancelSource                  `protobuf:"varint,17,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelReason         *SPXCancelReason               `protobuf:"varint,18,opt,name=cancel_reason,json=cancelReason,enum=foody_base.SPXCancelReason" json:"cancel_reason,omitempty"`
	CreateTime           *uint64                        `protobuf:"varint,19,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	ApproveTime          *uint64                        `protobuf:"varint,20,opt,name=approve_time,json=approveTime" json:"approve_time,omitempty"`
	CancelTime           *uint64                        `protobuf:"varint,21,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	UpdateTime           *uint64                        `protobuf:"varint,22,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ExpressAuditOrder) Reset()         { *m = ExpressAuditOrder{} }
func (m *ExpressAuditOrder) String() string { return proto.CompactTextString(m) }
func (*ExpressAuditOrder) ProtoMessage()    {}
func (*ExpressAuditOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{121}
}
func (m *ExpressAuditOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressAuditOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressAuditOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressAuditOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressAuditOrder.Merge(m, src)
}
func (m *ExpressAuditOrder) XXX_Size() int {
	return m.Size()
}
func (m *ExpressAuditOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressAuditOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressAuditOrder proto.InternalMessageInfo

func (m *ExpressAuditOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ExpressAuditOrder) GetDeliveryId() uint64 {
	if m != nil && m.DeliveryId != nil {
		return *m.DeliveryId
	}
	return 0
}

func (m *ExpressAuditOrder) GetExpressId() uint64 {
	if m != nil && m.ExpressId != nil {
		return *m.ExpressId
	}
	return 0
}

func (m *ExpressAuditOrder) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *ExpressAuditOrder) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *ExpressAuditOrder) GetAuditType() ExpressAuditOrder_AuditType {
	if m != nil && m.AuditType != nil {
		return *m.AuditType
	}
	return ExpressAuditOrder_Canceled
}

func (m *ExpressAuditOrder) GetOrderStatus() ExpressAuditOrder_OrderStatus {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return ExpressAuditOrder_CREATED
}

func (m *ExpressAuditOrder) GetSource() Source {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return Source_SOURCE_UNKOWN
}

func (m *ExpressAuditOrder) GetReason() SPXCancelReason {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return SPXCancelReason_SPX_RESERVED
}

func (m *ExpressAuditOrder) GetCerts() []*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *ExpressAuditOrder) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *ExpressAuditOrder) GetProposer() Proposer {
	if m != nil && m.Proposer != nil {
		return *m.Proposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *ExpressAuditOrder) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *ExpressAuditOrder) GetAuditCerts() []*Certificate {
	if m != nil {
		return m.AuditCerts
	}
	return nil
}

func (m *ExpressAuditOrder) GetAuditRemark() string {
	if m != nil && m.AuditRemark != nil {
		return *m.AuditRemark
	}
	return ""
}

func (m *ExpressAuditOrder) GetAuditor() string {
	if m != nil && m.Auditor != nil {
		return *m.Auditor
	}
	return ""
}

func (m *ExpressAuditOrder) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *ExpressAuditOrder) GetCancelReason() SPXCancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return SPXCancelReason_SPX_RESERVED
}

func (m *ExpressAuditOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ExpressAuditOrder) GetApproveTime() uint64 {
	if m != nil && m.ApproveTime != nil {
		return *m.ApproveTime
	}
	return 0
}

func (m *ExpressAuditOrder) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *ExpressAuditOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type Express struct {
	Content              *ExpressContent           `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Assignments          []*ExpressAssignment      `protobuf:"bytes,2,rep,name=assignments" json:"assignments,omitempty"`
	DeliveryPackages     []*ExpressDeliveryPackage `protobuf:"bytes,3,rep,name=delivery_packages,json=deliveryPackages" json:"delivery_packages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Express) Reset()         { *m = Express{} }
func (m *Express) String() string { return proto.CompactTextString(m) }
func (*Express) ProtoMessage()    {}
func (*Express) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{122}
}
func (m *Express) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Express) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Express.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Express) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Express.Merge(m, src)
}
func (m *Express) XXX_Size() int {
	return m.Size()
}
func (m *Express) XXX_DiscardUnknown() {
	xxx_messageInfo_Express.DiscardUnknown(m)
}

var xxx_messageInfo_Express proto.InternalMessageInfo

func (m *Express) GetContent() *ExpressContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Express) GetAssignments() []*ExpressAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

func (m *Express) GetDeliveryPackages() []*ExpressDeliveryPackage {
	if m != nil {
		return m.DeliveryPackages
	}
	return nil
}

type SPXOrderContent struct {
	Id          *uint64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId      *uint64                      `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ReferenceId *string                      `protobuf:"bytes,3,opt,name=reference_id,json=referenceId" json:"reference_id,omitempty"`
	OrderSource *SPXOrderContent_OrderSource `protobuf:"varint,4,opt,name=order_source,json=orderSource,enum=foody_base.SPXOrderContent_OrderSource" json:"order_source,omitempty"`
	ServiceType *ServiceType                 `protobuf:"varint,5,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	Remark      *string                      `protobuf:"bytes,6,opt,name=remark" json:"remark,omitempty"`
	// 费用明细
	PlatformServiceFee     *uint64        `protobuf:"varint,7,opt,name=platform_service_fee,json=platformServiceFee" json:"platform_service_fee,omitempty"`
	ShippingBaseFee        *uint64        `protobuf:"varint,8,opt,name=shipping_base_fee,json=shippingBaseFee" json:"shipping_base_fee,omitempty"`
	ShippingFee            *uint64        `protobuf:"varint,9,opt,name=shipping_fee,json=shippingFee" json:"shipping_fee,omitempty"`
	InsuranceFee           *uint64        `protobuf:"varint,10,opt,name=insurance_fee,json=insuranceFee" json:"insurance_fee,omitempty"`
	InsuranceAssuredAmount *uint64        `protobuf:"varint,11,opt,name=insurance_assured_amount,json=insuranceAssuredAmount" json:"insurance_assured_amount,omitempty"`
	ShippingVoucherAmount  *uint64        `protobuf:"varint,12,opt,name=shipping_voucher_amount,json=shippingVoucherAmount" json:"shipping_voucher_amount,omitempty"`
	CoinsAmount            *uint64        `protobuf:"varint,13,opt,name=coins_amount,json=coinsAmount" json:"coins_amount,omitempty"`
	PaymentMethod          *PaymentMethod `protobuf:"varint,14,opt,name=payment_method,json=paymentMethod,enum=foody_base.PaymentMethod" json:"payment_method,omitempty"`
	TotalAmount            *uint64        `protobuf:"varint,15,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	// 状态信息
	OrderStatus     *SPXOrderStatus     `protobuf:"varint,16,opt,name=order_status,json=orderStatus,enum=foody_base.SPXOrderStatus" json:"order_status,omitempty"`
	CancelSource    *CancelSource       `protobuf:"varint,17,opt,name=cancel_source,json=cancelSource,enum=foody_base.CancelSource" json:"cancel_source,omitempty"`
	CancelReason    *CancelReason       `protobuf:"varint,18,opt,name=cancel_reason,json=cancelReason,enum=foody_base.CancelReason" json:"cancel_reason,omitempty"`
	CancelProposer  *Proposer           `protobuf:"varint,19,opt,name=cancel_proposer,json=cancelProposer,enum=foody_base.Proposer" json:"cancel_proposer,omitempty"`
	OrderShowStatus *SPXOrderShowStatus `protobuf:"varint,20,opt,name=order_show_status,json=orderShowStatus,enum=foody_base.SPXOrderShowStatus" json:"order_show_status,omitempty"`
	Flag            *uint64             `protobuf:"varint,21,opt,name=flag" json:"flag,omitempty"`
	CancelCerts     []*Certificate      `protobuf:"bytes,22,rep,name=cancel_certs,json=cancelCerts" json:"cancel_certs,omitempty"`
	CancelRemark    *string             `protobuf:"bytes,23,opt,name=cancel_remark,json=cancelRemark" json:"cancel_remark,omitempty"`
	// 时间戳
	PlaceTime            *uint64 `protobuf:"varint,24,opt,name=place_time,json=placeTime" json:"place_time,omitempty"`
	ApproveTime          *uint64 `protobuf:"varint,25,opt,name=approve_time,json=approveTime" json:"approve_time,omitempty"`
	PaymentTime          *uint64 `protobuf:"varint,26,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	OnDeliveringTime     *uint64 `protobuf:"varint,27,opt,name=on_delivering_time,json=onDeliveringTime" json:"on_delivering_time,omitempty"`
	CompleteTime         *uint64 `protobuf:"varint,28,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	DeliveryCompleteTime *uint64 `protobuf:"varint,29,opt,name=delivery_complete_time,json=deliveryCompleteTime" json:"delivery_complete_time,omitempty"`
	DeliveryReturnTime   *uint64 `protobuf:"varint,30,opt,name=delivery_return_time,json=deliveryReturnTime" json:"delivery_return_time,omitempty"`
	CancelTime           *uint64 `protobuf:"varint,31,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	RatingCompletedTime  *uint64 `protobuf:"varint,32,opt,name=rating_completed_time,json=ratingCompletedTime" json:"rating_completed_time,omitempty"`
	CreateTime           *uint64 `protobuf:"varint,33,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64 `protobuf:"varint,34,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// eta
	EstimatePickupTime   *uint64 `protobuf:"varint,35,opt,name=estimate_pickup_time,json=estimatePickupTime" json:"estimate_pickup_time,omitempty"`
	EstimateDeliveryTime *uint64 `protobuf:"varint,36,opt,name=estimate_delivery_time,json=estimateDeliveryTime" json:"estimate_delivery_time,omitempty"`
	// shipping fee 3.0
	ShippingFareExtraFee       *uint64 `protobuf:"varint,37,opt,name=shipping_fare_extra_fee,json=shippingFareExtraFee" json:"shipping_fare_extra_fee,omitempty"`
	ShippingFareDiscountAmount *uint64 `protobuf:"varint,38,opt,name=shipping_fare_discount_amount,json=shippingFareDiscountAmount" json:"shipping_fare_discount_amount,omitempty"`
	// schedule order
	IsScheduleOrder      *bool    `protobuf:"varint,39,opt,name=is_schedule_order,json=isScheduleOrder" json:"is_schedule_order,omitempty"`
	SchedulePickupTime   *uint64  `protobuf:"varint,40,opt,name=schedule_pickup_time,json=schedulePickupTime" json:"schedule_pickup_time,omitempty"`
	StartAssignmentTime  *uint64  `protobuf:"varint,41,opt,name=start_assignment_time,json=startAssignmentTime" json:"start_assignment_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPXOrderContent) Reset()         { *m = SPXOrderContent{} }
func (m *SPXOrderContent) String() string { return proto.CompactTextString(m) }
func (*SPXOrderContent) ProtoMessage()    {}
func (*SPXOrderContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{123}
}
func (m *SPXOrderContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXOrderContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXOrderContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXOrderContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXOrderContent.Merge(m, src)
}
func (m *SPXOrderContent) XXX_Size() int {
	return m.Size()
}
func (m *SPXOrderContent) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXOrderContent.DiscardUnknown(m)
}

var xxx_messageInfo_SPXOrderContent proto.InternalMessageInfo

func (m *SPXOrderContent) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXOrderContent) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXOrderContent) GetReferenceId() string {
	if m != nil && m.ReferenceId != nil {
		return *m.ReferenceId
	}
	return ""
}

func (m *SPXOrderContent) GetOrderSource() SPXOrderContent_OrderSource {
	if m != nil && m.OrderSource != nil {
		return *m.OrderSource
	}
	return SPXOrderContent_SOURCE_SPX_INSTANT_SHOPEE
}

func (m *SPXOrderContent) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXOrderContent) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *SPXOrderContent) GetPlatformServiceFee() uint64 {
	if m != nil && m.PlatformServiceFee != nil {
		return *m.PlatformServiceFee
	}
	return 0
}

func (m *SPXOrderContent) GetShippingBaseFee() uint64 {
	if m != nil && m.ShippingBaseFee != nil {
		return *m.ShippingBaseFee
	}
	return 0
}

func (m *SPXOrderContent) GetShippingFee() uint64 {
	if m != nil && m.ShippingFee != nil {
		return *m.ShippingFee
	}
	return 0
}

func (m *SPXOrderContent) GetInsuranceFee() uint64 {
	if m != nil && m.InsuranceFee != nil {
		return *m.InsuranceFee
	}
	return 0
}

func (m *SPXOrderContent) GetInsuranceAssuredAmount() uint64 {
	if m != nil && m.InsuranceAssuredAmount != nil {
		return *m.InsuranceAssuredAmount
	}
	return 0
}

func (m *SPXOrderContent) GetShippingVoucherAmount() uint64 {
	if m != nil && m.ShippingVoucherAmount != nil {
		return *m.ShippingVoucherAmount
	}
	return 0
}

func (m *SPXOrderContent) GetCoinsAmount() uint64 {
	if m != nil && m.CoinsAmount != nil {
		return *m.CoinsAmount
	}
	return 0
}

func (m *SPXOrderContent) GetPaymentMethod() PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *SPXOrderContent) GetTotalAmount() uint64 {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return 0
}

func (m *SPXOrderContent) GetOrderStatus() SPXOrderStatus {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return SPXOrderStatus_SPX_ORDER_CREATED
}

func (m *SPXOrderContent) GetCancelSource() CancelSource {
	if m != nil && m.CancelSource != nil {
		return *m.CancelSource
	}
	return CancelSource_CANCEL_DEFAULT
}

func (m *SPXOrderContent) GetCancelReason() CancelReason {
	if m != nil && m.CancelReason != nil {
		return *m.CancelReason
	}
	return CancelReason_RESERVED
}

func (m *SPXOrderContent) GetCancelProposer() Proposer {
	if m != nil && m.CancelProposer != nil {
		return *m.CancelProposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *SPXOrderContent) GetOrderShowStatus() SPXOrderShowStatus {
	if m != nil && m.OrderShowStatus != nil {
		return *m.OrderShowStatus
	}
	return SPXOrderShowStatus_SPX_ORDER_SHOW_CREATED
}

func (m *SPXOrderContent) GetFlag() uint64 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *SPXOrderContent) GetCancelCerts() []*Certificate {
	if m != nil {
		return m.CancelCerts
	}
	return nil
}

func (m *SPXOrderContent) GetCancelRemark() string {
	if m != nil && m.CancelRemark != nil {
		return *m.CancelRemark
	}
	return ""
}

func (m *SPXOrderContent) GetPlaceTime() uint64 {
	if m != nil && m.PlaceTime != nil {
		return *m.PlaceTime
	}
	return 0
}

func (m *SPXOrderContent) GetApproveTime() uint64 {
	if m != nil && m.ApproveTime != nil {
		return *m.ApproveTime
	}
	return 0
}

func (m *SPXOrderContent) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *SPXOrderContent) GetOnDeliveringTime() uint64 {
	if m != nil && m.OnDeliveringTime != nil {
		return *m.OnDeliveringTime
	}
	return 0
}

func (m *SPXOrderContent) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *SPXOrderContent) GetDeliveryCompleteTime() uint64 {
	if m != nil && m.DeliveryCompleteTime != nil {
		return *m.DeliveryCompleteTime
	}
	return 0
}

func (m *SPXOrderContent) GetDeliveryReturnTime() uint64 {
	if m != nil && m.DeliveryReturnTime != nil {
		return *m.DeliveryReturnTime
	}
	return 0
}

func (m *SPXOrderContent) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *SPXOrderContent) GetRatingCompletedTime() uint64 {
	if m != nil && m.RatingCompletedTime != nil {
		return *m.RatingCompletedTime
	}
	return 0
}

func (m *SPXOrderContent) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXOrderContent) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SPXOrderContent) GetEstimatePickupTime() uint64 {
	if m != nil && m.EstimatePickupTime != nil {
		return *m.EstimatePickupTime
	}
	return 0
}

func (m *SPXOrderContent) GetEstimateDeliveryTime() uint64 {
	if m != nil && m.EstimateDeliveryTime != nil {
		return *m.EstimateDeliveryTime
	}
	return 0
}

func (m *SPXOrderContent) GetShippingFareExtraFee() uint64 {
	if m != nil && m.ShippingFareExtraFee != nil {
		return *m.ShippingFareExtraFee
	}
	return 0
}

func (m *SPXOrderContent) GetShippingFareDiscountAmount() uint64 {
	if m != nil && m.ShippingFareDiscountAmount != nil {
		return *m.ShippingFareDiscountAmount
	}
	return 0
}

func (m *SPXOrderContent) GetIsScheduleOrder() bool {
	if m != nil && m.IsScheduleOrder != nil {
		return *m.IsScheduleOrder
	}
	return false
}

func (m *SPXOrderContent) GetSchedulePickupTime() uint64 {
	if m != nil && m.SchedulePickupTime != nil {
		return *m.SchedulePickupTime
	}
	return 0
}

func (m *SPXOrderContent) GetStartAssignmentTime() uint64 {
	if m != nil && m.StartAssignmentTime != nil {
		return *m.StartAssignmentTime
	}
	return 0
}

type PackageInfo struct {
	Id          *uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId     *uint64          `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ServiceType *ServiceType     `protobuf:"varint,3,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	Category    *PackageCategory `protobuf:"varint,4,opt,name=category,enum=foody_base.PackageCategory" json:"category,omitempty"`
	// 配送信息
	DeliveryDistance *uint64 `protobuf:"varint,5,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	// 费用明细
	InsuranceFee           *uint64          `protobuf:"varint,6,opt,name=insurance_fee,json=insuranceFee" json:"insurance_fee,omitempty"`
	InsuranceAssuredAmount *uint64          `protobuf:"varint,7,opt,name=insurance_assured_amount,json=insuranceAssuredAmount" json:"insurance_assured_amount,omitempty"`
	PickupAddress          *DeliveryAddress `protobuf:"bytes,8,opt,name=pickup_address,json=pickupAddress" json:"pickup_address,omitempty"`
	DeliveryAddress        *DeliveryAddress `protobuf:"bytes,9,opt,name=delivery_address,json=deliveryAddress" json:"delivery_address,omitempty"`
	Weight                 *uint32          `protobuf:"varint,10,opt,name=weight" json:"weight,omitempty"`
	Length                 *uint32          `protobuf:"varint,11,opt,name=length" json:"length,omitempty"`
	Width                  *uint32          `protobuf:"varint,12,opt,name=width" json:"width,omitempty"`
	Height                 *uint32          `protobuf:"varint,13,opt,name=height" json:"height,omitempty"`
	Remark                 *string          `protobuf:"bytes,14,opt,name=remark" json:"remark,omitempty"`
	CreateTime             *uint64          `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime             *uint64          `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	CategoryName           *string          `protobuf:"bytes,18,opt,name=category_name,json=categoryName" json:"category_name,omitempty"`
	InsuranceName          *string          `protobuf:"bytes,19,opt,name=insurance_name,json=insuranceName" json:"insurance_name,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *PackageInfo) Reset()         { *m = PackageInfo{} }
func (m *PackageInfo) String() string { return proto.CompactTextString(m) }
func (*PackageInfo) ProtoMessage()    {}
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{124}
}
func (m *PackageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageInfo.Merge(m, src)
}
func (m *PackageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PackageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackageInfo proto.InternalMessageInfo

func (m *PackageInfo) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PackageInfo) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *PackageInfo) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *PackageInfo) GetCategory() PackageCategory {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return PackageCategory_EXPRESS_PACKAGE_FILE
}

func (m *PackageInfo) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *PackageInfo) GetInsuranceFee() uint64 {
	if m != nil && m.InsuranceFee != nil {
		return *m.InsuranceFee
	}
	return 0
}

func (m *PackageInfo) GetInsuranceAssuredAmount() uint64 {
	if m != nil && m.InsuranceAssuredAmount != nil {
		return *m.InsuranceAssuredAmount
	}
	return 0
}

func (m *PackageInfo) GetPickupAddress() *DeliveryAddress {
	if m != nil {
		return m.PickupAddress
	}
	return nil
}

func (m *PackageInfo) GetDeliveryAddress() *DeliveryAddress {
	if m != nil {
		return m.DeliveryAddress
	}
	return nil
}

func (m *PackageInfo) GetWeight() uint32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *PackageInfo) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *PackageInfo) GetWidth() uint32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *PackageInfo) GetHeight() uint32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *PackageInfo) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *PackageInfo) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *PackageInfo) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *PackageInfo) GetCategoryName() string {
	if m != nil && m.CategoryName != nil {
		return *m.CategoryName
	}
	return ""
}

func (m *PackageInfo) GetInsuranceName() string {
	if m != nil && m.InsuranceName != nil {
		return *m.InsuranceName
	}
	return ""
}

type SPXOrder struct {
	Content              *SPXOrderContent `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Packages             []*PackageInfo   `protobuf:"bytes,2,rep,name=packages" json:"packages,omitempty"`
	Flag                 *SPXOrder_Flag   `protobuf:"bytes,3,opt,name=flag" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SPXOrder) Reset()         { *m = SPXOrder{} }
func (m *SPXOrder) String() string { return proto.CompactTextString(m) }
func (*SPXOrder) ProtoMessage()    {}
func (*SPXOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{125}
}
func (m *SPXOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXOrder.Merge(m, src)
}
func (m *SPXOrder) XXX_Size() int {
	return m.Size()
}
func (m *SPXOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SPXOrder proto.InternalMessageInfo

func (m *SPXOrder) GetContent() *SPXOrderContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SPXOrder) GetPackages() []*PackageInfo {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *SPXOrder) GetFlag() *SPXOrder_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

type SPXOrder_Flag struct {
	IsReturned           *uint32  `protobuf:"varint,1,opt,name=is_returned,json=isReturned" json:"is_returned,omitempty"`
	IsRefunded           *uint32  `protobuf:"varint,2,opt,name=is_refunded,json=isRefunded" json:"is_refunded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPXOrder_Flag) Reset()         { *m = SPXOrder_Flag{} }
func (m *SPXOrder_Flag) String() string { return proto.CompactTextString(m) }
func (*SPXOrder_Flag) ProtoMessage()    {}
func (*SPXOrder_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{125, 0}
}
func (m *SPXOrder_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXOrder_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXOrder_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXOrder_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXOrder_Flag.Merge(m, src)
}
func (m *SPXOrder_Flag) XXX_Size() int {
	return m.Size()
}
func (m *SPXOrder_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXOrder_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_SPXOrder_Flag proto.InternalMessageInfo

func (m *SPXOrder_Flag) GetIsReturned() uint32 {
	if m != nil && m.IsReturned != nil {
		return *m.IsReturned
	}
	return 0
}

func (m *SPXOrder_Flag) GetIsRefunded() uint32 {
	if m != nil && m.IsRefunded != nil {
		return *m.IsRefunded
	}
	return 0
}

type SPXPayment struct {
	Id          *uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId      *uint64      `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	OrderId     *uint64      `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ServiceType *ServiceType `protobuf:"varint,4,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	// 支付信息
	TransactionRef       *uint64          `protobuf:"varint,5,opt,name=transaction_ref,json=transactionRef" json:"transaction_ref,omitempty"`
	PaymentLink          *string          `protobuf:"bytes,6,opt,name=payment_link,json=paymentLink" json:"payment_link,omitempty"`
	PaymentMethod        *PaymentMethod   `protobuf:"varint,7,opt,name=payment_method,json=paymentMethod,enum=foody_base.PaymentMethod" json:"payment_method,omitempty"`
	PaymentChannelId     *uint64          `protobuf:"varint,8,opt,name=payment_channel_id,json=paymentChannelId" json:"payment_channel_id,omitempty"`
	PaymentChannelOption *string          `protobuf:"bytes,9,opt,name=payment_channel_option,json=paymentChannelOption" json:"payment_channel_option,omitempty"`
	TotalAmount          *uint64          `protobuf:"varint,10,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	Currency             *string          `protobuf:"bytes,11,opt,name=currency" json:"currency,omitempty"`
	Region               *string          `protobuf:"bytes,12,opt,name=region" json:"region,omitempty"`
	PaymentStatus        *PaymentStatus   `protobuf:"varint,13,opt,name=payment_status,json=paymentStatus,enum=foody_base.PaymentStatus" json:"payment_status,omitempty"`
	PaymentType          *SPXPayment_Type `protobuf:"varint,14,opt,name=payment_type,json=paymentType,enum=foody_base.SPXPayment_Type" json:"payment_type,omitempty"`
	InitiationTime       *uint64          `protobuf:"varint,15,opt,name=initiation_time,json=initiationTime" json:"initiation_time,omitempty"`
	PaymentTime          *uint64          `protobuf:"varint,16,opt,name=payment_time,json=paymentTime" json:"payment_time,omitempty"`
	CreateTime           *uint64          `protobuf:"varint,17,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64          `protobuf:"varint,18,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SPXPayment) Reset()         { *m = SPXPayment{} }
func (m *SPXPayment) String() string { return proto.CompactTextString(m) }
func (*SPXPayment) ProtoMessage()    {}
func (*SPXPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{126}
}
func (m *SPXPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXPayment.Merge(m, src)
}
func (m *SPXPayment) XXX_Size() int {
	return m.Size()
}
func (m *SPXPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXPayment.DiscardUnknown(m)
}

var xxx_messageInfo_SPXPayment proto.InternalMessageInfo

func (m *SPXPayment) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXPayment) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXPayment) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SPXPayment) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXPayment) GetTransactionRef() uint64 {
	if m != nil && m.TransactionRef != nil {
		return *m.TransactionRef
	}
	return 0
}

func (m *SPXPayment) GetPaymentLink() string {
	if m != nil && m.PaymentLink != nil {
		return *m.PaymentLink
	}
	return ""
}

func (m *SPXPayment) GetPaymentMethod() PaymentMethod {
	if m != nil && m.PaymentMethod != nil {
		return *m.PaymentMethod
	}
	return PaymentMethod_PAY_UNKNOWN
}

func (m *SPXPayment) GetPaymentChannelId() uint64 {
	if m != nil && m.PaymentChannelId != nil {
		return *m.PaymentChannelId
	}
	return 0
}

func (m *SPXPayment) GetPaymentChannelOption() string {
	if m != nil && m.PaymentChannelOption != nil {
		return *m.PaymentChannelOption
	}
	return ""
}

func (m *SPXPayment) GetTotalAmount() uint64 {
	if m != nil && m.TotalAmount != nil {
		return *m.TotalAmount
	}
	return 0
}

func (m *SPXPayment) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *SPXPayment) GetRegion() string {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return ""
}

func (m *SPXPayment) GetPaymentStatus() PaymentStatus {
	if m != nil && m.PaymentStatus != nil {
		return *m.PaymentStatus
	}
	return PaymentStatus_PAYMENT_CREATED
}

func (m *SPXPayment) GetPaymentType() SPXPayment_Type {
	if m != nil && m.PaymentType != nil {
		return *m.PaymentType
	}
	return SPXPayment_PLACE_ORDER
}

func (m *SPXPayment) GetInitiationTime() uint64 {
	if m != nil && m.InitiationTime != nil {
		return *m.InitiationTime
	}
	return 0
}

func (m *SPXPayment) GetPaymentTime() uint64 {
	if m != nil && m.PaymentTime != nil {
		return *m.PaymentTime
	}
	return 0
}

func (m *SPXPayment) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXPayment) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type SPXReturnOrder struct {
	Id                    *uint64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId               *uint64                      `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ServiceType           *ServiceType                 `protobuf:"varint,3,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	ReturnType            *SPXReturnOrder_ReturnType   `protobuf:"varint,4,opt,name=return_type,json=returnType,enum=foody_base.SPXReturnOrder_ReturnType" json:"return_type,omitempty"`
	UserId                *uint64                      `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Responsibility        *Responsibility              `protobuf:"varint,6,opt,name=responsibility,enum=foody_base.Responsibility" json:"responsibility,omitempty"`
	RefundType            *SPXReturnOrder_RefundType   `protobuf:"varint,7,opt,name=refund_type,json=refundType,enum=foody_base.SPXReturnOrder_RefundType" json:"refund_type,omitempty"`
	RefundAmount          *uint64                      `protobuf:"varint,10,opt,name=refund_amount,json=refundAmount" json:"refund_amount,omitempty"`
	StoreChargebackAmount *uint64                      `protobuf:"varint,13,opt,name=store_chargeback_amount,json=storeChargebackAmount" json:"store_chargeback_amount,omitempty"`
	ReturnStatus          *SPXReturnOrder_ReturnStatus `protobuf:"varint,11,opt,name=return_status,json=returnStatus,enum=foody_base.SPXReturnOrder_ReturnStatus" json:"return_status,omitempty"`
	ReturnReason          *SPXReturnOrder_ReturnReason `protobuf:"varint,12,opt,name=return_reason,json=returnReason,enum=foody_base.SPXReturnOrder_ReturnReason" json:"return_reason,omitempty"`
	ReturnRemark          *string                      `protobuf:"bytes,15,opt,name=return_remark,json=returnRemark" json:"return_remark,omitempty"`
	Proposer              *Proposer                    `protobuf:"varint,14,opt,name=proposer,enum=foody_base.Proposer" json:"proposer,omitempty"`
	Creator               *string                      `protobuf:"bytes,16,opt,name=creator" json:"creator,omitempty"`
	OfflineRefundMethod   *SPXRefund_RefundMethod      `protobuf:"varint,17,opt,name=offline_refund_method,json=offlineRefundMethod,enum=foody_base.SPXRefund_RefundMethod" json:"offline_refund_method,omitempty"`
	StoreChargebackType   *StoreChargeBackType         `protobuf:"varint,18,opt,name=store_chargeback_type,json=storeChargebackType,enum=foody_base.StoreChargeBackType" json:"store_chargeback_type,omitempty"`
	StoreChargebackMethod *StoreChargebackMethod       `protobuf:"varint,19,opt,name=store_chargeback_method,json=storeChargebackMethod,enum=foody_base.StoreChargebackMethod" json:"store_chargeback_method,omitempty"`
	ApproveTime           *uint64                      `protobuf:"varint,20,opt,name=approve_time,json=approveTime" json:"approve_time,omitempty"`
	CompleteTime          *uint64                      `protobuf:"varint,21,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CreateTime            *uint64                      `protobuf:"varint,22,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime            *uint64                      `protobuf:"varint,23,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *SPXReturnOrder) Reset()         { *m = SPXReturnOrder{} }
func (m *SPXReturnOrder) String() string { return proto.CompactTextString(m) }
func (*SPXReturnOrder) ProtoMessage()    {}
func (*SPXReturnOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{127}
}
func (m *SPXReturnOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXReturnOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXReturnOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXReturnOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXReturnOrder.Merge(m, src)
}
func (m *SPXReturnOrder) XXX_Size() int {
	return m.Size()
}
func (m *SPXReturnOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXReturnOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SPXReturnOrder proto.InternalMessageInfo

func (m *SPXReturnOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXReturnOrder) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SPXReturnOrder) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXReturnOrder) GetReturnType() SPXReturnOrder_ReturnType {
	if m != nil && m.ReturnType != nil {
		return *m.ReturnType
	}
	return SPXReturnOrder_RETURN_TYPE_ORDER_CANCELLED
}

func (m *SPXReturnOrder) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXReturnOrder) GetResponsibility() Responsibility {
	if m != nil && m.Responsibility != nil {
		return *m.Responsibility
	}
	return Responsibility_UNKNOWN
}

func (m *SPXReturnOrder) GetRefundType() SPXReturnOrder_RefundType {
	if m != nil && m.RefundType != nil {
		return *m.RefundType
	}
	return SPXReturnOrder_REFUND_NONE
}

func (m *SPXReturnOrder) GetRefundAmount() uint64 {
	if m != nil && m.RefundAmount != nil {
		return *m.RefundAmount
	}
	return 0
}

func (m *SPXReturnOrder) GetStoreChargebackAmount() uint64 {
	if m != nil && m.StoreChargebackAmount != nil {
		return *m.StoreChargebackAmount
	}
	return 0
}

func (m *SPXReturnOrder) GetReturnStatus() SPXReturnOrder_ReturnStatus {
	if m != nil && m.ReturnStatus != nil {
		return *m.ReturnStatus
	}
	return SPXReturnOrder_RETURN_CREATED
}

func (m *SPXReturnOrder) GetReturnReason() SPXReturnOrder_ReturnReason {
	if m != nil && m.ReturnReason != nil {
		return *m.ReturnReason
	}
	return SPXReturnOrder_EXPRESS_OTHERS
}

func (m *SPXReturnOrder) GetReturnRemark() string {
	if m != nil && m.ReturnRemark != nil {
		return *m.ReturnRemark
	}
	return ""
}

func (m *SPXReturnOrder) GetProposer() Proposer {
	if m != nil && m.Proposer != nil {
		return *m.Proposer
	}
	return Proposer_PROPOSER_UNKNOWN
}

func (m *SPXReturnOrder) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *SPXReturnOrder) GetOfflineRefundMethod() SPXRefund_RefundMethod {
	if m != nil && m.OfflineRefundMethod != nil {
		return *m.OfflineRefundMethod
	}
	return SPXRefund_REFUND_METHOD_DEFAULT
}

func (m *SPXReturnOrder) GetStoreChargebackType() StoreChargeBackType {
	if m != nil && m.StoreChargebackType != nil {
		return *m.StoreChargebackType
	}
	return StoreChargeBackType_CHARGEBACK_TYPE_NONE
}

func (m *SPXReturnOrder) GetStoreChargebackMethod() StoreChargebackMethod {
	if m != nil && m.StoreChargebackMethod != nil {
		return *m.StoreChargebackMethod
	}
	return StoreChargebackMethod_CHARGEBACK_METHOD_DEFAULT
}

func (m *SPXReturnOrder) GetApproveTime() uint64 {
	if m != nil && m.ApproveTime != nil {
		return *m.ApproveTime
	}
	return 0
}

func (m *SPXReturnOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *SPXReturnOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXReturnOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type SPXRefund struct {
	Id                          *uint64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ReturnId                    *uint64                 `protobuf:"varint,2,opt,name=return_id,json=returnId" json:"return_id,omitempty"`
	OrderId                     *uint64                 `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	CheckoutId                  *uint64                 `protobuf:"varint,4,opt,name=checkout_id,json=checkoutId" json:"checkout_id,omitempty"`
	UserId                      *uint64                 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServiceType                 *ServiceType            `protobuf:"varint,6,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	RefundMethod                *SPXRefund_RefundMethod `protobuf:"varint,7,opt,name=refund_method,json=refundMethod,enum=foody_base.SPXRefund_RefundMethod" json:"refund_method,omitempty"`
	PaymentTransactionRef       *uint64                 `protobuf:"varint,8,opt,name=payment_transaction_ref,json=paymentTransactionRef" json:"payment_transaction_ref,omitempty"`
	RefundTransactionRef        *uint64                 `protobuf:"varint,9,opt,name=refund_transaction_ref,json=refundTransactionRef" json:"refund_transaction_ref,omitempty"`
	OfflineRefundTransactionRef *string                 `protobuf:"bytes,10,opt,name=offline_refund_transaction_ref,json=offlineRefundTransactionRef" json:"offline_refund_transaction_ref,omitempty"`
	RefundAmount                *uint64                 `protobuf:"varint,11,opt,name=refund_amount,json=refundAmount" json:"refund_amount,omitempty"`
	RefundStatus                *RefundStatus           `protobuf:"varint,12,opt,name=refund_status,json=refundStatus,enum=foody_base.RefundStatus" json:"refund_status,omitempty"`
	RefundMode                  *SPXRefund_RefundMode   `protobuf:"varint,13,opt,name=refund_mode,json=refundMode,enum=foody_base.SPXRefund_RefundMode" json:"refund_mode,omitempty"`
	Operator                    *string                 `protobuf:"bytes,14,opt,name=operator" json:"operator,omitempty"`
	RefundTime                  *uint64                 `protobuf:"varint,15,opt,name=refund_time,json=refundTime" json:"refund_time,omitempty"`
	CreateTime                  *uint64                 `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime                  *uint64                 `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	RefundCoins                 *uint64                 `protobuf:"varint,18,opt,name=refund_coins,json=refundCoins" json:"refund_coins,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                `json:"-"`
	XXX_unrecognized            []byte                  `json:"-"`
	XXX_sizecache               int32                   `json:"-"`
}

func (m *SPXRefund) Reset()         { *m = SPXRefund{} }
func (m *SPXRefund) String() string { return proto.CompactTextString(m) }
func (*SPXRefund) ProtoMessage()    {}
func (*SPXRefund) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{128}
}
func (m *SPXRefund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXRefund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXRefund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXRefund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXRefund.Merge(m, src)
}
func (m *SPXRefund) XXX_Size() int {
	return m.Size()
}
func (m *SPXRefund) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXRefund.DiscardUnknown(m)
}

var xxx_messageInfo_SPXRefund proto.InternalMessageInfo

func (m *SPXRefund) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXRefund) GetReturnId() uint64 {
	if m != nil && m.ReturnId != nil {
		return *m.ReturnId
	}
	return 0
}

func (m *SPXRefund) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SPXRefund) GetCheckoutId() uint64 {
	if m != nil && m.CheckoutId != nil {
		return *m.CheckoutId
	}
	return 0
}

func (m *SPXRefund) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXRefund) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXRefund) GetRefundMethod() SPXRefund_RefundMethod {
	if m != nil && m.RefundMethod != nil {
		return *m.RefundMethod
	}
	return SPXRefund_REFUND_METHOD_DEFAULT
}

func (m *SPXRefund) GetPaymentTransactionRef() uint64 {
	if m != nil && m.PaymentTransactionRef != nil {
		return *m.PaymentTransactionRef
	}
	return 0
}

func (m *SPXRefund) GetRefundTransactionRef() uint64 {
	if m != nil && m.RefundTransactionRef != nil {
		return *m.RefundTransactionRef
	}
	return 0
}

func (m *SPXRefund) GetOfflineRefundTransactionRef() string {
	if m != nil && m.OfflineRefundTransactionRef != nil {
		return *m.OfflineRefundTransactionRef
	}
	return ""
}

func (m *SPXRefund) GetRefundAmount() uint64 {
	if m != nil && m.RefundAmount != nil {
		return *m.RefundAmount
	}
	return 0
}

func (m *SPXRefund) GetRefundStatus() RefundStatus {
	if m != nil && m.RefundStatus != nil {
		return *m.RefundStatus
	}
	return RefundStatus_REFUND_CREATED
}

func (m *SPXRefund) GetRefundMode() SPXRefund_RefundMode {
	if m != nil && m.RefundMode != nil {
		return *m.RefundMode
	}
	return SPXRefund_REFUND_MODE_AUTO
}

func (m *SPXRefund) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *SPXRefund) GetRefundTime() uint64 {
	if m != nil && m.RefundTime != nil {
		return *m.RefundTime
	}
	return 0
}

func (m *SPXRefund) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXRefund) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SPXRefund) GetRefundCoins() uint64 {
	if m != nil && m.RefundCoins != nil {
		return *m.RefundCoins
	}
	return 0
}

type SPXVoucherRecord struct {
	Id                   *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VoucherId            *uint64                        `protobuf:"varint,2,opt,name=voucher_id,json=voucherId" json:"voucher_id,omitempty"`
	VoucherCode          *string                        `protobuf:"bytes,3,opt,name=voucher_code,json=voucherCode" json:"voucher_code,omitempty"`
	TransactionId        *string                        `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	OrderId              *uint64                        `protobuf:"varint,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	UserId               *uint64                        `protobuf:"varint,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	VoucherData          *string                        `protobuf:"bytes,7,opt,name=voucher_data,json=voucherData" json:"voucher_data,omitempty"`
	UseStatus            *UseStatus                     `protobuf:"varint,8,opt,name=use_status,json=useStatus,enum=foody_base.UseStatus" json:"use_status,omitempty"`
	ReturnStatus         *SPXVoucherRecord_ReturnStatus `protobuf:"varint,9,opt,name=return_status,json=returnStatus,enum=foody_base.SPXVoucherRecord_ReturnStatus" json:"return_status,omitempty"`
	ServiceType          *ServiceType                   `protobuf:"varint,10,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	CompleteTime         *uint64                        `protobuf:"varint,11,opt,name=CompleteTime" json:"CompleteTime,omitempty"`
	ReturnTime           *uint64                        `protobuf:"varint,12,opt,name=ReturnTime" json:"ReturnTime,omitempty"`
	CancelTime           *uint64                        `protobuf:"varint,13,opt,name=CancelTime" json:"CancelTime,omitempty"`
	CreateTime           *uint64                        `protobuf:"varint,14,opt,name=CreateTime" json:"CreateTime,omitempty"`
	UpdateTime           *uint64                        `protobuf:"varint,15,opt,name=UpdateTime" json:"UpdateTime,omitempty"`
	AntiFraud            *string                        `protobuf:"bytes,16,opt,name=anti_fraud,json=antiFraud" json:"anti_fraud,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SPXVoucherRecord) Reset()         { *m = SPXVoucherRecord{} }
func (m *SPXVoucherRecord) String() string { return proto.CompactTextString(m) }
func (*SPXVoucherRecord) ProtoMessage()    {}
func (*SPXVoucherRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{129}
}
func (m *SPXVoucherRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXVoucherRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXVoucherRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXVoucherRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXVoucherRecord.Merge(m, src)
}
func (m *SPXVoucherRecord) XXX_Size() int {
	return m.Size()
}
func (m *SPXVoucherRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXVoucherRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SPXVoucherRecord proto.InternalMessageInfo

func (m *SPXVoucherRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXVoucherRecord) GetVoucherId() uint64 {
	if m != nil && m.VoucherId != nil {
		return *m.VoucherId
	}
	return 0
}

func (m *SPXVoucherRecord) GetVoucherCode() string {
	if m != nil && m.VoucherCode != nil {
		return *m.VoucherCode
	}
	return ""
}

func (m *SPXVoucherRecord) GetTransactionId() string {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return ""
}

func (m *SPXVoucherRecord) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SPXVoucherRecord) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXVoucherRecord) GetVoucherData() string {
	if m != nil && m.VoucherData != nil {
		return *m.VoucherData
	}
	return ""
}

func (m *SPXVoucherRecord) GetUseStatus() UseStatus {
	if m != nil && m.UseStatus != nil {
		return *m.UseStatus
	}
	return UseStatus_UNINITIALIZED
}

func (m *SPXVoucherRecord) GetReturnStatus() SPXVoucherRecord_ReturnStatus {
	if m != nil && m.ReturnStatus != nil {
		return *m.ReturnStatus
	}
	return SPXVoucherRecord_RETURN_STATUS_UNINITIALIZED
}

func (m *SPXVoucherRecord) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXVoucherRecord) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *SPXVoucherRecord) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *SPXVoucherRecord) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *SPXVoucherRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXVoucherRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SPXVoucherRecord) GetAntiFraud() string {
	if m != nil && m.AntiFraud != nil {
		return *m.AntiFraud
	}
	return ""
}

type SPXCoinRecord struct {
	Id            *uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId       *uint64      `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	UserId        *uint64      `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	TransactionId *string      `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	ServiceType   *ServiceType `protobuf:"varint,5,opt,name=service_type,json=serviceType,enum=foody_base.ServiceType" json:"service_type,omitempty"`
	// spend coin
	SpendAmount *int64     `protobuf:"varint,6,opt,name=spend_amount,json=spendAmount" json:"spend_amount,omitempty"`
	SpendStatus *UseStatus `protobuf:"varint,7,opt,name=spend_status,json=spendStatus,enum=foody_base.UseStatus" json:"spend_status,omitempty"`
	SpendTime   *uint64    `protobuf:"varint,8,opt,name=spend_time,json=spendTime" json:"spend_time,omitempty"`
	//earn coin
	EarnTotal            *int64                      `protobuf:"varint,9,opt,name=earn_total,json=earnTotal" json:"earn_total,omitempty"`
	EarnOrderAmount      *int64                      `protobuf:"varint,10,opt,name=earn_order_amount,json=earnOrderAmount" json:"earn_order_amount,omitempty"`
	EarnVoucherAmount    *int64                      `protobuf:"varint,11,opt,name=earn_voucher_amount,json=earnVoucherAmount" json:"earn_voucher_amount,omitempty"`
	EarnStatus           *UseStatus                  `protobuf:"varint,12,opt,name=earn_status,json=earnStatus,enum=foody_base.UseStatus" json:"earn_status,omitempty"`
	EarnTime             *uint64                     `protobuf:"varint,13,opt,name=earn_time,json=earnTime" json:"earn_time,omitempty"`
	ReturnStatus         *SPXCoinRecord_ReturnStatus `protobuf:"varint,14,opt,name=return_status,json=returnStatus,enum=foody_base.SPXCoinRecord_ReturnStatus" json:"return_status,omitempty"`
	ReturnTime           *uint64                     `protobuf:"varint,15,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CreateTime           *uint64                     `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                     `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SPXCoinRecord) Reset()         { *m = SPXCoinRecord{} }
func (m *SPXCoinRecord) String() string { return proto.CompactTextString(m) }
func (*SPXCoinRecord) ProtoMessage()    {}
func (*SPXCoinRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{130}
}
func (m *SPXCoinRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPXCoinRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPXCoinRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPXCoinRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPXCoinRecord.Merge(m, src)
}
func (m *SPXCoinRecord) XXX_Size() int {
	return m.Size()
}
func (m *SPXCoinRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SPXCoinRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SPXCoinRecord proto.InternalMessageInfo

func (m *SPXCoinRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SPXCoinRecord) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *SPXCoinRecord) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *SPXCoinRecord) GetTransactionId() string {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return ""
}

func (m *SPXCoinRecord) GetServiceType() ServiceType {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return ServiceType_TYPE_UNKNOWN
}

func (m *SPXCoinRecord) GetSpendAmount() int64 {
	if m != nil && m.SpendAmount != nil {
		return *m.SpendAmount
	}
	return 0
}

func (m *SPXCoinRecord) GetSpendStatus() UseStatus {
	if m != nil && m.SpendStatus != nil {
		return *m.SpendStatus
	}
	return UseStatus_UNINITIALIZED
}

func (m *SPXCoinRecord) GetSpendTime() uint64 {
	if m != nil && m.SpendTime != nil {
		return *m.SpendTime
	}
	return 0
}

func (m *SPXCoinRecord) GetEarnTotal() int64 {
	if m != nil && m.EarnTotal != nil {
		return *m.EarnTotal
	}
	return 0
}

func (m *SPXCoinRecord) GetEarnOrderAmount() int64 {
	if m != nil && m.EarnOrderAmount != nil {
		return *m.EarnOrderAmount
	}
	return 0
}

func (m *SPXCoinRecord) GetEarnVoucherAmount() int64 {
	if m != nil && m.EarnVoucherAmount != nil {
		return *m.EarnVoucherAmount
	}
	return 0
}

func (m *SPXCoinRecord) GetEarnStatus() UseStatus {
	if m != nil && m.EarnStatus != nil {
		return *m.EarnStatus
	}
	return UseStatus_UNINITIALIZED
}

func (m *SPXCoinRecord) GetEarnTime() uint64 {
	if m != nil && m.EarnTime != nil {
		return *m.EarnTime
	}
	return 0
}

func (m *SPXCoinRecord) GetReturnStatus() SPXCoinRecord_ReturnStatus {
	if m != nil && m.ReturnStatus != nil {
		return *m.ReturnStatus
	}
	return SPXCoinRecord_RETURN_STATUS_UNINITIALIZED
}

func (m *SPXCoinRecord) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *SPXCoinRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *SPXCoinRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleCampaign struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CampaignName         *string  `protobuf:"bytes,2,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	AreaIds              []uint64 `protobuf:"varint,3,rep,name=area_ids,json=areaIds" json:"area_ids,omitempty"`
	Operator             *string  `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashSaleCampaign) Reset()         { *m = FlashSaleCampaign{} }
func (m *FlashSaleCampaign) String() string { return proto.CompactTextString(m) }
func (*FlashSaleCampaign) ProtoMessage()    {}
func (*FlashSaleCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{131}
}
func (m *FlashSaleCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleCampaign.Merge(m, src)
}
func (m *FlashSaleCampaign) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleCampaign proto.InternalMessageInfo

func (m *FlashSaleCampaign) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleCampaign) GetCampaignName() string {
	if m != nil && m.CampaignName != nil {
		return *m.CampaignName
	}
	return ""
}

func (m *FlashSaleCampaign) GetAreaIds() []uint64 {
	if m != nil {
		return m.AreaIds
	}
	return nil
}

func (m *FlashSaleCampaign) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *FlashSaleCampaign) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleCampaign) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleAreaTimeslotBinding struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AreaId               *uint64  `protobuf:"varint,2,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	TimeslotId           *uint64  `protobuf:"varint,3,opt,name=timeslot_id,json=timeslotId" json:"timeslot_id,omitempty"`
	StartTime            *uint64  `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64  `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashSaleAreaTimeslotBinding) Reset()         { *m = FlashSaleAreaTimeslotBinding{} }
func (m *FlashSaleAreaTimeslotBinding) String() string { return proto.CompactTextString(m) }
func (*FlashSaleAreaTimeslotBinding) ProtoMessage()    {}
func (*FlashSaleAreaTimeslotBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{132}
}
func (m *FlashSaleAreaTimeslotBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleAreaTimeslotBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleAreaTimeslotBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleAreaTimeslotBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleAreaTimeslotBinding.Merge(m, src)
}
func (m *FlashSaleAreaTimeslotBinding) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleAreaTimeslotBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleAreaTimeslotBinding.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleAreaTimeslotBinding proto.InternalMessageInfo

func (m *FlashSaleAreaTimeslotBinding) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetAreaId() uint64 {
	if m != nil && m.AreaId != nil {
		return *m.AreaId
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetTimeslotId() uint64 {
	if m != nil && m.TimeslotId != nil {
		return *m.TimeslotId
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleAreaTimeslotBinding) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleTimeslot struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CampaignId           *uint64  `protobuf:"varint,2,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	StartTime            *uint64  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64  `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Banner               *string  `protobuf:"bytes,5,opt,name=banner" json:"banner,omitempty"`
	Operator             *string  `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,7,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,8,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashSaleTimeslot) Reset()         { *m = FlashSaleTimeslot{} }
func (m *FlashSaleTimeslot) String() string { return proto.CompactTextString(m) }
func (*FlashSaleTimeslot) ProtoMessage()    {}
func (*FlashSaleTimeslot) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{133}
}
func (m *FlashSaleTimeslot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleTimeslot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleTimeslot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleTimeslot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleTimeslot.Merge(m, src)
}
func (m *FlashSaleTimeslot) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleTimeslot) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleTimeslot.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleTimeslot proto.InternalMessageInfo

func (m *FlashSaleTimeslot) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleTimeslot) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *FlashSaleTimeslot) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlashSaleTimeslot) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *FlashSaleTimeslot) GetBanner() string {
	if m != nil && m.Banner != nil {
		return *m.Banner
	}
	return ""
}

func (m *FlashSaleTimeslot) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *FlashSaleTimeslot) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleTimeslot) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleCampaignContent struct {
	FalshSaleCampaign    *FlashSaleCampaign   `protobuf:"bytes,1,opt,name=falsh_sale_campaign,json=falshSaleCampaign" json:"falsh_sale_campaign,omitempty"`
	Timeslots            []*FlashSaleTimeslot `protobuf:"bytes,2,rep,name=timeslots" json:"timeslots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlashSaleCampaignContent) Reset()         { *m = FlashSaleCampaignContent{} }
func (m *FlashSaleCampaignContent) String() string { return proto.CompactTextString(m) }
func (*FlashSaleCampaignContent) ProtoMessage()    {}
func (*FlashSaleCampaignContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{134}
}
func (m *FlashSaleCampaignContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleCampaignContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleCampaignContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleCampaignContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleCampaignContent.Merge(m, src)
}
func (m *FlashSaleCampaignContent) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleCampaignContent) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleCampaignContent.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleCampaignContent proto.InternalMessageInfo

func (m *FlashSaleCampaignContent) GetFalshSaleCampaign() *FlashSaleCampaign {
	if m != nil {
		return m.FalshSaleCampaign
	}
	return nil
}

func (m *FlashSaleCampaignContent) GetTimeslots() []*FlashSaleTimeslot {
	if m != nil {
		return m.Timeslots
	}
	return nil
}

type FlashSaleStore struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TimeslotId           *uint64  `protobuf:"varint,2,opt,name=timeslot_id,json=timeslotId" json:"timeslot_id,omitempty"`
	MerchantId           *uint64  `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	StoreId              *uint64  `protobuf:"varint,4,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	StoreName            *string  `protobuf:"bytes,5,opt,name=store_name,json=storeName" json:"store_name,omitempty"`
	DishNum              *uint32  `protobuf:"varint,6,opt,name=dish_num,json=dishNum" json:"dish_num,omitempty"`
	Operator             *string  `protobuf:"bytes,7,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashSaleStore) Reset()         { *m = FlashSaleStore{} }
func (m *FlashSaleStore) String() string { return proto.CompactTextString(m) }
func (*FlashSaleStore) ProtoMessage()    {}
func (*FlashSaleStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{135}
}
func (m *FlashSaleStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleStore.Merge(m, src)
}
func (m *FlashSaleStore) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleStore) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleStore.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleStore proto.InternalMessageInfo

func (m *FlashSaleStore) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleStore) GetTimeslotId() uint64 {
	if m != nil && m.TimeslotId != nil {
		return *m.TimeslotId
	}
	return 0
}

func (m *FlashSaleStore) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *FlashSaleStore) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *FlashSaleStore) GetStoreName() string {
	if m != nil && m.StoreName != nil {
		return *m.StoreName
	}
	return ""
}

func (m *FlashSaleStore) GetDishNum() uint32 {
	if m != nil && m.DishNum != nil {
		return *m.DishNum
	}
	return 0
}

func (m *FlashSaleStore) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *FlashSaleStore) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleStore) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleDishDiscount struct {
	Id                   *uint64                                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TimeslotId           *uint64                                 `protobuf:"varint,2,opt,name=timeslot_id,json=timeslotId" json:"timeslot_id,omitempty"`
	StoreId              *uint64                                 `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DishId               *uint64                                 `protobuf:"varint,4,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	DishName             *string                                 `protobuf:"bytes,5,opt,name=dish_name,json=dishName" json:"dish_name,omitempty"`
	FlashSaleDishName    *string                                 `protobuf:"bytes,6,opt,name=flash_sale_dish_name,json=flashSaleDishName" json:"flash_sale_dish_name,omitempty"`
	Stock                *uint64                                 `protobuf:"varint,7,opt,name=stock" json:"stock,omitempty"`
	SoldNum              *uint64                                 `protobuf:"varint,8,opt,name=sold_num,json=soldNum" json:"sold_num,omitempty"`
	LimitPerUser         *uint64                                 `protobuf:"varint,9,opt,name=limit_per_user,json=limitPerUser" json:"limit_per_user,omitempty"`
	DiscountPrice        *uint64                                 `protobuf:"varint,10,opt,name=discount_price,json=discountPrice" json:"discount_price,omitempty"`
	DiscountStatus       *FlashSaleDishStatus                    `protobuf:"varint,11,opt,name=discount_status,json=discountStatus,enum=foody_base.FlashSaleDishStatus" json:"discount_status,omitempty"`
	DiscountType         *FlashSaleDishDiscount_DishDiscountType `protobuf:"varint,12,opt,name=discount_type,json=discountType,enum=foody_base.FlashSaleDishDiscount_DishDiscountType" json:"discount_type,omitempty"`
	DiscountPercentage   *uint64                                 `protobuf:"varint,13,opt,name=discount_percentage,json=discountPercentage" json:"discount_percentage,omitempty"`
	Operator             *string                                 `protobuf:"bytes,14,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64                                 `protobuf:"varint,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                 `protobuf:"varint,16,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *FlashSaleDishDiscount) Reset()         { *m = FlashSaleDishDiscount{} }
func (m *FlashSaleDishDiscount) String() string { return proto.CompactTextString(m) }
func (*FlashSaleDishDiscount) ProtoMessage()    {}
func (*FlashSaleDishDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{136}
}
func (m *FlashSaleDishDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleDishDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleDishDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleDishDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleDishDiscount.Merge(m, src)
}
func (m *FlashSaleDishDiscount) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleDishDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleDishDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleDishDiscount proto.InternalMessageInfo

func (m *FlashSaleDishDiscount) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetTimeslotId() uint64 {
	if m != nil && m.TimeslotId != nil {
		return *m.TimeslotId
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetDishName() string {
	if m != nil && m.DishName != nil {
		return *m.DishName
	}
	return ""
}

func (m *FlashSaleDishDiscount) GetFlashSaleDishName() string {
	if m != nil && m.FlashSaleDishName != nil {
		return *m.FlashSaleDishName
	}
	return ""
}

func (m *FlashSaleDishDiscount) GetStock() uint64 {
	if m != nil && m.Stock != nil {
		return *m.Stock
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetSoldNum() uint64 {
	if m != nil && m.SoldNum != nil {
		return *m.SoldNum
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetLimitPerUser() uint64 {
	if m != nil && m.LimitPerUser != nil {
		return *m.LimitPerUser
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetDiscountPrice() uint64 {
	if m != nil && m.DiscountPrice != nil {
		return *m.DiscountPrice
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetDiscountStatus() FlashSaleDishStatus {
	if m != nil && m.DiscountStatus != nil {
		return *m.DiscountStatus
	}
	return FlashSaleDishStatus_Active
}

func (m *FlashSaleDishDiscount) GetDiscountType() FlashSaleDishDiscount_DishDiscountType {
	if m != nil && m.DiscountType != nil {
		return *m.DiscountType
	}
	return FlashSaleDishDiscount_DISCOUNT_PRICE
}

func (m *FlashSaleDishDiscount) GetDiscountPercentage() uint64 {
	if m != nil && m.DiscountPercentage != nil {
		return *m.DiscountPercentage
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *FlashSaleDishDiscount) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleDishDiscount) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleDishSoldRecord struct {
	Id                   *uint64                                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrderId              *uint64                                   `protobuf:"varint,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	BuyerId              *uint64                                   `protobuf:"varint,3,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	DiscountId           *uint64                                   `protobuf:"varint,4,opt,name=discount_id,json=discountId" json:"discount_id,omitempty"`
	TimeslotId           *uint64                                   `protobuf:"varint,5,opt,name=timeslot_id,json=timeslotId" json:"timeslot_id,omitempty"`
	StoreId              *uint64                                   `protobuf:"varint,6,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	DishId               *uint64                                   `protobuf:"varint,7,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	DiscountPrice        *uint64                                   `protobuf:"varint,8,opt,name=discount_price,json=discountPrice" json:"discount_price,omitempty"`
	SoldStatus           *FlashSaleDishSoldRecord_RecordSoldStatus `protobuf:"varint,9,opt,name=sold_status,json=soldStatus,enum=foody_base.FlashSaleDishSoldRecord_RecordSoldStatus" json:"sold_status,omitempty"`
	Quantity             *uint32                                   `protobuf:"varint,10,opt,name=quantity" json:"quantity,omitempty"`
	ReturnQuantity       *uint32                                   `protobuf:"varint,11,opt,name=return_quantity,json=returnQuantity" json:"return_quantity,omitempty"`
	CancelQuantity       *uint32                                   `protobuf:"varint,12,opt,name=cancel_quantity,json=cancelQuantity" json:"cancel_quantity,omitempty"`
	ReturnTime           *uint64                                   `protobuf:"varint,13,opt,name=return_time,json=returnTime" json:"return_time,omitempty"`
	CancelTime           *uint64                                   `protobuf:"varint,14,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CreateTime           *uint64                                   `protobuf:"varint,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                   `protobuf:"varint,16,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *FlashSaleDishSoldRecord) Reset()         { *m = FlashSaleDishSoldRecord{} }
func (m *FlashSaleDishSoldRecord) String() string { return proto.CompactTextString(m) }
func (*FlashSaleDishSoldRecord) ProtoMessage()    {}
func (*FlashSaleDishSoldRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{137}
}
func (m *FlashSaleDishSoldRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleDishSoldRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleDishSoldRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleDishSoldRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleDishSoldRecord.Merge(m, src)
}
func (m *FlashSaleDishSoldRecord) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleDishSoldRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleDishSoldRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleDishSoldRecord proto.InternalMessageInfo

func (m *FlashSaleDishSoldRecord) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetDiscountId() uint64 {
	if m != nil && m.DiscountId != nil {
		return *m.DiscountId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetTimeslotId() uint64 {
	if m != nil && m.TimeslotId != nil {
		return *m.TimeslotId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetDiscountPrice() uint64 {
	if m != nil && m.DiscountPrice != nil {
		return *m.DiscountPrice
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetSoldStatus() FlashSaleDishSoldRecord_RecordSoldStatus {
	if m != nil && m.SoldStatus != nil {
		return *m.SoldStatus
	}
	return FlashSaleDishSoldRecord_INIT
}

func (m *FlashSaleDishSoldRecord) GetQuantity() uint32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetReturnQuantity() uint32 {
	if m != nil && m.ReturnQuantity != nil {
		return *m.ReturnQuantity
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetCancelQuantity() uint32 {
	if m != nil && m.CancelQuantity != nil {
		return *m.CancelQuantity
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetReturnTime() uint64 {
	if m != nil && m.ReturnTime != nil {
		return *m.ReturnTime
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlashSaleDishSoldRecord) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type FlashSaleDish struct {
	Dish                 *Dish                  `protobuf:"bytes,1,opt,name=dish" json:"dish,omitempty"`
	Discount             *FlashSaleDishDiscount `protobuf:"bytes,2,opt,name=discount" json:"discount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlashSaleDish) Reset()         { *m = FlashSaleDish{} }
func (m *FlashSaleDish) String() string { return proto.CompactTextString(m) }
func (*FlashSaleDish) ProtoMessage()    {}
func (*FlashSaleDish) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{138}
}
func (m *FlashSaleDish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleDish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleDish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleDish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleDish.Merge(m, src)
}
func (m *FlashSaleDish) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleDish) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleDish.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleDish proto.InternalMessageInfo

func (m *FlashSaleDish) GetDish() *Dish {
	if m != nil {
		return m.Dish
	}
	return nil
}

func (m *FlashSaleDish) GetDiscount() *FlashSaleDishDiscount {
	if m != nil {
		return m.Discount
	}
	return nil
}

type FlashSaleCartItemDetail struct {
	UserLimit            *uint64                `protobuf:"varint,1,opt,name=user_limit,json=userLimit" json:"user_limit,omitempty"`
	Discount             *FlashSaleDishDiscount `protobuf:"bytes,2,opt,name=discount" json:"discount,omitempty"`
	Timeslot             *FlashSaleTimeslot     `protobuf:"bytes,3,opt,name=timeslot" json:"timeslot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlashSaleCartItemDetail) Reset()         { *m = FlashSaleCartItemDetail{} }
func (m *FlashSaleCartItemDetail) String() string { return proto.CompactTextString(m) }
func (*FlashSaleCartItemDetail) ProtoMessage()    {}
func (*FlashSaleCartItemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{139}
}
func (m *FlashSaleCartItemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleCartItemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleCartItemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleCartItemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleCartItemDetail.Merge(m, src)
}
func (m *FlashSaleCartItemDetail) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleCartItemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleCartItemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleCartItemDetail proto.InternalMessageInfo

func (m *FlashSaleCartItemDetail) GetUserLimit() uint64 {
	if m != nil && m.UserLimit != nil {
		return *m.UserLimit
	}
	return 0
}

func (m *FlashSaleCartItemDetail) GetDiscount() *FlashSaleDishDiscount {
	if m != nil {
		return m.Discount
	}
	return nil
}

func (m *FlashSaleCartItemDetail) GetTimeslot() *FlashSaleTimeslot {
	if m != nil {
		return m.Timeslot
	}
	return nil
}

type FlashSaleOrderItemDetail struct {
	DiscountId           *uint64  `protobuf:"varint,1,opt,name=discount_id,json=discountId" json:"discount_id,omitempty"`
	TimeslotId           *uint64  `protobuf:"varint,2,opt,name=timeslot_id,json=timeslotId" json:"timeslot_id,omitempty"`
	DishId               *uint64  `protobuf:"varint,3,opt,name=dish_id,json=dishId" json:"dish_id,omitempty"`
	DishPrice            *uint64  `protobuf:"varint,4,opt,name=dish_price,json=dishPrice" json:"dish_price,omitempty"`
	DiscountPrice        *uint64  `protobuf:"varint,5,opt,name=discount_price,json=discountPrice" json:"discount_price,omitempty"`
	Quantity             *uint64  `protobuf:"varint,6,opt,name=quantity" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashSaleOrderItemDetail) Reset()         { *m = FlashSaleOrderItemDetail{} }
func (m *FlashSaleOrderItemDetail) String() string { return proto.CompactTextString(m) }
func (*FlashSaleOrderItemDetail) ProtoMessage()    {}
func (*FlashSaleOrderItemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{140}
}
func (m *FlashSaleOrderItemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleOrderItemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleOrderItemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleOrderItemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleOrderItemDetail.Merge(m, src)
}
func (m *FlashSaleOrderItemDetail) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleOrderItemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleOrderItemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleOrderItemDetail proto.InternalMessageInfo

func (m *FlashSaleOrderItemDetail) GetDiscountId() uint64 {
	if m != nil && m.DiscountId != nil {
		return *m.DiscountId
	}
	return 0
}

func (m *FlashSaleOrderItemDetail) GetTimeslotId() uint64 {
	if m != nil && m.TimeslotId != nil {
		return *m.TimeslotId
	}
	return 0
}

func (m *FlashSaleOrderItemDetail) GetDishId() uint64 {
	if m != nil && m.DishId != nil {
		return *m.DishId
	}
	return 0
}

func (m *FlashSaleOrderItemDetail) GetDishPrice() uint64 {
	if m != nil && m.DishPrice != nil {
		return *m.DishPrice
	}
	return 0
}

func (m *FlashSaleOrderItemDetail) GetDiscountPrice() uint64 {
	if m != nil && m.DiscountPrice != nil {
		return *m.DiscountPrice
	}
	return 0
}

func (m *FlashSaleOrderItemDetail) GetQuantity() uint64 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type FlashSaleOrderItem struct {
	BuyerId              *uint64                     `protobuf:"varint,1,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	StoreId              *uint64                     `protobuf:"varint,2,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	OrderId              *uint64                     `protobuf:"varint,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	FlashSaleDishDetail  []*FlashSaleOrderItemDetail `protobuf:"bytes,5,rep,name=flash_sale_dish_detail,json=flashSaleDishDetail" json:"flash_sale_dish_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FlashSaleOrderItem) Reset()         { *m = FlashSaleOrderItem{} }
func (m *FlashSaleOrderItem) String() string { return proto.CompactTextString(m) }
func (*FlashSaleOrderItem) ProtoMessage()    {}
func (*FlashSaleOrderItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{141}
}
func (m *FlashSaleOrderItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleOrderItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleOrderItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleOrderItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleOrderItem.Merge(m, src)
}
func (m *FlashSaleOrderItem) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleOrderItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleOrderItem.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleOrderItem proto.InternalMessageInfo

func (m *FlashSaleOrderItem) GetBuyerId() uint64 {
	if m != nil && m.BuyerId != nil {
		return *m.BuyerId
	}
	return 0
}

func (m *FlashSaleOrderItem) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *FlashSaleOrderItem) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *FlashSaleOrderItem) GetFlashSaleDishDetail() []*FlashSaleOrderItemDetail {
	if m != nil {
		return m.FlashSaleDishDetail
	}
	return nil
}

type FlashSaleDishDiscountTimeslot struct {
	Discount             *FlashSaleDishDiscount `protobuf:"bytes,1,opt,name=discount" json:"discount,omitempty"`
	StartTime            *uint64                `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64                `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	CampaignId           *uint64                `protobuf:"varint,4,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Timezone             *string                `protobuf:"bytes,5,opt,name=timezone" json:"timezone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FlashSaleDishDiscountTimeslot) Reset()         { *m = FlashSaleDishDiscountTimeslot{} }
func (m *FlashSaleDishDiscountTimeslot) String() string { return proto.CompactTextString(m) }
func (*FlashSaleDishDiscountTimeslot) ProtoMessage()    {}
func (*FlashSaleDishDiscountTimeslot) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{142}
}
func (m *FlashSaleDishDiscountTimeslot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlashSaleDishDiscountTimeslot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlashSaleDishDiscountTimeslot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlashSaleDishDiscountTimeslot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashSaleDishDiscountTimeslot.Merge(m, src)
}
func (m *FlashSaleDishDiscountTimeslot) XXX_Size() int {
	return m.Size()
}
func (m *FlashSaleDishDiscountTimeslot) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashSaleDishDiscountTimeslot.DiscardUnknown(m)
}

var xxx_messageInfo_FlashSaleDishDiscountTimeslot proto.InternalMessageInfo

func (m *FlashSaleDishDiscountTimeslot) GetDiscount() *FlashSaleDishDiscount {
	if m != nil {
		return m.Discount
	}
	return nil
}

func (m *FlashSaleDishDiscountTimeslot) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlashSaleDishDiscountTimeslot) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *FlashSaleDishDiscountTimeslot) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *FlashSaleDishDiscountTimeslot) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

type DriverDeliveryOrder struct {
	Id                        *uint64                               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DriverId                  *uint64                               `protobuf:"varint,2,opt,name=driver_id,json=driverId" json:"driver_id,omitempty"`
	DriverDeliveryOrderStatus *DriverDeliveryStatus                 `protobuf:"varint,3,opt,name=driver_delivery_order_status,json=driverDeliveryOrderStatus,enum=foody_base.DriverDeliveryStatus" json:"driver_delivery_order_status,omitempty"`
	ShippingFeeTotal          *uint64                               `protobuf:"varint,4,opt,name=shipping_fee_total,json=shippingFeeTotal" json:"shipping_fee_total,omitempty"`
	ShippingFeeItems          *DriverDeliveryOrder_ShippingFeeItems `protobuf:"bytes,5,opt,name=shipping_fee_items,json=shippingFeeItems" json:"shipping_fee_items,omitempty"`
	DeliveryDistance          *uint64                               `protobuf:"varint,6,opt,name=delivery_distance,json=deliveryDistance" json:"delivery_distance,omitempty"`
	TotalNum                  *uint32                               `protobuf:"varint,7,opt,name=total_num,json=totalNum" json:"total_num,omitempty"`
	CompletedNum              *uint32                               `protobuf:"varint,8,opt,name=completed_num,json=completedNum" json:"completed_num,omitempty"`
	CanceledNum               *uint32                               `protobuf:"varint,9,opt,name=canceled_num,json=canceledNum" json:"canceled_num,omitempty"`
	Routes                    []*DriverDeliveryOrder_Route          `protobuf:"bytes,10,rep,name=routes" json:"routes,omitempty"`
	AssignTime                *uint64                               `protobuf:"varint,11,opt,name=assign_time,json=assignTime" json:"assign_time,omitempty"`
	CompleteTime              *uint64                               `protobuf:"varint,12,opt,name=complete_time,json=completeTime" json:"complete_time,omitempty"`
	CancelTime                *uint64                               `protobuf:"varint,13,opt,name=cancel_time,json=cancelTime" json:"cancel_time,omitempty"`
	CreateTime                *uint64                               `protobuf:"varint,14,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime                *uint64                               `protobuf:"varint,15,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                              `json:"-"`
	XXX_unrecognized          []byte                                `json:"-"`
	XXX_sizecache             int32                                 `json:"-"`
}

func (m *DriverDeliveryOrder) Reset()         { *m = DriverDeliveryOrder{} }
func (m *DriverDeliveryOrder) String() string { return proto.CompactTextString(m) }
func (*DriverDeliveryOrder) ProtoMessage()    {}
func (*DriverDeliveryOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{143}
}
func (m *DriverDeliveryOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverDeliveryOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverDeliveryOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverDeliveryOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverDeliveryOrder.Merge(m, src)
}
func (m *DriverDeliveryOrder) XXX_Size() int {
	return m.Size()
}
func (m *DriverDeliveryOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverDeliveryOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DriverDeliveryOrder proto.InternalMessageInfo

func (m *DriverDeliveryOrder) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DriverDeliveryOrder) GetDriverId() uint64 {
	if m != nil && m.DriverId != nil {
		return *m.DriverId
	}
	return 0
}

func (m *DriverDeliveryOrder) GetDriverDeliveryOrderStatus() DriverDeliveryStatus {
	if m != nil && m.DriverDeliveryOrderStatus != nil {
		return *m.DriverDeliveryOrderStatus
	}
	return DriverDeliveryStatus_DRIVER_DELIVERY_CONFIRMED
}

func (m *DriverDeliveryOrder) GetShippingFeeTotal() uint64 {
	if m != nil && m.ShippingFeeTotal != nil {
		return *m.ShippingFeeTotal
	}
	return 0
}

func (m *DriverDeliveryOrder) GetShippingFeeItems() *DriverDeliveryOrder_ShippingFeeItems {
	if m != nil {
		return m.ShippingFeeItems
	}
	return nil
}

func (m *DriverDeliveryOrder) GetDeliveryDistance() uint64 {
	if m != nil && m.DeliveryDistance != nil {
		return *m.DeliveryDistance
	}
	return 0
}

func (m *DriverDeliveryOrder) GetTotalNum() uint32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *DriverDeliveryOrder) GetCompletedNum() uint32 {
	if m != nil && m.CompletedNum != nil {
		return *m.CompletedNum
	}
	return 0
}

func (m *DriverDeliveryOrder) GetCanceledNum() uint32 {
	if m != nil && m.CanceledNum != nil {
		return *m.CanceledNum
	}
	return 0
}

func (m *DriverDeliveryOrder) GetRoutes() []*DriverDeliveryOrder_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *DriverDeliveryOrder) GetAssignTime() uint64 {
	if m != nil && m.AssignTime != nil {
		return *m.AssignTime
	}
	return 0
}

func (m *DriverDeliveryOrder) GetCompleteTime() uint64 {
	if m != nil && m.CompleteTime != nil {
		return *m.CompleteTime
	}
	return 0
}

func (m *DriverDeliveryOrder) GetCancelTime() uint64 {
	if m != nil && m.CancelTime != nil {
		return *m.CancelTime
	}
	return 0
}

func (m *DriverDeliveryOrder) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *DriverDeliveryOrder) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type DriverDeliveryOrder_ShippingFeeItems struct {
	ShippingSurgeFee     *uint64  `protobuf:"varint,1,opt,name=shipping_surge_fee,json=shippingSurgeFee" json:"shipping_surge_fee,omitempty"`
	ShippingBaseFee      *uint64  `protobuf:"varint,2,opt,name=shipping_base_fee,json=shippingBaseFee" json:"shipping_base_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverDeliveryOrder_ShippingFeeItems) Reset()         { *m = DriverDeliveryOrder_ShippingFeeItems{} }
func (m *DriverDeliveryOrder_ShippingFeeItems) String() string { return proto.CompactTextString(m) }
func (*DriverDeliveryOrder_ShippingFeeItems) ProtoMessage()    {}
func (*DriverDeliveryOrder_ShippingFeeItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{143, 0}
}
func (m *DriverDeliveryOrder_ShippingFeeItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverDeliveryOrder_ShippingFeeItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverDeliveryOrder_ShippingFeeItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverDeliveryOrder_ShippingFeeItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverDeliveryOrder_ShippingFeeItems.Merge(m, src)
}
func (m *DriverDeliveryOrder_ShippingFeeItems) XXX_Size() int {
	return m.Size()
}
func (m *DriverDeliveryOrder_ShippingFeeItems) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverDeliveryOrder_ShippingFeeItems.DiscardUnknown(m)
}

var xxx_messageInfo_DriverDeliveryOrder_ShippingFeeItems proto.InternalMessageInfo

func (m *DriverDeliveryOrder_ShippingFeeItems) GetShippingSurgeFee() uint64 {
	if m != nil && m.ShippingSurgeFee != nil {
		return *m.ShippingSurgeFee
	}
	return 0
}

func (m *DriverDeliveryOrder_ShippingFeeItems) GetShippingBaseFee() uint64 {
	if m != nil && m.ShippingBaseFee != nil {
		return *m.ShippingBaseFee
	}
	return 0
}

type DriverDeliveryOrder_Route struct {
	LocationType         *DriverDeliveryOrder_LocationType `protobuf:"varint,1,opt,name=location_type,json=locationType,enum=foody_base.DriverDeliveryOrder_LocationType" json:"location_type,omitempty"`
	DeliveryOrderId      *uint64                           `protobuf:"varint,2,opt,name=delivery_order_id,json=deliveryOrderId" json:"delivery_order_id,omitempty"`
	OrderId              *uint64                           `protobuf:"varint,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Latitude             *float32                          `protobuf:"fixed32,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float32                          `protobuf:"fixed32,5,opt,name=longitude" json:"longitude,omitempty"`
	Distance             *uint64                           `protobuf:"varint,6,opt,name=distance" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DriverDeliveryOrder_Route) Reset()         { *m = DriverDeliveryOrder_Route{} }
func (m *DriverDeliveryOrder_Route) String() string { return proto.CompactTextString(m) }
func (*DriverDeliveryOrder_Route) ProtoMessage()    {}
func (*DriverDeliveryOrder_Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{143, 1}
}
func (m *DriverDeliveryOrder_Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverDeliveryOrder_Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverDeliveryOrder_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverDeliveryOrder_Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverDeliveryOrder_Route.Merge(m, src)
}
func (m *DriverDeliveryOrder_Route) XXX_Size() int {
	return m.Size()
}
func (m *DriverDeliveryOrder_Route) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverDeliveryOrder_Route.DiscardUnknown(m)
}

var xxx_messageInfo_DriverDeliveryOrder_Route proto.InternalMessageInfo

func (m *DriverDeliveryOrder_Route) GetLocationType() DriverDeliveryOrder_LocationType {
	if m != nil && m.LocationType != nil {
		return *m.LocationType
	}
	return DriverDeliveryOrder_PICKUP_LOCATION
}

func (m *DriverDeliveryOrder_Route) GetDeliveryOrderId() uint64 {
	if m != nil && m.DeliveryOrderId != nil {
		return *m.DeliveryOrderId
	}
	return 0
}

func (m *DriverDeliveryOrder_Route) GetOrderId() uint64 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *DriverDeliveryOrder_Route) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *DriverDeliveryOrder_Route) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *DriverDeliveryOrder_Route) GetDistance() uint64 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

type StoreSettlementMart struct {
	StoreId                *uint64                           `protobuf:"varint,1,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	IsUseWallet            *StoreSettlementMart_WalletStatus `protobuf:"varint,2,opt,name=is_use_wallet,json=isUseWallet,enum=foody_base.StoreSettlementMart_WalletStatus" json:"is_use_wallet,omitempty"`
	BankName               *string                           `protobuf:"bytes,3,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	BankAccountNo          *string                           `protobuf:"bytes,4,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankBranch             *string                           `protobuf:"bytes,5,opt,name=bank_branch,json=bankBranch" json:"bank_branch,omitempty"`
	BankAccountName        *string                           `protobuf:"bytes,6,opt,name=bank_account_name,json=bankAccountName" json:"bank_account_name,omitempty"`
	WalletId               *uint64                           `protobuf:"varint,7,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	SettlementMethod       *SettlementMethod                 `protobuf:"varint,9,opt,name=settlement_method,json=settlementMethod,enum=foody_base.SettlementMethod" json:"settlement_method,omitempty"`
	PaymentWay             *PaymentWay                       `protobuf:"varint,10,opt,name=payment_way,json=paymentWay,enum=foody_base.PaymentWay" json:"payment_way,omitempty"`
	Vat                    *Vat                              `protobuf:"varint,11,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	Wht                    *Wht                              `protobuf:"varint,13,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	SettleTo               *SettleTo                         `protobuf:"varint,14,opt,name=settle_to,json=settleTo,enum=foody_base.SettleTo" json:"settle_to,omitempty"`
	BankChannelId          *uint64                           `protobuf:"varint,15,opt,name=bank_channel_id,json=bankChannelId" json:"bank_channel_id,omitempty"`
	PayoutMethod           *PayoutMethod                     `protobuf:"varint,16,opt,name=payout_method,json=payoutMethod,enum=foody_base.PayoutMethod" json:"payout_method,omitempty"`
	CrossMonthSettlement   *CrossMonthSettlement             `protobuf:"varint,17,opt,name=cross_month_settlement,json=crossMonthSettlement,enum=foody_base.CrossMonthSettlement" json:"cross_month_settlement,omitempty"`
	PayoutAccountId        *uint64                           `protobuf:"varint,18,opt,name=payout_account_id,json=payoutAccountId" json:"payout_account_id,omitempty"`
	AutoPayoutRemark       *string                           `protobuf:"bytes,19,opt,name=auto_payout_remark,json=autoPayoutRemark" json:"auto_payout_remark,omitempty"`
	SettlementEmails       *string                           `protobuf:"bytes,20,opt,name=settlement_emails,json=settlementEmails" json:"settlement_emails,omitempty"`
	BankBranchId           *uint64                           `protobuf:"varint,21,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	WalletRelationStatus   *StoreSettlementMart_ConfigStatus `protobuf:"varint,22,opt,name=wallet_relation_status,json=walletRelationStatus,enum=foody_base.StoreSettlementMart_ConfigStatus" json:"wallet_relation_status,omitempty"`
	SettlementConfigStatus *StoreSettlementMart_ConfigStatus `protobuf:"varint,23,opt,name=settlement_config_status,json=settlementConfigStatus,enum=foody_base.StoreSettlementMart_ConfigStatus" json:"settlement_config_status,omitempty"`
	ProductConfigStatus    *StoreSettlementMart_ConfigStatus `protobuf:"varint,24,opt,name=product_config_status,json=productConfigStatus,enum=foody_base.StoreSettlementMart_ConfigStatus" json:"product_config_status,omitempty"`
	BankAccountStatus      *BankAccountStatus                `protobuf:"varint,25,opt,name=bank_account_status,json=bankAccountStatus,enum=foody_base.BankAccountStatus" json:"bank_account_status,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                          `json:"-"`
	XXX_unrecognized       []byte                            `json:"-"`
	XXX_sizecache          int32                             `json:"-"`
}

func (m *StoreSettlementMart) Reset()         { *m = StoreSettlementMart{} }
func (m *StoreSettlementMart) String() string { return proto.CompactTextString(m) }
func (*StoreSettlementMart) ProtoMessage()    {}
func (*StoreSettlementMart) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{144}
}
func (m *StoreSettlementMart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreSettlementMart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreSettlementMart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreSettlementMart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreSettlementMart.Merge(m, src)
}
func (m *StoreSettlementMart) XXX_Size() int {
	return m.Size()
}
func (m *StoreSettlementMart) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreSettlementMart.DiscardUnknown(m)
}

var xxx_messageInfo_StoreSettlementMart proto.InternalMessageInfo

func (m *StoreSettlementMart) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *StoreSettlementMart) GetIsUseWallet() StoreSettlementMart_WalletStatus {
	if m != nil && m.IsUseWallet != nil {
		return *m.IsUseWallet
	}
	return StoreSettlementMart_WALLET_DISABLE
}

func (m *StoreSettlementMart) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *StoreSettlementMart) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *StoreSettlementMart) GetBankBranch() string {
	if m != nil && m.BankBranch != nil {
		return *m.BankBranch
	}
	return ""
}

func (m *StoreSettlementMart) GetBankAccountName() string {
	if m != nil && m.BankAccountName != nil {
		return *m.BankAccountName
	}
	return ""
}

func (m *StoreSettlementMart) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *StoreSettlementMart) GetSettlementMethod() SettlementMethod {
	if m != nil && m.SettlementMethod != nil {
		return *m.SettlementMethod
	}
	return SettlementMethod_SETTLEMENT_METHOD_NONE
}

func (m *StoreSettlementMart) GetPaymentWay() PaymentWay {
	if m != nil && m.PaymentWay != nil {
		return *m.PaymentWay
	}
	return PaymentWay_PAYMENT_UNKNOWN
}

func (m *StoreSettlementMart) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *StoreSettlementMart) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *StoreSettlementMart) GetSettleTo() SettleTo {
	if m != nil && m.SettleTo != nil {
		return *m.SettleTo
	}
	return SettleTo_SETTLE_TO_UNKNOWN
}

func (m *StoreSettlementMart) GetBankChannelId() uint64 {
	if m != nil && m.BankChannelId != nil {
		return *m.BankChannelId
	}
	return 0
}

func (m *StoreSettlementMart) GetPayoutMethod() PayoutMethod {
	if m != nil && m.PayoutMethod != nil {
		return *m.PayoutMethod
	}
	return PayoutMethod_PAYOUT_METHOD_NONE
}

func (m *StoreSettlementMart) GetCrossMonthSettlement() CrossMonthSettlement {
	if m != nil && m.CrossMonthSettlement != nil {
		return *m.CrossMonthSettlement
	}
	return CrossMonthSettlement_CROSS_MONTH_NONE
}

func (m *StoreSettlementMart) GetPayoutAccountId() uint64 {
	if m != nil && m.PayoutAccountId != nil {
		return *m.PayoutAccountId
	}
	return 0
}

func (m *StoreSettlementMart) GetAutoPayoutRemark() string {
	if m != nil && m.AutoPayoutRemark != nil {
		return *m.AutoPayoutRemark
	}
	return ""
}

func (m *StoreSettlementMart) GetSettlementEmails() string {
	if m != nil && m.SettlementEmails != nil {
		return *m.SettlementEmails
	}
	return ""
}

func (m *StoreSettlementMart) GetBankBranchId() uint64 {
	if m != nil && m.BankBranchId != nil {
		return *m.BankBranchId
	}
	return 0
}

func (m *StoreSettlementMart) GetWalletRelationStatus() StoreSettlementMart_ConfigStatus {
	if m != nil && m.WalletRelationStatus != nil {
		return *m.WalletRelationStatus
	}
	return StoreSettlementMart_ConfigStatus_Unknown
}

func (m *StoreSettlementMart) GetSettlementConfigStatus() StoreSettlementMart_ConfigStatus {
	if m != nil && m.SettlementConfigStatus != nil {
		return *m.SettlementConfigStatus
	}
	return StoreSettlementMart_ConfigStatus_Unknown
}

func (m *StoreSettlementMart) GetProductConfigStatus() StoreSettlementMart_ConfigStatus {
	if m != nil && m.ProductConfigStatus != nil {
		return *m.ProductConfigStatus
	}
	return StoreSettlementMart_ConfigStatus_Unknown
}

func (m *StoreSettlementMart) GetBankAccountStatus() BankAccountStatus {
	if m != nil && m.BankAccountStatus != nil {
		return *m.BankAccountStatus
	}
	return BankAccountStatus_BANK_STATUS_NONE
}

type MerchantSettlementMart struct {
	MerchantId             *uint64                              `protobuf:"varint,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	IsUseWallet            *MerchantSettlementMart_WalletStatus `protobuf:"varint,2,opt,name=is_use_wallet,json=isUseWallet,enum=foody_base.MerchantSettlementMart_WalletStatus" json:"is_use_wallet,omitempty"`
	BankName               *string                              `protobuf:"bytes,3,opt,name=bank_name,json=bankName" json:"bank_name,omitempty"`
	BankAccountNo          *string                              `protobuf:"bytes,4,opt,name=bank_account_no,json=bankAccountNo" json:"bank_account_no,omitempty"`
	BankBranch             *string                              `protobuf:"bytes,5,opt,name=bank_branch,json=bankBranch" json:"bank_branch,omitempty"`
	BankAccountName        *string                              `protobuf:"bytes,6,opt,name=bank_account_name,json=bankAccountName" json:"bank_account_name,omitempty"`
	WalletId               *uint64                              `protobuf:"varint,7,opt,name=wallet_id,json=walletId" json:"wallet_id,omitempty"`
	SettlementMethod       *SettlementMethod                    `protobuf:"varint,9,opt,name=settlement_method,json=settlementMethod,enum=foody_base.SettlementMethod" json:"settlement_method,omitempty"`
	PaymentWay             *PaymentWay                          `protobuf:"varint,10,opt,name=payment_way,json=paymentWay,enum=foody_base.PaymentWay" json:"payment_way,omitempty"`
	Vat                    *Vat                                 `protobuf:"varint,11,opt,name=vat,enum=foody_base.Vat" json:"vat,omitempty"`
	Wht                    *Wht                                 `protobuf:"varint,13,opt,name=wht,enum=foody_base.Wht" json:"wht,omitempty"`
	BankChannelId          *uint64                              `protobuf:"varint,14,opt,name=bank_channel_id,json=bankChannelId" json:"bank_channel_id,omitempty"`
	PayoutMethod           *PayoutMethod                        `protobuf:"varint,15,opt,name=payout_method,json=payoutMethod,enum=foody_base.PayoutMethod" json:"payout_method,omitempty"`
	CrossMonthSettlement   *CrossMonthSettlement                `protobuf:"varint,16,opt,name=cross_month_settlement,json=crossMonthSettlement,enum=foody_base.CrossMonthSettlement" json:"cross_month_settlement,omitempty"`
	PayoutAccountId        *uint64                              `protobuf:"varint,17,opt,name=payout_account_id,json=payoutAccountId" json:"payout_account_id,omitempty"`
	AutoPayoutRemark       *string                              `protobuf:"bytes,18,opt,name=auto_payout_remark,json=autoPayoutRemark" json:"auto_payout_remark,omitempty"`
	SettlementEmails       *string                              `protobuf:"bytes,19,opt,name=settlement_emails,json=settlementEmails" json:"settlement_emails,omitempty"`
	BankBranchId           *uint64                              `protobuf:"varint,20,opt,name=bank_branch_id,json=bankBranchId" json:"bank_branch_id,omitempty"`
	WalletRelationStatus   *MerchantSettlementMart_ConfigStatus `protobuf:"varint,21,opt,name=wallet_relation_status,json=walletRelationStatus,enum=foody_base.MerchantSettlementMart_ConfigStatus" json:"wallet_relation_status,omitempty"`
	SettlementConfigStatus *MerchantSettlementMart_ConfigStatus `protobuf:"varint,22,opt,name=settlement_config_status,json=settlementConfigStatus,enum=foody_base.MerchantSettlementMart_ConfigStatus" json:"settlement_config_status,omitempty"`
	ProductConfigStatus    *MerchantSettlementMart_ConfigStatus `protobuf:"varint,23,opt,name=product_config_status,json=productConfigStatus,enum=foody_base.MerchantSettlementMart_ConfigStatus" json:"product_config_status,omitempty"`
	BankAccountStatus      *BankAccountStatus                   `protobuf:"varint,24,opt,name=bank_account_status,json=bankAccountStatus,enum=foody_base.BankAccountStatus" json:"bank_account_status,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                             `json:"-"`
	XXX_unrecognized       []byte                               `json:"-"`
	XXX_sizecache          int32                                `json:"-"`
}

func (m *MerchantSettlementMart) Reset()         { *m = MerchantSettlementMart{} }
func (m *MerchantSettlementMart) String() string { return proto.CompactTextString(m) }
func (*MerchantSettlementMart) ProtoMessage()    {}
func (*MerchantSettlementMart) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{145}
}
func (m *MerchantSettlementMart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerchantSettlementMart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerchantSettlementMart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerchantSettlementMart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantSettlementMart.Merge(m, src)
}
func (m *MerchantSettlementMart) XXX_Size() int {
	return m.Size()
}
func (m *MerchantSettlementMart) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantSettlementMart.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantSettlementMart proto.InternalMessageInfo

func (m *MerchantSettlementMart) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *MerchantSettlementMart) GetIsUseWallet() MerchantSettlementMart_WalletStatus {
	if m != nil && m.IsUseWallet != nil {
		return *m.IsUseWallet
	}
	return MerchantSettlementMart_WALLET_DISABLE
}

func (m *MerchantSettlementMart) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *MerchantSettlementMart) GetBankAccountNo() string {
	if m != nil && m.BankAccountNo != nil {
		return *m.BankAccountNo
	}
	return ""
}

func (m *MerchantSettlementMart) GetBankBranch() string {
	if m != nil && m.BankBranch != nil {
		return *m.BankBranch
	}
	return ""
}

func (m *MerchantSettlementMart) GetBankAccountName() string {
	if m != nil && m.BankAccountName != nil {
		return *m.BankAccountName
	}
	return ""
}

func (m *MerchantSettlementMart) GetWalletId() uint64 {
	if m != nil && m.WalletId != nil {
		return *m.WalletId
	}
	return 0
}

func (m *MerchantSettlementMart) GetSettlementMethod() SettlementMethod {
	if m != nil && m.SettlementMethod != nil {
		return *m.SettlementMethod
	}
	return SettlementMethod_SETTLEMENT_METHOD_NONE
}

func (m *MerchantSettlementMart) GetPaymentWay() PaymentWay {
	if m != nil && m.PaymentWay != nil {
		return *m.PaymentWay
	}
	return PaymentWay_PAYMENT_UNKNOWN
}

func (m *MerchantSettlementMart) GetVat() Vat {
	if m != nil && m.Vat != nil {
		return *m.Vat
	}
	return Vat_VAT_UNKNOWN
}

func (m *MerchantSettlementMart) GetWht() Wht {
	if m != nil && m.Wht != nil {
		return *m.Wht
	}
	return Wht_WHT_UNKNOWN
}

func (m *MerchantSettlementMart) GetBankChannelId() uint64 {
	if m != nil && m.BankChannelId != nil {
		return *m.BankChannelId
	}
	return 0
}

func (m *MerchantSettlementMart) GetPayoutMethod() PayoutMethod {
	if m != nil && m.PayoutMethod != nil {
		return *m.PayoutMethod
	}
	return PayoutMethod_PAYOUT_METHOD_NONE
}

func (m *MerchantSettlementMart) GetCrossMonthSettlement() CrossMonthSettlement {
	if m != nil && m.CrossMonthSettlement != nil {
		return *m.CrossMonthSettlement
	}
	return CrossMonthSettlement_CROSS_MONTH_NONE
}

func (m *MerchantSettlementMart) GetPayoutAccountId() uint64 {
	if m != nil && m.PayoutAccountId != nil {
		return *m.PayoutAccountId
	}
	return 0
}

func (m *MerchantSettlementMart) GetAutoPayoutRemark() string {
	if m != nil && m.AutoPayoutRemark != nil {
		return *m.AutoPayoutRemark
	}
	return ""
}

func (m *MerchantSettlementMart) GetSettlementEmails() string {
	if m != nil && m.SettlementEmails != nil {
		return *m.SettlementEmails
	}
	return ""
}

func (m *MerchantSettlementMart) GetBankBranchId() uint64 {
	if m != nil && m.BankBranchId != nil {
		return *m.BankBranchId
	}
	return 0
}

func (m *MerchantSettlementMart) GetWalletRelationStatus() MerchantSettlementMart_ConfigStatus {
	if m != nil && m.WalletRelationStatus != nil {
		return *m.WalletRelationStatus
	}
	return MerchantSettlementMart_ConfigStatus_Unknown
}

func (m *MerchantSettlementMart) GetSettlementConfigStatus() MerchantSettlementMart_ConfigStatus {
	if m != nil && m.SettlementConfigStatus != nil {
		return *m.SettlementConfigStatus
	}
	return MerchantSettlementMart_ConfigStatus_Unknown
}

func (m *MerchantSettlementMart) GetProductConfigStatus() MerchantSettlementMart_ConfigStatus {
	if m != nil && m.ProductConfigStatus != nil {
		return *m.ProductConfigStatus
	}
	return MerchantSettlementMart_ConfigStatus_Unknown
}

func (m *MerchantSettlementMart) GetBankAccountStatus() BankAccountStatus {
	if m != nil && m.BankAccountStatus != nil {
		return *m.BankAccountStatus
	}
	return BankAccountStatus_BANK_STATUS_NONE
}

type ItemDiscountCampaignEnableTime struct {
	StartTime            *uint64  `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint64  `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemDiscountCampaignEnableTime) Reset()         { *m = ItemDiscountCampaignEnableTime{} }
func (m *ItemDiscountCampaignEnableTime) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountCampaignEnableTime) ProtoMessage()    {}
func (*ItemDiscountCampaignEnableTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{146}
}
func (m *ItemDiscountCampaignEnableTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountCampaignEnableTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountCampaignEnableTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountCampaignEnableTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountCampaignEnableTime.Merge(m, src)
}
func (m *ItemDiscountCampaignEnableTime) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountCampaignEnableTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountCampaignEnableTime.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountCampaignEnableTime proto.InternalMessageInfo

func (m *ItemDiscountCampaignEnableTime) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ItemDiscountCampaignEnableTime) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type ItemDiscountCampaignEnableDate struct {
	StartDate            *uint64  `protobuf:"varint,1,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate              *uint64  `protobuf:"varint,2,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemDiscountCampaignEnableDate) Reset()         { *m = ItemDiscountCampaignEnableDate{} }
func (m *ItemDiscountCampaignEnableDate) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountCampaignEnableDate) ProtoMessage()    {}
func (*ItemDiscountCampaignEnableDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{147}
}
func (m *ItemDiscountCampaignEnableDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountCampaignEnableDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountCampaignEnableDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountCampaignEnableDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountCampaignEnableDate.Merge(m, src)
}
func (m *ItemDiscountCampaignEnableDate) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountCampaignEnableDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountCampaignEnableDate.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountCampaignEnableDate proto.InternalMessageInfo

func (m *ItemDiscountCampaignEnableDate) GetStartDate() uint64 {
	if m != nil && m.StartDate != nil {
		return *m.StartDate
	}
	return 0
}

func (m *ItemDiscountCampaignEnableDate) GetEndDate() uint64 {
	if m != nil && m.EndDate != nil {
		return *m.EndDate
	}
	return 0
}

type ItemDiscountCampaignApplyDate struct {
	AllowDate            *ItemDiscountCampaignEnableDate   `protobuf:"bytes,1,opt,name=allow_date,json=allowDate" json:"allow_date,omitempty"`
	AllowTimes           []*ItemDiscountCampaignEnableTime `protobuf:"bytes,2,rep,name=allow_times,json=allowTimes" json:"allow_times,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ItemDiscountCampaignApplyDate) Reset()         { *m = ItemDiscountCampaignApplyDate{} }
func (m *ItemDiscountCampaignApplyDate) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountCampaignApplyDate) ProtoMessage()    {}
func (*ItemDiscountCampaignApplyDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{148}
}
func (m *ItemDiscountCampaignApplyDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountCampaignApplyDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountCampaignApplyDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountCampaignApplyDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountCampaignApplyDate.Merge(m, src)
}
func (m *ItemDiscountCampaignApplyDate) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountCampaignApplyDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountCampaignApplyDate.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountCampaignApplyDate proto.InternalMessageInfo

func (m *ItemDiscountCampaignApplyDate) GetAllowDate() *ItemDiscountCampaignEnableDate {
	if m != nil {
		return m.AllowDate
	}
	return nil
}

func (m *ItemDiscountCampaignApplyDate) GetAllowTimes() []*ItemDiscountCampaignEnableTime {
	if m != nil {
		return m.AllowTimes
	}
	return nil
}

type ItemDiscountCampaignAppliedTimes struct {
	ApplyDates           []*ItemDiscountCampaignApplyDate `protobuf:"bytes,1,rep,name=apply_dates,json=applyDates" json:"apply_dates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ItemDiscountCampaignAppliedTimes) Reset()         { *m = ItemDiscountCampaignAppliedTimes{} }
func (m *ItemDiscountCampaignAppliedTimes) String() string { return proto.CompactTextString(m) }
func (*ItemDiscountCampaignAppliedTimes) ProtoMessage()    {}
func (*ItemDiscountCampaignAppliedTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{149}
}
func (m *ItemDiscountCampaignAppliedTimes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemDiscountCampaignAppliedTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemDiscountCampaignAppliedTimes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemDiscountCampaignAppliedTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemDiscountCampaignAppliedTimes.Merge(m, src)
}
func (m *ItemDiscountCampaignAppliedTimes) XXX_Size() int {
	return m.Size()
}
func (m *ItemDiscountCampaignAppliedTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemDiscountCampaignAppliedTimes.DiscardUnknown(m)
}

var xxx_messageInfo_ItemDiscountCampaignAppliedTimes proto.InternalMessageInfo

func (m *ItemDiscountCampaignAppliedTimes) GetApplyDates() []*ItemDiscountCampaignApplyDate {
	if m != nil {
		return m.ApplyDates
	}
	return nil
}

type RecruitmentSessionMaterialTemplate struct {
	Id                   *uint64                                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64                                     `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ChildIds             *string                                     `protobuf:"bytes,3,opt,name=child_ids,json=childIds" json:"child_ids,omitempty"`
	Name                 *string                                     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	TemplateValue        *string                                     `protobuf:"bytes,5,opt,name=template_value,json=templateValue" json:"template_value,omitempty"`
	BizType              *RecruitmentSessionMaterialTemplate_BizType `protobuf:"varint,6,opt,name=biz_type,json=bizType,enum=foody_base.RecruitmentSessionMaterialTemplate_BizType" json:"biz_type,omitempty"`
	BizId                *uint64                                     `protobuf:"varint,7,opt,name=biz_id,json=bizId" json:"biz_id,omitempty"`
	Error                *string                                     `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
	Status               *RecruitmentSessionMaterialTemplate_Status  `protobuf:"varint,9,opt,name=status,enum=foody_base.RecruitmentSessionMaterialTemplate_Status" json:"status,omitempty"`
	IsDeleted            *int32                                      `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	CreateTime           *uint64                                     `protobuf:"varint,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                     `protobuf:"varint,12,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *RecruitmentSessionMaterialTemplate) Reset()         { *m = RecruitmentSessionMaterialTemplate{} }
func (m *RecruitmentSessionMaterialTemplate) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionMaterialTemplate) ProtoMessage()    {}
func (*RecruitmentSessionMaterialTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{150}
}
func (m *RecruitmentSessionMaterialTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionMaterialTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionMaterialTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionMaterialTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionMaterialTemplate.Merge(m, src)
}
func (m *RecruitmentSessionMaterialTemplate) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionMaterialTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionMaterialTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionMaterialTemplate proto.InternalMessageInfo

func (m *RecruitmentSessionMaterialTemplate) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionMaterialTemplate) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionMaterialTemplate) GetChildIds() string {
	if m != nil && m.ChildIds != nil {
		return *m.ChildIds
	}
	return ""
}

func (m *RecruitmentSessionMaterialTemplate) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RecruitmentSessionMaterialTemplate) GetTemplateValue() string {
	if m != nil && m.TemplateValue != nil {
		return *m.TemplateValue
	}
	return ""
}

func (m *RecruitmentSessionMaterialTemplate) GetBizType() RecruitmentSessionMaterialTemplate_BizType {
	if m != nil && m.BizType != nil {
		return *m.BizType
	}
	return RecruitmentSessionMaterialTemplate_VOUCHER
}

func (m *RecruitmentSessionMaterialTemplate) GetBizId() uint64 {
	if m != nil && m.BizId != nil {
		return *m.BizId
	}
	return 0
}

func (m *RecruitmentSessionMaterialTemplate) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *RecruitmentSessionMaterialTemplate) GetStatus() RecruitmentSessionMaterialTemplate_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RecruitmentSessionMaterialTemplate_INIT
}

func (m *RecruitmentSessionMaterialTemplate) GetIsDeleted() int32 {
	if m != nil && m.IsDeleted != nil {
		return *m.IsDeleted
	}
	return 0
}

func (m *RecruitmentSessionMaterialTemplate) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionMaterialTemplate) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type RecruitmentSessionMerchant struct {
	Id                   *uint64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64             `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StoreId              *uint64             `protobuf:"varint,3,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	Status               *StoreSessionStatus `protobuf:"varint,4,opt,name=status,enum=foody_base.StoreSessionStatus" json:"status,omitempty"`
	Operator             *string             `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64             `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64             `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	TermsStatus          *SessionTermsStatus `protobuf:"varint,8,opt,name=terms_status,json=termsStatus,enum=foody_base.SessionTermsStatus" json:"terms_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RecruitmentSessionMerchant) Reset()         { *m = RecruitmentSessionMerchant{} }
func (m *RecruitmentSessionMerchant) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionMerchant) ProtoMessage()    {}
func (*RecruitmentSessionMerchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{151}
}
func (m *RecruitmentSessionMerchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionMerchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionMerchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionMerchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionMerchant.Merge(m, src)
}
func (m *RecruitmentSessionMerchant) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionMerchant) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionMerchant.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionMerchant proto.InternalMessageInfo

func (m *RecruitmentSessionMerchant) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionMerchant) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionMerchant) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *RecruitmentSessionMerchant) GetStatus() StoreSessionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return StoreSessionStatus_INVITED
}

func (m *RecruitmentSessionMerchant) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *RecruitmentSessionMerchant) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionMerchant) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *RecruitmentSessionMerchant) GetTermsStatus() SessionTermsStatus {
	if m != nil && m.TermsStatus != nil {
		return *m.TermsStatus
	}
	return SessionTermsStatus_UNREAD
}

type RecruitmentSessionRegistration struct {
	Id                   *uint64                                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64                                            `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MerchantId           *uint64                                            `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	MaterialType         *MaterialType                                      `protobuf:"varint,4,opt,name=material_type,json=materialType,enum=foody_base.MaterialType" json:"material_type,omitempty"`
	MaterialId           *uint64                                            `protobuf:"varint,5,opt,name=material_id,json=materialId" json:"material_id,omitempty"`
	OptionalId           *uint64                                            `protobuf:"varint,6,opt,name=optional_id,json=optionalId" json:"optional_id,omitempty"`
	Status               *RecruitmentSessionRegistration_RegistrationStatus `protobuf:"varint,7,opt,name=status,enum=foody_base.RecruitmentSessionRegistration_RegistrationStatus" json:"status,omitempty"`
	Reason               *string                                            `protobuf:"bytes,8,opt,name=reason" json:"reason,omitempty"`
	Source               *RecruitmentSessionRegistration_RegistrationSource `protobuf:"varint,9,opt,name=source,enum=foody_base.RecruitmentSessionRegistration_RegistrationSource" json:"source,omitempty"`
	BindStatus           *RecruitmentSessionRegistration_BindStatus         `protobuf:"varint,10,opt,name=bind_status,json=bindStatus,enum=foody_base.RecruitmentSessionRegistration_BindStatus" json:"bind_status,omitempty"`
	IsDeleted            *int32                                             `protobuf:"varint,11,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	RegisterTime         *uint64                                            `protobuf:"varint,12,opt,name=register_time,json=registerTime" json:"register_time,omitempty"`
	CreateTime           *uint64                                            `protobuf:"varint,13,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                            `protobuf:"varint,14,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *RecruitmentSessionRegistration) Reset()         { *m = RecruitmentSessionRegistration{} }
func (m *RecruitmentSessionRegistration) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionRegistration) ProtoMessage()    {}
func (*RecruitmentSessionRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{152}
}
func (m *RecruitmentSessionRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionRegistration.Merge(m, src)
}
func (m *RecruitmentSessionRegistration) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionRegistration proto.InternalMessageInfo

func (m *RecruitmentSessionRegistration) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetMaterialType() MaterialType {
	if m != nil && m.MaterialType != nil {
		return *m.MaterialType
	}
	return MaterialType_STORE
}

func (m *RecruitmentSessionRegistration) GetMaterialId() uint64 {
	if m != nil && m.MaterialId != nil {
		return *m.MaterialId
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetOptionalId() uint64 {
	if m != nil && m.OptionalId != nil {
		return *m.OptionalId
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetStatus() RecruitmentSessionRegistration_RegistrationStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RecruitmentSessionRegistration_INVITED
}

func (m *RecruitmentSessionRegistration) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *RecruitmentSessionRegistration) GetSource() RecruitmentSessionRegistration_RegistrationSource {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return RecruitmentSessionRegistration_MERCHANT
}

func (m *RecruitmentSessionRegistration) GetBindStatus() RecruitmentSessionRegistration_BindStatus {
	if m != nil && m.BindStatus != nil {
		return *m.BindStatus
	}
	return RecruitmentSessionRegistration_INIT
}

func (m *RecruitmentSessionRegistration) GetIsDeleted() int32 {
	if m != nil && m.IsDeleted != nil {
		return *m.IsDeleted
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetRegisterTime() uint64 {
	if m != nil && m.RegisterTime != nil {
		return *m.RegisterTime
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionRegistration) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type RecruitmentSessionMerchantExt struct {
	RecruitmentSessionMerchant *RecruitmentSessionMerchant `protobuf:"bytes,1,opt,name=recruitment_session_merchant,json=recruitmentSessionMerchant" json:"recruitment_session_merchant,omitempty"`
	OptionalId                 *uint64                     `protobuf:"varint,2,opt,name=optional_id,json=optionalId" json:"optional_id,omitempty"`
	OptionalName               *string                     `protobuf:"bytes,3,opt,name=optional_name,json=optionalName" json:"optional_name,omitempty"`
	StoreTagId                 *uint64                     `protobuf:"varint,4,opt,name=store_tag_id,json=storeTagId" json:"store_tag_id,omitempty"`
	TerminateReason            *string                     `protobuf:"bytes,5,opt,name=terminate_reason,json=terminateReason" json:"terminate_reason,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *RecruitmentSessionMerchantExt) Reset()         { *m = RecruitmentSessionMerchantExt{} }
func (m *RecruitmentSessionMerchantExt) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionMerchantExt) ProtoMessage()    {}
func (*RecruitmentSessionMerchantExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{153}
}
func (m *RecruitmentSessionMerchantExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionMerchantExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionMerchantExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionMerchantExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionMerchantExt.Merge(m, src)
}
func (m *RecruitmentSessionMerchantExt) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionMerchantExt) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionMerchantExt.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionMerchantExt proto.InternalMessageInfo

func (m *RecruitmentSessionMerchantExt) GetRecruitmentSessionMerchant() *RecruitmentSessionMerchant {
	if m != nil {
		return m.RecruitmentSessionMerchant
	}
	return nil
}

func (m *RecruitmentSessionMerchantExt) GetOptionalId() uint64 {
	if m != nil && m.OptionalId != nil {
		return *m.OptionalId
	}
	return 0
}

func (m *RecruitmentSessionMerchantExt) GetOptionalName() string {
	if m != nil && m.OptionalName != nil {
		return *m.OptionalName
	}
	return ""
}

func (m *RecruitmentSessionMerchantExt) GetStoreTagId() uint64 {
	if m != nil && m.StoreTagId != nil {
		return *m.StoreTagId
	}
	return 0
}

func (m *RecruitmentSessionMerchantExt) GetTerminateReason() string {
	if m != nil && m.TerminateReason != nil {
		return *m.TerminateReason
	}
	return ""
}

type RecruitmentSessionPage struct {
	Id                   *uint64                                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64                                     `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	WhyJoin              *string                                     `protobuf:"bytes,3,opt,name=why_join,json=whyJoin" json:"why_join,omitempty"`
	Faqs                 []*RecruitmentSessionPage_QuestionAndAnswer `protobuf:"bytes,4,rep,name=faqs" json:"faqs,omitempty"`
	Content              *string                                     `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	CreateTime           *uint64                                     `protobuf:"varint,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                     `protobuf:"varint,7,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *RecruitmentSessionPage) Reset()         { *m = RecruitmentSessionPage{} }
func (m *RecruitmentSessionPage) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionPage) ProtoMessage()    {}
func (*RecruitmentSessionPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{154}
}
func (m *RecruitmentSessionPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionPage.Merge(m, src)
}
func (m *RecruitmentSessionPage) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionPage) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionPage.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionPage proto.InternalMessageInfo

func (m *RecruitmentSessionPage) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionPage) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionPage) GetWhyJoin() string {
	if m != nil && m.WhyJoin != nil {
		return *m.WhyJoin
	}
	return ""
}

func (m *RecruitmentSessionPage) GetFaqs() []*RecruitmentSessionPage_QuestionAndAnswer {
	if m != nil {
		return m.Faqs
	}
	return nil
}

func (m *RecruitmentSessionPage) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *RecruitmentSessionPage) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionPage) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type RecruitmentSessionPage_QuestionAndAnswer struct {
	Question             *string  `protobuf:"bytes,1,opt,name=question" json:"question,omitempty"`
	Answer               *string  `protobuf:"bytes,2,opt,name=answer" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) Reset() {
	*m = RecruitmentSessionPage_QuestionAndAnswer{}
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionPage_QuestionAndAnswer) ProtoMessage()    {}
func (*RecruitmentSessionPage_QuestionAndAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{154, 0}
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionPage_QuestionAndAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionPage_QuestionAndAnswer.Merge(m, src)
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionPage_QuestionAndAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionPage_QuestionAndAnswer proto.InternalMessageInfo

func (m *RecruitmentSessionPage_QuestionAndAnswer) GetQuestion() string {
	if m != nil && m.Question != nil {
		return *m.Question
	}
	return ""
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

type RecruitmentSession struct {
	Id                   *uint64                                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string                                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                 *RecruitmentSession_RecruitmentSessionType   `protobuf:"varint,3,opt,name=type,enum=foody_base.RecruitmentSession_RecruitmentSessionType" json:"type,omitempty"`
	Status               *RecruitmentSession_RecruitmentSessionStatus `protobuf:"varint,4,opt,name=status,enum=foody_base.RecruitmentSession_RecruitmentSessionStatus" json:"status,omitempty"`
	IsDeleted            *uint32                                      `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	RegisterStartTime    *uint64                                      `protobuf:"varint,6,opt,name=register_start_time,json=registerStartTime" json:"register_start_time,omitempty"`
	RegisterEndTime      *uint64                                      `protobuf:"varint,7,opt,name=register_end_time,json=registerEndTime" json:"register_end_time,omitempty"`
	RunningStartTime     *uint64                                      `protobuf:"varint,8,opt,name=running_start_time,json=runningStartTime" json:"running_start_time,omitempty"`
	RunningEndTime       *uint64                                      `protobuf:"varint,9,opt,name=running_end_time,json=runningEndTime" json:"running_end_time,omitempty"`
	UniqueKey            *string                                      `protobuf:"bytes,10,opt,name=unique_key,json=uniqueKey" json:"unique_key,omitempty"`
	MainBanner           *string                                      `protobuf:"bytes,11,opt,name=main_banner,json=mainBanner" json:"main_banner,omitempty"`
	PromotionListImage   *string                                      `protobuf:"bytes,12,opt,name=promotion_list_image,json=promotionListImage" json:"promotion_list_image,omitempty"`
	Desc                 *string                                      `protobuf:"bytes,13,opt,name=desc" json:"desc,omitempty"`
	Labels               *string                                      `protobuf:"bytes,14,opt,name=labels" json:"labels,omitempty"`
	Operator             *string                                      `protobuf:"bytes,15,opt,name=operator" json:"operator,omitempty"`
	CreateTime           *uint64                                      `protobuf:"varint,16,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                                      `protobuf:"varint,17,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Page                 *RecruitmentSessionPage                      `protobuf:"bytes,18,opt,name=page" json:"page,omitempty"`
	Templates            []*RecruitmentSessionMaterialTemplate        `protobuf:"bytes,19,rep,name=templates" json:"templates,omitempty"`
	InvitedStoreFile_Url *string                                      `protobuf:"bytes,20,opt,name=invited_store_file_Url,json=invitedStoreFileUrl" json:"invited_store_file_Url,omitempty"`
	BandStatus           *int32                                       `protobuf:"varint,21,opt,name=band_status,json=bandStatus" json:"band_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *RecruitmentSession) Reset()         { *m = RecruitmentSession{} }
func (m *RecruitmentSession) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSession) ProtoMessage()    {}
func (*RecruitmentSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{155}
}
func (m *RecruitmentSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSession.Merge(m, src)
}
func (m *RecruitmentSession) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSession) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSession.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSession proto.InternalMessageInfo

func (m *RecruitmentSession) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSession) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *RecruitmentSession) GetType() RecruitmentSession_RecruitmentSessionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RecruitmentSession_ITEM_DISCOUNT
}

func (m *RecruitmentSession) GetStatus() RecruitmentSession_RecruitmentSessionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RecruitmentSession_UPCOMING
}

func (m *RecruitmentSession) GetIsDeleted() uint32 {
	if m != nil && m.IsDeleted != nil {
		return *m.IsDeleted
	}
	return 0
}

func (m *RecruitmentSession) GetRegisterStartTime() uint64 {
	if m != nil && m.RegisterStartTime != nil {
		return *m.RegisterStartTime
	}
	return 0
}

func (m *RecruitmentSession) GetRegisterEndTime() uint64 {
	if m != nil && m.RegisterEndTime != nil {
		return *m.RegisterEndTime
	}
	return 0
}

func (m *RecruitmentSession) GetRunningStartTime() uint64 {
	if m != nil && m.RunningStartTime != nil {
		return *m.RunningStartTime
	}
	return 0
}

func (m *RecruitmentSession) GetRunningEndTime() uint64 {
	if m != nil && m.RunningEndTime != nil {
		return *m.RunningEndTime
	}
	return 0
}

func (m *RecruitmentSession) GetUniqueKey() string {
	if m != nil && m.UniqueKey != nil {
		return *m.UniqueKey
	}
	return ""
}

func (m *RecruitmentSession) GetMainBanner() string {
	if m != nil && m.MainBanner != nil {
		return *m.MainBanner
	}
	return ""
}

func (m *RecruitmentSession) GetPromotionListImage() string {
	if m != nil && m.PromotionListImage != nil {
		return *m.PromotionListImage
	}
	return ""
}

func (m *RecruitmentSession) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *RecruitmentSession) GetLabels() string {
	if m != nil && m.Labels != nil {
		return *m.Labels
	}
	return ""
}

func (m *RecruitmentSession) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *RecruitmentSession) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSession) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *RecruitmentSession) GetPage() *RecruitmentSessionPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RecruitmentSession) GetTemplates() []*RecruitmentSessionMaterialTemplate {
	if m != nil {
		return m.Templates
	}
	return nil
}

func (m *RecruitmentSession) GetInvitedStoreFile_Url() string {
	if m != nil && m.InvitedStoreFile_Url != nil {
		return *m.InvitedStoreFile_Url
	}
	return ""
}

func (m *RecruitmentSession) GetBandStatus() int32 {
	if m != nil && m.BandStatus != nil {
		return *m.BandStatus
	}
	return 0
}

type VoucherPackageTemplate struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Benefits             []string `protobuf:"bytes,2,rep,name=benefits" json:"benefits,omitempty"`
	StoreTagId           *uint64  `protobuf:"varint,3,opt,name=store_tag_id,json=storeTagId" json:"store_tag_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoucherPackageTemplate) Reset()         { *m = VoucherPackageTemplate{} }
func (m *VoucherPackageTemplate) String() string { return proto.CompactTextString(m) }
func (*VoucherPackageTemplate) ProtoMessage()    {}
func (*VoucherPackageTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{156}
}
func (m *VoucherPackageTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoucherPackageTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoucherPackageTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoucherPackageTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoucherPackageTemplate.Merge(m, src)
}
func (m *VoucherPackageTemplate) XXX_Size() int {
	return m.Size()
}
func (m *VoucherPackageTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_VoucherPackageTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_VoucherPackageTemplate proto.InternalMessageInfo

func (m *VoucherPackageTemplate) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VoucherPackageTemplate) GetBenefits() []string {
	if m != nil {
		return m.Benefits
	}
	return nil
}

func (m *VoucherPackageTemplate) GetStoreTagId() uint64 {
	if m != nil && m.StoreTagId != nil {
		return *m.StoreTagId
	}
	return 0
}

type RecruitmentSessionTask struct {
	Id                   *uint64                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64                            `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	TaskName             *string                            `protobuf:"bytes,3,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	TaskType             *RecruitmentSessionTask_TaskType   `protobuf:"varint,4,opt,name=task_type,json=taskType,enum=foody_base.RecruitmentSessionTask_TaskType" json:"task_type,omitempty"`
	Status               *RecruitmentSessionTask_TaskStatus `protobuf:"varint,5,opt,name=status,enum=foody_base.RecruitmentSessionTask_TaskStatus" json:"status,omitempty"`
	UploadFileUrl        *string                            `protobuf:"bytes,6,opt,name=upload_file_url,json=uploadFileUrl" json:"upload_file_url,omitempty"`
	ErrorFileUrl         *string                            `protobuf:"bytes,7,opt,name=error_file_url,json=errorFileUrl" json:"error_file_url,omitempty"`
	CreateTime           *uint64                            `protobuf:"varint,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64                            `protobuf:"varint,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *RecruitmentSessionTask) Reset()         { *m = RecruitmentSessionTask{} }
func (m *RecruitmentSessionTask) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionTask) ProtoMessage()    {}
func (*RecruitmentSessionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{157}
}
func (m *RecruitmentSessionTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionTask.Merge(m, src)
}
func (m *RecruitmentSessionTask) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionTask.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionTask proto.InternalMessageInfo

func (m *RecruitmentSessionTask) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionTask) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionTask) GetTaskName() string {
	if m != nil && m.TaskName != nil {
		return *m.TaskName
	}
	return ""
}

func (m *RecruitmentSessionTask) GetTaskType() RecruitmentSessionTask_TaskType {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return RecruitmentSessionTask_INVITED_STORE_SAVE_CHECK
}

func (m *RecruitmentSessionTask) GetStatus() RecruitmentSessionTask_TaskStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RecruitmentSessionTask_ONGOING
}

func (m *RecruitmentSessionTask) GetUploadFileUrl() string {
	if m != nil && m.UploadFileUrl != nil {
		return *m.UploadFileUrl
	}
	return ""
}

func (m *RecruitmentSessionTask) GetErrorFileUrl() string {
	if m != nil && m.ErrorFileUrl != nil {
		return *m.ErrorFileUrl
	}
	return ""
}

func (m *RecruitmentSessionTask) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionTask) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

type RecruitmentSessionPromotionSummary struct {
	StoreId                   *uint64  `protobuf:"varint,1,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	CampaignId                *uint64  `protobuf:"varint,2,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	Dt                        *string  `protobuf:"bytes,3,opt,name=dt" json:"dt,omitempty"`
	UsedVoucherOrders         *uint64  `protobuf:"varint,4,opt,name=used_voucher_orders,json=usedVoucherOrders" json:"used_voucher_orders,omitempty"`
	TotalVoucherOrdersRevenue *uint64  `protobuf:"varint,5,opt,name=total_voucher_orders_revenue,json=totalVoucherOrdersRevenue" json:"total_voucher_orders_revenue,omitempty"`
	AllOrders                 *uint64  `protobuf:"varint,6,opt,name=all_orders,json=allOrders" json:"all_orders,omitempty"`
	NewCustomers              *uint64  `protobuf:"varint,7,opt,name=new_customers,json=newCustomers" json:"new_customers,omitempty"`
	Subsidy                   *uint64  `protobuf:"varint,8,opt,name=subsidy" json:"subsidy,omitempty"`
	UsedVoucherDishes         *uint64  `protobuf:"varint,9,opt,name=used_voucher_dishes,json=usedVoucherDishes" json:"used_voucher_dishes,omitempty"`
	UsedVoucherCount          *uint64  `protobuf:"varint,10,opt,name=used_voucher_count,json=usedVoucherCount" json:"used_voucher_count,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *RecruitmentSessionPromotionSummary) Reset()         { *m = RecruitmentSessionPromotionSummary{} }
func (m *RecruitmentSessionPromotionSummary) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionPromotionSummary) ProtoMessage()    {}
func (*RecruitmentSessionPromotionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{158}
}
func (m *RecruitmentSessionPromotionSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionPromotionSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionPromotionSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionPromotionSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionPromotionSummary.Merge(m, src)
}
func (m *RecruitmentSessionPromotionSummary) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionPromotionSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionPromotionSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionPromotionSummary proto.InternalMessageInfo

func (m *RecruitmentSessionPromotionSummary) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetCampaignId() uint64 {
	if m != nil && m.CampaignId != nil {
		return *m.CampaignId
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetDt() string {
	if m != nil && m.Dt != nil {
		return *m.Dt
	}
	return ""
}

func (m *RecruitmentSessionPromotionSummary) GetUsedVoucherOrders() uint64 {
	if m != nil && m.UsedVoucherOrders != nil {
		return *m.UsedVoucherOrders
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetTotalVoucherOrdersRevenue() uint64 {
	if m != nil && m.TotalVoucherOrdersRevenue != nil {
		return *m.TotalVoucherOrdersRevenue
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetAllOrders() uint64 {
	if m != nil && m.AllOrders != nil {
		return *m.AllOrders
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetNewCustomers() uint64 {
	if m != nil && m.NewCustomers != nil {
		return *m.NewCustomers
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetSubsidy() uint64 {
	if m != nil && m.Subsidy != nil {
		return *m.Subsidy
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetUsedVoucherDishes() uint64 {
	if m != nil && m.UsedVoucherDishes != nil {
		return *m.UsedVoucherDishes
	}
	return 0
}

func (m *RecruitmentSessionPromotionSummary) GetUsedVoucherCount() uint64 {
	if m != nil && m.UsedVoucherCount != nil {
		return *m.UsedVoucherCount
	}
	return 0
}

type RecruitmentVoucherPackageRegisterCount struct {
	SessionId            *uint64  `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	OptionId             *uint64  `protobuf:"varint,2,opt,name=option_id,json=optionId" json:"option_id,omitempty"`
	RegisterCount        *uint64  `protobuf:"varint,3,opt,name=register_count,json=registerCount" json:"register_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecruitmentVoucherPackageRegisterCount) Reset() {
	*m = RecruitmentVoucherPackageRegisterCount{}
}
func (m *RecruitmentVoucherPackageRegisterCount) String() string { return proto.CompactTextString(m) }
func (*RecruitmentVoucherPackageRegisterCount) ProtoMessage()    {}
func (*RecruitmentVoucherPackageRegisterCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{159}
}
func (m *RecruitmentVoucherPackageRegisterCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentVoucherPackageRegisterCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentVoucherPackageRegisterCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentVoucherPackageRegisterCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentVoucherPackageRegisterCount.Merge(m, src)
}
func (m *RecruitmentVoucherPackageRegisterCount) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentVoucherPackageRegisterCount) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentVoucherPackageRegisterCount.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentVoucherPackageRegisterCount proto.InternalMessageInfo

func (m *RecruitmentVoucherPackageRegisterCount) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentVoucherPackageRegisterCount) GetOptionId() uint64 {
	if m != nil && m.OptionId != nil {
		return *m.OptionId
	}
	return 0
}

func (m *RecruitmentVoucherPackageRegisterCount) GetRegisterCount() uint64 {
	if m != nil && m.RegisterCount != nil {
		return *m.RegisterCount
	}
	return 0
}

type RecruitmentSessionReport struct {
	Id                   *uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionId            *uint64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	MerchantId           *uint64  `protobuf:"varint,3,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	StoreId              *uint64  `protobuf:"varint,4,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	MaterialTemplateId   *uint64  `protobuf:"varint,5,opt,name=material_template_id,json=materialTemplateId" json:"material_template_id,omitempty"`
	ReportUrl            *string  `protobuf:"bytes,6,opt,name=report_url,json=reportUrl" json:"report_url,omitempty"`
	ReportStatus         *uint32  `protobuf:"varint,7,opt,name=report_status,json=reportStatus" json:"report_status,omitempty"`
	ReportError          *string  `protobuf:"bytes,8,opt,name=report_error,json=reportError" json:"report_error,omitempty"`
	Md5                  *string  `protobuf:"bytes,9,opt,name=md5" json:"md5,omitempty"`
	CreateTime           *uint64  `protobuf:"varint,10,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime           *uint64  `protobuf:"varint,11,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecruitmentSessionReport) Reset()         { *m = RecruitmentSessionReport{} }
func (m *RecruitmentSessionReport) String() string { return proto.CompactTextString(m) }
func (*RecruitmentSessionReport) ProtoMessage()    {}
func (*RecruitmentSessionReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_126df3da343af93d, []int{160}
}
func (m *RecruitmentSessionReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentSessionReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentSessionReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentSessionReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentSessionReport.Merge(m, src)
}
func (m *RecruitmentSessionReport) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentSessionReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentSessionReport.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentSessionReport proto.InternalMessageInfo

func (m *RecruitmentSessionReport) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RecruitmentSessionReport) GetSessionId() uint64 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *RecruitmentSessionReport) GetMerchantId() uint64 {
	if m != nil && m.MerchantId != nil {
		return *m.MerchantId
	}
	return 0
}

func (m *RecruitmentSessionReport) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

func (m *RecruitmentSessionReport) GetMaterialTemplateId() uint64 {
	if m != nil && m.MaterialTemplateId != nil {
		return *m.MaterialTemplateId
	}
	return 0
}

func (m *RecruitmentSessionReport) GetReportUrl() string {
	if m != nil && m.ReportUrl != nil {
		return *m.ReportUrl
	}
	return ""
}

func (m *RecruitmentSessionReport) GetReportStatus() uint32 {
	if m != nil && m.ReportStatus != nil {
		return *m.ReportStatus
	}
	return 0
}

func (m *RecruitmentSessionReport) GetReportError() string {
	if m != nil && m.ReportError != nil {
		return *m.ReportError
	}
	return ""
}

func (m *RecruitmentSessionReport) GetMd5() string {
	if m != nil && m.Md5 != nil {
		return *m.Md5
	}
	return ""
}

func (m *RecruitmentSessionReport) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *RecruitmentSessionReport) GetUpdateTime() uint64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("foody_base.Available", Available_name, Available_value)
	proto.RegisterEnum("foody_base.ShelveState", ShelveState_name, ShelveState_value)
	proto.RegisterEnum("foody_base.OptionSelectMode", OptionSelectMode_name, OptionSelectMode_value)
	proto.RegisterEnum("foody_base.CartItemStatus", CartItemStatus_name, CartItemStatus_value)
	proto.RegisterEnum("foody_base.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("foody_base.SPXOrderShowStatus", SPXOrderShowStatus_name, SPXOrderShowStatus_value)
	proto.RegisterEnum("foody_base.SPXOrderStatus", SPXOrderStatus_name, SPXOrderStatus_value)
	proto.RegisterEnum("foody_base.PaymentPlatform", PaymentPlatform_name, PaymentPlatform_value)
	proto.RegisterEnum("foody_base.PaymentMethod", PaymentMethod_name, PaymentMethod_value)
	proto.RegisterEnum("foody_base.PaymentStatus", PaymentStatus_name, PaymentStatus_value)
	proto.RegisterEnum("foody_base.RefundStatus", RefundStatus_name, RefundStatus_value)
	proto.RegisterEnum("foody_base.OrderSource", OrderSource_name, OrderSource_value)
	proto.RegisterEnum("foody_base.CancelSource", CancelSource_name, CancelSource_value)
	proto.RegisterEnum("foody_base.RewriteSource", RewriteSource_name, RewriteSource_value)
	proto.RegisterEnum("foody_base.ReturnSource", ReturnSource_name, ReturnSource_value)
	proto.RegisterEnum("foody_base.CancelReason", CancelReason_name, CancelReason_value)
	proto.RegisterEnum("foody_base.DeliveryStatus", DeliveryStatus_name, DeliveryStatus_value)
	proto.RegisterEnum("foody_base.DriverDeliveryStatus", DriverDeliveryStatus_name, DriverDeliveryStatus_value)
	proto.RegisterEnum("foody_base.PartnerType", PartnerType_name, PartnerType_value)
	proto.RegisterEnum("foody_base.StoreStatus", StoreStatus_name, StoreStatus_value)
	proto.RegisterEnum("foody_base.DisplayOpeningStatus", DisplayOpeningStatus_name, DisplayOpeningStatus_value)
	proto.RegisterEnum("foody_base.WalletStatus", WalletStatus_name, WalletStatus_value)
	proto.RegisterEnum("foody_base.PayoutMode", PayoutMode_name, PayoutMode_value)
	proto.RegisterEnum("foody_base.WalletType", WalletType_name, WalletType_value)
	proto.RegisterEnum("foody_base.TransactionType", TransactionType_name, TransactionType_value)
	proto.RegisterEnum("foody_base.RecordTag", RecordTag_name, RecordTag_value)
	proto.RegisterEnum("foody_base.SettlementSource", SettlementSource_name, SettlementSource_value)
	proto.RegisterEnum("foody_base.SettlementErrorCode", SettlementErrorCode_name, SettlementErrorCode_value)
	proto.RegisterEnum("foody_base.SettlementMode", SettlementMode_name, SettlementMode_value)
	proto.RegisterEnum("foody_base.SettlementStatus", SettlementStatus_name, SettlementStatus_value)
	proto.RegisterEnum("foody_base.SettlementCancelReason", SettlementCancelReason_name, SettlementCancelReason_value)
	proto.RegisterEnum("foody_base.SettlementType", SettlementType_name, SettlementType_value)
	proto.RegisterEnum("foody_base.ReferenceType", ReferenceType_name, ReferenceType_value)
	proto.RegisterEnum("foody_base.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("foody_base.RelationType", RelationType_name, RelationType_value)
	proto.RegisterEnum("foody_base.Source", Source_name, Source_value)
	proto.RegisterEnum("foody_base.Responsibility", Responsibility_name, Responsibility_value)
	proto.RegisterEnum("foody_base.Proposer", Proposer_name, Proposer_value)
	proto.RegisterEnum("foody_base.EntityType", EntityType_name, EntityType_value)
	proto.RegisterEnum("foody_base.ChangeType", ChangeType_name, ChangeType_value)
	proto.RegisterEnum("foody_base.OS", OS_name, OS_value)
	proto.RegisterEnum("foody_base.PushType", PushType_name, PushType_value)
	proto.RegisterEnum("foody_base.MassType", MassType_name, MassType_value)
	proto.RegisterEnum("foody_base.MassChangeLogType", MassChangeLogType_name, MassChangeLogType_value)
	proto.RegisterEnum("foody_base.Enabled", Enabled_name, Enabled_value)
	proto.RegisterEnum("foody_base.ChargebackStatus", ChargebackStatus_name, ChargebackStatus_value)
	proto.RegisterEnum("foody_base.StoreChargebackMethod", StoreChargebackMethod_name, StoreChargebackMethod_value)
	proto.RegisterEnum("foody_base.StoreChargeBackType", StoreChargeBackType_name, StoreChargeBackType_value)
	proto.RegisterEnum("foody_base.QualitySource", QualitySource_name, QualitySource_value)
	proto.RegisterEnum("foody_base.DishListingStatus", DishListingStatus_name, DishListingStatus_value)
	proto.RegisterEnum("foody_base.DishSaleStatus", DishSaleStatus_name, DishSaleStatus_value)
	proto.RegisterEnum("foody_base.StoreListingSource", StoreListingSource_name, StoreListingSource_value)
	proto.RegisterEnum("foody_base.VoucherPaymentType", VoucherPaymentType_name, VoucherPaymentType_value)
	proto.RegisterEnum("foody_base.DeliveryMode", DeliveryMode_name, DeliveryMode_value)
	proto.RegisterEnum("foody_base.CategoryType", CategoryType_name, CategoryType_value)
	proto.RegisterEnum("foody_base.StoreCategoryFirstLevel", StoreCategoryFirstLevel_name, StoreCategoryFirstLevel_value)
	proto.RegisterEnum("foody_base.StoreCategorySecondLevel", StoreCategorySecondLevel_name, StoreCategorySecondLevel_value)
	proto.RegisterEnum("foody_base.BankAccountStatus", BankAccountStatus_name, BankAccountStatus_value)
	proto.RegisterEnum("foody_base.SettlementMethod", SettlementMethod_name, SettlementMethod_value)
	proto.RegisterEnum("foody_base.PaymentWay", PaymentWay_name, PaymentWay_value)
	proto.RegisterEnum("foody_base.Vat", Vat_name, Vat_value)
	proto.RegisterEnum("foody_base.Wht", Wht_name, Wht_value)
	proto.RegisterEnum("foody_base.VatCalculate", VatCalculate_name, VatCalculate_value)
	proto.RegisterEnum("foody_base.PayoutMethod", PayoutMethod_name, PayoutMethod_value)
	proto.RegisterEnum("foody_base.CrossMonthSettlement", CrossMonthSettlement_name, CrossMonthSettlement_value)
	proto.RegisterEnum("foody_base.StoreWhitelistType", StoreWhitelistType_name, StoreWhitelistType_value)
	proto.RegisterEnum("foody_base.WithdrawalChannelType", WithdrawalChannelType_name, WithdrawalChannelType_value)
	proto.RegisterEnum("foody_base.VoucherStatus", VoucherStatus_name, VoucherStatus_value)
	proto.RegisterEnum("foody_base.VoucherDistributionMethod", VoucherDistributionMethod_name, VoucherDistributionMethod_value)
	proto.RegisterEnum("foody_base.VoucherQuotaStatus", VoucherQuotaStatus_name, VoucherQuotaStatus_value)
	proto.RegisterEnum("foody_base.VoucherTimeStatus", VoucherTimeStatus_name, VoucherTimeStatus_value)
	proto.RegisterEnum("foody_base.VoucherRewardType", VoucherRewardType_name, VoucherRewardType_value)
	proto.RegisterEnum("foody_base.Voucher_Source", Voucher_Source_name, Voucher_Source_value)
	proto.RegisterEnum("foody_base.Voucher_Type", Voucher_Type_name, Voucher_Type_value)
	proto.RegisterEnum("foody_base.VoucherTaskType", VoucherTaskType_name, VoucherTaskType_value)
	proto.RegisterEnum("foody_base.VoucherTaskStatus", VoucherTaskStatus_name, VoucherTaskStatus_value)
	proto.RegisterEnum("foody_base.ItemDiscountCreatorSource", ItemDiscountCreatorSource_name, ItemDiscountCreatorSource_value)
	proto.RegisterEnum("foody_base.DiscountType", DiscountType_name, DiscountType_value)
	proto.RegisterEnum("foody_base.ItemDiscountType", ItemDiscountType_name, ItemDiscountType_value)
	proto.RegisterEnum("foody_base.ContentRuleLogic", ContentRuleLogic_name, ContentRuleLogic_value)
	proto.RegisterEnum("foody_base.SellerAuthority", SellerAuthority_name, SellerAuthority_value)
	proto.RegisterEnum("foody_base.MerchantWalletType", MerchantWalletType_name, MerchantWalletType_value)
	proto.RegisterEnum("foody_base.ExpressStatus", ExpressStatus_name, ExpressStatus_value)
	proto.RegisterEnum("foody_base.ExpressAssignmentStatus", ExpressAssignmentStatus_name, ExpressAssignmentStatus_value)
	proto.RegisterEnum("foody_base.ExpressDeliveryStatus", ExpressDeliveryStatus_name, ExpressDeliveryStatus_value)
	proto.RegisterEnum("foody_base.ExpressPackageStatus", ExpressPackageStatus_name, ExpressPackageStatus_value)
	proto.RegisterEnum("foody_base.PackageCategory", PackageCategory_name, PackageCategory_value)
	proto.RegisterEnum("foody_base.PayType", PayType_name, PayType_value)
	proto.RegisterEnum("foody_base.SPXCancelReason", SPXCancelReason_name, SPXCancelReason_value)
	proto.RegisterEnum("foody_base.SPXCancelOrderType", SPXCancelOrderType_name, SPXCancelOrderType_value)
	proto.RegisterEnum("foody_base.ExpressCompleteReason", ExpressCompleteReason_name, ExpressCompleteReason_value)
	proto.RegisterEnum("foody_base.ExpressReturnReason", ExpressReturnReason_name, ExpressReturnReason_value)
	proto.RegisterEnum("foody_base.UseStatus", UseStatus_name, UseStatus_value)
	proto.RegisterEnum("foody_base.SPXOrderTracingStatus", SPXOrderTracingStatus_name, SPXOrderTracingStatus_value)
	proto.RegisterEnum("foody_base.FlashSaleDishStatus", FlashSaleDishStatus_name, FlashSaleDishStatus_value)
	proto.RegisterEnum("foody_base.SettleTo", SettleTo_name, SettleTo_value)
	proto.RegisterEnum("foody_base.ItemDiscountCampaignGoingStatus", ItemDiscountCampaignGoingStatus_name, ItemDiscountCampaignGoingStatus_value)
	proto.RegisterEnum("foody_base.StoreSessionStatus", StoreSessionStatus_name, StoreSessionStatus_value)
	proto.RegisterEnum("foody_base.SessionTermsStatus", SessionTermsStatus_name, SessionTermsStatus_value)
	proto.RegisterEnum("foody_base.MaterialType", MaterialType_name, MaterialType_value)
	proto.RegisterEnum("foody_base.AsyncTask_Type", AsyncTask_Type_name, AsyncTask_Type_value)
	proto.RegisterEnum("foody_base.AsyncTask_Status", AsyncTask_Status_name, AsyncTask_Status_value)
	proto.RegisterEnum("foody_base.Dish_FlagBit", Dish_FlagBit_name, Dish_FlagBit_value)
	proto.RegisterEnum("foody_base.OptionGroup_Flag_Bit", OptionGroup_Flag_Bit_name, OptionGroup_Flag_Bit_value)
	proto.RegisterEnum("foody_base.CartItemDetail_DiscountType", CartItemDetail_DiscountType_name, CartItemDetail_DiscountType_value)
	proto.RegisterEnum("foody_base.Order_OrderItemStatus", Order_OrderItemStatus_name, Order_OrderItemStatus_value)
	proto.RegisterEnum("foody_base.Order_FlagBit", Order_FlagBit_name, Order_FlagBit_value)
	proto.RegisterEnum("foody_base.Order_RewriteType", Order_RewriteType_name, Order_RewriteType_value)
	proto.RegisterEnum("foody_base.Order_RewriteReason", Order_RewriteReason_name, Order_RewriteReason_value)
	proto.RegisterEnum("foody_base.Order_Promotion_Flag_Bit", Order_Promotion_Flag_Bit_name, Order_Promotion_Flag_Bit_value)
	proto.RegisterEnum("foody_base.DeliveryOrder_AssignType", DeliveryOrder_AssignType_name, DeliveryOrder_AssignType_value)
	proto.RegisterEnum("foody_base.DeliveryOrder_AdvanceDepositRefundStatus", DeliveryOrder_AdvanceDepositRefundStatus_name, DeliveryOrder_AdvanceDepositRefundStatus_value)
	proto.RegisterEnum("foody_base.DeliveryOrder_FlagBit", DeliveryOrder_FlagBit_name, DeliveryOrder_FlagBit_value)
	proto.RegisterEnum("foody_base.DeliveryOrder_AdvanceDeposit_Status", DeliveryOrder_AdvanceDeposit_Status_name, DeliveryOrder_AdvanceDeposit_Status_value)
	proto.RegisterEnum("foody_base.DeliveryOrder_DepositRefund_Status", DeliveryOrder_DepositRefund_Status_name, DeliveryOrder_DepositRefund_Status_value)
	proto.RegisterEnum("foody_base.Payment_Type", Payment_Type_name, Payment_Type_value)
	proto.RegisterEnum("foody_base.Store_WalletStatus", Store_WalletStatus_name, Store_WalletStatus_value)
	proto.RegisterEnum("foody_base.Store_AppStatus", Store_AppStatus_name, Store_AppStatus_value)
	proto.RegisterEnum("foody_base.Store_AutoConfirmed", Store_AutoConfirmed_name, Store_AutoConfirmed_value)
	proto.RegisterEnum("foody_base.Store_AutoConfirmedEnabled", Store_AutoConfirmedEnabled_name, Store_AutoConfirmedEnabled_value)
	proto.RegisterEnum("foody_base.Store_DeliveryDistanceMode", Store_DeliveryDistanceMode_name, Store_DeliveryDistanceMode_value)
	proto.RegisterEnum("foody_base.Store_ModifyOrderMode", Store_ModifyOrderMode_name, Store_ModifyOrderMode_value)
	proto.RegisterEnum("foody_base.Store_StatusReason", Store_StatusReason_name, Store_StatusReason_value)
	proto.RegisterEnum("foody_base.Store_SettleTo", Store_SettleTo_name, Store_SettleTo_value)
	proto.RegisterEnum("foody_base.Store_HalalType", Store_HalalType_name, Store_HalalType_value)
	proto.RegisterEnum("foody_base.Store_ServiceFeeMode", Store_ServiceFeeMode_name, Store_ServiceFeeMode_value)
	proto.RegisterEnum("foody_base.Store_DFFMode", Store_DFFMode_name, Store_DFFMode_value)
	proto.RegisterEnum("foody_base.Store_DFFSetting", Store_DFFSetting_name, Store_DFFSetting_value)
	proto.RegisterEnum("foody_base.Store_MaxDelayTimeMode", Store_MaxDelayTimeMode_name, Store_MaxDelayTimeMode_value)
	proto.RegisterEnum("foody_base.Store_StatusInAdmin", Store_StatusInAdmin_name, Store_StatusInAdmin_value)
	proto.RegisterEnum("foody_base.Store_DeliveryMethod", Store_DeliveryMethod_name, Store_DeliveryMethod_value)
	proto.RegisterEnum("foody_base.Store_ConfigStatus", Store_ConfigStatus_name, Store_ConfigStatus_value)
	proto.RegisterEnum("foody_base.Store_SmallOrderFeeMode", Store_SmallOrderFeeMode_name, Store_SmallOrderFeeMode_value)
	proto.RegisterEnum("foody_base.Store_Flag_FlagBit", Store_Flag_FlagBit_name, Store_Flag_FlagBit_value)
	proto.RegisterEnum("foody_base.Store_Flag_OvertimeOrderMode", Store_Flag_OvertimeOrderMode_name, Store_Flag_OvertimeOrderMode_value)
	proto.RegisterEnum("foody_base.StoreMin_WalletStatus", StoreMin_WalletStatus_name, StoreMin_WalletStatus_value)
	proto.RegisterEnum("foody_base.StoreMin_AppStatus", StoreMin_AppStatus_name, StoreMin_AppStatus_value)
	proto.RegisterEnum("foody_base.StoreMin_AutoConfirmed", StoreMin_AutoConfirmed_name, StoreMin_AutoConfirmed_value)
	proto.RegisterEnum("foody_base.StoreMin_AutoConfirmedEnabled", StoreMin_AutoConfirmedEnabled_name, StoreMin_AutoConfirmedEnabled_value)
	proto.RegisterEnum("foody_base.OpeningStatus_PauseType", OpeningStatus_PauseType_name, OpeningStatus_PauseType_value)
	proto.RegisterEnum("foody_base.OpeningStatus_Status", OpeningStatus_Status_name, OpeningStatus_Status_value)
	proto.RegisterEnum("foody_base.OpeningStatus_CloseType", OpeningStatus_CloseType_name, OpeningStatus_CloseType_value)
	proto.RegisterEnum("foody_base.Merchant_WalletStatus", Merchant_WalletStatus_name, Merchant_WalletStatus_value)
	proto.RegisterEnum("foody_base.Merchant_ConfigStatus", Merchant_ConfigStatus_name, Merchant_ConfigStatus_value)
	proto.RegisterEnum("foody_base.Merchant_MerchantStatus", Merchant_MerchantStatus_name, Merchant_MerchantStatus_value)
	proto.RegisterEnum("foody_base.TagType_Status", TagType_Status_name, TagType_Status_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_Type", DriverWalletOrder_Type_name, DriverWalletOrder_Type_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_Status", DriverWalletOrder_Status_name, DriverWalletOrder_Status_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_AdjustReason", DriverWalletOrder_AdjustReason_name, DriverWalletOrder_AdjustReason_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_CancelReason", DriverWalletOrder_CancelReason_name, DriverWalletOrder_CancelReason_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_CancelSource", DriverWalletOrder_CancelSource_name, DriverWalletOrder_CancelSource_value)
	proto.RegisterEnum("foody_base.DriverWalletOrder_AuditResult", DriverWalletOrder_AuditResult_name, DriverWalletOrder_AuditResult_value)
	proto.RegisterEnum("foody_base.StoreSettlement_FlagBit", StoreSettlement_FlagBit_name, StoreSettlement_FlagBit_value)
	proto.RegisterEnum("foody_base.ReturnOrder_RefundType", ReturnOrder_RefundType_name, ReturnOrder_RefundType_value)
	proto.RegisterEnum("foody_base.ReturnOrder_ReturnStatus", ReturnOrder_ReturnStatus_name, ReturnOrder_ReturnStatus_value)
	proto.RegisterEnum("foody_base.ReturnOrder_ReturnType", ReturnOrder_ReturnType_name, ReturnOrder_ReturnType_value)
	proto.RegisterEnum("foody_base.ReturnOrder_ReturnReason", ReturnOrder_ReturnReason_name, ReturnOrder_ReturnReason_value)
	proto.RegisterEnum("foody_base.Refund_RefundMethod", Refund_RefundMethod_name, Refund_RefundMethod_value)
	proto.RegisterEnum("foody_base.Refund_RefundMode", Refund_RefundMode_name, Refund_RefundMode_value)
	proto.RegisterEnum("foody_base.OrderDiscountCampaign_PromotionType", OrderDiscountCampaign_PromotionType_name, OrderDiscountCampaign_PromotionType_value)
	proto.RegisterEnum("foody_base.OrderDiscountCampaign_PromotionStatus", OrderDiscountCampaign_PromotionStatus_name, OrderDiscountCampaign_PromotionStatus_value)
	proto.RegisterEnum("foody_base.OrderDiscountCampaign_DiscountType", OrderDiscountCampaign_DiscountType_name, OrderDiscountCampaign_DiscountType_value)
	proto.RegisterEnum("foody_base.StoreScope_StoreScopeType", StoreScope_StoreScopeType_name, StoreScope_StoreScopeType_value)
	proto.RegisterEnum("foody_base.Voucher_Reward_Type", Voucher_Reward_Type_name, Voucher_Reward_Type_value)
	proto.RegisterEnum("foody_base.VoucherTaskFile_FileType", VoucherTaskFile_FileType_name, VoucherTaskFile_FileType_value)
	proto.RegisterEnum("foody_base.EarnCoins_Type", EarnCoins_Type_name, EarnCoins_Type_value)
	proto.RegisterEnum("foody_base.ItemDiscountCampaign_Status", ItemDiscountCampaign_Status_name, ItemDiscountCampaign_Status_value)
	proto.RegisterEnum("foody_base.ItemDiscount_Status", ItemDiscount_Status_name, ItemDiscount_Status_value)
	proto.RegisterEnum("foody_base.ItemDiscountRecord_SoldStatus", ItemDiscountRecord_SoldStatus_name, ItemDiscountRecord_SoldStatus_value)
	proto.RegisterEnum("foody_base.PromotionObject_PromotionType", PromotionObject_PromotionType_name, PromotionObject_PromotionType_value)
	proto.RegisterEnum("foody_base.PromotionObject_PromotionStatus", PromotionObject_PromotionStatus_name, PromotionObject_PromotionStatus_value)
	proto.RegisterEnum("foody_base.PromotionObject_PromotionShowStatus", PromotionObject_PromotionShowStatus_name, PromotionObject_PromotionShowStatus_value)
	proto.RegisterEnum("foody_base.Button_ButtonType", Button_ButtonType_name, Button_ButtonType_value)
	proto.RegisterEnum("foody_base.Attribute_AttributeType", Attribute_AttributeType_name, Attribute_AttributeType_value)
	proto.RegisterEnum("foody_base.Attribute_ValueInfo_ValueInfoType", Attribute_ValueInfo_ValueInfoType_name, Attribute_ValueInfo_ValueInfoType_value)
	proto.RegisterEnum("foody_base.PromotionTool_PromotionToolType", PromotionTool_PromotionToolType_name, PromotionTool_PromotionToolType_value)
	proto.RegisterEnum("foody_base.PromotionTool_WhiteListScope", PromotionTool_WhiteListScope_name, PromotionTool_WhiteListScope_value)
	proto.RegisterEnum("foody_base.EventPromotion_PromotionType", EventPromotion_PromotionType_name, EventPromotion_PromotionType_value)
	proto.RegisterEnum("foody_base.EventPromotion_EventPromotionShowStatus", EventPromotion_EventPromotionShowStatus_name, EventPromotion_EventPromotionShowStatus_value)
	proto.RegisterEnum("foody_base.EventPromotion_StoreSessionStatus", EventPromotion_StoreSessionStatus_name, EventPromotion_StoreSessionStatus_value)
	proto.RegisterEnum("foody_base.EventPromotion_EventPromotionStatus", EventPromotion_EventPromotionStatus_name, EventPromotion_EventPromotionStatus_value)
	proto.RegisterEnum("foody_base.EventObject_PromotionType", EventObject_PromotionType_name, EventObject_PromotionType_value)
	proto.RegisterEnum("foody_base.EventObject_WhiteListScope", EventObject_WhiteListScope_name, EventObject_WhiteListScope_value)
	proto.RegisterEnum("foody_base.EventObject_EventStatus", EventObject_EventStatus_name, EventObject_EventStatus_value)
	proto.RegisterEnum("foody_base.WhiteList_WhiteListStatus", WhiteList_WhiteListStatus_name, WhiteList_WhiteListStatus_value)
	proto.RegisterEnum("foody_base.Tip_TipStatus", Tip_TipStatus_name, Tip_TipStatus_value)
	proto.RegisterEnum("foody_base.SpecialRule_RuleType", SpecialRule_RuleType_name, SpecialRule_RuleType_value)
	proto.RegisterEnum("foody_base.IncentivePlan_PlanStatus", IncentivePlan_PlanStatus_name, IncentivePlan_PlanStatus_value)
	proto.RegisterEnum("foody_base.IncentiveTask_CreditStatus", IncentiveTask_CreditStatus_name, IncentiveTask_CreditStatus_value)
	proto.RegisterEnum("foody_base.IncentiveTask_TaskStatus", IncentiveTask_TaskStatus_name, IncentiveTask_TaskStatus_value)
	proto.RegisterEnum("foody_base.IncentiveTask_PointSettlementType", IncentiveTask_PointSettlementType_name, IncentiveTask_PointSettlementType_value)
	proto.RegisterEnum("foody_base.IncentiveSettlement_SettlementStatus", IncentiveSettlement_SettlementStatus_name, IncentiveSettlement_SettlementStatus_value)
	proto.RegisterEnum("foody_base.IncentiveSettlement_CreditStatus", IncentiveSettlement_CreditStatus_name, IncentiveSettlement_CreditStatus_value)
	proto.RegisterEnum("foody_base.VoucherRecord_Status", VoucherRecord_Status_name, VoucherRecord_Status_value)
	proto.RegisterEnum("foody_base.DriverWalletPayment_PaymentType", DriverWalletPayment_PaymentType_name, DriverWalletPayment_PaymentType_value)
	proto.RegisterEnum("foody_base.DriverWalletPayment_PaymentStatus", DriverWalletPayment_PaymentStatus_name, DriverWalletPayment_PaymentStatus_value)
	proto.RegisterEnum("foody_base.DriverWalletRecord_TransactionType", DriverWalletRecord_TransactionType_name, DriverWalletRecord_TransactionType_value)
	proto.RegisterEnum("foody_base.DriverWalletRecord_AmountType", DriverWalletRecord_AmountType_name, DriverWalletRecord_AmountType_value)
	proto.RegisterEnum("foody_base.Penalty_Category", Penalty_Category_name, Penalty_Category_value)
	proto.RegisterEnum("foody_base.Penalty_SuspensionType", Penalty_SuspensionType_name, Penalty_SuspensionType_value)
	proto.RegisterEnum("foody_base.Penalty_FineType", Penalty_FineType_name, Penalty_FineType_value)
	proto.RegisterEnum("foody_base.Penalty_Status", Penalty_Status_name, Penalty_Status_value)
	proto.RegisterEnum("foody_base.Violation_Status", Violation_Status_name, Violation_Status_value)
	proto.RegisterEnum("foody_base.Area_Status", Area_Status_name, Area_Status_value)
	proto.RegisterEnum("foody_base.District_Status", District_Status_name, District_Status_value)
	proto.RegisterEnum("foody_base.AlgoParameterConfig_Module", AlgoParameterConfig_Module_name, AlgoParameterConfig_Module_value)
	proto.RegisterEnum("foody_base.AlgoParameterConfig_Priority", AlgoParameterConfig_Priority_name, AlgoParameterConfig_Priority_value)
	proto.RegisterEnum("foody_base.AlgoParameterConfig_DFFSetting_DFFSettingMode", AlgoParameterConfig_DFFSetting_DFFSettingMode_name, AlgoParameterConfig_DFFSetting_DFFSettingMode_value)
	proto.RegisterEnum("foody_base.Overlay_TagsLogic", Overlay_TagsLogic_name, Overlay_TagsLogic_value)
	proto.RegisterEnum("foody_base.Overlay_Status", Overlay_Status_name, Overlay_Status_value)
	proto.RegisterEnum("foody_base.Overlay_ShowStatus", Overlay_ShowStatus_name, Overlay_ShowStatus_value)
	proto.RegisterEnum("foody_base.MerchantWalletAdjustmentOrder_AdjustmentStatus", MerchantWalletAdjustmentOrder_AdjustmentStatus_name, MerchantWalletAdjustmentOrder_AdjustmentStatus_value)
	proto.RegisterEnum("foody_base.MerchantWalletAdjustmentOrder_AmountType", MerchantWalletAdjustmentOrder_AmountType_name, MerchantWalletAdjustmentOrder_AmountType_value)
	proto.RegisterEnum("foody_base.MerchantWalletAdjustmentOrder_AuditResult", MerchantWalletAdjustmentOrder_AuditResult_name, MerchantWalletAdjustmentOrder_AuditResult_value)
	proto.RegisterEnum("foody_base.MerchantWalletAdjustmentOrder_RejectReason", MerchantWalletAdjustmentOrder_RejectReason_name, MerchantWalletAdjustmentOrder_RejectReason_value)
	proto.RegisterEnum("foody_base.WalletSettlementOrder_SettlementStatus", WalletSettlementOrder_SettlementStatus_name, WalletSettlementOrder_SettlementStatus_value)
	proto.RegisterEnum("foody_base.MerchantWalletWithdrawOrder_WithdrawStatus", MerchantWalletWithdrawOrder_WithdrawStatus_name, MerchantWalletWithdrawOrder_WithdrawStatus_value)
	proto.RegisterEnum("foody_base.MerchantWalletWithdrawOrder_PaymentMethod", MerchantWalletWithdrawOrder_PaymentMethod_name, MerchantWalletWithdrawOrder_PaymentMethod_value)
	proto.RegisterEnum("foody_base.MerchantWalletWithdrawOrder_PayoutMode", MerchantWalletWithdrawOrder_PayoutMode_name, MerchantWalletWithdrawOrder_PayoutMode_value)
	proto.RegisterEnum("foody_base.ExpressContent_CollectFrom", ExpressContent_CollectFrom_name, ExpressContent_CollectFrom_value)
	proto.RegisterEnum("foody_base.ExpressContent_PayTo", ExpressContent_PayTo_name, ExpressContent_PayTo_value)
	proto.RegisterEnum("foody_base.ExpressDelivery_OnHoldFlag", ExpressDelivery_OnHoldFlag_name, ExpressDelivery_OnHoldFlag_value)
	proto.RegisterEnum("foody_base.ExpressDelivery_DeliveryType", ExpressDelivery_DeliveryType_name, ExpressDelivery_DeliveryType_value)
	proto.RegisterEnum("foody_base.ExpressDelivery_CompleteReason", ExpressDelivery_CompleteReason_name, ExpressDelivery_CompleteReason_value)
	proto.RegisterEnum("foody_base.ExpressDelivery_ReturnReason", ExpressDelivery_ReturnReason_name, ExpressDelivery_ReturnReason_value)
	proto.RegisterEnum("foody_base.ExpressAssignment_DepositStatus", ExpressAssignment_DepositStatus_name, ExpressAssignment_DepositStatus_value)
	proto.RegisterEnum("foody_base.ExpressAuditOrder_AuditType", ExpressAuditOrder_AuditType_name, ExpressAuditOrder_AuditType_value)
	proto.RegisterEnum("foody_base.ExpressAuditOrder_OrderStatus", ExpressAuditOrder_OrderStatus_name, ExpressAuditOrder_OrderStatus_value)
	proto.RegisterEnum("foody_base.SPXOrderContent_OrderSource", SPXOrderContent_OrderSource_name, SPXOrderContent_OrderSource_value)
	proto.RegisterEnum("foody_base.SPXOrder_FlagBit", SPXOrder_FlagBit_name, SPXOrder_FlagBit_value)
	proto.RegisterEnum("foody_base.SPXPayment_Type", SPXPayment_Type_name, SPXPayment_Type_value)
	proto.RegisterEnum("foody_base.SPXReturnOrder_ReturnType", SPXReturnOrder_ReturnType_name, SPXReturnOrder_ReturnType_value)
	proto.RegisterEnum("foody_base.SPXReturnOrder_RefundType", SPXReturnOrder_RefundType_name, SPXReturnOrder_RefundType_value)
	proto.RegisterEnum("foody_base.SPXReturnOrder_ReturnStatus", SPXReturnOrder_ReturnStatus_name, SPXReturnOrder_ReturnStatus_value)
	proto.RegisterEnum("foody_base.SPXReturnOrder_ReturnReason", SPXReturnOrder_ReturnReason_name, SPXReturnOrder_ReturnReason_value)
	proto.RegisterEnum("foody_base.SPXRefund_RefundMethod", SPXRefund_RefundMethod_name, SPXRefund_RefundMethod_value)
	proto.RegisterEnum("foody_base.SPXRefund_RefundMode", SPXRefund_RefundMode_name, SPXRefund_RefundMode_value)
	proto.RegisterEnum("foody_base.SPXVoucherRecord_ReturnStatus", SPXVoucherRecord_ReturnStatus_name, SPXVoucherRecord_ReturnStatus_value)
	proto.RegisterEnum("foody_base.SPXCoinRecord_ReturnStatus", SPXCoinRecord_ReturnStatus_name, SPXCoinRecord_ReturnStatus_value)
	proto.RegisterEnum("foody_base.FlashSaleDishDiscount_DishDiscountType", FlashSaleDishDiscount_DishDiscountType_name, FlashSaleDishDiscount_DishDiscountType_value)
	proto.RegisterEnum("foody_base.FlashSaleDishSoldRecord_RecordSoldStatus", FlashSaleDishSoldRecord_RecordSoldStatus_name, FlashSaleDishSoldRecord_RecordSoldStatus_value)
	proto.RegisterEnum("foody_base.DriverDeliveryOrder_LocationType", DriverDeliveryOrder_LocationType_name, DriverDeliveryOrder_LocationType_value)
	proto.RegisterEnum("foody_base.StoreSettlementMart_WalletStatus", StoreSettlementMart_WalletStatus_name, StoreSettlementMart_WalletStatus_value)
	proto.RegisterEnum("foody_base.StoreSettlementMart_ConfigStatus", StoreSettlementMart_ConfigStatus_name, StoreSettlementMart_ConfigStatus_value)
	proto.RegisterEnum("foody_base.MerchantSettlementMart_WalletStatus", MerchantSettlementMart_WalletStatus_name, MerchantSettlementMart_WalletStatus_value)
	proto.RegisterEnum("foody_base.MerchantSettlementMart_ConfigStatus", MerchantSettlementMart_ConfigStatus_name, MerchantSettlementMart_ConfigStatus_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionMaterialTemplate_BizType", RecruitmentSessionMaterialTemplate_BizType_name, RecruitmentSessionMaterialTemplate_BizType_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionMaterialTemplate_Status", RecruitmentSessionMaterialTemplate_Status_name, RecruitmentSessionMaterialTemplate_Status_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionRegistration_RegistrationStatus", RecruitmentSessionRegistration_RegistrationStatus_name, RecruitmentSessionRegistration_RegistrationStatus_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionRegistration_RegistrationSource", RecruitmentSessionRegistration_RegistrationSource_name, RecruitmentSessionRegistration_RegistrationSource_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionRegistration_BindStatus", RecruitmentSessionRegistration_BindStatus_name, RecruitmentSessionRegistration_BindStatus_value)
	proto.RegisterEnum("foody_base.RecruitmentSession_RecruitmentSessionType", RecruitmentSession_RecruitmentSessionType_name, RecruitmentSession_RecruitmentSessionType_value)
	proto.RegisterEnum("foody_base.RecruitmentSession_RecruitmentSessionStatus", RecruitmentSession_RecruitmentSessionStatus_name, RecruitmentSession_RecruitmentSessionStatus_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionTask_TaskType", RecruitmentSessionTask_TaskType_name, RecruitmentSessionTask_TaskType_value)
	proto.RegisterEnum("foody_base.RecruitmentSessionTask_TaskStatus", RecruitmentSessionTask_TaskStatus_name, RecruitmentSessionTask_TaskStatus_value)
	proto.RegisterType((*Certificate)(nil), "foody_base.Certificate")
	proto.RegisterType((*AsyncTask)(nil), "foody_base.AsyncTask")
	proto.RegisterType((*Rank)(nil), "foody_base.Rank")
	proto.RegisterType((*Dish)(nil), "foody_base.Dish")
	proto.RegisterType((*Dish_TimeForSales)(nil), "foody_base.Dish.TimeForSales")
	proto.RegisterType((*Dish_SalesDay)(nil), "foody_base.Dish.SalesDay")
	proto.RegisterType((*Dish_Flag)(nil), "foody_base.Dish.Flag")
	proto.RegisterType((*Dish_SpecialSaleDate)(nil), "foody_base.Dish.SpecialSaleDate")
	proto.RegisterType((*Option)(nil), "foody_base.Option")
	proto.RegisterType((*OptionGroup)(nil), "foody_base.OptionGroup")
	proto.RegisterType((*OptionGroup_Flag)(nil), "foody_base.OptionGroup.Flag")
	proto.RegisterType((*DishOptionBinding)(nil), "foody_base.DishOptionBinding")
	proto.RegisterType((*OptionGroupBinding)(nil), "foody_base.OptionGroupBinding")
	proto.RegisterType((*Catalog)(nil), "foody_base.Catalog")
	proto.RegisterType((*Buyer)(nil), "foody_base.Buyer")
	proto.RegisterType((*DeliveryAddress)(nil), "foody_base.DeliveryAddress")
	proto.RegisterType((*Driver)(nil), "foody_base.Driver")
	proto.RegisterType((*Location)(nil), "foody_base.Location")
	proto.RegisterType((*CartOption)(nil), "foody_base.CartOption")
	proto.RegisterType((*CartOptionGroup)(nil), "foody_base.CartOptionGroup")
	proto.RegisterType((*CartDish)(nil), "foody_base.CartDish")
	proto.RegisterType((*CartItemDetail)(nil), "foody_base.CartItemDetail")
	proto.RegisterType((*CartItem)(nil), "foody_base.CartItem")
	proto.RegisterType((*DeliveryAmount)(nil), "foody_base.DeliveryAmount")
	proto.RegisterType((*OrderCustomTag)(nil), "foody_base.OrderCustomTag")
	proto.RegisterType((*Order)(nil), "foody_base.Order")
	proto.RegisterType((*Order_Item)(nil), "foody_base.Order.Item")
	proto.RegisterType((*Order_Amount)(nil), "foody_base.Order.Amount")
	proto.RegisterType((*Order_Promotion)(nil), "foody_base.Order.Promotion")
	proto.RegisterType((*Order_Promotion_Flag)(nil), "foody_base.Order.Promotion.Flag")
	proto.RegisterType((*Order_Flag)(nil), "foody_base.Order.Flag")
	proto.RegisterType((*Order_StoreSettlementFactor)(nil), "foody_base.Order.StoreSettlementFactor")
	proto.RegisterType((*Order_PaymentInfo)(nil), "foody_base.Order.PaymentInfo")
	proto.RegisterType((*DeliveryOrder)(nil), "foody_base.DeliveryOrder")
	proto.RegisterType((*DeliveryOrder_GeoTracking)(nil), "foody_base.DeliveryOrder.GeoTracking")
	proto.RegisterType((*DeliveryOrder_AdvanceDeposit)(nil), "foody_base.DeliveryOrder.AdvanceDeposit")
	proto.RegisterType((*DeliveryOrder_DepositRefund)(nil), "foody_base.DeliveryOrder.DepositRefund")
	proto.RegisterType((*DeliveryOrder_Flag)(nil), "foody_base.DeliveryOrder.Flag")
	proto.RegisterType((*Payment)(nil), "foody_base.Payment")
	proto.RegisterType((*Geo)(nil), "foody_base.Geo")
	proto.RegisterType((*ChangeLog)(nil), "foody_base.ChangeLog")
	proto.RegisterType((*Result)(nil), "foody_base.Result")
	proto.RegisterType((*Device)(nil), "foody_base.Device")
	proto.RegisterType((*Store)(nil), "foody_base.Store")
	proto.RegisterType((*Store_SurChargeIntervals)(nil), "foody_base.Store.SurChargeIntervals")
	proto.RegisterType((*Store_SurChargeInterval)(nil), "foody_base.Store.SurChargeInterval")
	proto.RegisterType((*Store_Flag)(nil), "foody_base.Store.Flag")
	proto.RegisterType((*Store_Overlay)(nil), "foody_base.Store.Overlay")
	proto.RegisterType((*Store_ScheduledCommission)(nil), "foody_base.Store.ScheduledCommission")
	proto.RegisterType((*Store_ScheduledCommissions)(nil), "foody_base.Store.ScheduledCommissions")
	proto.RegisterType((*Store_SubCategory)(nil), "foody_base.Store.SubCategory")
	proto.RegisterType((*Store_ShippingFee)(nil), "foody_base.Store.ShippingFee")
	proto.RegisterType((*Store_ShippingFees)(nil), "foody_base.Store.ShippingFees")
	proto.RegisterType((*StoreMin)(nil), "foody_base.StoreMin")
	proto.RegisterType((*StoreCategory)(nil), "foody_base.StoreCategory")
	proto.RegisterType((*OpeningStatus)(nil), "foody_base.OpeningStatus")
	proto.RegisterType((*OpeningStatus_Interval)(nil), "foody_base.OpeningStatus.Interval")
	proto.RegisterType((*OpeningStatus_SpecialMode)(nil), "foody_base.OpeningStatus.SpecialMode")
	proto.RegisterType((*OpeningStatus_PauseTime)(nil), "foody_base.OpeningStatus.PauseTime")
	proto.RegisterType((*OpeningStatus_CloseStatus)(nil), "foody_base.OpeningStatus.CloseStatus")
	proto.RegisterType((*StoreExt)(nil), "foody_base.StoreExt")
	proto.RegisterType((*Merchant)(nil), "foody_base.Merchant")
	proto.RegisterType((*Brand)(nil), "foody_base.Brand")
	proto.RegisterType((*Tag)(nil), "foody_base.Tag")
	proto.RegisterType((*TagType)(nil), "foody_base.TagType")
	proto.RegisterType((*PredefinedKeyword)(nil), "foody_base.PredefinedKeyword")
	proto.RegisterType((*WithdrawalChannel)(nil), "foody_base.WithdrawalChannel")
	proto.RegisterType((*DriverWallet)(nil), "foody_base.DriverWallet")
	proto.RegisterType((*DriverWalletTransaction)(nil), "foody_base.DriverWalletTransaction")
	proto.RegisterType((*DriverWalletOrder)(nil), "foody_base.DriverWalletOrder")
	proto.RegisterType((*StoreSettlement)(nil), "foody_base.StoreSettlement")
	proto.RegisterType((*StoreSettlement_Amount)(nil), "foody_base.StoreSettlement.Amount")
	proto.RegisterType((*StoreSettlement_ClearingFlag)(nil), "foody_base.StoreSettlement.ClearingFlag")
	proto.RegisterType((*DriverSettlement)(nil), "foody_base.DriverSettlement")
	proto.RegisterType((*SPXDriverSettlement)(nil), "foody_base.SPXDriverSettlement")
	proto.RegisterType((*SPXDriverSettlement_Amount)(nil), "foody_base.SPXDriverSettlement.Amount")
	proto.RegisterType((*ReturnOrder)(nil), "foody_base.ReturnOrder")
	proto.RegisterType((*Refund)(nil), "foody_base.Refund")
	proto.RegisterType((*UnionCity)(nil), "foody_base.UnionCity")
	proto.RegisterType((*MassChangeLog)(nil), "foody_base.MassChangeLog")
	proto.RegisterType((*OrderDiscountCampaign)(nil), "foody_base.OrderDiscountCampaign")
	proto.RegisterType((*UserAttribute)(nil), "foody_base.UserAttribute")
	proto.RegisterType((*VoucherIdentifier)(nil), "foody_base.VoucherIdentifier")
	proto.RegisterType((*DistributionRule)(nil), "foody_base.DistributionRule")
	proto.RegisterType((*ValidityStatus)(nil), "foody_base.ValidityStatus")
	proto.RegisterType((*MultiLangTxt)(nil), "foody_base.MultiLangTxt")
	proto.RegisterType((*VoucherTAndC)(nil), "foody_base.VoucherTAndC")
	proto.RegisterType((*DisplayInfo)(nil), "foody_base.DisplayInfo")
	proto.RegisterType((*ExtraInfo)(nil), "foody_base.ExtraInfo")
	proto.RegisterType((*PaymentMethodScope)(nil), "foody_base.PaymentMethodScope")
	proto.RegisterType((*PaymentRules)(nil), "foody_base.PaymentRules")
	proto.RegisterType((*LocationScope)(nil), "foody_base.LocationScope")
	proto.RegisterType((*OrderScope)(nil), "foody_base.OrderScope")
	proto.RegisterType((*StoreScope)(nil), "foody_base.StoreScope")
	proto.RegisterType((*ProductRules)(nil), "foody_base.ProductRules")
	proto.RegisterType((*UserRules)(nil), "foody_base.UserRules")
	proto.RegisterType((*Reward)(nil), "foody_base.Reward")
	proto.RegisterType((*VoucherRewardDiscount)(nil), "foody_base.VoucherRewardDiscount")
	proto.RegisterType((*UserVoucher)(nil), "foody_base.UserVoucher")
	proto.RegisterType((*Voucher)(nil), "foody_base.Voucher")
	proto.RegisterType((*VoucherCustomisedLabelList)(nil), "foody_base.VoucherCustomisedLabelList")
	proto.RegisterType((*VoucherCustomisedLabel)(nil), "foody_base.VoucherCustomisedLabel")
	proto.RegisterType((*VoucherTaskFile)(nil), "foody_base.VoucherTaskFile")
	proto.RegisterType((*VoucherClaimStatus)(nil), "foody_base.VoucherClaimStatus")
	proto.RegisterType((*VoucherTask)(nil), "foody_base.VoucherTask")
	proto.RegisterType((*SpendCoins)(nil), "foody_base.SpendCoins")
	proto.RegisterType((*OrderDiscount)(nil), "foody_base.OrderDiscount")
	proto.RegisterType((*EarnCoins)(nil), "foody_base.EarnCoins")
	proto.RegisterType((*Promotion)(nil), "foody_base.Promotion")
	proto.RegisterType((*ItemDiscountCampaign)(nil), "foody_base.ItemDiscountCampaign")
	proto.RegisterType((*ItemDiscount)(nil), "foody_base.ItemDiscount")
	proto.RegisterType((*ItemDiscountRecord)(nil), "foody_base.ItemDiscountRecord")
	proto.RegisterType((*PromotionObject)(nil), "foody_base.PromotionObject")
	proto.RegisterType((*PromotionObject_PromotionExtInfo)(nil), "foody_base.PromotionObject.PromotionExtInfo")
	proto.RegisterType((*PromotionObject_PromotionNameInfo)(nil), "foody_base.PromotionObject.PromotionNameInfo")
	proto.RegisterType((*Button)(nil), "foody_base.Button")
	proto.RegisterType((*Attribute)(nil), "foody_base.Attribute")
	proto.RegisterType((*Attribute_KeyInfo)(nil), "foody_base.Attribute.KeyInfo")
	proto.RegisterType((*Attribute_ValueInfo)(nil), "foody_base.Attribute.ValueInfo")
	proto.RegisterType((*RedirectInfo)(nil), "foody_base.RedirectInfo")
	proto.RegisterType((*RedirectInfo_ParamPair)(nil), "foody_base.RedirectInfo.ParamPair")
	proto.RegisterType((*PromotionTool)(nil), "foody_base.PromotionTool")
	proto.RegisterType((*PromotionTool_PromotionToolExtInfo)(nil), "foody_base.PromotionTool.PromotionToolExtInfo")
	proto.RegisterType((*PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo)(nil), "foody_base.PromotionTool.PromotionToolExtInfo.PromotionToolNameInfo")
	proto.RegisterType((*PromotionTool_PromotionToolExtInfo_DescriptionInfo)(nil), "foody_base.PromotionTool.PromotionToolExtInfo.DescriptionInfo")
	proto.RegisterType((*EventPromotion)(nil), "foody_base.EventPromotion")
	proto.RegisterType((*EventPromotion_EventPromotionExtInfo)(nil), "foody_base.EventPromotion.EventPromotionExtInfo")
	proto.RegisterType((*EventPromotion_EventPromotionNameInfo)(nil), "foody_base.EventPromotion.EventPromotionNameInfo")
	proto.RegisterType((*EventObject)(nil), "foody_base.EventObject")
	proto.RegisterType((*EventObject_EventExtInfo)(nil), "foody_base.EventObject.EventExtInfo")
	proto.RegisterType((*EventObject_EventNameInfo)(nil), "foody_base.EventObject.EventNameInfo")
	proto.RegisterType((*WhiteList)(nil), "foody_base.WhiteList")
	proto.RegisterType((*Tip)(nil), "foody_base.Tip")
	proto.RegisterType((*StoreChargeback)(nil), "foody_base.StoreChargeback")
	proto.RegisterType((*BaseRule)(nil), "foody_base.BaseRule")
	proto.RegisterType((*SpecialRule)(nil), "foody_base.SpecialRule")
	proto.RegisterType((*SpecialRule_TimeRule)(nil), "foody_base.SpecialRule.TimeRule")
	proto.RegisterType((*SpecialRule_LocationGroupRule)(nil), "foody_base.SpecialRule.LocationGroupRule")
	proto.RegisterType((*SpecialRule_OrderStackRule)(nil), "foody_base.SpecialRule.OrderStackRule")
	proto.RegisterType((*SpecialRule_Detail)(nil), "foody_base.SpecialRule.Detail")
	proto.RegisterType((*IncentivePlan)(nil), "foody_base.IncentivePlan")
	proto.RegisterType((*IncentivePlan_CashRule)(nil), "foody_base.IncentivePlan.CashRule")
	proto.RegisterType((*IncentivePlan_Requirement)(nil), "foody_base.IncentivePlan.Requirement")
	proto.RegisterType((*IncentiveTask)(nil), "foody_base.IncentiveTask")
	proto.RegisterType((*CashConversionRule)(nil), "foody_base.CashConversionRule")
	proto.RegisterType((*CashConversionRule_CashRule)(nil), "foody_base.CashConversionRule.CashRule")
	proto.RegisterType((*IncentiveSettlement)(nil), "foody_base.IncentiveSettlement")
	proto.RegisterType((*VoucherRecord)(nil), "foody_base.VoucherRecord")
	proto.RegisterType((*AntiFraud)(nil), "foody_base.AntiFraud")
	proto.RegisterType((*DriverWalletPayment)(nil), "foody_base.DriverWalletPayment")
	proto.RegisterType((*DriverWalletRecord)(nil), "foody_base.DriverWalletRecord")
	proto.RegisterType((*Penalty)(nil), "foody_base.Penalty")
	proto.RegisterType((*Violation)(nil), "foody_base.Violation")
	proto.RegisterType((*Quality)(nil), "foody_base.Quality")
	proto.RegisterType((*OrderConfig)(nil), "foody_base.OrderConfig")
	proto.RegisterType((*PaymentConfig)(nil), "foody_base.PaymentConfig")
	proto.RegisterType((*Area)(nil), "foody_base.Area")
	proto.RegisterType((*Area_ServiceTypeFlag)(nil), "foody_base.Area.ServiceTypeFlag")
	proto.RegisterType((*District)(nil), "foody_base.District")
	proto.RegisterType((*LocationGroup)(nil), "foody_base.LocationGroup")
	proto.RegisterType((*DistrictLocationGroupBinding)(nil), "foody_base.DistrictLocationGroupBinding")
	proto.RegisterType((*AlgoParameterConfig)(nil), "foody_base.AlgoParameterConfig")
	proto.RegisterType((*AlgoParameterConfig_Parameter)(nil), "foody_base.AlgoParameterConfig.Parameter")
	proto.RegisterType((*AlgoParameterConfig_OrderFlow)(nil), "foody_base.AlgoParameterConfig.OrderFlow")
	proto.RegisterType((*AlgoParameterConfig_DriverFiltering)(nil), "foody_base.AlgoParameterConfig.DriverFiltering")
	proto.RegisterType((*AlgoParameterConfig_MatchAssessment)(nil), "foody_base.AlgoParameterConfig.MatchAssessment")
	proto.RegisterType((*AlgoParameterConfig_ETA)(nil), "foody_base.AlgoParameterConfig.ETA")
	proto.RegisterType((*AlgoParameterConfig_ETA_Base)(nil), "foody_base.AlgoParameterConfig.ETA.Base")
	proto.RegisterType((*AlgoParameterConfig_ShippingFee)(nil), "foody_base.AlgoParameterConfig.ShippingFee")
	proto.RegisterType((*AlgoParameterConfig_ShippingFeeTier)(nil), "foody_base.AlgoParameterConfig.ShippingFeeTier")
	proto.RegisterType((*AlgoParameterConfig_BaseShippingFee)(nil), "foody_base.AlgoParameterConfig.BaseShippingFee")
	proto.RegisterType((*AlgoParameterConfig_BuyerShippingFee)(nil), "foody_base.AlgoParameterConfig.BuyerShippingFee")
	proto.RegisterType((*AlgoParameterConfig_DriverShippingFee)(nil), "foody_base.AlgoParameterConfig.DriverShippingFee")
	proto.RegisterType((*AlgoParameterConfig_ServiceFee)(nil), "foody_base.AlgoParameterConfig.ServiceFee")
	proto.RegisterType((*AlgoParameterConfig_ServiceFeeInterval)(nil), "foody_base.AlgoParameterConfig.ServiceFeeInterval")
	proto.RegisterType((*AlgoParameterConfig_InsuranceTier)(nil), "foody_base.AlgoParameterConfig.InsuranceTier")
	proto.RegisterType((*AlgoParameterConfig_InsuranceFee)(nil), "foody_base.AlgoParameterConfig.InsuranceFee")
	proto.RegisterType((*AlgoParameterConfig_DFFSetting)(nil), "foody_base.AlgoParameterConfig.DFFSetting")
	proto.RegisterType((*AlgoParameterConfig_InstantShopeeShippingFee)(nil), "foody_base.AlgoParameterConfig.InstantShopeeShippingFee")
	proto.RegisterType((*AlgoParameterConfig_InstantDeliveryShippingFee)(nil), "foody_base.AlgoParameterConfig.InstantDeliveryShippingFee")
	proto.RegisterType((*AlgoParameterConfig_SmallOrderFee)(nil), "foody_base.AlgoParameterConfig.SmallOrderFee")
	proto.RegisterType((*AlgoParameterConfig_NonPartnerFee)(nil), "foody_base.AlgoParameterConfig.NonPartnerFee")
	proto.RegisterType((*AlgoParameterConfig_WorkingHours)(nil), "foody_base.AlgoParameterConfig.WorkingHours")
	proto.RegisterType((*ContentRule)(nil), "foody_base.ContentRule")
	proto.RegisterType((*Overlay)(nil), "foody_base.Overlay")
	proto.RegisterType((*TimeRange)(nil), "foody_base.TimeRange")
	proto.RegisterType((*MerchantWalletAdjustmentOrder)(nil), "foody_base.MerchantWalletAdjustmentOrder")
	proto.RegisterType((*WalletSettlementOrder)(nil), "foody_base.WalletSettlementOrder")
	proto.RegisterType((*WalletSettlementOrder_Amount)(nil), "foody_base.WalletSettlementOrder.Amount")
	proto.RegisterType((*WalletSettlementOrder_Flag)(nil), "foody_base.WalletSettlementOrder.Flag")
	proto.RegisterType((*WalletSettlementOrder_StoreShardList)(nil), "foody_base.WalletSettlementOrder.StoreShardList")
	proto.RegisterType((*MerchantWalletWithdrawOrder)(nil), "foody_base.MerchantWalletWithdrawOrder")
	proto.RegisterType((*ExpressContent)(nil), "foody_base.ExpressContent")
	proto.RegisterType((*ExpressDelivery)(nil), "foody_base.ExpressDelivery")
	proto.RegisterType((*ExpressDelivery_GeoTracking)(nil), "foody_base.ExpressDelivery.GeoTracking")
	proto.RegisterType((*ExpressPackage)(nil), "foody_base.ExpressPackage")
	proto.RegisterType((*ExpressAssignment)(nil), "foody_base.ExpressAssignment")
	proto.RegisterType((*ExpressDeliveryPackage)(nil), "foody_base.ExpressDeliveryPackage")
	proto.RegisterType((*ExpressAuditOrder)(nil), "foody_base.ExpressAuditOrder")
	proto.RegisterType((*Express)(nil), "foody_base.Express")
	proto.RegisterType((*SPXOrderContent)(nil), "foody_base.SPXOrderContent")
	proto.RegisterType((*PackageInfo)(nil), "foody_base.PackageInfo")
	proto.RegisterType((*SPXOrder)(nil), "foody_base.SPXOrder")
	proto.RegisterType((*SPXOrder_Flag)(nil), "foody_base.SPXOrder.Flag")
	proto.RegisterType((*SPXPayment)(nil), "foody_base.SPXPayment")
	proto.RegisterType((*SPXReturnOrder)(nil), "foody_base.SPXReturnOrder")
	proto.RegisterType((*SPXRefund)(nil), "foody_base.SPXRefund")
	proto.RegisterType((*SPXVoucherRecord)(nil), "foody_base.SPXVoucherRecord")
	proto.RegisterType((*SPXCoinRecord)(nil), "foody_base.SPXCoinRecord")
	proto.RegisterType((*FlashSaleCampaign)(nil), "foody_base.FlashSaleCampaign")
	proto.RegisterType((*FlashSaleAreaTimeslotBinding)(nil), "foody_base.FlashSaleAreaTimeslotBinding")
	proto.RegisterType((*FlashSaleTimeslot)(nil), "foody_base.FlashSaleTimeslot")
	proto.RegisterType((*FlashSaleCampaignContent)(nil), "foody_base.FlashSaleCampaignContent")
	proto.RegisterType((*FlashSaleStore)(nil), "foody_base.FlashSaleStore")
	proto.RegisterType((*FlashSaleDishDiscount)(nil), "foody_base.FlashSaleDishDiscount")
	proto.RegisterType((*FlashSaleDishSoldRecord)(nil), "foody_base.FlashSaleDishSoldRecord")
	proto.RegisterType((*FlashSaleDish)(nil), "foody_base.FlashSaleDish")
	proto.RegisterType((*FlashSaleCartItemDetail)(nil), "foody_base.FlashSaleCartItemDetail")
	proto.RegisterType((*FlashSaleOrderItemDetail)(nil), "foody_base.FlashSaleOrderItemDetail")
	proto.RegisterType((*FlashSaleOrderItem)(nil), "foody_base.FlashSaleOrderItem")
	proto.RegisterType((*FlashSaleDishDiscountTimeslot)(nil), "foody_base.FlashSaleDishDiscountTimeslot")
	proto.RegisterType((*DriverDeliveryOrder)(nil), "foody_base.DriverDeliveryOrder")
	proto.RegisterType((*DriverDeliveryOrder_ShippingFeeItems)(nil), "foody_base.DriverDeliveryOrder.ShippingFeeItems")
	proto.RegisterType((*DriverDeliveryOrder_Route)(nil), "foody_base.DriverDeliveryOrder.Route")
	proto.RegisterType((*StoreSettlementMart)(nil), "foody_base.StoreSettlementMart")
	proto.RegisterType((*MerchantSettlementMart)(nil), "foody_base.MerchantSettlementMart")
	proto.RegisterType((*ItemDiscountCampaignEnableTime)(nil), "foody_base.ItemDiscountCampaignEnableTime")
	proto.RegisterType((*ItemDiscountCampaignEnableDate)(nil), "foody_base.ItemDiscountCampaignEnableDate")
	proto.RegisterType((*ItemDiscountCampaignApplyDate)(nil), "foody_base.ItemDiscountCampaignApplyDate")
	proto.RegisterType((*ItemDiscountCampaignAppliedTimes)(nil), "foody_base.ItemDiscountCampaignAppliedTimes")
	proto.RegisterType((*RecruitmentSessionMaterialTemplate)(nil), "foody_base.RecruitmentSessionMaterialTemplate")
	proto.RegisterType((*RecruitmentSessionMerchant)(nil), "foody_base.RecruitmentSessionMerchant")
	proto.RegisterType((*RecruitmentSessionRegistration)(nil), "foody_base.RecruitmentSessionRegistration")
	proto.RegisterType((*RecruitmentSessionMerchantExt)(nil), "foody_base.RecruitmentSessionMerchantExt")
	proto.RegisterType((*RecruitmentSessionPage)(nil), "foody_base.RecruitmentSessionPage")
	proto.RegisterType((*RecruitmentSessionPage_QuestionAndAnswer)(nil), "foody_base.RecruitmentSessionPage.QuestionAndAnswer")
	proto.RegisterType((*RecruitmentSession)(nil), "foody_base.RecruitmentSession")
	proto.RegisterType((*VoucherPackageTemplate)(nil), "foody_base.VoucherPackageTemplate")
	proto.RegisterType((*RecruitmentSessionTask)(nil), "foody_base.RecruitmentSessionTask")
	proto.RegisterType((*RecruitmentSessionPromotionSummary)(nil), "foody_base.RecruitmentSessionPromotionSummary")
	proto.RegisterType((*RecruitmentVoucherPackageRegisterCount)(nil), "foody_base.RecruitmentVoucherPackageRegisterCount")
	proto.RegisterType((*RecruitmentSessionReport)(nil), "foody_base.RecruitmentSessionReport")
}

func init() { proto.RegisterFile("foody_base.proto", fileDescriptor_126df3da343af93d) }

var fileDescriptor_126df3da343af93d = []byte{
	// 41467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5b, 0x90, 0x1c, 0xc9,
	0x76, 0x18, 0xb6, 0xdd, 0x3d, 0x33, 0xdd, 0x7d, 0xfa, 0x31, 0x35, 0x35, 0x0f, 0x34, 0x06, 0x8b,
	0xc7, 0x16, 0x16, 0xbb, 0x58, 0x2c, 0x16, 0xfb, 0xb8, 0x7b, 0xef, 0xee, 0x7d, 0xec, 0xde, 0xed,
	0xe9, 0xae, 0x01, 0xfa, 0x62, 0xa6, 0xbb, 0x51, 0xdd, 0x03, 0x5c, 0x5c, 0x5e, 0xaa, 0x54, 0xd3,
	0x5d, 0x33, 0x53, 0x17, 0x3d, 0x55, 0xbd, 0x55, 0xd5, 0x00, 0xe6, 0x3a, 0x18, 0x36, 0x25, 0x5b,
	0x96, 0xe4, 0x47, 0x58, 0x24, 0xc5, 0x97, 0x44, 0x89, 0x92, 0xc8, 0xb0, 0x69, 0xd2, 0x96, 0x2d,
	0x5a, 0xa4, 0xc2, 0x96, 0x3e, 0x4c, 0xc9, 0x0c, 0x52, 0x76, 0x38, 0xc2, 0x76, 0x84, 0x23, 0x6c,
	0x39, 0x24, 0xfa, 0x25, 0x99, 0xfe, 0x31, 0x1d, 0x21, 0x5a, 0xb4, 0x2d, 0x4b, 0x8e, 0x3c, 0x99,
	0x59, 0x95, 0x59, 0x55, 0x3d, 0x33, 0xd8, 0x5d, 0x39, 0x68, 0x85, 0x3e, 0x80, 0xe9, 0x3c, 0x79,
	0x32, 0x2b, 0x9f, 0x27, 0x4f, 0x9e, 0x73, 0xf2, 0x1c, 0x50, 0x0e, 0x3c, 0x6f, 0x7c, 0x62, 0xee,
	0x5b, 0x81, 0x7d, 0x67, 0xea, 0x7b, 0xa1, 0xa7, 0x42, 0x0c, 0xd1, 0xbe, 0x0c, 0x95, 0x96, 0xed,
	0x87, 0xce, 0x81, 0x33, 0xb2, 0x42, 0x5b, 0x55, 0x61, 0xe1, 0xc8, 0x0a, 0x8e, 0x1a, 0xb9, 0x6b,
	0xb9, 0x9b, 0x65, 0x03, 0x7f, 0x13, 0x98, 0x6b, 0x1d, 0xdb, 0x8d, 0x3c, 0x85, 0x91, 0xdf, 0xda,
	0xaf, 0x2d, 0x40, 0xb9, 0x19, 0x9c, 0xb8, 0xa3, 0xa1, 0x15, 0x3c, 0x51, 0xeb, 0x90, 0x77, 0xc6,
	0x58, 0x66, 0xc1, 0xc8, 0x3b, 0x63, 0xf5, 0x0e, 0x2c, 0x84, 0x27, 0x53, 0x5a, 0xa2, 0xfe, 0xde,
	0xe6, 0x1d, 0xa1, 0x05, 0x51, 0xa1, 0x3b, 0xc3, 0x93, 0xa9, 0x6d, 0x20, 0x9e, 0x7a, 0x09, 0xca,
	0x07, 0xce, 0xc4, 0x36, 0xf1, 0x33, 0x05, 0xfc, 0x4c, 0x89, 0x00, 0xba, 0xd6, 0x71, 0x9c, 0x39,
	0x71, 0xdc, 0x27, 0x8d, 0x85, 0x38, 0x73, 0xc7, 0x71, 0x9f, 0xa8, 0xef, 0xc3, 0x52, 0x10, 0x5a,
	0xe1, 0x2c, 0x68, 0x2c, 0xe2, 0xb7, 0x5e, 0xce, 0xfe, 0xd6, 0x00, 0x71, 0x0c, 0x86, 0xab, 0x5e,
	0x85, 0x4a, 0x30, 0x1b, 0x8d, 0x6c, 0x7b, 0x6c, 0x8e, 0xdc, 0xb0, 0xb1, 0x74, 0x2d, 0x77, 0xb3,
	0x66, 0x00, 0x03, 0xb5, 0xdc, 0x50, 0xbd, 0x0c, 0x70, 0x60, 0x39, 0x13, 0x96, 0x5f, 0xc4, 0xfc,
	0x32, 0x85, 0x90, 0xec, 0xab, 0x50, 0x19, 0xf9, 0xb6, 0x15, 0xda, 0x66, 0xe8, 0x1c, 0xdb, 0x8d,
	0x12, 0x76, 0x1c, 0x28, 0x68, 0xe8, 0x1c, 0xdb, 0x04, 0x61, 0x36, 0x1d, 0x47, 0x08, 0x65, 0x8a,
	0x40, 0x41, 0x88, 0xb0, 0x09, 0x25, 0x6f, 0x6a, 0xfb, 0x56, 0xe8, 0xf9, 0x0d, 0xa0, 0x7d, 0xe2,
	0x69, 0xf5, 0x15, 0xa8, 0xfa, 0xf6, 0x81, 0xed, 0xdb, 0xee, 0xc8, 0x36, 0x9d, 0x71, 0xa3, 0x82,
	0xa5, 0x2b, 0x11, 0xac, 0x33, 0x26, 0xf5, 0xb3, 0xf6, 0xe1, 0xa8, 0x54, 0xb1, 0x06, 0xd6, 0x64,
	0x1c, 0x97, 0xcb, 0x00, 0x41, 0x68, 0xf9, 0x21, 0xfd, 0x7e, 0x0d, 0x6b, 0x28, 0x23, 0x84, 0x7c,
	0x5e, 0xdb, 0x82, 0x05, 0x32, 0xfc, 0xea, 0xcb, 0xd0, 0x18, 0x0c, 0x7b, 0x86, 0x6e, 0x0e, 0x9b,
	0x77, 0xcd, 0xad, 0x4e, 0xb7, 0xdd, 0xe9, 0xde, 0x35, 0x9b, 0xc3, 0x61, 0xb3, 0x75, 0x4f, 0xc9,
	0x65, 0xe7, 0x1a, 0xfa, 0x6e, 0xef, 0xa1, 0xae, 0xe4, 0xb5, 0x4f, 0x60, 0x89, 0x0e, 0xab, 0x5a,
	0x81, 0x62, 0xcb, 0xd0, 0x9b, 0x43, 0xbd, 0xad, 0xe4, 0xd4, 0x3a, 0x40, 0xdf, 0xe8, 0xb5, 0xf4,
	0xc1, 0xa0, 0xd3, 0xbd, 0xab, 0xe4, 0xd5, 0x1a, 0x94, 0x5b, 0xbd, 0xdd, 0xfe, 0x8e, 0x4e, 0xb2,
	0x0b, 0x2a, 0xc0, 0xd2, 0x76, 0xb3, 0xb3, 0xa3, 0xb7, 0x95, 0x05, 0xed, 0x16, 0x2c, 0x18, 0x96,
	0x9b, 0x5e, 0x3e, 0x2a, 0x2c, 0xf8, 0x96, 0xfb, 0x04, 0x97, 0x4f, 0xcd, 0xc0, 0xdf, 0xda, 0x0f,
	0xaf, 0xc0, 0x42, 0xdb, 0x09, 0x8e, 0x52, 0xc8, 0x17, 0xa1, 0x14, 0x84, 0x9e, 0x8f, 0x23, 0x95,
	0x47, 0x68, 0x11, 0xd3, 0x9d, 0x71, 0xb4, 0x70, 0x0b, 0xf1, 0xc2, 0x55, 0x1b, 0x50, 0x9c, 0x3a,
	0xa3, 0x70, 0xe6, 0xdb, 0x6c, 0x2d, 0xf1, 0xa4, 0x7a, 0x0d, 0x2a, 0x63, 0x3b, 0x18, 0xf9, 0xce,
	0x34, 0x74, 0x3c, 0x17, 0xd7, 0x53, 0xd9, 0x10, 0x41, 0xea, 0x97, 0xa0, 0x6c, 0x3d, 0xb5, 0x9c,
	0x89, 0xb5, 0x3f, 0xb1, 0x71, 0xd1, 0xd4, 0xdf, 0x5b, 0x97, 0xd6, 0x1b, 0xcf, 0x34, 0x62, 0x3c,
	0x75, 0x0d, 0x16, 0xa7, 0xbe, 0x33, 0xb2, 0x71, 0x15, 0x2d, 0x18, 0x34, 0x41, 0xe6, 0x67, 0x64,
	0x85, 0xd6, 0xc4, 0x3b, 0x24, 0xed, 0xa6, 0x0b, 0xa8, 0xcc, 0x20, 0x9d, 0x78, 0x04, 0xca, 0xf1,
	0x08, 0xa8, 0xb7, 0x41, 0xf5, 0xb0, 0x1d, 0xe6, 0xa1, 0xef, 0xcd, 0xa6, 0xe6, 0xc8, 0x9b, 0xb9,
	0x21, 0x2e, 0x9e, 0x9a, 0xa1, 0xd0, 0x9c, 0xbb, 0x24, 0xa3, 0x45, 0xe0, 0xa4, 0x9f, 0x63, 0x7b,
	0x62, 0x87, 0x36, 0x5d, 0x3f, 0x35, 0x83, 0x27, 0x93, 0x8b, 0xb7, 0x7a, 0xd6, 0xe2, 0xad, 0xa5,
	0x16, 0xef, 0x2b, 0x50, 0x0d, 0xac, 0x89, 0x1d, 0x98, 0x4f, 0xbd, 0xc9, 0xec, 0xd8, 0x6e, 0xd4,
	0xf1, 0x03, 0x15, 0x84, 0x3d, 0x44, 0x10, 0xae, 0x61, 0x2b, 0x74, 0xdc, 0x43, 0x33, 0xf4, 0x42,
	0x6b, 0xd2, 0x58, 0xa6, 0x28, 0x14, 0x36, 0x24, 0x20, 0xf2, 0x19, 0x86, 0x72, 0xe8, 0x79, 0xe3,
	0x86, 0x42, 0x37, 0x21, 0x05, 0xdd, 0xf5, 0xbc, 0x31, 0x19, 0x23, 0x86, 0xb0, 0x6f, 0x8d, 0x1b,
	0x2b, 0x74, 0x13, 0x52, 0xc8, 0x96, 0x35, 0x56, 0x6f, 0x82, 0xb2, 0xef, 0xb8, 0x63, 0x69, 0x34,
	0x54, 0x44, 0xaa, 0x13, 0xb8, 0x30, 0x16, 0xb7, 0x60, 0x99, 0xb4, 0xcd, 0x14, 0x76, 0xc4, 0x2a,
	0xe9, 0xd4, 0x56, 0xbe, 0x91, 0x33, 0x6a, 0x24, 0x6b, 0xc0, 0x77, 0x86, 0xfa, 0x1a, 0x20, 0xc0,
	0xb4, 0xdd, 0x31, 0xc5, 0x5c, 0x8b, 0x30, 0xb1, 0x83, 0xba, 0x3b, 0x46, 0x3c, 0x8d, 0xe1, 0x3d,
	0xb3, 0xed, 0x27, 0xe6, 0xbe, 0x13, 0x36, 0xd6, 0xe3, 0x41, 0x78, 0x64, 0xdb, 0x4f, 0xb6, 0x9c,
	0x50, 0xbd, 0x06, 0x55, 0xc7, 0x35, 0x11, 0x0d, 0xab, 0xda, 0xb8, 0x96, 0xbb, 0x59, 0x32, 0xc0,
	0x71, 0x07, 0xd6, 0x84, 0x8e, 0x64, 0x1b, 0xea, 0x13, 0x27, 0xc0, 0x3e, 0x32, 0x32, 0x76, 0x01,
	0x97, 0xd5, 0x65, 0x71, 0x59, 0x91, 0x65, 0xbf, 0x43, 0xb1, 0x18, 0x1d, 0xab, 0x4d, 0xc4, 0xa4,
	0xfa, 0x75, 0xa8, 0xf0, 0xfe, 0x91, 0x2a, 0x1a, 0x69, 0xaa, 0x4b, 0xaa, 0x18, 0xd0, 0x7e, 0x92,
	0xf2, 0x10, 0x44, 0xbf, 0xd5, 0x16, 0xd4, 0x49, 0xe3, 0xcc, 0x03, 0xcf, 0xc7, 0xa6, 0x06, 0x8d,
	0x8b, 0xd7, 0x0a, 0x37, 0x2b, 0xe9, 0x26, 0xdc, 0x21, 0x2d, 0xde, 0xf6, 0x7c, 0x52, 0x4f, 0x60,
	0x54, 0x43, 0x21, 0x45, 0x36, 0xa1, 0x6f, 0x3d, 0x33, 0x0f, 0x26, 0xd6, 0x61, 0x63, 0x93, 0x6e,
	0x42, 0xdf, 0x7a, 0xb6, 0x3d, 0xb1, 0x0e, 0xd5, 0x37, 0x60, 0x01, 0xc1, 0x97, 0xae, 0xe5, 0x6e,
	0x56, 0xe4, 0xfd, 0x82, 0xb5, 0x12, 0x24, 0x03, 0x51, 0xd4, 0x0f, 0x01, 0xe8, 0xba, 0xc2, 0xd1,
	0x7a, 0x19, 0x0b, 0x5c, 0x4c, 0x15, 0xc0, 0x2f, 0xb6, 0xad, 0x13, 0xa3, 0x8c, 0xc8, 0x38, 0x8e,
	0xaf, 0xc3, 0xf2, 0xc8, 0xb7, 0x9e, 0x4d, 0x6c, 0xdf, 0xe4, 0xbb, 0xfb, 0x32, 0xee, 0xdf, 0x3a,
	0x03, 0xf7, 0xd9, 0x26, 0xef, 0x82, 0x1a, 0x4c, 0xed, 0x91, 0x63, 0x4d, 0xe8, 0xbc, 0x90, 0x35,
	0x1d, 0x34, 0xae, 0x60, 0x8f, 0xaf, 0xa5, 0x3f, 0x45, 0x51, 0xc9, 0x17, 0xdb, 0x56, 0x68, 0x1b,
	0x4a, 0x20, 0x03, 0x02, 0xf5, 0x13, 0x58, 0xf1, 0x66, 0xa1, 0xe9, 0x1d, 0x98, 0x41, 0xe8, 0x8d,
	0x9e, 0xd0, 0x96, 0x5f, 0x4d, 0x77, 0x95, 0xb4, 0xd2, 0xb0, 0xdc, 0x43, 0xdb, 0xa8, 0x7b, 0xb3,
	0xb0, 0x77, 0x30, 0x20, 0xd8, 0xd8, 0xf4, 0x37, 0x41, 0x25, 0xc7, 0x94, 0xe9, 0x84, 0xf6, 0x31,
	0x5b, 0xcb, 0xce, 0xb8, 0x71, 0x0d, 0x07, 0x71, 0x99, 0xe4, 0x74, 0x42, 0xfb, 0x18, 0x17, 0x73,
	0x67, 0x4c, 0x76, 0xf5, 0xfe, 0xc4, 0x1b, 0x3d, 0xb1, 0xc7, 0x8d, 0x57, 0x70, 0x31, 0xf1, 0xa4,
	0xfa, 0x21, 0x54, 0xd9, 0x4f, 0xda, 0x06, 0xed, 0xb4, 0x36, 0x54, 0x18, 0x2a, 0x36, 0xe0, 0x65,
	0x00, 0xd2, 0x85, 0x7d, 0xe7, 0xfb, 0xe4, 0xc3, 0xd7, 0xd9, 0x61, 0x34, 0x0b, 0xb7, 0x9c, 0xef,
	0x77, 0xc6, 0x9b, 0xdf, 0x81, 0xaa, 0x38, 0xef, 0xea, 0x6b, 0xe9, 0xbd, 0x44, 0x69, 0x71, 0x62,
	0x1f, 0x69, 0xc9, 0x7d, 0x44, 0x69, 0xb3, 0xb8, 0x87, 0x36, 0xff, 0x54, 0x01, 0x4a, 0x7c, 0x36,
	0xd5, 0x2f, 0xc3, 0xd2, 0xb1, 0xe7, 0x8e, 0xad, 0x93, 0x46, 0xee, 0x3c, 0xeb, 0x8f, 0x21, 0xab,
	0x1f, 0x40, 0x31, 0x9c, 0xd9, 0x01, 0x29, 0x97, 0x3f, 0x4f, 0x39, 0x8e, 0xad, 0x7e, 0x1d, 0xca,
	0xcf, 0xec, 0xb1, 0x4b, 0x8b, 0x16, 0xce, 0x53, 0x34, 0xc6, 0x57, 0xbf, 0x0a, 0xa5, 0xf0, 0x68,
	0xe6, 0x63, 0xd9, 0x85, 0xf3, 0x94, 0x8d, 0xd0, 0x49, 0x3f, 0x0f, 0x7c, 0x87, 0x14, 0x5c, 0x3c,
	0x57, 0x3f, 0x29, 0x32, 0xf9, 0x62, 0x60, 0x85, 0x33, 0x9f, 0x14, 0x5c, 0x3a, 0xd7, 0x17, 0x39,
	0x3a, 0xf9, 0x62, 0x30, 0xc3, 0x91, 0x2d, 0x9e, 0xeb, 0x8b, 0x14, 0x79, 0xb3, 0x09, 0x0b, 0xb8,
	0x81, 0x5f, 0x86, 0xb2, 0x35, 0x19, 0x79, 0x47, 0xde, 0xc4, 0x19, 0xe1, 0x5c, 0x97, 0x8c, 0x18,
	0x40, 0xb8, 0xb3, 0x4f, 0x47, 0xe6, 0x81, 0xef, 0x7d, 0xdf, 0x76, 0x71, 0x8e, 0x4b, 0x46, 0xe9,
	0xd3, 0xd1, 0x36, 0xa6, 0x37, 0x7f, 0x36, 0x07, 0xcb, 0x89, 0x3d, 0x94, 0x3a, 0xbf, 0x23, 0x4e,
	0x85, 0x6c, 0x45, 0xb6, 0x4a, 0x28, 0xa7, 0x82, 0xe8, 0x17, 0xa1, 0x44, 0x96, 0x10, 0x66, 0x16,
	0x28, 0x65, 0xb1, 0xdd, 0x31, 0x66, 0xa5, 0x29, 0xd7, 0xc2, 0x0b, 0x53, 0x2e, 0xed, 0x16, 0x14,
	0x49, 0x2f, 0x09, 0xb9, 0xae, 0x41, 0xb9, 0xb9, 0xd3, 0xea, 0xdd, 0xeb, 0xed, 0x74, 0x5a, 0xca,
	0x4b, 0xaa, 0x02, 0xd5, 0xce, 0xc0, 0x7c, 0xd0, 0x32, 0xb7, 0x8d, 0xde, 0x77, 0xf4, 0xae, 0x92,
	0xd3, 0xfe, 0x8d, 0x02, 0x2c, 0xf5, 0x28, 0x2b, 0xf0, 0x39, 0xb9, 0x90, 0x88, 0x29, 0x58, 0x10,
	0x99, 0x02, 0x89, 0xbf, 0x58, 0x3c, 0x27, 0x7f, 0x91, 0x38, 0xce, 0x97, 0xce, 0x3a, 0xce, 0x8b,
	0xa9, 0xe3, 0xfc, 0x22, 0x94, 0x22, 0xba, 0x43, 0x39, 0x91, 0xe2, 0x21, 0xa3, 0x37, 0x59, 0x7c,
	0x48, 0x26, 0xc9, 0x83, 0xcf, 0x4f, 0xf2, 0x2a, 0xd9, 0x24, 0x4f, 0x26, 0x4f, 0x55, 0x99, 0x3c,
	0x69, 0x3f, 0xbd, 0x00, 0x95, 0x5e, 0xcc, 0xfb, 0x7c, 0xde, 0x79, 0xd9, 0x80, 0x25, 0xdf, 0x3e,
	0xb6, 0x7c, 0x7e, 0xd1, 0x60, 0x29, 0xf5, 0x6b, 0x50, 0x0d, 0x8e, 0xec, 0xc9, 0x53, 0x7a, 0xc6,
	0xf2, 0xc9, 0xb9, 0x20, 0x76, 0x77, 0x80, 0xf9, 0xe4, 0x50, 0xb5, 0x8d, 0x4a, 0x10, 0x27, 0xd4,
	0x8f, 0xa0, 0x12, 0xd8, 0x13, 0x7b, 0x14, 0x9a, 0xc7, 0xde, 0x98, 0xf3, 0x8d, 0xd2, 0x3d, 0x85,
	0x76, 0x60, 0x80, 0x48, 0xbb, 0xde, 0xd8, 0x36, 0x20, 0x88, 0x7e, 0xe3, 0xfe, 0x60, 0xc5, 0x1d,
	0x97, 0x5f, 0x45, 0x58, 0xbe, 0xe3, 0x8a, 0xd9, 0xd6, 0x73, 0x9c, 0xbe, 0x38, 0xdb, 0x7a, 0x9e,
	0x5c, 0x1d, 0xe5, 0xb3, 0x56, 0x07, 0xa4, 0x56, 0xc7, 0x3b, 0xec, 0xfc, 0xae, 0xe0, 0x0c, 0x67,
	0xb4, 0x1b, 0x07, 0x5e, 0x3c, 0xc6, 0xb3, 0xa7, 0xb7, 0x7a, 0x9e, 0xe9, 0xad, 0x25, 0x4e, 0x9f,
	0x6f, 0x30, 0x1a, 0x24, 0x51, 0x99, 0x9c, 0x4c, 0x65, 0xb4, 0x0b, 0x50, 0x20, 0xdb, 0x37, 0xb9,
	0x5f, 0x5f, 0xd2, 0xfe, 0x7e, 0x0e, 0x56, 0xc8, 0xfe, 0xa7, 0xed, 0xdc, 0x72, 0xdc, 0xb1, 0xe3,
	0x1e, 0x4a, 0x4b, 0x22, 0x27, 0x2f, 0x89, 0x0b, 0x50, 0x1c, 0x3b, 0xc1, 0x51, 0xbc, 0x58, 0x96,
	0x48, 0xb2, 0x33, 0x96, 0xb6, 0x48, 0x21, 0x7b, 0x8b, 0x2c, 0x08, 0x5b, 0xe4, 0xf3, 0x2c, 0x97,
	0xcf, 0xbd, 0x9f, 0xb5, 0xff, 0x2a, 0x07, 0xaa, 0x30, 0x35, 0xe7, 0xe8, 0xb7, 0xd8, 0xbd, 0xbc,
	0xdc, 0xbd, 0x4b, 0x50, 0x66, 0xb7, 0x8e, 0xa8, 0xeb, 0x25, 0x0a, 0x98, 0xd3, 0xf7, 0x44, 0xfb,
	0x17, 0xcf, 0x6a, 0xff, 0x52, 0x6a, 0xc5, 0x65, 0xde, 0x98, 0xb4, 0x3f, 0x9a, 0x87, 0x62, 0x8b,
	0x5e, 0x90, 0xb2, 0x2e, 0x8c, 0x49, 0x09, 0x85, 0xd4, 0xdd, 0x82, 0xdc, 0xdd, 0xcb, 0x00, 0x38,
	0xcd, 0xf4, 0xce, 0x40, 0x1b, 0x5f, 0x26, 0x10, 0x7a, 0x5d, 0xe0, 0xbd, 0x5a, 0x9c, 0xdf, 0xab,
	0xcf, 0x40, 0x65, 0xb3, 0x77, 0x45, 0xe9, 0x3c, 0xbb, 0xa2, 0x9c, 0x20, 0x7a, 0xff, 0x4a, 0x0e,
	0x16, 0xb7, 0x66, 0x27, 0xb6, 0x7f, 0xae, 0x81, 0x20, 0xc3, 0x79, 0xe4, 0xb9, 0x9c, 0xd0, 0xd1,
	0x84, 0xfa, 0x0e, 0x94, 0x26, 0xde, 0xc8, 0xc2, 0xab, 0xee, 0x02, 0x6e, 0xed, 0x35, 0x71, 0x79,
	0xee, 0xb0, 0x3c, 0x23, 0xc2, 0x22, 0xb4, 0xd1, 0x7a, 0x6a, 0x85, 0x96, 0xcf, 0xae, 0xc6, 0x2c,
	0xa5, 0xfd, 0x10, 0x2c, 0xb7, 0xed, 0x89, 0xf3, 0xd4, 0xf6, 0x4f, 0x9a, 0xe3, 0xb1, 0x6f, 0x07,
	0xc1, 0xff, 0x97, 0xcd, 0xd2, 0x7e, 0x24, 0x0f, 0x4b, 0x6d, 0x9f, 0x7c, 0x3e, 0xf5, 0xd9, 0x4b,
	0x50, 0x3e, 0x98, 0x4d, 0x26, 0xa6, 0xf0, 0xed, 0x12, 0x01, 0x74, 0xbf, 0xc8, 0x61, 0xb9, 0x0e,
	0xb5, 0xa9, 0xef, 0xa1, 0x84, 0x6a, 0x7a, 0xe4, 0x85, 0x1e, 0x1b, 0x9d, 0x2a, 0x03, 0xf6, 0x09,
	0x8c, 0xdc, 0x55, 0x9f, 0xda, 0x47, 0xce, 0x88, 0x20, 0x4d, 0xc8, 0x22, 0x71, 0x3d, 0x5c, 0x43,
	0x65, 0xa3, 0xce, 0xe0, 0x7d, 0x02, 0xee, 0x7a, 0xa9, 0x8b, 0x73, 0x31, 0x7d, 0x71, 0x8e, 0x51,
	0x82, 0x91, 0xe7, 0x53, 0xf1, 0x53, 0x9e, 0xa3, 0x0c, 0x08, 0x48, 0xfb, 0xb1, 0x3c, 0x94, 0x78,
	0x5b, 0x49, 0x4f, 0x29, 0x19, 0xa2, 0x42, 0x3d, 0x9a, 0x20, 0x73, 0x32, 0x72, 0xc2, 0x13, 0x3e,
	0x27, 0xe4, 0xb7, 0xba, 0x09, 0xa5, 0xb1, 0x13, 0x84, 0xbe, 0x33, 0x0a, 0xb9, 0x18, 0x8e, 0xa7,
	0xc9, 0xd5, 0xc3, 0xa2, 0xd3, 0xcb, 0x05, 0x27, 0x2c, 0x49, 0x4a, 0x4d, 0xac, 0xd0, 0x09, 0x67,
	0x63, 0xba, 0xdd, 0xf3, 0x46, 0x94, 0x26, 0xcc, 0xe3, 0xc4, 0x73, 0x0f, 0x69, 0xe6, 0x12, 0x66,
	0xc6, 0x00, 0xe1, 0xb8, 0x2d, 0x4a, 0xc7, 0xed, 0x1b, 0xa0, 0x4c, 0x7d, 0x7b, 0xe4, 0x04, 0xb6,
	0x19, 0xd5, 0x4c, 0x7a, 0x99, 0x33, 0x96, 0x19, 0x7c, 0x87, 0x7f, 0xe0, 0x4d, 0x58, 0x89, 0x50,
	0xa3, 0x0f, 0x95, 0x11, 0x97, 0xd7, 0xb1, 0xc3, 0xe1, 0xda, 0x36, 0x40, 0xcb, 0xf2, 0xc3, 0x39,
	0x3c, 0xdc, 0xbc, 0x55, 0x8a, 0xb4, 0xa8, 0x20, 0xd2, 0xa2, 0x43, 0x58, 0x8e, 0xeb, 0xc9, 0x66,
	0x3c, 0xb2, 0x2a, 0x7b, 0x07, 0x8a, 0x94, 0x74, 0x06, 0xec, 0xc2, 0xb1, 0x21, 0xae, 0xad, 0xb8,
	0x46, 0x83, 0xa3, 0x69, 0x3f, 0x9d, 0x83, 0x12, 0x81, 0x67, 0x4a, 0xbe, 0xae, 0x42, 0x25, 0x70,
	0xad, 0x69, 0x70, 0xe4, 0x85, 0x31, 0xe1, 0x06, 0x0e, 0x9a, 0xcf, 0x79, 0x3a, 0xc7, 0xd6, 0x21,
	0x97, 0x7e, 0xd1, 0x44, 0xdc, 0xcd, 0xc5, 0xf9, 0x42, 0xaa, 0xa5, 0x84, 0x90, 0x4a, 0xfb, 0xf5,
	0x02, 0xd4, 0x49, 0xe3, 0x08, 0xe1, 0x6a, 0xdb, 0xa1, 0xe5, 0x4c, 0xd4, 0x9b, 0xb0, 0x40, 0xe8,
	0x28, 0x36, 0x32, 0xb1, 0x75, 0x78, 0x37, 0x0c, 0xc4, 0x50, 0x3f, 0x81, 0x9a, 0x28, 0xcd, 0x0a,
	0xd8, 0xed, 0xed, 0x52, 0xf6, 0x88, 0xe0, 0x18, 0x1b, 0x55, 0x41, 0xca, 0x15, 0xa8, 0xef, 0xe3,
	0x62, 0xa5, 0x34, 0xbc, 0x80, 0xdf, 0x6b, 0x88, 0x85, 0xb1, 0x55, 0x2c, 0xdf, 0x88, 0x30, 0xd5,
	0x07, 0xb0, 0x7a, 0x30, 0xb1, 0x82, 0x23, 0x76, 0xfd, 0xe7, 0x15, 0xd0, 0xbd, 0xfe, 0x8a, 0x58,
	0xc1, 0x36, 0x41, 0xc3, 0x6b, 0x8b, 0x13, 0x1c, 0x45, 0x35, 0xad, 0x1c, 0x08, 0x60, 0x5a, 0xe5,
	0x4d, 0x50, 0x84, 0x2a, 0x27, 0xce, 0xb1, 0x13, 0xb2, 0x71, 0xac, 0x47, 0xc8, 0x3b, 0x04, 0xaa,
	0xee, 0x40, 0x8d, 0x7f, 0xd1, 0x44, 0x01, 0x39, 0x65, 0x06, 0x5f, 0x4f, 0x76, 0x3a, 0x1e, 0xd1,
	0x3b, 0xfc, 0x2b, 0x28, 0x2d, 0xaf, 0x8e, 0x85, 0x94, 0x76, 0x17, 0xaa, 0x62, 0xae, 0x5a, 0x07,
	0xe8, 0x7a, 0x1c, 0xc2, 0x2e, 0x30, 0xc2, 0x20, 0x28, 0x39, 0x75, 0x1d, 0x56, 0xb6, 0x93, 0xcd,
	0x57, 0xf2, 0xda, 0xcf, 0xe5, 0xe9, 0x2a, 0x23, 0xd8, 0xa9, 0x55, 0xf6, 0x1e, 0x2c, 0x8d, 0xb1,
	0x29, 0xb8, 0xc0, 0x2a, 0xb2, 0x5c, 0x49, 0x6e, 0xac, 0xc1, 0x30, 0x09, 0x45, 0xf8, 0x74, 0x66,
	0xb9, 0x21, 0xa1, 0x2f, 0x05, 0x24, 0x60, 0x51, 0x9a, 0xd4, 0xc7, 0xe4, 0x54, 0x0b, 0x69, 0x39,
	0x15, 0xaf, 0x2f, 0x21, 0xaf, 0x8f, 0xe9, 0xc4, 0xa2, 0x44, 0x27, 0x2e, 0x40, 0x11, 0x8f, 0xd3,
	0x68, 0x75, 0x2e, 0x91, 0xa4, 0xcc, 0xc8, 0x15, 0x25, 0x46, 0xee, 0x4c, 0xc9, 0xfd, 0x45, 0x28,
	0xed, 0x93, 0xa3, 0x95, 0x9f, 0xbb, 0x0b, 0x46, 0x11, 0xd3, 0x9d, 0xb1, 0xf6, 0x5b, 0x79, 0xa8,
	0x47, 0x27, 0xdd, 0x31, 0x4e, 0xfd, 0xfb, 0xb0, 0x31, 0xc6, 0xb3, 0xc7, 0x0c, 0x8e, 0x9c, 0xe9,
	0x94, 0xd0, 0x64, 0xc7, 0x1d, 0x79, 0x91, 0xb8, 0x63, 0x8d, 0xe6, 0x0e, 0x58, 0x66, 0x07, 0xf3,
	0xd4, 0xd7, 0x60, 0x79, 0x6a, 0x9d, 0x98, 0xa1, 0x67, 0x1e, 0xdb, 0xfe, 0xe8, 0xc8, 0x72, 0xf9,
	0x7a, 0xa9, 0x4d, 0xad, 0x93, 0xa1, 0xb7, 0xcb, 0x80, 0xea, 0x7b, 0xb0, 0x3e, 0xf2, 0x26, 0xc8,
	0xdc, 0x1f, 0xf8, 0xde, 0xb1, 0x39, 0x9a, 0x05, 0xa1, 0x77, 0x6c, 0xfb, 0xac, 0xb3, 0xab, 0x2c,
	0x73, 0xdb, 0xf7, 0x8e, 0x5b, 0x2c, 0x4b, 0xbd, 0x0d, 0x6a, 0xd4, 0x94, 0x60, 0xe6, 0x1f, 0xda,
	0xe6, 0x81, 0xcd, 0xd9, 0x11, 0x85, 0xe7, 0x0c, 0x48, 0xc6, 0xb6, 0x8d, 0x5c, 0xcb, 0xd4, 0xf2,
	0x9f, 0x10, 0x64, 0x82, 0xc6, 0x86, 0x83, 0x81, 0x08, 0xc2, 0x6b, 0xb0, 0xbc, 0x6f, 0x8d, 0xcd,
	0x67, 0xb6, 0x15, 0x1e, 0xd9, 0x3e, 0x22, 0xd1, 0x51, 0xa9, 0xed, 0x5b, 0xe3, 0x47, 0x14, 0xca,
	0x2a, 0x3a, 0xf2, 0x26, 0xce, 0xd8, 0x3a, 0x41, 0x1c, 0x76, 0x8d, 0x60, 0x20, 0x82, 0xf0, 0x2a,
	0xd4, 0xe9, 0xc1, 0xe7, 0x1c, 0x1e, 0x85, 0x88, 0x43, 0xef, 0x7b, 0x55, 0x3c, 0xf7, 0x08, 0x70,
	0xdb, 0xb6, 0xb5, 0x0f, 0xa1, 0xde, 0xf3, 0xc7, 0xb6, 0x4f, 0xbb, 0x33, 0xb4, 0x0e, 0x55, 0x05,
	0x0a, 0x4f, 0xec, 0x93, 0x46, 0xee, 0x5a, 0xfe, 0x66, 0xd9, 0x20, 0x3f, 0x09, 0xad, 0x7a, 0x6a,
	0x4d, 0x66, 0x64, 0x88, 0x09, 0x8c, 0x26, 0xb4, 0x5f, 0xfa, 0x12, 0x2c, 0x62, 0xd1, 0xd4, 0x02,
	0x7e, 0x1b, 0x96, 0x02, 0x6f, 0xe6, 0x33, 0x1a, 0x9e, 0x60, 0xc3, 0xb1, 0xc8, 0x00, 0xb3, 0x0d,
	0x86, 0x26, 0x2d, 0x81, 0x05, 0x69, 0x09, 0xa8, 0xaf, 0x93, 0xa3, 0x94, 0x9c, 0xb9, 0x8b, 0xb8,
	0x17, 0x56, 0x24, 0x8e, 0x9e, 0x64, 0x18, 0x34, 0x5f, 0xdd, 0x06, 0x65, 0xcc, 0x96, 0x8a, 0xc9,
	0x8f, 0xcd, 0x25, 0x2c, 0x23, 0x51, 0xb8, 0x04, 0xe3, 0x64, 0x2c, 0x8f, 0x13, 0x9c, 0xd4, 0x6d,
	0x58, 0x24, 0x4b, 0x3a, 0x60, 0xa2, 0x9b, 0x8d, 0x54, 0xdb, 0x91, 0xce, 0x19, 0x14, 0x49, 0x7d,
	0x07, 0x96, 0x2c, 0x5c, 0x98, 0x38, 0x49, 0x09, 0x82, 0x48, 0xd1, 0xe9, 0xc2, 0x35, 0x18, 0x9e,
	0xfa, 0x09, 0xd4, 0xa7, 0xd6, 0xc9, 0xb1, 0xed, 0x86, 0xe6, 0xb1, 0x1d, 0x1e, 0x79, 0x63, 0x9c,
	0xba, 0xba, 0x2c, 0x76, 0xed, 0x53, 0x8c, 0x5d, 0x44, 0xc0, 0x45, 0x1a, 0x27, 0x85, 0xbd, 0x59,
	0x91, 0xf6, 0xe6, 0xdb, 0xd1, 0x3e, 0xaf, 0xce, 0x1b, 0x76, 0x79, 0x93, 0x7f, 0x04, 0xb5, 0x91,
	0xe5, 0x8e, 0xec, 0x89, 0xe9, 0xdb, 0x56, 0xe0, 0xb9, 0x78, 0x19, 0xac, 0xcb, 0x7d, 0x68, 0x21,
	0x82, 0x81, 0xf9, 0x46, 0x75, 0x24, 0xa4, 0x84, 0xe2, 0x6c, 0xb6, 0xeb, 0xf3, 0x8a, 0xb3, 0xe9,
	0x66, 0xc5, 0x69, 0x4a, 0xfd, 0x08, 0x96, 0x59, 0xf1, 0xa9, 0xef, 0x4d, 0xbd, 0xc0, 0xf6, 0x51,
	0x67, 0x51, 0x97, 0x0f, 0xb1, 0x3e, 0xcb, 0x33, 0xea, 0x14, 0x99, 0xa7, 0xc9, 0x51, 0x39, 0x9d,
	0x58, 0x23, 0x46, 0x56, 0x14, 0x7a, 0x54, 0x22, 0x84, 0x6b, 0x4c, 0xf8, 0x30, 0x23, 0xc2, 0x0a,
	0x15, 0x86, 0x32, 0x18, 0xbf, 0x40, 0xf8, 0xf6, 0x53, 0xc7, 0x7e, 0x46, 0x31, 0x54, 0xba, 0x83,
	0x28, 0x08, 0x11, 0xde, 0x83, 0x75, 0x4e, 0x2e, 0xcc, 0x91, 0xe7, 0x1e, 0x38, 0xfe, 0xb1, 0xa0,
	0xcb, 0x30, 0x56, 0x79, 0x66, 0x8b, 0xe6, 0x61, 0x99, 0xeb, 0x50, 0x1b, 0x79, 0xc7, 0xd3, 0x89,
	0xcd, 0x09, 0xde, 0x1a, 0xdd, 0x74, 0x1c, 0xc8, 0xbf, 0xcc, 0xba, 0x8e, 0x28, 0xeb, 0x8c, 0x26,
	0x22, 0x28, 0x42, 0x10, 0x88, 0xe6, 0xc6, 0x59, 0x97, 0x9f, 0x0b, 0xa9, 0xcb, 0xcf, 0x7b, 0xb0,
	0x6e, 0x07, 0xa1, 0x73, 0x4c, 0x50, 0x2c, 0x9f, 0xd0, 0x44, 0x26, 0x15, 0x6e, 0xd0, 0xb6, 0xf3,
	0xcc, 0x26, 0xcd, 0xc3, 0x32, 0x5f, 0x81, 0x0b, 0x51, 0x19, 0xb6, 0x2d, 0x78, 0xa9, 0x8b, 0x58,
	0x2a, 0xaa, 0xb2, 0xcd, 0x73, 0xb1, 0x1c, 0x99, 0x0a, 0x67, 0xf4, 0x64, 0x36, 0x35, 0x03, 0xfb,
	0x53, 0xd4, 0x46, 0xd4, 0x8c, 0x32, 0x85, 0x0c, 0xec, 0x4f, 0xd5, 0x77, 0x60, 0x2d, 0xde, 0x99,
	0x41, 0xe0, 0x1c, 0xba, 0xb1, 0xba, 0x61, 0xc1, 0x50, 0xa3, 0x0d, 0x88, 0x59, 0x4c, 0x02, 0x22,
	0x94, 0xc0, 0x06, 0xd2, 0x12, 0x97, 0x13, 0x25, 0x30, 0x2b, 0x55, 0x82, 0xb5, 0x05, 0x4b, 0x5c,
	0x91, 0x4b, 0xf4, 0x31, 0x0b, 0x4b, 0x90, 0x83, 0x84, 0x97, 0x90, 0x67, 0xec, 0x2a, 0x3b, 0x48,
	0x58, 0x6e, 0x2b, 0x31, 0x73, 0x4e, 0x60, 0xfa, 0xf6, 0xc8, 0x26, 0xa3, 0xc6, 0x54, 0x02, 0xe0,
	0x04, 0x06, 0x83, 0x10, 0x52, 0x86, 0x08, 0xd6, 0xf8, 0x04, 0x35, 0x02, 0x25, 0xa3, 0x48, 0x72,
	0xad, 0xf1, 0x09, 0x6a, 0xd7, 0xc8, 0x0f, 0xfa, 0x95, 0xeb, 0x74, 0xc5, 0x22, 0x84, 0xcf, 0x18,
	0xbb, 0x64, 0xf0, 0xe6, 0xb0, 0xb1, 0x7f, 0x95, 0xce, 0x18, 0xcd, 0xe4, 0xad, 0xa1, 0x23, 0x7f,
	0x07, 0x56, 0xc9, 0xd7, 0x12, 0xc5, 0x1a, 0x37, 0x70, 0x0a, 0x56, 0x9c, 0xc0, 0x90, 0xcb, 0xa8,
	0xb7, 0x98, 0x68, 0xe9, 0x35, 0x24, 0x56, 0x19, 0xb4, 0x4d, 0x10, 0x2a, 0x5d, 0x87, 0x1a, 0x1e,
	0xf5, 0x11, 0x5f, 0xf1, 0x3a, 0x5d, 0xc9, 0x04, 0xf8, 0x80, 0xf3, 0x16, 0x26, 0x5c, 0xa0, 0x77,
	0xfe, 0xc0, 0x0e, 0xc3, 0x89, 0x8d, 0xfb, 0xed, 0xc0, 0x1a, 0x85, 0x9e, 0xdf, 0xb8, 0x89, 0xdf,
	0x78, 0x3d, 0xfd, 0x0d, 0x24, 0xdb, 0x83, 0x08, 0x7f, 0x1b, 0xd1, 0x8d, 0xf5, 0x20, 0x0b, 0xac,
	0x7e, 0x02, 0x55, 0xdf, 0x7e, 0xe6, 0x3b, 0x64, 0x72, 0x08, 0xff, 0xf6, 0x46, 0x5a, 0x5b, 0x47,
	0x6b, 0x35, 0x28, 0x16, 0x72, 0x6d, 0x15, 0x3f, 0x4e, 0xa8, 0xdb, 0x50, 0xe7, 0x35, 0x30, 0x32,
	0x77, 0x0b, 0xeb, 0xb8, 0x3a, 0xb7, 0x0e, 0x46, 0xed, 0x6a, 0xbe, 0x98, 0x54, 0x6f, 0x88, 0xf5,
	0x20, 0xf9, 0x7d, 0x13, 0xc9, 0x6f, 0x8c, 0x86, 0x54, 0xf8, 0x3a, 0xd4, 0x7c, 0xfb, 0x60, 0xe6,
	0x8e, 0x4d, 0x76, 0x30, 0xdc, 0xa6, 0xc3, 0x46, 0x81, 0x8c, 0x8b, 0xb9, 0x0e, 0xb5, 0x63, 0xeb,
	0x89, 0x3d, 0x9b, 0x72, 0xa4, 0xb7, 0x28, 0x12, 0x05, 0x32, 0xa4, 0xbb, 0x50, 0x9f, 0xfa, 0xde,
	0xb1, 0x87, 0x3c, 0x3b, 0x4e, 0xdb, 0x1d, 0x1c, 0xd2, 0x6b, 0xe9, 0x86, 0xf7, 0x39, 0x1e, 0x9d,
	0xc0, 0x5a, 0x54, 0x0e, 0x65, 0x79, 0xef, 0xc0, 0xda, 0x53, 0x6f, 0x36, 0x22, 0xec, 0x84, 0x64,
	0xe6, 0xf0, 0x36, 0xb6, 0x5f, 0x65, 0x79, 0x86, 0x60, 0xed, 0xf0, 0x26, 0xac, 0x44, 0x9b, 0x83,
	0xdc, 0x47, 0x09, 0x65, 0x6a, 0xbc, 0x43, 0x59, 0x1a, 0x9e, 0xd1, 0x66, 0x70, 0x42, 0x36, 0x22,
	0x64, 0xdf, 0x96, 0x08, 0xe5, 0xbb, 0x94, 0x6c, 0xf0, 0x6c, 0x83, 0xe7, 0xe2, 0xe2, 0xfd, 0x18,
	0x2e, 0x25, 0xc9, 0xab, 0x3d, 0x36, 0xc7, 0xb6, 0x35, 0x9e, 0x38, 0xae, 0xdd, 0x78, 0x0f, 0xcb,
	0x5e, 0x4c, 0x10, 0x59, 0x7b, 0xdc, 0x66, 0x08, 0xea, 0x2e, 0xd4, 0xbc, 0xa7, 0xb6, 0x8f, 0x1a,
	0x09, 0x14, 0xf4, 0x7e, 0x09, 0xe7, 0xf5, 0x66, 0x8a, 0x45, 0xc0, 0x41, 0xb9, 0xd3, 0x63, 0xb8,
	0x38, 0x62, 0x28, 0xf4, 0xad, 0xf2, 0xe2, 0x28, 0xf6, 0xfd, 0x24, 0x9e, 0x5f, 0x76, 0x9e, 0xbd,
	0x9f, 0x3e, 0x98, 0xd9, 0x0a, 0x61, 0x07, 0x1a, 0x9f, 0x7a, 0x76, 0xa2, 0xed, 0x02, 0x5d, 0xc4,
	0x26, 0x17, 0x55, 0xf0, 0x9b, 0xd6, 0x97, 0x91, 0x95, 0xb8, 0x98, 0x25, 0xd7, 0xa0, 0xf7, 0xac,
	0x55, 0x2c, 0x27, 0xc1, 0x02, 0x52, 0x1d, 0xe5, 0x8a, 0x92, 0xd5, 0x7d, 0xe5, 0xcc, 0xea, 0xb0,
	0x5c, 0xa2, 0xba, 0xeb, 0xc2, 0x69, 0x8f, 0xcb, 0xf7, 0x03, 0x2a, 0x36, 0xe1, 0x67, 0x3a, 0x17,
	0xbb, 0x33, 0xa4, 0x91, 0xed, 0x87, 0x41, 0xe3, 0x43, 0xfc, 0x94, 0xc4, 0x49, 0x08, 0xc6, 0x4b,
	0x06, 0x3b, 0xc6, 0x08, 0x28, 0x50, 0x2f, 0x41, 0xf9, 0xa9, 0xed, 0x8e, 0x3d, 0x64, 0xe3, 0xbe,
	0x4a, 0x05, 0x97, 0x14, 0xd0, 0x21, 0x97, 0x1a, 0xb2, 0x0a, 0xac, 0xe8, 0x04, 0x18, 0xcf, 0x7c,
	0x2a, 0xf3, 0xf9, 0x1a, 0xa5, 0x6e, 0x98, 0x49, 0x8f, 0x80, 0x36, 0xcb, 0x62, 0xd4, 0x2d, 0x5a,
	0x23, 0x4f, 0x9d, 0xc0, 0xd9, 0x9f, 0xd8, 0x8d, 0xaf, 0x23, 0x59, 0x5d, 0x71, 0x02, 0xce, 0xb6,
	0x3f, 0xa4, 0x19, 0x84, 0x56, 0xf0, 0x33, 0xdf, 0x71, 0x0f, 0xbc, 0xc6, 0x37, 0x70, 0xbb, 0x64,
	0xd0, 0x0a, 0xc6, 0x5e, 0x75, 0xdc, 0x03, 0x2f, 0x62, 0x09, 0x48, 0x82, 0x74, 0xe1, 0xd8, 0x71,
	0xcd, 0x60, 0x6a, 0xbb, 0xe3, 0xc6, 0x47, 0xb4, 0x0b, 0xc7, 0x8e, 0x3b, 0x20, 0x69, 0xf5, 0xeb,
	0x50, 0xa1, 0xf7, 0x01, 0x33, 0xb4, 0x0e, 0x83, 0xc6, 0xc7, 0x38, 0x34, 0x9b, 0xa9, 0xda, 0x23,
	0x4e, 0xda, 0x80, 0x11, 0xff, 0x89, 0xbc, 0x56, 0xb4, 0x49, 0x70, 0xb1, 0x7e, 0x33, 0xcd, 0x2c,
	0x71, 0xde, 0x94, 0x2e, 0xce, 0xb1, 0x90, 0xda, 0xfc, 0xb1, 0x02, 0x2c, 0x64, 0x5e, 0x16, 0xdf,
	0x85, 0xf2, 0xc8, 0xf2, 0x43, 0x14, 0x72, 0xb2, 0xfb, 0xe2, 0x5a, 0xd6, 0xfd, 0xce, 0x28, 0x8d,
	0xf8, 0x7d, 0xf3, 0x32, 0xc0, 0xcc, 0x75, 0x42, 0x53, 0x14, 0xb3, 0x94, 0x09, 0xa4, 0x8f, 0x32,
	0x88, 0x8b, 0x50, 0x3a, 0x98, 0x58, 0xf4, 0xc6, 0xc0, 0x98, 0x71, 0x92, 0x26, 0x57, 0x8a, 0x4d,
	0x28, 0x05, 0xb3, 0x7d, 0x2a, 0x26, 0xa3, 0xf7, 0xa7, 0x28, 0x1d, 0x8b, 0x39, 0x96, 0x44, 0x31,
	0xc7, 0x3c, 0x79, 0xd3, 0x6b, 0xb0, 0x8c, 0x6d, 0x98, 0x38, 0x01, 0x6f, 0x08, 0xbd, 0x0a, 0xd5,
	0x08, 0x78, 0xc7, 0x09, 0x58, 0x63, 0xbe, 0x1a, 0xf1, 0xb4, 0x65, 0x1c, 0xaf, 0x57, 0xd2, 0x93,
	0x89, 0xff, 0x67, 0x5c, 0x61, 0x13, 0x3c, 0x14, 0xa4, 0x78, 0xa8, 0x66, 0x52, 0x36, 0x50, 0x49,
	0x2b, 0x8a, 0xc4, 0xeb, 0x7c, 0x5a, 0x20, 0xb0, 0xf9, 0x3b, 0x4b, 0xb0, 0xc4, 0xa8, 0xb5, 0x38,
	0x36, 0xb9, 0xc4, 0xd8, 0x5c, 0x06, 0x08, 0xad, 0xe7, 0x9c, 0xd6, 0x33, 0x8d, 0x6b, 0x68, 0x3d,
	0x67, 0x45, 0xdf, 0x81, 0xb5, 0x68, 0x91, 0x07, 0xb6, 0xff, 0xd4, 0x19, 0xd1, 0x3b, 0x24, 0x9d,
	0x1a, 0x95, 0xe7, 0x0d, 0x68, 0x16, 0x99, 0x88, 0x77, 0x60, 0x6d, 0x3a, 0xb1, 0xc2, 0x03, 0xcf,
	0x3f, 0x96, 0x4a, 0xd0, 0xf9, 0x52, 0x79, 0x9e, 0x50, 0xe2, 0x15, 0xa8, 0x46, 0xb7, 0x54, 0x82,
	0xb9, 0xc8, 0x8c, 0x03, 0x18, 0x8c, 0xa1, 0x60, 0x73, 0x79, 0x3b, 0xe9, 0x9d, 0xb7, 0x82, 0x30,
	0xd6, 0x52, 0xf1, 0xae, 0xbb, 0x6f, 0x05, 0xce, 0x28, 0xeb, 0xae, 0xbb, 0x45, 0x32, 0x48, 0x85,
	0xd9, 0x37, 0xe3, 0xd2, 0x9c, 0x9b, 0xf1, 0xfb, 0xb0, 0x11, 0x8f, 0xc2, 0x8c, 0xfc, 0xe0, 0x25,
	0xe8, 0xfd, 0x37, 0x1a, 0xa3, 0x01, 0xcf, 0x24, 0xa5, 0xbe, 0x0a, 0xe5, 0xe8, 0xb0, 0x63, 0x3a,
	0xd1, 0x4b, 0xa7, 0x9c, 0x8f, 0x46, 0x8c, 0x9d, 0x25, 0x14, 0xa8, 0xbc, 0x90, 0x50, 0xa0, 0x3a,
	0x5f, 0x28, 0xf0, 0x1a, 0x2c, 0x07, 0xc7, 0xd6, 0x64, 0x62, 0x7a, 0xe4, 0xfb, 0xd8, 0x8b, 0x1a,
	0x33, 0xda, 0x20, 0x60, 0x6c, 0x15, 0x69, 0xfe, 0x97, 0xe1, 0x42, 0x3c, 0x2d, 0x96, 0x6f, 0x9b,
	0xf6, 0xf3, 0xd0, 0xb7, 0x10, 0xbf, 0x4e, 0x7b, 0x1d, 0xcd, 0x90, 0xe5, 0xdb, 0x3a, 0xc9, 0x24,
	0xc5, 0x9a, 0x70, 0x59, 0x2e, 0x16, 0x2d, 0x64, 0x36, 0x77, 0xcb, 0x58, 0x78, 0x53, 0x2c, 0xcc,
	0x97, 0x31, 0x9b, 0xca, 0x84, 0x20, 0x42, 0xc9, 0x12, 0x44, 0xb8, 0x9e, 0x6b, 0x4e, 0x2d, 0x3f,
	0x74, 0x59, 0x17, 0xe8, 0x25, 0xaa, 0xe6, 0x7a, 0x6e, 0x9f, 0x42, 0xe7, 0x08, 0x2c, 0xd4, 0x73,
	0x08, 0x2c, 0x56, 0xcf, 0x21, 0xb0, 0x58, 0x4b, 0x0b, 0x2c, 0x36, 0x7f, 0x7d, 0x11, 0xca, 0xd1,
	0x74, 0xaa, 0x1f, 0x42, 0x23, 0x1a, 0x88, 0xe4, 0x18, 0xd0, 0x5d, 0xb8, 0xc1, 0xf3, 0x13, 0xfd,
	0xc7, 0x59, 0x75, 0x5c, 0xc2, 0xab, 0x8f, 0x6d, 0x9b, 0x70, 0x1e, 0xd2, 0xf6, 0x5c, 0xc5, 0x4c,
	0x83, 0xe5, 0xb1, 0x32, 0xe4, 0x40, 0x22, 0x2c, 0x31, 0xe7, 0xa6, 0x58, 0x09, 0xba, 0x4f, 0x57,
	0x48, 0xd6, 0x43, 0x9a, 0xc3, 0xf0, 0xbf, 0x22, 0xcc, 0x6e, 0xa2, 0x0c, 0xdd, 0xa9, 0xeb, 0x3c,
	0x5b, 0x2e, 0x87, 0x97, 0x48, 0xd2, 0x36, 0xdb, 0xf2, 0x5d, 0xc7, 0x3d, 0xc4, 0xdd, 0x5a, 0x20,
	0x97, 0x48, 0xc7, 0x0d, 0x74, 0x0a, 0x23, 0xfc, 0x28, 0x45, 0x1a, 0x59, 0xc1, 0xd1, 0xbe, 0x35,
	0x7a, 0x82, 0x1b, 0xb6, 0x60, 0xd0, 0xa2, 0x2d, 0x06, 0x24, 0xa4, 0x02, 0xdb, 0x9c, 0x1c, 0x1d,
	0xba, 0x69, 0x55, 0x47, 0x20, 0x70, 0xec, 0xeb, 0x3a, 0x5c, 0xe5, 0x8d, 0x15, 0x36, 0xe4, 0x7e,
	0xe0, 0x8c, 0x4f, 0x78, 0x61, 0xba, 0x87, 0x5f, 0x66, 0x68, 0xbb, 0xd1, 0xc6, 0x44, 0x24, 0x5a,
	0xcd, 0xe6, 0xcf, 0xe4, 0x99, 0x2a, 0xf9, 0x26, 0x28, 0xb3, 0xc0, 0x36, 0xc5, 0x91, 0x63, 0x1a,
	0xe5, 0xfa, 0x2c, 0xb0, 0x3b, 0xf1, 0xa8, 0xa9, 0x1f, 0x40, 0x83, 0x60, 0x8a, 0x84, 0x2a, 0x2a,
	0x41, 0x2d, 0x5d, 0xd6, 0x67, 0x81, 0x3d, 0x88, 0x69, 0x16, 0x2f, 0xf8, 0x75, 0xd8, 0x24, 0x05,
	0xe5, 0xf1, 0x88, 0x8a, 0x16, 0xb0, 0xe8, 0x85, 0x59, 0x60, 0xb7, 0xc4, 0xa1, 0xe1, 0x85, 0x2f,
	0x41, 0x39, 0x2a, 0x8c, 0xf3, 0x52, 0x32, 0x4a, 0x1c, 0x57, 0xfb, 0x76, 0xac, 0xea, 0x1e, 0xea,
	0xbb, 0xe6, 0xc3, 0xde, 0x5e, 0xeb, 0x9e, 0x6e, 0x28, 0x2f, 0xa9, 0x0d, 0x58, 0x1b, 0xdc, 0xeb,
	0xf4, 0xfb, 0x9d, 0xee, 0x5d, 0x73, 0x5b, 0xd7, 0xa3, 0x9c, 0x9c, 0xba, 0x09, 0x1b, 0xad, 0x5e,
	0xa7, 0x3b, 0x30, 0x5b, 0xcd, 0xc1, 0xbd, 0xad, 0x66, 0xeb, 0x7e, 0x94, 0x97, 0x57, 0xcb, 0xb0,
	0x88, 0x79, 0x4a, 0x61, 0xf3, 0xe7, 0x0b, 0x6c, 0x7c, 0xf8, 0x9d, 0x32, 0x9c, 0xf9, 0xae, 0x4d,
	0xcf, 0xf6, 0x1a, 0xbd, 0x53, 0x52, 0x48, 0x84, 0x40, 0x2e, 0x10, 0xf6, 0x98, 0x19, 0xe9, 0x22,
	0x02, 0x85, 0x70, 0x46, 0xc9, 0x72, 0x67, 0xd6, 0x24, 0x66, 0xa5, 0x99, 0x20, 0x98, 0x30, 0x4a,
	0x98, 0x13, 0x71, 0xd0, 0x84, 0x30, 0x8f, 0x2c, 0xd7, 0x64, 0x82, 0x54, 0xc6, 0xc4, 0x32, 0xb5,
	0xac, 0x32, 0xb2, 0x5c, 0xaa, 0xdd, 0x63, 0xbc, 0xae, 0xfa, 0x11, 0x5c, 0x74, 0x82, 0x04, 0xb2,
	0x39, 0xa5, 0x72, 0x12, 0xaa, 0xb2, 0x45, 0x63, 0xcd, 0x0d, 0x27, 0x90, 0xca, 0xf5, 0x29, 0x06,
	0xee, 0x7b, 0x8b, 0x94, 0xf7, 0xa6, 0x53, 0x7b, 0xcc, 0x4d, 0xbf, 0x8f, 0xac, 0xa0, 0x4d, 0x21,
	0x84, 0xf0, 0x3b, 0x81, 0xe9, 0xb8, 0xe4, 0x3a, 0x41, 0x98, 0x01, 0x7b, 0x6a, 0x31, 0xde, 0x90,
	0xaa, 0xe2, 0xd6, 0x9c, 0xa0, 0x43, 0x33, 0xfb, 0x71, 0x1e, 0x59, 0xd7, 0xa4, 0x0f, 0xd1, 0x0a,
	0xe5, 0xbd, 0xa0, 0x06, 0x19, 0xa4, 0x7f, 0x7c, 0x59, 0xf2, 0x7e, 0xac, 0xc3, 0x12, 0xe9, 0xc7,
	0xc1, 0x01, 0x33, 0xae, 0x59, 0x74, 0x82, 0xf6, 0xc1, 0x81, 0x7a, 0x05, 0x47, 0x77, 0x6a, 0x79,
	0x66, 0x68, 0xb9, 0x87, 0xcc, 0xbc, 0xb7, 0xec, 0x04, 0x7d, 0xcb, 0x1b, 0x5a, 0xee, 0xe1, 0xe6,
	0x7f, 0x5d, 0x80, 0xf5, 0xcc, 0x2b, 0xab, 0xda, 0xe5, 0xfc, 0xbe, 0x70, 0xf9, 0x45, 0xde, 0x2e,
	0x97, 0x96, 0xb3, 0xc7, 0x85, 0x91, 0xbb, 0x5b, 0x4d, 0xdc, 0x76, 0xf1, 0x06, 0xf2, 0x3a, 0x2c,
	0x8f, 0xbc, 0xe3, 0x63, 0x27, 0x08, 0x08, 0xb3, 0xef, 0xc7, 0xd6, 0x59, 0xf5, 0x18, 0x6c, 0x30,
	0x13, 0x2d, 0xc2, 0x4f, 0xf8, 0x82, 0x89, 0x56, 0x68, 0x3d, 0xc7, 0x2c, 0x72, 0xa0, 0x30, 0x86,
	0x20, 0x3e, 0x41, 0x29, 0x26, 0x9d, 0xdf, 0x35, 0x96, 0xdd, 0xe2, 0x47, 0x28, 0x16, 0x7b, 0x05,
	0x0a, 0x4f, 0xad, 0x90, 0x99, 0x4d, 0x2c, 0x8b, 0x0d, 0x7f, 0x68, 0x85, 0x06, 0xc9, 0x23, 0x1f,
	0x7d, 0x6a, 0x85, 0xb4, 0x2a, 0xca, 0x1a, 0x14, 0x9f, 0x5a, 0x21, 0x2f, 0xfd, 0xec, 0x88, 0x92,
	0x94, 0x44, 0xe9, 0x47, 0x47, 0xa1, 0x41, 0xf2, 0x48, 0xe9, 0x67, 0x47, 0xac, 0x34, 0x33, 0x79,
	0x7a, 0x76, 0x44, 0x4b, 0x7f, 0x04, 0x35, 0x52, 0xf1, 0xc8, 0x9a, 0x8c, 0x66, 0x84, 0xd4, 0x33,
	0x56, 0xaf, 0x91, 0x68, 0x45, 0x8b, 0xe7, 0x1b, 0xd5, 0xa7, 0x42, 0x4a, 0xfd, 0x00, 0xca, 0x74,
	0xfc, 0xcd, 0xd0, 0x63, 0xb2, 0xd4, 0xcd, 0xf4, 0x15, 0x90, 0x0e, 0xf5, 0xd0, 0x33, 0x4a, 0x01,
	0xfb, 0xb5, 0xf9, 0x2f, 0xe7, 0xa0, 0x22, 0xdc, 0x04, 0xd4, 0x7e, 0x7c, 0x4d, 0x8e, 0x44, 0x87,
	0x84, 0x2d, 0xa4, 0xb3, 0x79, 0x45, 0x6a, 0x0e, 0xc5, 0x63, 0xa5, 0x91, 0x31, 0xe4, 0xd7, 0x68,
	0x01, 0x46, 0x8e, 0xc6, 0x91, 0x6f, 0x8f, 0x1d, 0xd2, 0x39, 0x7f, 0x6c, 0xee, 0x3b, 0x2e, 0xd3,
	0x4e, 0xd6, 0x28, 0xb8, 0x65, 0xf9, 0xe3, 0x2d, 0xc7, 0xd5, 0x1c, 0x58, 0x4e, 0x70, 0xb1, 0xea,
	0x32, 0x54, 0x90, 0xe0, 0xf4, 0x8c, 0xce, 0xdd, 0x4e, 0x57, 0x79, 0x49, 0xbd, 0x00, 0xab, 0x08,
	0xe8, 0x1b, 0x9d, 0x96, 0x6e, 0xee, 0xf6, 0xda, 0x9d, 0xed, 0x0e, 0x9a, 0xff, 0x6f, 0xc2, 0x06,
	0x66, 0x3c, 0xd8, 0x6b, 0x76, 0x87, 0x9d, 0xe1, 0xe3, 0x38, 0x2f, 0x1f, 0x91, 0xad, 0xb6, 0x4e,
	0x5f, 0x03, 0x2c, 0x68, 0x7f, 0x27, 0x17, 0x9b, 0xdf, 0x91, 0x6f, 0x0c, 0x4c, 0x43, 0x1f, 0xee,
	0x19, 0x5d, 0xbd, 0xad, 0xbc, 0x14, 0x01, 0xb6, 0xf7, 0xba, 0x6d, 0xac, 0x9b, 0x7c, 0x74, 0x60,
	0xee, 0x36, 0xbb, 0x7b, 0xcd, 0x1d, 0xb3, 0xd5, 0xeb, 0x6e, 0x77, 0x8c, 0x5d, 0xac, 0x78, 0x03,
	0xd4, 0x56, 0xb3, 0x6b, 0xb6, 0x8d, 0xce, 0x43, 0xdd, 0x30, 0x0d, 0xfd, 0x91, 0xd1, 0x19, 0xea,
	0x4a, 0x41, 0xbd, 0x0c, 0x17, 0x3b, 0x83, 0x04, 0xd8, 0xec, 0x1b, 0xfa, 0xc3, 0x8e, 0xfe, 0x48,
	0x59, 0x20, 0x1f, 0xb8, 0xd7, 0x24, 0xf9, 0xbd, 0x7e, 0x5f, 0x6f, 0x2b, 0x8b, 0xd8, 0xf8, 0x81,
	0xd9, 0xe9, 0x0e, 0x86, 0xcd, 0xee, 0x90, 0x20, 0xf6, 0x9b, 0x46, 0x73, 0xd8, 0xe9, 0x75, 0x95,
	0x25, 0x42, 0x61, 0xc9, 0x37, 0x76, 0x75, 0xa3, 0x75, 0x8f, 0xe4, 0xf2, 0xaf, 0x14, 0x55, 0x80,
	0x25, 0xf2, 0x95, 0xed, 0x6d, 0xa5, 0xc4, 0xda, 0xdc, 0x6f, 0xf6, 0xcc, 0x61, 0xb3, 0x7b, 0x57,
	0x29, 0x6b, 0x7f, 0x10, 0x2a, 0x82, 0x2c, 0x48, 0x55, 0xa1, 0xce, 0xdb, 0x11, 0x8d, 0xa5, 0x00,
	0xa3, 0x9d, 0x55, 0x72, 0xea, 0x2a, 0x2c, 0x73, 0xd8, 0x6e, 0xf3, 0xbe, 0x6e, 0xee, 0xf5, 0x95,
	0xbc, 0xba, 0x06, 0x4a, 0x04, 0xe4, 0xa3, 0x5a, 0xd0, 0xfe, 0x52, 0x0e, 0x6a, 0x92, 0xa8, 0x48,
	0xc4, 0x33, 0xf4, 0x81, 0x6e, 0x3c, 0xc4, 0xe1, 0xbc, 0x0c, 0x0d, 0x0e, 0xc5, 0x59, 0xd8, 0xeb,
	0x36, 0x1f, 0x36, 0x3b, 0x3b, 0xcd, 0xad, 0x1d, 0x5d, 0xf9, 0xcd, 0x9c, 0x7a, 0x05, 0x2e, 0xf2,
	0xec, 0xad, 0xbd, 0xc7, 0x38, 0x5e, 0x0f, 0xf6, 0x3a, 0x86, 0xbe, 0xab, 0x77, 0x87, 0xca, 0xdf,
	0xcc, 0xa9, 0x57, 0x61, 0x53, 0x2a, 0x4e, 0x67, 0x9e, 0x8c, 0xc5, 0x5d, 0xbd, 0xad, 0xfc, 0xa7,
	0x39, 0x75, 0x03, 0x56, 0x38, 0x82, 0xfe, 0xed, 0xa1, 0xd1, 0x24, 0xe7, 0x90, 0xf2, 0x9f, 0x91,
	0xae, 0xc4, 0x5d, 0x1e, 0xde, 0xd3, 0x8d, 0x81, 0xf2, 0x7f, 0xe5, 0xb4, 0x5f, 0xda, 0x80, 0x1a,
	0xbf, 0x60, 0x66, 0xab, 0x6d, 0x2e, 0x42, 0x89, 0x72, 0xab, 0xb1, 0x4d, 0x12, 0xa6, 0xa9, 0x4d,
	0x12, 0xa3, 0xff, 0x91, 0x86, 0xa6, 0x44, 0x01, 0x1d, 0xd9, 0xe2, 0x6f, 0x51, 0xb6, 0xfb, 0xf9,
	0xa2, 0x94, 0x32, 0x99, 0xf2, 0xa8, 0xe2, 0x1c, 0x79, 0xd4, 0x5c, 0xd1, 0x77, 0xe9, 0x33, 0x89,
	0xbe, 0xcb, 0xa7, 0x89, 0xbe, 0x5b, 0xb0, 0x1c, 0x77, 0xf0, 0x38, 0x7a, 0x1f, 0x92, 0x90, 0x0b,
	0xc8, 0x3a, 0x4c, 0xa3, 0x3e, 0x96, 0x75, 0x9a, 0xb2, 0xfc, 0xbc, 0x9a, 0x94, 0x9f, 0x8b, 0xdf,
	0x60, 0x97, 0xe1, 0x5a, 0xc6, 0x83, 0x03, 0x86, 0xc2, 0x6e, 0xc1, 0xd1, 0x37, 0x06, 0x73, 0x74,
	0x3d, 0xf5, 0xcf, 0xa7, 0xeb, 0x59, 0x7e, 0x21, 0x5d, 0xcf, 0x55, 0xa8, 0x88, 0x92, 0x7f, 0x76,
	0xd9, 0xb0, 0x62, 0x89, 0x3f, 0x41, 0x10, 0x04, 0xfd, 0x2b, 0x0c, 0x21, 0x16, 0xf0, 0x93, 0xeb,
	0x8a, 0x20, 0xd7, 0x67, 0xca, 0x9a, 0x69, 0x2c, 0xcf, 0x4f, 0x29, 0x5e, 0x56, 0xe7, 0x28, 0x5e,
	0x04, 0x99, 0xc0, 0xda, 0x59, 0x7a, 0x95, 0xf5, 0x94, 0x5e, 0x25, 0xa1, 0xba, 0xd9, 0x4c, 0xa9,
	0x6e, 0xee, 0x41, 0xf5, 0xd0, 0xf6, 0xcc, 0xd0, 0xb7, 0x46, 0xe4, 0x26, 0xc5, 0x5e, 0x61, 0xdc,
	0xc8, 0x9a, 0x2a, 0x7a, 0x37, 0xbd, 0x6b, 0x7b, 0x43, 0x86, 0x6c, 0x54, 0x0e, 0xe3, 0x84, 0xda,
	0x80, 0x22, 0x2a, 0x1a, 0xa6, 0x21, 0xaa, 0x4a, 0xca, 0x06, 0x4f, 0xaa, 0x5f, 0x85, 0x1a, 0xdd,
	0x71, 0x7c, 0x4f, 0x5d, 0x3e, 0xc5, 0x70, 0xaa, 0x8a, 0xa8, 0x7c, 0x27, 0xe9, 0xf1, 0x4c, 0x90,
	0xb3, 0xed, 0x0a, 0x4e, 0xe3, 0xab, 0xf3, 0x5b, 0xc7, 0xb4, 0x32, 0xe4, 0x84, 0xe3, 0xf3, 0x45,
	0xa8, 0xea, 0xeb, 0xb0, 0xcc, 0xaa, 0x89, 0x1e, 0xd5, 0x5d, 0xa5, 0xd6, 0x55, 0x14, 0xdc, 0xe3,
	0x4f, 0xeb, 0x1e, 0xc0, 0xb2, 0x35, 0x7e, 0x4a, 0x86, 0xc7, 0x1c, 0xdb, 0x53, 0x2f, 0x70, 0x42,
	0x7c, 0x69, 0x51, 0x91, 0xc5, 0xb4, 0x89, 0x6f, 0xd2, 0x02, 0x6d, 0x8a, 0x6f, 0xd4, 0x2d, 0x29,
	0xad, 0x76, 0xa1, 0xce, 0xaa, 0x62, 0x3c, 0x31, 0xaa, 0x61, 0x12, 0xaa, 0x06, 0xb9, 0x46, 0x5e,
	0x15, 0xa2, 0x1b, 0xb5, 0xb1, 0x98, 0x4c, 0x0b, 0x46, 0xb5, 0x73, 0x08, 0x46, 0xaf, 0xbf, 0x80,
	0x60, 0xf4, 0x3d, 0xa6, 0x75, 0x79, 0x15, 0x9b, 0x79, 0x65, 0x7e, 0x33, 0x05, 0xed, 0xcb, 0x33,
	0xb8, 0x9c, 0x18, 0x37, 0xd6, 0x59, 0x4e, 0x02, 0x6e, 0xe0, 0xcc, 0xbd, 0x7f, 0xee, 0x51, 0xc4,
	0xc2, 0x8c, 0x38, 0x6c, 0x5a, 0x73, 0xf3, 0xd4, 0x5b, 0xb0, 0xb2, 0x6f, 0x1f, 0x3a, 0xae, 0xa4,
	0xaa, 0x7b, 0x8d, 0x1a, 0x4d, 0x62, 0x86, 0xa0, 0xa7, 0xdb, 0x84, 0x12, 0xc9, 0xfe, 0xbe, 0xe7,
	0xda, 0xa8, 0x1d, 0x2a, 0x1b, 0x51, 0x5a, 0xb2, 0x70, 0x7d, 0x4f, 0xb6, 0x70, 0x8d, 0xf7, 0x32,
	0x5a, 0x7d, 0x7e, 0x49, 0xdc, 0xcb, 0xf8, 0x3c, 0xf1, 0xba, 0x20, 0x2c, 0x45, 0x94, 0xf7, 0xe9,
	0x5e, 0x8e, 0xf4, 0x08, 0x04, 0xe9, 0x03, 0x68, 0xb0, 0x33, 0x29, 0xc2, 0x8d, 0x8e, 0xaf, 0x2f,
	0x33, 0xbd, 0x03, 0xe6, 0x4b, 0xc3, 0xd2, 0x19, 0x6f, 0xfe, 0x17, 0x39, 0xa8, 0x08, 0x9b, 0x4e,
	0xbd, 0x03, 0x8c, 0xd0, 0x98, 0x87, 0xb6, 0xc7, 0x0c, 0xa9, 0x24, 0x26, 0xf6, 0xae, 0xed, 0x19,
	0x65, 0x8a, 0x72, 0xd7, 0xf6, 0x08, 0x3e, 0x6b, 0x3e, 0xc1, 0xcf, 0xcf, 0xc1, 0xa7, 0x28, 0x04,
	0xff, 0x3d, 0x88, 0x88, 0x10, 0x96, 0x28, 0x64, 0x97, 0xa8, 0x70, 0x24, 0xf6, 0x0d, 0x6b, 0x34,
	0xb2, 0xa7, 0x21, 0x96, 0x58, 0x98, 0xd7, 0x26, 0x44, 0xb9, 0x6b, 0x7b, 0x9b, 0x7f, 0x25, 0x07,
	0x75, 0x79, 0xc2, 0x53, 0xc7, 0xfb, 0x46, 0x64, 0xaa, 0xc0, 0x2c, 0xad, 0x2d, 0xae, 0x66, 0xe2,
	0x22, 0x56, 0x6a, 0xad, 0xf1, 0xf6, 0x79, 0x97, 0x54, 0xf2, 0x8d, 0xaf, 0x0a, 0x0b, 0xb8, 0x58,
	0x28, 0x7f, 0x80, 0xbf, 0xb5, 0x57, 0xc4, 0x27, 0xab, 0x83, 0xbd, 0x56, 0x4b, 0x1f, 0x0c, 0x94,
	0x9c, 0xf0, 0x26, 0x35, 0xbf, 0xf9, 0x2b, 0x39, 0xc2, 0x98, 0x88, 0x1b, 0xf2, 0xbc, 0x2d, 0xdf,
	0x4e, 0xb4, 0xfc, 0xce, 0x39, 0x09, 0xc0, 0x17, 0xd7, 0x70, 0x7a, 0x81, 0x9f, 0x7f, 0x81, 0xcd,
	0x9d, 0x72, 0x81, 0x8d, 0xaf, 0xa3, 0x79, 0xf1, 0x3a, 0x7a, 0x0b, 0x56, 0x9c, 0x80, 0x99, 0x2b,
	0xf3, 0x85, 0xcd, 0x6e, 0xf2, 0xcb, 0x4e, 0x80, 0xba, 0x1c, 0xde, 0x35, 0x72, 0xd9, 0x8b, 0x70,
	0x0f, 0x1c, 0x3f, 0x08, 0xe3, 0x12, 0x0b, 0xfc, 0xcb, 0x58, 0x62, 0x9b, 0x64, 0xf2, 0x62, 0xda,
	0x5d, 0x80, 0x98, 0xac, 0xab, 0x35, 0x28, 0x77, 0x7b, 0x5d, 0xdd, 0x1c, 0x3e, 0xee, 0xeb, 0xca,
	0x4b, 0x6a, 0x15, 0x4a, 0xcd, 0xbd, 0x61, 0x6f, 0xb7, 0x39, 0xd4, 0x69, 0x7f, 0x29, 0xf7, 0xaf,
	0x14, 0xc8, 0x65, 0x62, 0x30, 0x6c, 0xb6, 0xee, 0x9b, 0xcd, 0xc1, 0xa0, 0x73, 0xb7, 0xab, 0x2c,
	0x68, 0x3e, 0x6c, 0xce, 0xa7, 0x32, 0x84, 0xa3, 0x6e, 0xeb, 0xfd, 0xde, 0xa0, 0x33, 0x34, 0xdb,
	0xfa, 0x76, 0x73, 0x6f, 0x67, 0x48, 0x59, 0x6f, 0x0e, 0xec, 0x74, 0x3b, 0xf4, 0x01, 0xf3, 0x3a,
	0xac, 0xc4, 0x88, 0xf8, 0x17, 0xef, 0x18, 0x6b, 0xa0, 0x70, 0x70, 0x74, 0x25, 0x29, 0x68, 0x76,
	0x7c, 0x7f, 0x99, 0x7f, 0x79, 0x78, 0x49, 0xb8, 0x22, 0x60, 0xfd, 0x9d, 0x81, 0x79, 0xd7, 0xe8,
	0xed, 0xf5, 0xc9, 0x4d, 0x88, 0xdc, 0x4d, 0x1e, 0x2b, 0x79, 0xf5, 0x12, 0x5c, 0x88, 0xc0, 0xdb,
	0x1d, 0x63, 0x30, 0x8c, 0x33, 0x0b, 0xda, 0x9f, 0x59, 0x82, 0x22, 0xbb, 0xca, 0xe1, 0x99, 0x7f,
	0x64, 0x8f, 0x9e, 0x78, 0xb3, 0x30, 0x36, 0xe5, 0x07, 0x0e, 0xa2, 0x1c, 0x70, 0x64, 0xbf, 0x94,
	0x97, 0xed, 0x97, 0x44, 0xa6, 0xba, 0x20, 0x33, 0xd5, 0xaf, 0xc3, 0x72, 0xe8, 0x5b, 0x6e, 0x60,
	0x8d, 0x50, 0xb9, 0xe7, 0xdb, 0x07, 0x6c, 0x05, 0xd6, 0x05, 0xb0, 0x61, 0x1f, 0xa8, 0xef, 0xc2,
	0x12, 0x33, 0x15, 0x5a, 0x3c, 0xcb, 0x54, 0x88, 0x21, 0xa2, 0x21, 0xe9, 0x91, 0xe5, 0xba, 0xf6,
	0x44, 0x34, 0x24, 0xa5, 0x90, 0xce, 0x18, 0x65, 0x87, 0x2c, 0x9b, 0x5a, 0x78, 0x32, 0xf5, 0x4c,
	0x8d, 0x41, 0x99, 0xbd, 0x6e, 0x52, 0x23, 0x50, 0x4a, 0x6b, 0x04, 0x36, 0xa1, 0x34, 0x9a, 0xf9,
	0xbe, 0xed, 0x8e, 0x4e, 0xb8, 0xd5, 0x3c, 0x4f, 0x53, 0xe5, 0xcf, 0x21, 0x17, 0xcc, 0xa3, 0xf2,
	0x87, 0xa4, 0x48, 0x7f, 0xd8, 0xbe, 0xad, 0xcc, 0xed, 0x4f, 0x62, 0x8b, 0xbe, 0x0e, 0xcb, 0x8e,
	0xeb, 0x84, 0x0e, 0xd5, 0x83, 0x0a, 0xcf, 0xa8, 0xeb, 0x31, 0x38, 0xd3, 0xee, 0xa7, 0x96, 0x69,
	0xf7, 0x23, 0x32, 0x81, 0xf5, 0xb3, 0x98, 0xc0, 0xe5, 0x14, 0x13, 0xf8, 0x75, 0xe1, 0x23, 0x84,
	0x8b, 0x52, 0xd2, 0xcc, 0x30, 0xeb, 0x06, 0xf5, 0xb9, 0x10, 0x7d, 0x9e, 0xec, 0x37, 0xa1, 0x85,
	0xe8, 0x4a, 0x60, 0x85, 0x3e, 0x7b, 0x67, 0x30, 0xf4, 0x25, 0xf0, 0x01, 0x94, 0xb8, 0x0a, 0x07,
	0x39, 0xdd, 0xba, 0x7c, 0x5d, 0x62, 0x75, 0xf7, 0x19, 0x8a, 0x11, 0x21, 0xab, 0x1f, 0xc1, 0xa5,
	0xf0, 0xc8, 0xf1, 0xc7, 0x28, 0xb5, 0x3f, 0x31, 0x93, 0xcb, 0x6b, 0x15, 0x3f, 0xd5, 0x40, 0x94,
	0x3e, 0xc1, 0x18, 0x4a, 0x0b, 0x4d, 0xbb, 0xc5, 0x9c, 0x14, 0x2c, 0x43, 0xa5, 0xbf, 0xd3, 0x6c,
	0x91, 0x1b, 0x73, 0x1b, 0x45, 0x9a, 0x2b, 0x50, 0x8b, 0x2f, 0xd1, 0x04, 0x94, 0xd7, 0x7e, 0x22,
	0x07, 0x05, 0x72, 0x52, 0x49, 0xf6, 0xe6, 0xb9, 0xa4, 0xbd, 0xb9, 0x68, 0xa9, 0x9e, 0x4f, 0x58,
	0xaa, 0x67, 0x1a, 0x92, 0x17, 0xb2, 0x0d, 0xc9, 0x33, 0x0d, 0xd4, 0x17, 0x32, 0x0d, 0xd4, 0xb5,
	0xdf, 0x2b, 0x40, 0xb9, 0x75, 0x64, 0xb9, 0x87, 0xf6, 0x4e, 0xc6, 0xcb, 0x95, 0x0f, 0xa0, 0x62,
	0xa3, 0xed, 0x8a, 0x29, 0x38, 0xcc, 0x90, 0x2c, 0x61, 0x74, 0xcc, 0xa6, 0x2c, 0xaf, 0x1d, 0xfd,
	0x26, 0x77, 0x60, 0x56, 0x30, 0x7e, 0x97, 0x43, 0x01, 0x1d, 0xac, 0x75, 0x84, 0x9f, 0xa4, 0xb5,
	0x2e, 0xa4, 0x6b, 0xa5, 0x2d, 0xa2, 0xb5, 0x8e, 0xa2, 0xdf, 0xf2, 0xcd, 0x7a, 0x31, 0x7d, 0xb3,
	0x8e, 0xe8, 0xca, 0x92, 0x4c, 0x57, 0x2e, 0x41, 0x39, 0xb0, 0x27, 0x13, 0x9a, 0x57, 0x64, 0xfa,
	0x46, 0x04, 0x24, 0x6e, 0xe4, 0x25, 0xf9, 0x46, 0x7e, 0x09, 0xca, 0xde, 0x64, 0x6c, 0x52, 0x7b,
	0x4e, 0xfe, 0xcc, 0x65, 0x32, 0x7e, 0x48, 0xd2, 0x24, 0xd3, 0xb5, 0x9f, 0xb1, 0x4c, 0xe6, 0x24,
	0xc3, 0xb5, 0x9f, 0xd1, 0xcc, 0x79, 0x66, 0x87, 0xb7, 0x22, 0x6b, 0x4f, 0x6a, 0x76, 0xa8, 0x4a,
	0xc2, 0x37, 0xd9, 0xd0, 0x53, 0x74, 0xc2, 0x51, 0x4b, 0x3b, 0xe1, 0xa0, 0xbf, 0xa5, 0x7d, 0x59,
	0x61, 0xb0, 0xac, 0x9d, 0xbb, 0x9c, 0xdc, 0xb9, 0xda, 0xc7, 0xb0, 0x64, 0xd8, 0xc1, 0x6c, 0x12,
	0x66, 0xbd, 0x0e, 0x18, 0x79, 0x6c, 0x11, 0x2e, 0x1a, 0xf8, 0x5b, 0x55, 0xa0, 0x70, 0x1c, 0x1c,
	0x32, 0x63, 0x7d, 0xf2, 0x53, 0xfb, 0xc9, 0x02, 0x2c, 0xb5, 0xed, 0xa7, 0xce, 0x88, 0x4e, 0x0c,
	0xfe, 0xe2, 0x24, 0xbf, 0x6c, 0x94, 0x28, 0xa0, 0x33, 0x26, 0x6d, 0x65, 0x99, 0xc7, 0xde, 0xd8,
	0x9e, 0x30, 0xa9, 0x5e, 0x85, 0xc2, 0x76, 0x09, 0x48, 0xbd, 0x02, 0x79, 0x8f, 0x33, 0x26, 0x75,
	0x49, 0x23, 0x39, 0x30, 0xf2, 0x5e, 0x40, 0x28, 0xb4, 0x17, 0x98, 0x4f, 0x6d, 0x3f, 0xe0, 0x2f,
	0x5f, 0xca, 0x46, 0xd9, 0x0b, 0x1e, 0x52, 0x00, 0xca, 0x04, 0x66, 0xc1, 0x91, 0x19, 0x7a, 0x4f,
	0x6c, 0xee, 0x1a, 0xa3, 0x4c, 0x20, 0x43, 0x02, 0x50, 0xdf, 0x85, 0x32, 0xcd, 0x8e, 0x6d, 0xda,
	0x65, 0xb3, 0x49, 0x82, 0x49, 0xd6, 0x5a, 0x69, 0xca, 0x7e, 0xe1, 0x15, 0x7b, 0x3a, 0x8d, 0xbe,
	0x48, 0x09, 0x3e, 0x58, 0xd3, 0x29, 0xff, 0x64, 0x03, 0x8a, 0x8c, 0xfc, 0xe3, 0xa2, 0x29, 0x1b,
	0x3c, 0x89, 0x83, 0x39, 0x65, 0x82, 0x90, 0xbc, 0x33, 0x25, 0x83, 0xe9, 0x1c, 0xdb, 0x0e, 0x5b,
	0x22, 0xf8, 0x1b, 0x61, 0xe3, 0x03, 0x8b, 0x2d, 0x0e, 0xfc, 0x8d, 0x03, 0x6c, 0x8d, 0xd8, 0x13,
	0x52, 0xf2, 0x53, 0x5e, 0xee, 0xb5, 0xc4, 0x72, 0xbf, 0x04, 0xe5, 0xfd, 0x99, 0x3b, 0x9e, 0xe0,
	0x90, 0xd7, 0xe9, 0x90, 0x53, 0x40, 0x67, 0xac, 0xfd, 0xe3, 0x6f, 0xc0, 0x22, 0x8a, 0x72, 0xcf,
	0xf5, 0xf0, 0xe3, 0x2a, 0x54, 0x22, 0xcd, 0x40, 0xb4, 0x5d, 0x81, 0x83, 0x70, 0x8b, 0x2c, 0x85,
	0xd6, 0x61, 0x24, 0xce, 0x42, 0x0d, 0xc6, 0x62, 0x68, 0x1d, 0xb2, 0x5d, 0xe7, 0x5b, 0xee, 0x58,
	0x90, 0x67, 0x61, 0xba, 0x33, 0x56, 0x35, 0xa8, 0x84, 0xde, 0xbe, 0x39, 0x0b, 0x84, 0x3d, 0x89,
	0x45, 0xcb, 0xa1, 0xb7, 0xbf, 0x17, 0x60, 0x2f, 0xb6, 0xa0, 0xe6, 0x04, 0x04, 0xc5, 0x7c, 0x66,
	0x4d, 0x26, 0x36, 0x17, 0x8b, 0x5f, 0x49, 0xcb, 0xa4, 0x1f, 0x61, 0x3e, 0x3b, 0xe9, 0x2a, 0x4e,
	0xb0, 0x17, 0xd8, 0x14, 0xa4, 0x7e, 0x0b, 0x15, 0x3a, 0xa4, 0x8e, 0xa8, 0x17, 0xd6, 0x74, 0x8a,
	0xd3, 0x92, 0x38, 0x0b, 0x68, 0x4d, 0xcd, 0xe9, 0x94, 0x55, 0xa3, 0x60, 0x35, 0x5c, 0xf5, 0xd1,
	0x9c, 0x4e, 0xa5, 0x07, 0x56, 0xe5, 0x73, 0x3d, 0xb0, 0x22, 0xf7, 0x33, 0x2f, 0x08, 0x51, 0x97,
	0x34, 0xe6, 0x84, 0x00, 0x28, 0xa8, 0x45, 0x36, 0x0e, 0x9a, 0xc2, 0x1d, 0x3a, 0x41, 0x68, 0xfb,
	0x26, 0x7d, 0xd2, 0x55, 0xe1, 0xa6, 0x70, 0x14, 0xda, 0xc7, 0xa7, 0x5d, 0x6b, 0xb0, 0x68, 0x1f,
	0x5b, 0xce, 0x84, 0x2d, 0x00, 0x9a, 0x50, 0x6f, 0x40, 0x15, 0x7f, 0x70, 0x49, 0x52, 0x2d, 0xd2,
	0x20, 0x55, 0x10, 0xce, 0x44, 0x46, 0x68, 0x47, 0xc7, 0xbe, 0x21, 0xd0, 0x83, 0x2a, 0x07, 0x22,
	0x41, 0x50, 0x61, 0x61, 0xe2, 0x1d, 0x7a, 0x48, 0x09, 0xca, 0x06, 0xfe, 0x26, 0x74, 0x6a, 0x9f,
	0x2c, 0x5b, 0x1f, 0x8f, 0xe5, 0xb2, 0xc1, 0x52, 0xe4, 0x06, 0xcf, 0x75, 0xd9, 0xb8, 0x6b, 0x56,
	0xd2, 0x46, 0xd2, 0x4c, 0xab, 0xcd, 0xcf, 0xec, 0x28, 0x91, 0xa5, 0x99, 0x51, 0xcf, 0xd4, 0xcc,
	0xac, 0xca, 0x9a, 0x99, 0xab, 0x50, 0x11, 0x4d, 0x35, 0x98, 0xec, 0x29, 0x88, 0x4d, 0x34, 0x24,
	0xe3, 0xa3, 0xf5, 0x84, 0xf1, 0x51, 0xa6, 0x04, 0x74, 0x63, 0x8e, 0x04, 0x94, 0x1e, 0x96, 0xfc,
	0xa6, 0x21, 0x9a, 0x08, 0x2f, 0x0b, 0xf0, 0x58, 0x6c, 0xe6, 0x86, 0xd6, 0x28, 0x64, 0x33, 0xd9,
	0x60, 0xc2, 0x0f, 0x0a, 0xa4, 0x13, 0x19, 0x5b, 0x96, 0x5f, 0xcc, 0x78, 0x57, 0x8b, 0x9a, 0x2c,
	0x99, 0x5d, 0xdb, 0x86, 0xba, 0x35, 0x0b, 0x3d, 0x41, 0x17, 0xf9, 0x72, 0xda, 0xe6, 0x92, 0x2d,
	0xdd, 0x59, 0xe8, 0x45, 0x9a, 0x49, 0xa3, 0x66, 0x89, 0x49, 0xf5, 0xbb, 0xb0, 0x21, 0xd7, 0x63,
	0xda, 0xae, 0xb5, 0x3f, 0xb1, 0xc7, 0x28, 0xf1, 0xaa, 0xbf, 0xf7, 0xda, 0x19, 0xf5, 0xe9, 0x14,
	0xdb, 0x58, 0xb3, 0x32, 0xa0, 0xc9, 0xe3, 0xe4, 0xca, 0x59, 0x8c, 0xe0, 0xd5, 0x2c, 0xbf, 0x3c,
	0xd2, 0xdb, 0xc1, 0x6b, 0x67, 0xbf, 0x1d, 0x7c, 0x25, 0xf5, 0x76, 0x50, 0xbd, 0x0b, 0x75, 0x6f,
	0x6a, 0xbb, 0x82, 0x4f, 0x1a, 0x0d, 0x7b, 0x27, 0x1b, 0x7a, 0x52, 0x0c, 0x3a, 0xd0, 0xfc, 0x06,
	0x5b, 0xf3, 0x44, 0xa8, 0xba, 0x07, 0xab, 0xb1, 0xe5, 0x8c, 0xe3, 0x86, 0xb6, 0xff, 0xd4, 0x9a,
	0x04, 0x68, 0x6a, 0x5c, 0x91, 0x85, 0x7c, 0x4c, 0x29, 0x36, 0xf3, 0xa9, 0x1a, 0xb0, 0xc3, 0x71,
	0x0d, 0x35, 0xaa, 0x20, 0x82, 0x9d, 0xa6, 0x53, 0x7c, 0xf5, 0x14, 0x9d, 0xe2, 0x47, 0x70, 0x89,
	0xd1, 0xfa, 0x63, 0x6f, 0xec, 0x1c, 0x70, 0xf1, 0x0c, 0x9f, 0x41, 0x6a, 0xa4, 0xcc, 0x64, 0x38,
	0xbb, 0x88, 0x81, 0x77, 0x75, 0x3e, 0x3b, 0xdf, 0x15, 0x0c, 0xb4, 0xf9, 0x8a, 0xa7, 0xea, 0xd5,
	0xd7, 0xe6, 0xcd, 0x7d, 0x3b, 0xb1, 0x11, 0x50, 0xd5, 0xba, 0x36, 0xce, 0x80, 0xaa, 0x77, 0x60,
	0x75, 0x7f, 0x16, 0x38, 0xae, 0x1d, 0x04, 0x68, 0x2c, 0x68, 0x5a, 0xe3, 0xb1, 0x3d, 0x46, 0x29,
	0x56, 0xcd, 0x58, 0xe1, 0x59, 0x1d, 0xf7, 0xc0, 0x6b, 0x92, 0x0c, 0xf5, 0x35, 0x58, 0x4e, 0xdc,
	0xf1, 0xd1, 0xc0, 0xb9, 0x66, 0xd4, 0xa4, 0xcb, 0x7d, 0x64, 0x61, 0xfd, 0x46, 0xda, 0xc2, 0x3a,
	0xb6, 0x45, 0x65, 0x32, 0xbe, 0x5d, 0x58, 0x91, 0x46, 0x06, 0x3b, 0x77, 0x2b, 0x6d, 0xe7, 0x46,
	0x0b, 0x0a, 0x43, 0x84, 0xfd, 0x5a, 0x3e, 0x96, 0x01, 0x6a, 0x0b, 0x6a, 0x74, 0xf9, 0x70, 0x11,
	0xff, 0x9b, 0xf3, 0x0e, 0x1e, 0xb6, 0x7a, 0x98, 0xa0, 0x3f, 0x10, 0x52, 0xea, 0x3b, 0xb0, 0x26,
	0x55, 0xc2, 0x65, 0xa2, 0xb7, 0xa9, 0xad, 0xb0, 0x88, 0xcb, 0x24, 0xa3, 0x5f, 0x82, 0xa2, 0xf7,
	0xd4, 0xf6, 0x27, 0xd6, 0x09, 0x5a, 0x31, 0x27, 0x0c, 0x53, 0xe9, 0x07, 0x7b, 0x14, 0xc1, 0xe0,
	0x98, 0xea, 0x0f, 0xc0, 0x7a, 0x30, 0x3a, 0xb2, 0xc7, 0x33, 0xf4, 0xf8, 0x16, 0xd1, 0xd0, 0x80,
	0x99, 0x38, 0x67, 0xcc, 0xed, 0x80, 0xa3, 0xb7, 0x62, 0x6c, 0x63, 0x2d, 0xc8, 0x80, 0xaa, 0x5f,
	0x83, 0x8b, 0xf6, 0xc1, 0x81, 0x3d, 0x0a, 0x9d, 0xa7, 0xb6, 0x99, 0xa4, 0xdb, 0x6f, 0xe3, 0xac,
	0x5d, 0x88, 0x10, 0x5a, 0x32, 0x01, 0x97, 0x8c, 0x58, 0xdf, 0x49, 0x18, 0xb1, 0x5e, 0x23, 0xf7,
	0xe1, 0xe8, 0xf8, 0x0f, 0xd0, 0xc0, 0xb4, 0x6c, 0x40, 0x74, 0xf6, 0xa3, 0x0d, 0xec, 0xbe, 0xe5,
	0x3e, 0xa1, 0x0f, 0xa0, 0x3f, 0x62, 0x2c, 0x8c, 0xe5, 0x3e, 0xc1, 0x07, 0xd0, 0x68, 0x29, 0xe5,
	0x3e, 0x31, 0xad, 0x11, 0xb5, 0xc4, 0x71, 0xbd, 0xc6, 0xc7, 0xf4, 0xdc, 0x24, 0xe0, 0x26, 0x85,
	0x76, 0x3d, 0x42, 0x76, 0x10, 0x8f, 0x70, 0x1d, 0xa3, 0x23, 0xb4, 0x14, 0x2d, 0x1b, 0x40, 0x40,
	0x5b, 0x08, 0x41, 0x19, 0xad, 0x54, 0x11, 0xf9, 0xda, 0x27, 0x88, 0xb6, 0x2c, 0x56, 0xc5, 0x9c,
	0xf9, 0x51, 0x3e, 0x84, 0x74, 0xa8, 0x49, 0x3b, 0x44, 0x01, 0x9c, 0x0b, 0x7a, 0x4e, 0x72, 0xb6,
	0x48, 0x69, 0xce, 0x05, 0x3d, 0xef, 0x8c, 0xd5, 0x0e, 0xac, 0x88, 0x66, 0x0d, 0x54, 0xfe, 0xd0,
	0x4a, 0x5b, 0x48, 0x0a, 0x36, 0x0c, 0x54, 0x04, 0xa1, 0x04, 0x09, 0x08, 0xb9, 0x1c, 0xf1, 0x1b,
	0xef, 0x33, 0xeb, 0xa4, 0xd1, 0x4e, 0x5f, 0x8e, 0xd8, 0x8d, 0xf6, 0x91, 0x75, 0x62, 0xc0, 0x34,
	0xfa, 0xcd, 0xad, 0x12, 0xf4, 0x73, 0x5a, 0x25, 0x6c, 0x67, 0x5a, 0x25, 0xdc, 0x3d, 0xa7, 0x55,
	0xc2, 0x3d, 0xd9, 0x2a, 0x41, 0x32, 0x2b, 0xe8, 0x9c, 0xdf, 0xac, 0x00, 0xad, 0x1e, 0x91, 0x85,
	0x31, 0xc5, 0xb3, 0xe3, 0x5b, 0xcc, 0xea, 0x11, 0x73, 0xf6, 0xe2, 0x13, 0x84, 0xaf, 0x09, 0x41,
	0x5a, 0x73, 0x9f, 0x5b, 0xcf, 0xb9, 0x4f, 0x5a, 0x91, 0xc4, 0x26, 0x65, 0x24, 0xb1, 0xf3, 0x42,
	0x46, 0x12, 0x1f, 0x41, 0x6d, 0x6a, 0x9d, 0x78, 0xb3, 0x68, 0x26, 0x77, 0x33, 0x45, 0x16, 0xde,
	0x8c, 0xcf, 0x62, 0x75, 0x2a, 0xa4, 0xd4, 0x87, 0xb0, 0x31, 0xf2, 0xbd, 0x20, 0x30, 0x8f, 0x3d,
	0x37, 0x3c, 0x12, 0xec, 0x5d, 0x1a, 0xdd, 0xf4, 0x49, 0xd5, 0x22, 0x98, 0xbb, 0x04, 0x31, 0x5e,
	0x1b, 0xc6, 0xda, 0x28, 0x03, 0xaa, 0x7e, 0x0d, 0xe0, 0xc8, 0x9a, 0x58, 0x13, 0xca, 0x91, 0xf5,
	0xe6, 0xb1, 0xb7, 0xf7, 0x08, 0x0e, 0x72, 0x65, 0xe5, 0x23, 0xfe, 0x33, 0xcb, 0xc4, 0xb2, 0x9f,
	0x65, 0x62, 0xf9, 0x2d, 0x50, 0x04, 0xbe, 0x8b, 0x12, 0xd9, 0x07, 0xe9, 0x56, 0xf3, 0xf9, 0xe4,
	0xec, 0x18, 0xd2, 0xd8, 0x7a, 0x20, 0xa5, 0xf1, 0x05, 0xf4, 0xc1, 0x01, 0xad, 0xc3, 0x48, 0xcb,
	0xae, 0xd8, 0x29, 0xb4, 0xbd, 0x8d, 0x85, 0x8b, 0xe3, 0x83, 0x03, 0x2c, 0xf5, 0x11, 0x54, 0x48,
	0x29, 0x32, 0x6a, 0x8e, 0x7b, 0xd8, 0x18, 0x64, 0x6c, 0x22, 0x5e, 0x70, 0x40, 0x71, 0x0c, 0x18,
	0x1f, 0x1c, 0xb0, 0xdf, 0x92, 0x96, 0x65, 0x98, 0xd0, 0xb2, 0x5c, 0x85, 0x0a, 0xf7, 0x17, 0x40,
	0x96, 0xce, 0x1e, 0xe5, 0x50, 0x38, 0xa8, 0x33, 0x56, 0x3f, 0x86, 0xda, 0xb1, 0xe5, 0xb8, 0xe6,
	0xc8, 0x0a, 0xed, 0x43, 0xcf, 0x3f, 0x69, 0x3c, 0x9c, 0x43, 0xa3, 0x5b, 0x0c, 0xc1, 0xa8, 0x12,
	0x7c, 0x9e, 0x52, 0x3f, 0x81, 0x6a, 0x30, 0xdb, 0x8f, 0x8b, 0x3f, 0x4a, 0xdb, 0xd4, 0x73, 0x5e,
	0x62, 0x3f, 0xaa, 0xa2, 0x12, 0xc4, 0x09, 0xf5, 0x01, 0xac, 0x1e, 0x5b, 0xcf, 0x4d, 0x6a, 0xfd,
	0x1f, 0x3f, 0xd6, 0xf8, 0x36, 0x8e, 0x82, 0x96, 0x71, 0xce, 0x59, 0xcf, 0xdb, 0x04, 0x77, 0xc8,
	0x1e, 0x66, 0x18, 0xca, 0x71, 0x02, 0xa2, 0xbe, 0x0a, 0x75, 0xb9, 0xca, 0xc6, 0x63, 0xfe, 0x7e,
	0x26, 0xc6, 0x54, 0xef, 0xc2, 0x32, 0x3b, 0xca, 0x1c, 0xd7, 0xb4, 0xc6, 0xc7, 0x8e, 0xdb, 0xf8,
	0xce, 0x3c, 0x2e, 0x94, 0x9e, 0x88, 0x1d, 0xb7, 0x49, 0xd0, 0x0c, 0x76, 0x8e, 0xb2, 0x24, 0x21,
	0xb7, 0x6c, 0xf3, 0x70, 0x82, 0xeb, 0x8c, 0x1b, 0x3f, 0xc0, 0xf8, 0x69, 0xcc, 0x60, 0x04, 0xb7,
	0x33, 0x56, 0x87, 0xb0, 0xc1, 0xc8, 0xad, 0x6f, 0x4f, 0x28, 0xfb, 0xcd, 0x78, 0xba, 0xef, 0xce,
	0x3b, 0x8d, 0x91, 0x2f, 0xe5, 0x8e, 0x06, 0xd7, 0x68, 0x69, 0x83, 0x15, 0x66, 0x8c, 0xdd, 0xb7,
	0xa1, 0x21, 0x10, 0x63, 0xe4, 0x86, 0x23, 0x5e, 0xf1, 0x07, 0xcf, 0x55, 0xef, 0x46, 0x5c, 0x5e,
	0x84, 0xab, 0x06, 0xac, 0x4f, 0x7d, 0x6f, 0x3c, 0x1b, 0x25, 0xab, 0xfd, 0x03, 0xe7, 0xaa, 0x76,
	0x95, 0x15, 0x96, 0xea, 0xdc, 0x85, 0x55, 0xe9, 0x78, 0x62, 0x35, 0x9a, 0xe9, 0xa7, 0x5b, 0x5b,
	0xf1, 0x61, 0xc5, 0x2a, 0x5c, 0xd9, 0x4f, 0x82, 0x08, 0x41, 0xc5, 0x4b, 0x00, 0x9b, 0x03, 0xc6,
	0x90, 0xfc, 0x41, 0xdc, 0x09, 0x0a, 0xc9, 0xa1, 0x84, 0x8b, 0xb1, 0x23, 0x09, 0xbb, 0x66, 0x2b,
	0x65, 0xd7, 0x3c, 0x84, 0xb5, 0x04, 0xdd, 0xa0, 0x0b, 0x72, 0x1f, 0x9b, 0x77, 0x3d, 0x63, 0x6d,
	0x88, 0xe4, 0x04, 0x57, 0xe4, 0x4a, 0x90, 0x04, 0x11, 0xbe, 0x89, 0x9a, 0x6e, 0x4b, 0xb7, 0xa9,
	0xa0, 0x31, 0xa2, 0x7c, 0x13, 0xe6, 0xb5, 0x84, 0x3b, 0x15, 0x7b, 0x8f, 0x43, 0xf7, 0x08, 0x25,
	0x7f, 0x63, 0xe4, 0x4c, 0xaa, 0x1c, 0x88, 0x44, 0xee, 0x7d, 0xd8, 0x38, 0xb6, 0x9e, 0x3b, 0xc7,
	0xb3, 0x63, 0x93, 0xbf, 0x26, 0x60, 0xcf, 0x25, 0x0e, 0x98, 0x51, 0x3c, 0xcd, 0x1d, 0xb0, 0x4c,
	0xfa, 0x6a, 0xa2, 0x23, 0x58, 0x8c, 0x30, 0x7a, 0x7f, 0x38, 0x8f, 0xe2, 0x45, 0x8f, 0x4e, 0x28,
	0xdd, 0x8f, 0xec, 0x46, 0x18, 0xe5, 0xbf, 0x00, 0x45, 0x72, 0x29, 0x25, 0x43, 0x79, 0x44, 0x95,
	0x6f, 0xc7, 0x8e, 0x4b, 0x86, 0x91, 0x70, 0x9b, 0x82, 0x9d, 0x6e, 0xd0, 0x70, 0xd2, 0xda, 0x6d,
	0x36, 0x7e, 0xb1, 0xbd, 0x6e, 0x60, 0x54, 0x85, 0x17, 0x07, 0x01, 0xd9, 0xc8, 0x02, 0xa7, 0x43,
	0xb6, 0xd5, 0xf7, 0xe8, 0x46, 0x8e, 0x99, 0x9d, 0xce, 0x78, 0xf3, 0x11, 0xa8, 0xe9, 0x9b, 0x8a,
	0xda, 0x84, 0x72, 0x7c, 0xc5, 0xa1, 0x1e, 0x0c, 0xaf, 0x9f, 0xe3, 0x8a, 0x63, 0xc4, 0xa5, 0x36,
	0x77, 0x61, 0x25, 0x95, 0x4f, 0xce, 0x15, 0xba, 0x32, 0x70, 0x9c, 0x4d, 0x72, 0x19, 0x67, 0xfe,
	0x16, 0x11, 0x8c, 0x23, 0xac, 0xbb, 0x63, 0x55, 0x81, 0x02, 0x19, 0x15, 0xaa, 0xef, 0x21, 0x3f,
	0x37, 0x7f, 0xb1, 0xc4, 0x14, 0x82, 0xdf, 0x86, 0xd5, 0xe8, 0x65, 0x9a, 0xc0, 0xda, 0xe7, 0x5e,
	0xf0, 0x7d, 0xda, 0x8a, 0x97, 0x04, 0xa9, 0x1a, 0x0a, 0x97, 0x82, 0xd9, 0x14, 0x8d, 0xb3, 0xdd,
	0x19, 0xd3, 0x1d, 0x56, 0x9c, 0x60, 0x40, 0x60, 0xbb, 0xb6, 0x3b, 0x23, 0x6b, 0xc6, 0xb7, 0x3f,
	0x9d, 0x39, 0xbe, 0x3d, 0x36, 0x99, 0xc5, 0x08, 0x73, 0x94, 0x43, 0xd5, 0x88, 0x6b, 0x3c, 0xd7,
	0xa0, 0x99, 0xd4, 0x61, 0xce, 0x2d, 0x58, 0x41, 0x4b, 0x45, 0x52, 0x6b, 0x74, 0x47, 0xa3, 0x5a,
	0xc4, 0x65, 0x92, 0x41, 0xaa, 0xe6, 0x57, 0xb3, 0x2f, 0xc1, 0xc6, 0x91, 0x33, 0xc6, 0x57, 0x07,
	0x47, 0xa6, 0xeb, 0x85, 0x76, 0x54, 0x80, 0x7a, 0x70, 0x5a, 0x25, 0xb9, 0x6d, 0x27, 0x38, 0xea,
	0x7a, 0xa1, 0xcd, 0x0b, 0xdd, 0x81, 0x55, 0xba, 0x8d, 0x7d, 0xc7, 0x0d, 0x49, 0x51, 0x5a, 0x82,
	0xda, 0x03, 0xaf, 0xe0, 0x3e, 0x26, 0x39, 0x6d, 0x96, 0x41, 0xba, 0x81, 0x0d, 0x8a, 0xdf, 0x40,
	0xf2, 0x8f, 0x30, 0xb3, 0x60, 0x92, 0x1b, 0xbd, 0x04, 0xe0, 0x5f, 0x79, 0x17, 0xd6, 0x83, 0x23,
	0xef, 0x99, 0x49, 0xe5, 0xe6, 0x02, 0x73, 0xc1, 0xec, 0x82, 0x49, 0x26, 0x7a, 0x72, 0x8a, 0x78,
	0x0a, 0xd2, 0x30, 0xec, 0xcd, 0xd4, 0xf7, 0x46, 0x76, 0x10, 0x70, 0xca, 0x41, 0x8d, 0x84, 0x57,
	0x48, 0x56, 0x3f, 0xca, 0x21, 0x2b, 0xff, 0x03, 0x68, 0x70, 0x8f, 0xa6, 0x64, 0x5a, 0x4d, 0x2a,
	0x6a, 0x1f, 0x4d, 0xbc, 0xc0, 0x66, 0xd6, 0xc3, 0xeb, 0x2c, 0x9f, 0x4c, 0x19, 0x3d, 0x5c, 0x49,
	0xa6, 0xda, 0x82, 0x2b, 0x52, 0xc1, 0xb4, 0x40, 0x87, 0x3a, 0x0e, 0xbe, 0x24, 0x14, 0x4f, 0x5e,
	0x69, 0xc9, 0xd8, 0x67, 0x7c, 0x7d, 0x7c, 0x70, 0xc0, 0x0c, 0xc7, 0x56, 0x93, 0xdf, 0x6e, 0x1f,
	0x1c, 0x68, 0xff, 0x61, 0x3e, 0xd6, 0x9a, 0x5e, 0x80, 0xd5, 0xde, 0x43, 0xdd, 0x18, 0x76, 0x76,
	0x99, 0x32, 0xc7, 0xdc, 0xed, 0xb5, 0x75, 0xe5, 0x25, 0x75, 0x05, 0x6a, 0x9d, 0x81, 0x39, 0xd8,
	0xeb, 0x13, 0x90, 0xde, 0xdd, 0xa3, 0xb6, 0xa5, 0xcc, 0x28, 0xb1, 0x6d, 0x1a, 0x7a, 0x4b, 0xef,
	0xf4, 0x87, 0x66, 0xff, 0x5e, 0x6f, 0xd8, 0x53, 0xf2, 0xea, 0x3a, 0xac, 0xe8, 0xed, 0xce, 0x10,
	0x51, 0x4d, 0xbd, 0xdb, 0xdc, 0xda, 0x41, 0x77, 0xd3, 0x2a, 0xd4, 0xef, 0x75, 0xda, 0xba, 0xd9,
	0xee, 0x0c, 0xee, 0x99, 0xdd, 0xde, 0x50, 0x57, 0x16, 0xd4, 0x3a, 0x40, 0x73, 0x6f, 0xd8, 0x33,
	0xfb, 0x46, 0xa7, 0x3b, 0xa4, 0x56, 0x9f, 0x58, 0xb4, 0x6f, 0xf4, 0x76, 0x7b, 0xc3, 0x4e, 0xaf,
	0x1b, 0x95, 0x5f, 0x52, 0x2f, 0xc2, 0xfa, 0xe0, 0x5e, 0xef, 0x11, 0x33, 0x89, 0xbc, 0xd7, 0xdc,
	0x69, 0xee, 0x50, 0xd5, 0x74, 0x91, 0xb4, 0x1c, 0xab, 0x8e, 0xbd, 0x5d, 0xa3, 0xc5, 0x63, 0x09,
	0xdd, 0x66, 0xf7, 0xf5, 0x56, 0xa7, 0xb9, 0x83, 0x7d, 0x31, 0xa9, 0x0f, 0xed, 0xd6, 0x4e, 0x6f,
	0xa0, 0x2b, 0x65, 0x55, 0x83, 0x2b, 0x52, 0x2e, 0xd7, 0xf2, 0x92, 0x26, 0x0e, 0x9b, 0xdd, 0x96,
	0xae, 0x00, 0x69, 0x51, 0x46, 0x0d, 0xed, 0xed, 0x6d, 0xa5, 0xa2, 0xed, 0xc1, 0x4a, 0x6a, 0x6f,
	0xaa, 0x57, 0xe1, 0x52, 0xc6, 0x28, 0x72, 0x1b, 0x59, 0xe5, 0xa5, 0x79, 0x08, 0x6d, 0xbd, 0xb5,
	0xd3, 0xe9, 0xea, 0x4a, 0x6e, 0xf3, 0x3e, 0x14, 0xd9, 0xb5, 0x58, 0xbd, 0x0c, 0x30, 0xf1, 0x0e,
	0x3d, 0x93, 0x3e, 0xa0, 0xa3, 0xca, 0x86, 0x32, 0x81, 0x74, 0xf0, 0x11, 0xdd, 0x2b, 0x50, 0xa5,
	0x32, 0x4c, 0x86, 0xc0, 0xb4, 0x0d, 0x14, 0x86, 0x28, 0x9b, 0x7f, 0x3e, 0x07, 0xab, 0x19, 0x37,
	0xe4, 0x2c, 0xc1, 0x25, 0xb5, 0x49, 0x48, 0x0a, 0x2e, 0x37, 0xa1, 0x34, 0xf5, 0x1d, 0xcf, 0xe7,
	0x0e, 0xaa, 0x6a, 0x46, 0x94, 0x56, 0x6f, 0x40, 0x3d, 0xbe, 0x4f, 0x23, 0xbb, 0x45, 0xe5, 0xe9,
	0xb5, 0x08, 0xca, 0xa5, 0x65, 0xf6, 0xf3, 0xa9, 0xe3, 0x33, 0x1c, 0xaa, 0xcb, 0x06, 0x0a, 0x42,
	0xef, 0xb3, 0x3e, 0xac, 0x65, 0xdd, 0xe2, 0xd5, 0xef, 0xcc, 0x13, 0x06, 0x50, 0xaa, 0x7e, 0xe3,
	0x5c, 0xc2, 0x80, 0x6c, 0x59, 0xc0, 0xe6, 0x7d, 0xa8, 0x08, 0x9c, 0xa9, 0xfa, 0x8d, 0x04, 0x3b,
	0x9b, 0x4b, 0x3f, 0xa5, 0x95, 0xb9, 0x61, 0x91, 0x95, 0xdd, 0x6c, 0x41, 0x45, 0x38, 0xcc, 0x54,
	0x15, 0x16, 0x0e, 0x7c, 0xef, 0x98, 0x8d, 0x28, 0xfe, 0x56, 0xeb, 0x90, 0x0f, 0x3d, 0x36, 0x82,
	0xf9, 0xd0, 0xe3, 0xa7, 0x44, 0x21, 0x3e, 0x25, 0x0c, 0xa8, 0x8a, 0x27, 0xa2, 0xba, 0x95, 0x3c,
	0x48, 0x33, 0xbc, 0xf1, 0xa6, 0x0e, 0x52, 0xf9, 0x1c, 0xd5, 0xbe, 0x0c, 0x55, 0x51, 0x99, 0x40,
	0x36, 0xe1, 0xa3, 0xe6, 0xce, 0x8e, 0x3e, 0x24, 0x6b, 0x1c, 0xed, 0x8d, 0x71, 0x7b, 0x33, 0x18,
	0xdd, 0x6c, 0x4a, 0x4e, 0xbb, 0x0d, 0xe5, 0x48, 0x73, 0xa0, 0x2e, 0x43, 0xa5, 0xd9, 0xef, 0x0b,
	0x05, 0xc8, 0xae, 0xed, 0xf7, 0x63, 0xec, 0x1b, 0x50, 0x93, 0x84, 0xab, 0x68, 0x1c, 0x82, 0x2f,
	0x4b, 0x94, 0x97, 0xd4, 0x12, 0x2c, 0x90, 0x4c, 0x25, 0xa7, 0xbd, 0x0d, 0x6b, 0x59, 0x32, 0x58,
	0xb5, 0x02, 0x45, 0x46, 0xdb, 0xa9, 0x79, 0x06, 0x85, 0x2b, 0x39, 0xcd, 0x82, 0xb5, 0x2c, 0xc1,
	0x1d, 0xd9, 0xb7, 0xa9, 0xad, 0xca, 0x37, 0x11, 0x35, 0x27, 0xc9, 0xa9, 0x37, 0xe0, 0x95, 0x39,
	0x38, 0xad, 0xbd, 0xc1, 0xb0, 0xb7, 0xdb, 0xf9, 0x8e, 0xde, 0x56, 0xf2, 0xda, 0x3f, 0x07, 0xcb,
	0x09, 0xf1, 0x99, 0x7a, 0x0d, 0x5e, 0x46, 0x93, 0xee, 0xc7, 0xe2, 0xee, 0xec, 0xf6, 0x4c, 0x42,
	0x98, 0x3a, 0xdd, 0xbb, 0x4a, 0x4e, 0x7d, 0x05, 0x2e, 0xa7, 0x31, 0x98, 0x69, 0x7b, 0xaf, 0xbb,
	0xf3, 0x58, 0xc9, 0xab, 0xd7, 0xe1, 0x6a, 0x1a, 0x25, 0x32, 0x58, 0x47, 0xa4, 0x82, 0xf6, 0x0b,
	0x39, 0xa8, 0x8a, 0x12, 0x37, 0x32, 0xd2, 0xbd, 0xae, 0xb9, 0xd5, 0x6b, 0x1a, 0x6d, 0xfa, 0xa5,
	0x55, 0x58, 0xee, 0xeb, 0xc6, 0x6e, 0xb3, 0xab, 0x77, 0x87, 0x66, 0x6b, 0x42, 0xc8, 0x56, 0x9e,
	0x00, 0x87, 0xfa, 0x6e, 0xbf, 0x67, 0x34, 0x8d, 0xc7, 0x0c, 0x58, 0x50, 0xcb, 0xb0, 0xb8, 0x6d,
	0x34, 0xf7, 0xda, 0xca, 0x02, 0x99, 0xcf, 0x07, 0xbb, 0x03, 0x73, 0x30, 0x43, 0x85, 0x81, 0x3d,
	0x56, 0x16, 0x09, 0xcd, 0x21, 0xa0, 0xa1, 0x7d, 0x3c, 0xf5, 0x7c, 0xcb, 0x77, 0x26, 0x27, 0x66,
	0xdb, 0xb6, 0xc8, 0x0e, 0xb5, 0x42, 0x7b, 0xac, 0x2c, 0x91, 0x3a, 0x3b, 0xdd, 0x66, 0x6b, 0xd8,
	0x79, 0xa8, 0x9b, 0x9d, 0xae, 0xb9, 0xdb, 0x19, 0x50, 0x6b, 0x7a, 0x66, 0x26, 0x3e, 0xd6, 0x9e,
	0x40, 0x89, 0x8b, 0x34, 0x08, 0x81, 0x1f, 0xe8, 0xc3, 0xe1, 0x8e, 0x6e, 0x0e, 0x7b, 0xe6, 0x5e,
	0xf7, 0x7e, 0xb7, 0xf7, 0xa8, 0xab, 0xbc, 0xa4, 0x6e, 0x80, 0x1a, 0x83, 0x79, 0x5f, 0x69, 0x27,
	0x62, 0x38, 0xd2, 0x4f, 0x6a, 0x63, 0x93, 0x46, 0x36, 0xef, 0xf5, 0x06, 0x43, 0xa5, 0xa0, 0xb5,
	0xa0, 0x1c, 0x9f, 0xc2, 0xd4, 0x0c, 0x89, 0x12, 0x7c, 0x25, 0x87, 0xc7, 0x08, 0xd2, 0xfe, 0x6d,
	0xa3, 0xa3, 0x77, 0xdb, 0x38, 0xda, 0xab, 0xb0, 0xdc, 0x22, 0x14, 0x75, 0xbb, 0xa3, 0xb7, 0x19,
	0x62, 0x41, 0xbb, 0x0d, 0x75, 0xf9, 0xd2, 0x8e, 0x0b, 0xcd, 0x3e, 0xb0, 0x66, 0x93, 0x50, 0xc9,
	0x61, 0x30, 0x04, 0x7c, 0x94, 0xe9, 0x7c, 0xdf, 0x56, 0xf2, 0xda, 0x08, 0x8a, 0xec, 0x7a, 0x8e,
	0xe6, 0x45, 0xdb, 0xdb, 0xc9, 0x05, 0x75, 0x0d, 0x5e, 0x8e, 0xa0, 0xf1, 0x12, 0x32, 0x77, 0xf7,
	0x06, 0x43, 0x3c, 0x0e, 0xf2, 0xa7, 0x62, 0xec, 0x6e, 0x6f, 0x2b, 0x05, 0xed, 0x39, 0x40, 0x7c,
	0x95, 0x27, 0xa7, 0x16, 0xc1, 0x27, 0xc3, 0x40, 0x4e, 0xac, 0x78, 0x20, 0x1b, 0xb0, 0x26, 0x66,
	0x44, 0x9f, 0xc8, 0xa9, 0x97, 0xe1, 0xa2, 0x98, 0xd3, 0xec, 0xf7, 0x77, 0x1e, 0x9b, 0x5b, 0x8f,
	0xcd, 0xe6, 0xce, 0x5d, 0x72, 0xf2, 0x66, 0x15, 0xa4, 0x5f, 0xde, 0x06, 0x25, 0x79, 0x7d, 0x26,
	0xdf, 0x17, 0x61, 0xf1, 0xd0, 0x5c, 0x84, 0x75, 0x31, 0x43, 0x1c, 0xa6, 0xb7, 0xa1, 0x26, 0xdd,
	0x88, 0x55, 0x05, 0xaa, 0xdd, 0xde, 0xd0, 0xe4, 0x8b, 0x47, 0xc9, 0xa9, 0x55, 0x28, 0x45, 0xa9,
	0xbc, 0x76, 0x33, 0x76, 0xd4, 0xc5, 0x2e, 0x0e, 0x55, 0x28, 0xf5, 0x77, 0x9a, 0xc3, 0xed, 0x1e,
	0x9e, 0x86, 0x25, 0x58, 0x18, 0xe8, 0x3b, 0xdb, 0x4a, 0x4e, 0xfb, 0x2e, 0x54, 0xa5, 0xcb, 0x62,
	0x03, 0xd6, 0xc4, 0xb4, 0xb9, 0xe7, 0x3e, 0x71, 0xbd, 0x67, 0x2e, 0x7d, 0xf1, 0x22, 0xe5, 0x34,
	0xf1, 0xa8, 0xa1, 0x0d, 0x97, 0x32, 0x3a, 0xae, 0x45, 0xb3, 0xf2, 0xda, 0x77, 0x60, 0x25, 0x75,
	0x5d, 0x23, 0x33, 0x36, 0xd8, 0x6d, 0xee, 0xec, 0xb0, 0x4d, 0xba, 0xad, 0xa7, 0xc8, 0xc8, 0x75,
	0xb8, 0x9a, 0x89, 0x21, 0x11, 0x91, 0xdf, 0x29, 0x41, 0x09, 0x09, 0xf1, 0xae, 0xe3, 0xfe, 0x7e,
	0x57, 0x42, 0xeb, 0xd9, 0x4a, 0xe8, 0xb4, 0x5a, 0x61, 0xd7, 0x71, 0x4f, 0xd1, 0x43, 0xef, 0x9e,
	0xa6, 0x87, 0xbe, 0x92, 0x59, 0xd9, 0x3f, 0x53, 0x45, 0xff, 0x33, 0x55, 0xf4, 0xef, 0x23, 0x55,
	0xf4, 0xff, 0xbf, 0x59, 0xa3, 0x7f, 0x35, 0x47, 0x08, 0xb1, 0xc0, 0x8f, 0xaa, 0xdf, 0x80, 0xe2,
	0xc4, 0x7e, 0x6a, 0x4f, 0xcc, 0x77, 0x99, 0x38, 0xe1, 0xfa, 0x5c, 0xde, 0x15, 0x8d, 0x7e, 0x77,
	0x08, 0xb2, 0xb1, 0x84, 0x65, 0xde, 0x55, 0x3f, 0xe2, 0xa5, 0xdf, 0x63, 0x86, 0x6f, 0xaf, 0xce,
	0x2d, 0x3d, 0xb0, 0x47, 0x9e, 0x3b, 0x16, 0x8b, 0xbf, 0xa7, 0xfd, 0xd5, 0x32, 0xd4, 0x24, 0x3d,
	0xb4, 0xfa, 0x10, 0x36, 0xc6, 0x4e, 0x30, 0x9d, 0x58, 0x27, 0x66, 0x42, 0x85, 0x9d, 0x4b, 0x0b,
	0x9c, 0xda, 0x14, 0x53, 0xaa, 0xc1, 0x58, 0x1b, 0x67, 0x40, 0xc9, 0x5a, 0x90, 0xb5, 0xc5, 0x94,
	0xa3, 0xae, 0x7a, 0xa2, 0x86, 0x78, 0x08, 0x6b, 0xd4, 0xd6, 0x34, 0x8c, 0x3e, 0x1e, 0xdd, 0x3c,
	0x2a, 0xb2, 0x68, 0x59, 0xd6, 0x9e, 0x47, 0xb2, 0x20, 0x95, 0x95, 0x67, 0xd9, 0xb8, 0x0c, 0xbb,
	0xb0, 0xe2, 0xda, 0xcf, 0x13, 0x55, 0x2e, 0x9e, 0xbb, 0xca, 0x65, 0x52, 0x58, 0xac, 0x2f, 0xad,
	0xdd, 0x2f, 0x7d, 0x36, 0xed, 0xfe, 0x16, 0xc0, 0xd4, 0x22, 0xb4, 0x38, 0x7a, 0x96, 0x96, 0x90,
	0x78, 0xc9, 0x95, 0xf4, 0x09, 0x2e, 0x86, 0x04, 0x28, 0x4f, 0xf9, 0x4f, 0xf5, 0x1e, 0x54, 0x51,
	0x50, 0xc1, 0x9b, 0x02, 0xe9, 0xd7, 0x49, 0x72, 0x2d, 0x28, 0xb9, 0xe0, 0x47, 0xc3, 0x28, 0x4e,
	0x6c, 0xee, 0x43, 0x29, 0x12, 0x99, 0xdd, 0x06, 0x95, 0x46, 0x94, 0xa0, 0x32, 0xef, 0xa7, 0xb6,
	0x19, 0xd8, 0x23, 0x76, 0x2d, 0x52, 0x30, 0xc7, 0x60, 0x19, 0x03, 0x7b, 0xa4, 0xde, 0x04, 0xc5,
	0x76, 0xc7, 0x32, 0x2e, 0x9d, 0xde, 0xba, 0xed, 0x8e, 0x05, 0xcc, 0xcd, 0x3d, 0xa8, 0x0c, 0x62,
	0x69, 0x86, 0x7a, 0x0d, 0xaa, 0x28, 0xf2, 0x20, 0x34, 0x53, 0x30, 0xc4, 0x26, 0x30, 0x42, 0x1a,
	0x3b, 0x63, 0x54, 0x0c, 0x44, 0x18, 0xc2, 0x79, 0x5c, 0xe5, 0x38, 0x5d, 0xeb, 0xd8, 0xde, 0xfc,
	0xed, 0x1c, 0x94, 0xa3, 0xd1, 0x21, 0xcd, 0xa1, 0xc3, 0x9a, 0x0a, 0xb0, 0x52, 0x47, 0x78, 0x1c,
	0x61, 0xe5, 0x55, 0xa0, 0x90, 0x64, 0x88, 0x95, 0x2a, 0x42, 0x79, 0x9c, 0xa2, 0x78, 0x9a, 0x08,
	0x69, 0x2f, 0xa4, 0x37, 0x69, 0xd6, 0x34, 0xa1, 0x6e, 0x6b, 0xca, 0x7f, 0x92, 0x69, 0x12, 0x85,
	0x3c, 0x6c, 0x45, 0x9f, 0x32, 0x4d, 0xc2, 0x30, 0x19, 0x15, 0x41, 0x02, 0xb4, 0xf9, 0x00, 0x2a,
	0xc2, 0x14, 0x92, 0xc6, 0xd1, 0xf9, 0x17, 0x5e, 0x36, 0x5f, 0x3f, 0x63, 0xf6, 0x69, 0xe3, 0x46,
	0xfc, 0xa7, 0x76, 0x87, 0x8f, 0x1e, 0x69, 0x69, 0x09, 0x16, 0xba, 0x9e, 0x6b, 0xd3, 0xb7, 0xc2,
	0xac, 0x15, 0xbd, 0xd1, 0xc8, 0x22, 0xc7, 0x10, 0x69, 0x80, 0x92, 0xd7, 0xde, 0x8c, 0x9e, 0x52,
	0x2c, 0x43, 0x85, 0xb1, 0x6c, 0xbd, 0xbe, 0xde, 0xa5, 0xef, 0x93, 0x19, 0xa0, 0xdf, 0xdc, 0x23,
	0x17, 0x1c, 0xed, 0x3b, 0x50, 0x8e, 0x3e, 0x8a, 0xbc, 0x61, 0xd4, 0x02, 0xfb, 0x70, 0x36, 0xb1,
	0xfc, 0x7b, 0xde, 0xcc, 0x57, 0x72, 0x52, 0x0e, 0xfb, 0x2a, 0xe6, 0xe4, 0x91, 0x39, 0xe4, 0x39,
	0xdc, 0x42, 0x1a, 0xb3, 0x0a, 0xda, 0x8c, 0xf1, 0x6f, 0xfa, 0xf3, 0x30, 0xf6, 0x2b, 0x9a, 0x3b,
	0xc3, 0xaf, 0xe8, 0x27, 0xa9, 0xed, 0x9b, 0x4f, 0x6b, 0xd0, 0x64, 0x92, 0x26, 0xef, 0x5b, 0xed,
	0x77, 0xea, 0x50, 0x8a, 0x9c, 0xc9, 0x24, 0xf9, 0xc6, 0xeb, 0x50, 0x8b, 0x58, 0x2b, 0x69, 0xc1,
	0x32, 0x20, 0xf7, 0x9c, 0x4e, 0xb9, 0x97, 0x82, 0xc8, 0xbd, 0x70, 0x8e, 0x63, 0x21, 0x93, 0xe3,
	0x58, 0x94, 0x38, 0x8e, 0x14, 0x0b, 0xb3, 0x94, 0xc1, 0xc2, 0x24, 0xec, 0xa1, 0x8a, 0x67, 0xd9,
	0x43, 0x95, 0x52, 0xf6, 0x50, 0x09, 0xd6, 0xb4, 0x9c, 0xc5, 0x9a, 0x26, 0x8d, 0x28, 0xd6, 0x4e,
	0x37, 0xa2, 0x58, 0x3f, 0xdb, 0x88, 0x62, 0xe3, 0x1c, 0x46, 0x14, 0x17, 0xce, 0x67, 0x44, 0xd1,
	0x38, 0x87, 0x11, 0xc5, 0xc5, 0x84, 0x11, 0xc5, 0x7a, 0x64, 0x44, 0xb1, 0x49, 0xa7, 0xe7, 0x14,
	0x03, 0x8a, 0x4b, 0x5f, 0x84, 0x01, 0xc5, 0xcb, 0x2f, 0x6a, 0x40, 0x71, 0xf9, 0x9c, 0x06, 0x14,
	0x57, 0x32, 0x0d, 0x28, 0xae, 0x9e, 0xd3, 0x80, 0xe2, 0x9a, 0x6c, 0x40, 0x91, 0xba, 0x82, 0xbc,
	0x92, 0xbe, 0x82, 0xf0, 0x6d, 0x71, 0xca, 0x15, 0x24, 0xdb, 0x9c, 0x42, 0x3b, 0xbf, 0x39, 0xc5,
	0xf5, 0x73, 0x99, 0x53, 0xbc, 0xfa, 0xf9, 0xcc, 0x29, 0x6e, 0x7c, 0x41, 0xe6, 0x14, 0xaf, 0x7d,
	0x2e, 0x73, 0x8a, 0x4c, 0x45, 0xf5, 0xeb, 0xd9, 0x8a, 0xea, 0x47, 0x73, 0x15, 0xd5, 0x37, 0x4f,
	0x99, 0xa7, 0x73, 0xe8, 0xaa, 0x7f, 0xe0, 0x14, 0x5d, 0xf5, 0x1b, 0xe7, 0xad, 0x7a, 0x9e, 0xba,
	0x7a, 0x6f, 0x9e, 0xba, 0xfa, 0xd6, 0x79, 0x6b, 0x7e, 0x11, 0x8d, 0xf5, 0x9b, 0x5f, 0xa8, 0xc6,
	0xfa, 0xf6, 0x1c, 0x8d, 0xf5, 0x0e, 0x2c, 0xc7, 0x7e, 0x96, 0xe8, 0x87, 0xdf, 0x4a, 0x1f, 0xcc,
	0x51, 0x6f, 0x22, 0x6f, 0x4b, 0xec, 0xa1, 0xff, 0xb1, 0x94, 0xce, 0x50, 0xa9, 0xde, 0x49, 0xab,
	0x54, 0x3f, 0xeb, 0xad, 0xe8, 0x9f, 0xac, 0xf0, 0xe6, 0x1e, 0xd4, 0xe5, 0xce, 0xa1, 0x88, 0x4a,
	0x82, 0xc4, 0xf5, 0x5c, 0x82, 0x0b, 0x89, 0x2c, 0xa1, 0xa6, 0x5f, 0xce, 0xc1, 0x22, 0xe9, 0xeb,
	0x38, 0x2b, 0xf8, 0x19, 0x95, 0xab, 0x08, 0x87, 0x6d, 0x19, 0x21, 0x5d, 0x16, 0xac, 0x94, 0x07,
	0xf1, 0x2c, 0xa4, 0x82, 0x78, 0x32, 0x45, 0x9f, 0x10, 0xc3, 0x06, 0x10, 0xd4, 0xe2, 0x0e, 0xd5,
	0x3e, 0x5f, 0x18, 0x1e, 0xed, 0xe7, 0xf3, 0x50, 0x18, 0x5a, 0x87, 0x59, 0x8e, 0x39, 0x42, 0xeb,
	0x50, 0x6c, 0x71, 0x31, 0xb4, 0x0e, 0xb3, 0xda, 0xbb, 0x30, 0x37, 0xe8, 0xe8, 0xc2, 0x59, 0xcd,
	0x59, 0x4c, 0x1d, 0xe6, 0x57, 0xa0, 0x42, 0x3e, 0xcb, 0xb9, 0xed, 0x25, 0xee, 0xb6, 0xf0, 0x90,
	0x31, 0xdb, 0x89, 0xf0, 0xad, 0xc5, 0x74, 0xf8, 0xd6, 0x06, 0x14, 0xf1, 0x83, 0x9e, 0x1f, 0xbd,
	0x28, 0xa1, 0x49, 0xb4, 0x5b, 0xb2, 0x63, 0x5f, 0x0d, 0x2c, 0x4a, 0x16, 0x05, 0xf1, 0xa7, 0xe5,
	0xf6, 0xd8, 0x09, 0x31, 0x30, 0x1b, 0x50, 0x9f, 0x5c, 0x3c, 0xad, 0xfd, 0xed, 0x3c, 0x14, 0x87,
	0xb4, 0x19, 0x59, 0x11, 0x68, 0x92, 0xcc, 0x7f, 0x29, 0x64, 0x8c, 0xbf, 0xd8, 0x9e, 0x82, 0xdc,
	0x9e, 0x53, 0x63, 0x24, 0xb0, 0x6f, 0xdd, 0x39, 0xdd, 0xc1, 0xe4, 0x67, 0x88, 0xbb, 0x44, 0x1a,
	0x6b, 0x1d, 0xb2, 0x15, 0xc5, 0x1e, 0x71, 0x85, 0xd6, 0x61, 0x2a, 0x9e, 0x6c, 0x29, 0x35, 0xb5,
	0x9f, 0x7d, 0xf0, 0xb4, 0x88, 0x1b, 0x17, 0x25, 0xb8, 0xf8, 0xd2, 0x37, 0x92, 0xe6, 0xfe, 0x6c,
	0x1e, 0x56, 0xfa, 0xbe, 0x3d, 0xb6, 0x0f, 0x1c, 0xd7, 0x1e, 0xdf, 0xb7, 0x4f, 0x9e, 0x79, 0xfe,
	0x38, 0x23, 0x4e, 0xc5, 0xba, 0x35, 0x0a, 0x67, 0xd6, 0xc4, 0x0c, 0x6c, 0xcb, 0x1f, 0x1d, 0x99,
	0x4f, 0x28, 0x22, 0x1b, 0xf6, 0x55, 0x9a, 0x39, 0xc0, 0x3c, 0x5e, 0xc7, 0x3b, 0xb0, 0x86, 0x8c,
	0x9f, 0x5c, 0x82, 0x46, 0x67, 0x29, 0x1b, 0x2a, 0xc9, 0x93, 0x0a, 0x04, 0xe2, 0x9c, 0x2d, 0xc8,
	0x73, 0x26, 0x0c, 0xd0, 0x62, 0x6a, 0x80, 0x4e, 0x1f, 0xf8, 0xf3, 0x70, 0xba, 0xe2, 0x10, 0x97,
	0x92, 0x43, 0xac, 0x4d, 0x61, 0xe5, 0x91, 0x13, 0x1e, 0x8d, 0x7d, 0xeb, 0x99, 0x35, 0x61, 0x7c,
	0x85, 0xfa, 0x3a, 0x2c, 0x10, 0x2a, 0xcb, 0xee, 0x55, 0xab, 0xf2, 0xa3, 0x42, 0xfa, 0x12, 0x01,
	0x11, 0xd4, 0xf7, 0x00, 0x82, 0x23, 0x6f, 0x6a, 0xdb, 0xe4, 0x88, 0x60, 0xa2, 0x98, 0x4c, 0xf4,
	0x32, 0x45, 0xeb, 0x5b, 0x27, 0xda, 0xbf, 0xbe, 0x00, 0x55, 0xea, 0x60, 0x8d, 0x71, 0x46, 0x19,
	0x4b, 0x3f, 0x7e, 0x5b, 0x95, 0x4f, 0xbc, 0xad, 0x6a, 0x40, 0x71, 0xdf, 0x9a, 0xa0, 0xa8, 0xae,
	0x80, 0x6e, 0x02, 0x79, 0x92, 0xf0, 0x32, 0x8c, 0x11, 0x90, 0x76, 0x80, 0xc4, 0xcb, 0x48, 0xec,
	0x59, 0xf5, 0x99, 0x78, 0x72, 0x7c, 0xfe, 0x5d, 0xf0, 0x01, 0x54, 0x58, 0x03, 0xf0, 0x52, 0x5a,
	0x4c, 0x73, 0xb7, 0xf4, 0xf3, 0xf4, 0xed, 0xe4, 0xb3, 0xe8, 0x37, 0x63, 0x8b, 0x91, 0x0b, 0xf3,
	0x58, 0xbc, 0xa2, 0x34, 0x5b, 0x4c, 0xb8, 0x2e, 0x8c, 0xf0, 0x37, 0x8d, 0x7e, 0xe3, 0xa5, 0xcb,
	0x1b, 0xdb, 0xb1, 0xef, 0x92, 0x72, 0x2c, 0x25, 0x88, 0x3c, 0x97, 0xdc, 0x04, 0x05, 0x91, 0xd2,
	0xc1, 0xfa, 0x50, 0xc6, 0x20, 0x30, 0x9d, 0xaf, 0x13, 0xa6, 0x13, 0x07, 0x33, 0x7a, 0x5d, 0x47,
	0x1d, 0x89, 0xd6, 0x19, 0x98, 0xbf, 0xb0, 0xdb, 0x01, 0xf5, 0x59, 0xb4, 0x68, 0x38, 0x8f, 0x8a,
	0x22, 0xe9, 0x84, 0xbe, 0x37, 0xb5, 0xb4, 0x8c, 0x95, 0x67, 0x49, 0x90, 0xf6, 0xdf, 0x15, 0xe0,
	0x82, 0xb8, 0x20, 0x84, 0xc7, 0xbc, 0x59, 0x6b, 0x23, 0xbe, 0xc0, 0xe4, 0x13, 0x17, 0x18, 0x69,
	0xe1, 0x14, 0x12, 0x0b, 0x67, 0x1b, 0x14, 0xf1, 0x19, 0xb1, 0xf0, 0xbc, 0x55, 0x32, 0xd4, 0x15,
	0x3e, 0x8e, 0xf3, 0x24, 0x3e, 0x6d, 0xc7, 0xc9, 0x8a, 0x9d, 0x38, 0x2c, 0x4a, 0x4e, 0x1c, 0x84,
	0x85, 0xb9, 0x24, 0x2f, 0x4c, 0xf1, 0x69, 0x79, 0x31, 0xf1, 0xb4, 0x3c, 0x19, 0xb1, 0xbd, 0x94,
	0x8e, 0xd8, 0x1e, 0xbf, 0x57, 0x2d, 0x4b, 0xef, 0x55, 0xcf, 0xf4, 0x0b, 0x9c, 0x58, 0xb0, 0x95,
	0xd4, 0x82, 0xdd, 0x80, 0x25, 0xfb, 0x79, 0x68, 0xbb, 0x3c, 0x38, 0x26, 0x4b, 0x65, 0xad, 0x83,
	0x5a, 0xe6, 0x3a, 0xc0, 0xdb, 0x38, 0xb9, 0x48, 0x8c, 0xa9, 0x79, 0x58, 0xac, 0x50, 0x40, 0x20,
	0x2a, 0xaf, 0xb4, 0x7f, 0xb4, 0x01, 0x2b, 0xe2, 0xf4, 0x66, 0x3b, 0xed, 0x3a, 0x75, 0xd3, 0x4b,
	0xb3, 0x5e, 0x48, 0xcc, 0x3a, 0x21, 0x71, 0xb4, 0x24, 0x9e, 0x95, 0x94, 0xb8, 0x02, 0x05, 0xe1,
	0x69, 0xf9, 0x0a, 0x54, 0x19, 0x02, 0x15, 0xc7, 0xf3, 0xf8, 0xec, 0x08, 0xa3, 0xd2, 0xf8, 0xaf,
	0xc0, 0x82, 0xf0, 0x02, 0x55, 0x12, 0x8f, 0xa6, 0x9a, 0x4e, 0x9f, 0xc2, 0x23, 0xbe, 0xfa, 0x8d,
	0xe8, 0xb8, 0x2d, 0x66, 0x38, 0x20, 0x4a, 0x95, 0x4c, 0x07, 0x27, 0x92, 0x1c, 0x12, 0xf0, 0xa5,
	0x24, 0xbe, 0x2e, 0x2e, 0x27, 0x5e, 0x17, 0xf7, 0xa0, 0x66, 0x8d, 0xbf, 0x37, 0x0b, 0x42, 0xfe,
	0x38, 0x86, 0x7a, 0x0a, 0xbc, 0x75, 0xfa, 0x87, 0x9b, 0x58, 0x84, 0x3f, 0x94, 0xb1, 0x84, 0x14,
	0xa9, 0x50, 0x76, 0xa8, 0x55, 0x39, 0x4f, 0x85, 0xa7, 0xb8, 0xd8, 0x8a, 0xd7, 0x6b, 0x35, 0x19,
	0x09, 0x95, 0xb0, 0x54, 0xde, 0x33, 0xe6, 0x79, 0xa8, 0x76, 0x86, 0xe7, 0x21, 0x8a, 0x1c, 0xb9,
	0x64, 0x67, 0x65, 0x5d, 0x8f, 0xbf, 0xa8, 0xa5, 0x80, 0xae, 0x97, 0x25, 0x49, 0x59, 0xce, 0x92,
	0xa4, 0x48, 0xe2, 0x18, 0x25, 0x21, 0x8e, 0xc9, 0x70, 0x62, 0xb1, 0x92, 0xe9, 0xc4, 0x22, 0x1d,
	0xf7, 0x46, 0x7d, 0xc1, 0xb8, 0x37, 0xb7, 0x41, 0xe5, 0x35, 0x08, 0xd7, 0x7b, 0xaa, 0xda, 0x52,
	0x58, 0x4e, 0x7c, 0xc3, 0x7f, 0x1f, 0x36, 0x92, 0xd8, 0xcc, 0xd5, 0x05, 0x15, 0x38, 0xad, 0xc9,
	0x25, 0x62, 0x8f, 0x17, 0x92, 0x73, 0x86, 0xf5, 0xb4, 0x73, 0x06, 0x91, 0x2c, 0x6d, 0xcc, 0xf5,
	0x78, 0x71, 0x41, 0xf2, 0x78, 0xf1, 0x0a, 0x54, 0xa9, 0x9f, 0x8a, 0x89, 0x18, 0x84, 0xa5, 0xc2,
	0x60, 0x99, 0x8e, 0x2b, 0x2e, 0x66, 0x3a, 0xae, 0x60, 0x6b, 0x58, 0xf4, 0x3d, 0x46, 0x41, 0x71,
	0x44, 0x9b, 0xef, 0xd9, 0x23, 0x86, 0x70, 0x89, 0x47, 0xb4, 0x21, 0xa0, 0x6c, 0x27, 0x69, 0x2f,
	0x9f, 0x1d, 0x9d, 0xe6, 0xf2, 0x59, 0xd1, 0x69, 0x3e, 0xc3, 0xbb, 0xc9, 0xc4, 0xc9, 0x7d, 0xed,
	0xdc, 0x27, 0xb7, 0xb0, 0x06, 0x6c, 0xdf, 0xf7, 0x7c, 0xaa, 0x16, 0x7e, 0x85, 0xde, 0xac, 0x59,
	0x8e, 0x4e, 0x32, 0x50, 0x39, 0xbc, 0x03, 0x55, 0x6b, 0x36, 0x46, 0xd7, 0x59, 0xc1, 0x6c, 0x12,
	0xb2, 0x67, 0x95, 0x6f, 0x9c, 0xb1, 0xe7, 0x49, 0x09, 0xea, 0x45, 0xc0, 0xa8, 0x58, 0x71, 0x82,
	0xcc, 0x10, 0xaf, 0x0d, 0xb7, 0x29, 0x0d, 0xdc, 0xce, 0x51, 0x70, 0xaf, 0xde, 0x80, 0x3a, 0x45,
	0x89, 0xe8, 0xd0, 0xab, 0x74, 0x47, 0x21, 0x34, 0x62, 0x2d, 0x2e, 0x03, 0x50, 0x34, 0x1c, 0x9e,
	0x1b, 0xf4, 0x62, 0x85, 0x10, 0x1c, 0x9d, 0x5e, 0xd2, 0xd9, 0xde, 0x6b, 0xe7, 0x27, 0x2d, 0x99,
	0xee, 0xf7, 0x24, 0x8f, 0x88, 0xd3, 0xa9, 0xef, 0x71, 0x3b, 0xbe, 0xd7, 0x13, 0x1e, 0x11, 0x69,
	0x1e, 0x36, 0x82, 0x8e, 0x34, 0x99, 0x22, 0xd7, 0x0b, 0x9d, 0x03, 0xf6, 0xce, 0xe2, 0x66, 0xb4,
	0xdb, 0xbc, 0x59, 0xd8, 0xc5, 0x0c, 0x1e, 0x88, 0x46, 0xa2, 0x25, 0x47, 0xde, 0x84, 0x9c, 0x6b,
	0x6f, 0x60, 0xef, 0x45, 0x09, 0xc9, 0x3d, 0xcc, 0x50, 0x5f, 0x85, 0x3a, 0x63, 0x80, 0xb9, 0xac,
	0xf8, 0x16, 0x5d, 0x89, 0x14, 0xca, 0x44, 0xc5, 0xfd, 0x4c, 0x7e, 0xe9, 0xcd, 0xb4, 0xa8, 0x27,
	0xc5, 0x2f, 0xe1, 0x59, 0x93, 0xe6, 0x99, 0x08, 0x53, 0x27, 0x7e, 0x17, 0x49, 0x1a, 0x95, 0xcb,
	0xd4, 0xe3, 0x2f, 0x23, 0x61, 0xfb, 0x1a, 0x54, 0xb9, 0x8e, 0x1c, 0x8f, 0xb8, 0xb7, 0x32, 0xd4,
	0xcd, 0x34, 0x9f, 0xea, 0xe8, 0x83, 0x38, 0xa1, 0x7d, 0x97, 0xf9, 0x51, 0xa9, 0x41, 0x79, 0xf8,
	0xb8, 0xaf, 0x9b, 0xdd, 0x5e, 0x57, 0xa7, 0x9a, 0xdd, 0x61, 0xaf, 0x6f, 0xee, 0xf5, 0xa9, 0xf9,
	0xcc, 0xa3, 0xce, 0xf0, 0x5e, 0xdb, 0x68, 0x3e, 0xa2, 0xb6, 0xb4, 0xcd, 0xf6, 0xb7, 0xf6, 0x06,
	0xc3, 0x5d, 0xb4, 0x00, 0x33, 0xf4, 0x76, 0x67, 0xa8, 0x14, 0xd4, 0x35, 0x50, 0x04, 0x70, 0x5b,
	0xdf, 0xea, 0x0c, 0x95, 0x05, 0x6d, 0x26, 0xba, 0xa6, 0x6a, 0x19, 0x7a, 0x73, 0x88, 0xde, 0x46,
	0x4b, 0xb0, 0xd0, 0x6f, 0x76, 0xda, 0xb4, 0xee, 0xb6, 0xde, 0xde, 0x6b, 0x51, 0x37, 0x4a, 0x55,
	0x28, 0x19, 0xfa, 0xb7, 0x74, 0x4c, 0x15, 0xd0, 0x1e, 0xaa, 0xb7, 0xdb, 0x67, 0xee, 0x60, 0x49,
	0x66, 0xab, 0xd9, 0x6d, 0xe9, 0x3b, 0xe8, 0x8d, 0xb5, 0x0a, 0xa5, 0x66, 0xbf, 0x6f, 0xf4, 0x1e,
	0xea, 0x6d, 0x65, 0x9d, 0xa0, 0xea, 0xdf, 0x6e, 0xe9, 0x7d, 0xf4, 0xa8, 0x74, 0x55, 0xfb, 0xe1,
	0x02, 0x54, 0xc5, 0xf3, 0x90, 0x3a, 0x85, 0x69, 0x0e, 0x7a, 0x5d, 0xee, 0x65, 0xf4, 0x25, 0x01,
	0x14, 0x75, 0x14, 0xfd, 0xaa, 0x22, 0x48, 0xe8, 0xef, 0x55, 0xb8, 0xc4, 0x80, 0x91, 0xf5, 0xde,
	0xb0, 0x67, 0xb6, 0x7b, 0x3d, 0xb4, 0xbd, 0x51, 0x0a, 0xaa, 0x06, 0x57, 0x18, 0x02, 0x69, 0xad,
	0xde, 0x1d, 0xa0, 0x5f, 0x27, 0x73, 0xbb, 0x67, 0x30, 0x0b, 0x3c, 0x65, 0x41, 0xbd, 0x0c, 0x17,
	0x19, 0x8e, 0xa1, 0xef, 0xea, 0xcd, 0xc1, 0x9e, 0xa1, 0xc7, 0x26, 0xbd, 0x8b, 0xea, 0x06, 0xa8,
	0x2c, 0xbb, 0xdf, 0x34, 0xee, 0x73, 0x63, 0xe1, 0x25, 0xa1, 0xd8, 0x56, 0xaf, 0xbb, 0x37, 0x30,
	0x45, 0x2f, 0xde, 0x4a, 0x51, 0x6d, 0xc0, 0x1a, 0xcf, 0xee, 0xdc, 0x8d, 0xed, 0x81, 0x94, 0x92,
	0x50, 0x90, 0x8e, 0x2e, 0xcb, 0x7c, 0xd8, 0xdc, 0xd9, 0xd3, 0x95, 0xb2, 0x7a, 0x05, 0x36, 0xe5,
	0x6c, 0xa9, 0x62, 0x10, 0xda, 0x83, 0xc3, 0x45, 0xbf, 0xae, 0x54, 0x84, 0x01, 0x1a, 0xf4, 0xbf,
	0x6d, 0xee, 0xf4, 0x06, 0x43, 0x65, 0x8d, 0x2c, 0x08, 0x01, 0xd8, 0x6e, 0xee, 0x36, 0xef, 0xea,
	0xca, 0xba, 0xf6, 0x57, 0x73, 0x50, 0x15, 0x59, 0x08, 0xc1, 0x76, 0x0f, 0x2d, 0x8e, 0x23, 0xc7,
	0xbb, 0x0f, 0xf6, 0xf4, 0xc1, 0xd0, 0x6c, 0xb6, 0x77, 0x3b, 0x5d, 0x93, 0x4e, 0xb0, 0x92, 0x43,
	0xab, 0x85, 0xee, 0xb0, 0x63, 0x52, 0x0b, 0xc2, 0x3c, 0x99, 0x2d, 0x56, 0x80, 0xa1, 0x14, 0xd4,
	0xeb, 0x70, 0xb5, 0xdf, 0x7c, 0xdc, 0xdb, 0x1b, 0xa2, 0x9f, 0xd9, 0xae, 0xbe, 0x43, 0x1a, 0xdf,
	0x46, 0x27, 0xe6, 0xdb, 0xcd, 0xce, 0xce, 0x9e, 0xa1, 0x2b, 0x0b, 0xea, 0x26, 0x6c, 0xb0, 0x72,
	0x83, 0x61, 0x73, 0xb8, 0x37, 0x30, 0x9b, 0x5b, 0xdd, 0x9e, 0xb1, 0xdb, 0xdc, 0x51, 0x16, 0x51,
	0x2c, 0x47, 0xdd, 0x05, 0x37, 0xf7, 0xda, 0x1d, 0x2a, 0x4e, 0xa4, 0x4b, 0x4a, 0x59, 0xd2, 0x1c,
	0xde, 0x7a, 0x46, 0x97, 0x56, 0xa0, 0x46, 0xbf, 0x2c, 0xad, 0x20, 0x06, 0x62, 0xf3, 0x9c, 0x53,
	0x15, 0xa8, 0x32, 0x10, 0xf6, 0x87, 0x36, 0x9c, 0x41, 0x06, 0x8f, 0x07, 0x43, 0x7d, 0x57, 0x29,
	0x90, 0xbe, 0x71, 0x50, 0x7f, 0x57, 0x59, 0xd0, 0x9a, 0x50, 0x11, 0x08, 0x39, 0x6e, 0x30, 0x6c,
	0x8f, 0xa1, 0x0f, 0xf6, 0x76, 0x86, 0x7c, 0x47, 0x56, 0xa0, 0xc8, 0x5b, 0x87, 0xc3, 0x23, 0xb4,
	0x36, 0xaf, 0xfd, 0xf8, 0x2a, 0x2c, 0x27, 0x1c, 0x7f, 0xa7, 0xd8, 0x6f, 0x59, 0xc9, 0xc3, 0xc8,
	0x75, 0xfe, 0x34, 0x25, 0x0f, 0x23, 0xd0, 0x82, 0x92, 0x87, 0x0d, 0x46, 0x0b, 0x96, 0x93, 0x7e,
	0xc4, 0x0b, 0x67, 0xfa, 0x11, 0xaf, 0x07, 0xb2, 0x0b, 0xf1, 0x44, 0x7b, 0xc4, 0x0b, 0xfd, 0xbc,
	0xf6, 0x30, 0x63, 0xad, 0x20, 0x01, 0x51, 0xbf, 0x26, 0x5d, 0xd8, 0x2a, 0x19, 0x4f, 0xf5, 0xe2,
	0x4a, 0x92, 0x41, 0x0e, 0xdf, 0x81, 0x35, 0x27, 0x60, 0xd1, 0x32, 0xbc, 0xe3, 0xa9, 0xed, 0x06,
	0xd4, 0xe8, 0x6b, 0x09, 0x85, 0x51, 0xaa, 0x13, 0x60, 0xb0, 0x0c, 0x21, 0x47, 0x1d, 0xc0, 0xba,
	0xd0, 0x70, 0xe1, 0x6c, 0x2f, 0x66, 0x3c, 0xd9, 0x8b, 0x10, 0xa3, 0xa3, 0xde, 0x58, 0x0d, 0xd2,
	0x40, 0x75, 0x17, 0x6a, 0xa3, 0x89, 0x6d, 0xf9, 0x68, 0x5a, 0x3d, 0xb1, 0x0e, 0xf1, 0xbe, 0x50,
	0xc9, 0x78, 0x81, 0x23, 0xf4, 0xa4, 0xc5, 0x0a, 0xe0, 0x3b, 0xfd, 0xea, 0x48, 0x48, 0x65, 0xf1,
	0xba, 0xd4, 0x20, 0x2d, 0x83, 0xd7, 0x8d, 0x6f, 0xa7, 0x42, 0x68, 0x99, 0x44, 0x28, 0x29, 0x86,
	0x81, 0xe7, 0x47, 0xcd, 0x17, 0x93, 0xa9, 0xfb, 0x6d, 0x35, 0x7d, 0xbf, 0x7d, 0x07, 0xd6, 0xb8,
	0xdc, 0x26, 0x1e, 0xb8, 0xc8, 0xab, 0x8e, 0xca, 0x84, 0x34, 0x51, 0x16, 0x2d, 0x21, 0xa0, 0xd2,
	0xc8, 0xb1, 0xdc, 0xd5, 0xce, 0x82, 0xa1, 0xc6, 0x79, 0x34, 0xb8, 0x6c, 0xf2, 0x02, 0xb9, 0x9c,
	0xb8, 0x40, 0x7e, 0x53, 0x96, 0xdb, 0x28, 0x69, 0xa3, 0x40, 0x2e, 0xa0, 0x9f, 0x23, 0xbf, 0x11,
	0xdd, 0x54, 0xad, 0xc9, 0x6e, 0xaa, 0x12, 0xa6, 0x93, 0xeb, 0x29, 0xd3, 0xc9, 0xcb, 0x40, 0x65,
	0xef, 0xf4, 0x08, 0xa7, 0x7c, 0x78, 0x19, 0x21, 0x78, 0x7a, 0xcf, 0x75, 0xcd, 0x7f, 0xe1, 0xb3,
	0xb9, 0xe6, 0xff, 0x3a, 0x54, 0x47, 0xf1, 0x25, 0x2b, 0x68, 0x5c, 0x39, 0xfd, 0x12, 0x26, 0x21,
	0x0b, 0x37, 0xbb, 0xab, 0xd2, 0xcd, 0x2e, 0xe5, 0x93, 0xf9, 0xda, 0x0b, 0xf9, 0x64, 0x4e, 0xf0,
	0xe9, 0x37, 0x53, 0x7c, 0x7a, 0x8a, 0xdb, 0x7f, 0xe3, 0x6c, 0x97, 0xc8, 0xb7, 0xce, 0x62, 0xe6,
	0xdf, 0x4c, 0x31, 0xf3, 0xaf, 0xc3, 0xb2, 0xf0, 0x74, 0x0a, 0x91, 0x6e, 0x33, 0xfb, 0x99, 0x08,
	0x8c, 0xef, 0x3f, 0xfe, 0x5c, 0x1c, 0x2d, 0x89, 0x07, 0x17, 0x4c, 0x84, 0x4c, 0xc2, 0xe0, 0x82,
	0xfc, 0x2d, 0x63, 0xc2, 0xef, 0x67, 0x21, 0xa2, 0x2e, 0x57, 0x00, 0x62, 0x5b, 0x47, 0x6e, 0x56,
	0x3b, 0x3a, 0xf5, 0xd1, 0xcb, 0x42, 0xa6, 0x89, 0xe4, 0x75, 0xee, 0x47, 0x99, 0x85, 0x37, 0x61,
	0xa2, 0x29, 0xea, 0x31, 0x99, 0x45, 0x33, 0x91, 0xec, 0x28, 0x97, 0x64, 0x3b, 0x4a, 0xa6, 0x5e,
	0x2f, 0x9e, 0x53, 0xbd, 0x5e, 0x92, 0xd5, 0xeb, 0x97, 0x01, 0x48, 0x96, 0x10, 0x3f, 0x76, 0xc1,
	0x28, 0x3f, 0xb5, 0x78, 0x18, 0x16, 0xa6, 0x7d, 0x87, 0x73, 0x6a, 0xdf, 0x2b, 0xb2, 0xf6, 0xfd,
	0x32, 0x00, 0xc9, 0x62, 0x95, 0x53, 0xf2, 0x51, 0x7e, 0x76, 0xc4, 0x2b, 0x4f, 0xe9, 0xbf, 0x6b,
	0x2f, 0xa4, 0xff, 0xe6, 0x41, 0x65, 0x78, 0xbc, 0x04, 0x3e, 0x7e, 0xf5, 0x38, 0xa8, 0x0c, 0x0b,
	0x91, 0xc0, 0x47, 0xf1, 0x9b, 0xf0, 0x72, 0x56, 0x58, 0x97, 0xa8, 0x24, 0x25, 0x2e, 0x17, 0x83,
	0x54, 0x6c, 0x17, 0x5e, 0x81, 0xe8, 0x13, 0x78, 0xe4, 0x05, 0x21, 0x73, 0x22, 0x5e, 0x8d, 0xc3,
	0x74, 0x06, 0x18, 0x1d, 0x5a, 0x0a, 0x76, 0x13, 0x44, 0xf5, 0x53, 0xa1, 0xc4, 0x9a, 0x18, 0xee,
	0x26, 0xe0, 0x55, 0x7f, 0x0c, 0x97, 0x30, 0x6c, 0xb8, 0x14, 0xa0, 0x3c, 0x2e, 0x4a, 0xcd, 0x6b,
	0x2f, 0x46, 0x28, 0xa9, 0xf2, 0x64, 0x19, 0x49, 0x01, 0xab, 0x98, 0xeb, 0xf1, 0x40, 0x0c, 0x54,
	0x75, 0x03, 0xea, 0x31, 0x12, 0xce, 0xd8, 0x1a, 0xf3, 0x56, 0xc0, 0xa1, 0x64, 0xde, 0x36, 0xff,
	0x23, 0xc2, 0xe1, 0x89, 0x87, 0x4e, 0x1b, 0xae, 0x26, 0x4d, 0xb0, 0x19, 0xd5, 0xf5, 0x7c, 0xe7,
	0xd0, 0x71, 0xd9, 0xde, 0x29, 0x19, 0x97, 0x24, 0x73, 0x6b, 0x7e, 0x33, 0xa4, 0x28, 0xea, 0x97,
	0xd0, 0x45, 0x6d, 0x46, 0x2d, 0x2c, 0xae, 0xce, 0x6a, 0x46, 0x61, 0x76, 0x8a, 0x47, 0x05, 0x24,
	0x6f, 0xb4, 0x78, 0x8a, 0x73, 0xfc, 0xc8, 0xb3, 0xec, 0x38, 0x7e, 0x66, 0x78, 0x1d, 0xae, 0x76,
	0x06, 0xe6, 0xde, 0x40, 0x78, 0x0f, 0xc3, 0xb4, 0xc9, 0x34, 0x0c, 0x43, 0x73, 0x47, 0x79, 0x89,
	0x79, 0x70, 0xcd, 0x40, 0xa2, 0x26, 0x5e, 0x9d, 0x41, 0x0c, 0x8f, 0x1d, 0xb7, 0x6a, 0x7f, 0xa1,
	0x08, 0x0a, 0xbd, 0xff, 0x9e, 0xc2, 0x99, 0x65, 0xb0, 0x53, 0xf9, 0xcf, 0xcb, 0x4e, 0x89, 0x41,
	0xad, 0x5f, 0x94, 0xbd, 0xfb, 0x02, 0x39, 0x33, 0x59, 0x94, 0x1e, 0xd3, 0x45, 0x49, 0x16, 0xbc,
	0x74, 0x9a, 0x2c, 0xb8, 0x98, 0x38, 0xca, 0xcf, 0x21, 0x4e, 0x4f, 0xf3, 0x34, 0xe5, 0x17, 0xe4,
	0x69, 0xbe, 0x0e, 0xd4, 0x7c, 0x57, 0x0e, 0x94, 0x30, 0x3f, 0x62, 0x76, 0x05, 0xb1, 0x19, 0xc1,
	0xca, 0x08, 0xb4, 0x50, 0x79, 0xe1, 0x40, 0x0b, 0xf3, 0x44, 0xac, 0xc9, 0xd3, 0xbd, 0xf6, 0x22,
	0xa7, 0xfb, 0xe7, 0x8c, 0xac, 0x70, 0x19, 0x20, 0x0a, 0x5a, 0xc9, 0x79, 0xac, 0x32, 0x8f, 0x49,
	0x99, 0x52, 0xe3, 0x2b, 0x67, 0x1d, 0xcf, 0x2b, 0xa9, 0xe3, 0x39, 0xc5, 0x05, 0xa8, 0x67, 0xcb,
	0xfc, 0x56, 0x53, 0xbc, 0xc4, 0x3c, 0x8e, 0x7e, 0x6d, 0x1e, 0x47, 0xaf, 0xfd, 0x5c, 0x11, 0x56,
	0x07, 0xfd, 0x6f, 0x9f, 0xb9, 0x51, 0x93, 0x82, 0x96, 0xfc, 0xf9, 0x05, 0x2d, 0x89, 0x4d, 0x2e,
	0x18, 0xdc, 0xce, 0xd9, 0xe4, 0x58, 0x83, 0xb0, 0xc9, 0xb1, 0x92, 0x2f, 0x70, 0x67, 0x9e, 0xea,
	0xcd, 0x55, 0xda, 0x81, 0x4b, 0x67, 0xec, 0xc0, 0xe2, 0x79, 0x76, 0x60, 0xe9, 0x05, 0x77, 0xa0,
	0xbc, 0xd6, 0xca, 0xc9, 0xb5, 0xf6, 0x71, 0x44, 0x57, 0x20, 0xc3, 0x0b, 0x57, 0x7a, 0x2a, 0x93,
	0xb7, 0xbe, 0x79, 0x1e, 0x62, 0x93, 0xdb, 0xab, 0xfa, 0xb9, 0xb6, 0x57, 0xed, 0x85, 0x99, 0xe4,
	0xcf, 0xe7, 0xec, 0x39, 0xb5, 0x7f, 0x94, 0xb3, 0xf7, 0xcf, 0xca, 0xb9, 0xf7, 0x8f, 0x3a, 0xf7,
	0x46, 0x1c, 0x6b, 0x19, 0x57, 0x45, 0x2d, 0xe3, 0xe6, 0x6e, 0xc4, 0x44, 0xc7, 0xe7, 0x40, 0x4e,
	0x3a, 0x07, 0xde, 0x84, 0x15, 0x16, 0x93, 0x92, 0xf0, 0xbf, 0x92, 0xeb, 0x7c, 0x25, 0xce, 0xa0,
	0x95, 0x68, 0x7f, 0xef, 0x36, 0x54, 0x68, 0xa4, 0xb9, 0x17, 0x8e, 0x0a, 0xb4, 0x03, 0xab, 0x34,
	0x4b, 0x96, 0x56, 0x17, 0x4e, 0x0f, 0x0d, 0x83, 0xf6, 0xc0, 0x2b, 0x58, 0x50, 0x12, 0x06, 0xfd,
	0x01, 0xb8, 0x24, 0xd5, 0xe6, 0xdb, 0xc1, 0xd4, 0x73, 0x03, 0x67, 0xdf, 0x99, 0x38, 0xe1, 0x49,
	0x96, 0x5d, 0x8e, 0x21, 0x61, 0x60, 0xbd, 0x17, 0x85, 0x7a, 0xe5, 0x6c, 0x74, 0xca, 0x21, 0xd7,
	0x8f, 0xcb, 0x69, 0x31, 0xad, 0x80, 0x14, 0x86, 0x83, 0xfd, 0xa6, 0x8b, 0x29, 0xd5, 0x72, 0xb6,
	0xc6, 0xde, 0x4b, 0xd5, 0x8c, 0x9b, 0x60, 0x29, 0x72, 0xa9, 0x26, 0x97, 0xc1, 0x3d, 0xa1, 0x83,
	0x2a, 0x95, 0xa1, 0xba, 0xbd, 0xe2, 0xe9, 0x3b, 0x43, 0x11, 0xea, 0xa1, 0x0a, 0xbe, 0x5d, 0xd8,
	0xa0, 0xd5, 0xc4, 0x94, 0x41, 0x7a, 0x64, 0x72, 0x21, 0x75, 0xba, 0x72, 0xdb, 0x4d, 0x2c, 0x16,
	0x51, 0x0b, 0x46, 0xbf, 0x5a, 0x50, 0x61, 0x51, 0x46, 0x84, 0x13, 0x5e, 0x9b, 0x3f, 0x36, 0x04,
	0x95, 0x5e, 0xeb, 0xfd, 0xe8, 0x77, 0x3a, 0x02, 0x3a, 0x64, 0x44, 0x40, 0xef, 0x10, 0x24, 0x52,
	0x95, 0x29, 0xb9, 0x82, 0x3f, 0x63, 0x1e, 0xb8, 0x05, 0x8a, 0x2f, 0xa4, 0xd2, 0xb1, 0x89, 0xaa,
	0x2f, 0x14, 0x9b, 0x28, 0xc3, 0xb5, 0x7c, 0x6d, 0x9e, 0x6b, 0x79, 0x49, 0x79, 0xc2, 0x1c, 0x54,
	0x5b, 0x82, 0xd2, 0x24, 0x45, 0x2b, 0x96, 0xcf, 0xa6, 0x15, 0xca, 0x59, 0xfa, 0xb5, 0x95, 0xb3,
	0x68, 0x96, 0x9a, 0xa2, 0x59, 0x38, 0x8f, 0x38, 0xba, 0x38, 0x8f, 0xab, 0x67, 0xcd, 0x23, 0xf9,
	0xcd, 0xe7, 0x91, 0xff, 0x16, 0xa6, 0x88, 0x6d, 0x95, 0xb5, 0xf3, 0x6f, 0x15, 0x3e, 0x45, 0x6c,
	0x87, 0x5c, 0x17, 0xaa, 0xc2, 0xbd, 0x41, 0xf5, 0xaa, 0x11, 0x12, 0x6e, 0x89, 0x2d, 0x72, 0xbe,
	0x49, 0x7b, 0x7e, 0xe3, 0xac, 0x3d, 0x6f, 0x24, 0x4a, 0x60, 0xc4, 0x55, 0x6a, 0xa5, 0x89, 0x57,
	0x2a, 0x0c, 0x03, 0xca, 0x56, 0xe1, 0x05, 0x16, 0x71, 0x15, 0x2d, 0x36, 0xa3, 0xdc, 0x66, 0x64,
	0x85, 0xc2, 0xad, 0xcc, 0x1a, 0xb2, 0x95, 0x99, 0xe8, 0x83, 0xfd, 0xa2, 0xec, 0x83, 0xfd, 0xa3,
	0x78, 0x0d, 0xd3, 0x85, 0xb7, 0x99, 0x5e, 0x78, 0x6c, 0xdd, 0xb2, 0x85, 0xe7, 0x0b, 0x29, 0xf5,
	0x1d, 0x28, 0x4d, 0x7d, 0x6f, 0xea, 0x05, 0xb6, 0xcf, 0xde, 0x05, 0xc8, 0x2e, 0xbc, 0x59, 0x9e,
	0x11, 0x61, 0xa9, 0x03, 0x58, 0xf7, 0x0e, 0x0e, 0x26, 0x8e, 0x6b, 0xf3, 0x60, 0x40, 0x4c, 0x95,
	0x9e, 0xe1, 0x5d, 0x97, 0x85, 0x3a, 0xa1, 0x7f, 0x98, 0x42, 0x7d, 0x95, 0x95, 0x16, 0x81, 0x28,
	0x79, 0x4d, 0x0e, 0x19, 0xae, 0x9a, 0xcb, 0x73, 0x9c, 0xa5, 0xd1, 0xc1, 0xdb, 0xb2, 0x46, 0x4f,
	0x70, 0xc9, 0xac, 0x26, 0x46, 0x14, 0xd7, 0xce, 0xe3, 0x8c, 0x79, 0x60, 0x6d, 0xbd, 0x32, 0xe7,
	0x25, 0x72, 0x5c, 0x03, 0x6b, 0x6d, 0x72, 0xaa, 0x28, 0x58, 0xfb, 0x26, 0x40, 0x4c, 0x78, 0xd4,
	0x65, 0xa8, 0xd0, 0xe0, 0x20, 0x54, 0xa4, 0x9f, 0x13, 0x00, 0xdb, 0x7b, 0x3b, 0x3b, 0x4a, 0x5e,
	0x00, 0xf4, 0x9b, 0xc6, 0x50, 0x29, 0x68, 0xfb, 0x50, 0x15, 0xa9, 0x09, 0x8d, 0x06, 0x38, 0xdc,
	0x33, 0xba, 0x26, 0x57, 0xa6, 0x31, 0xad, 0x15, 0xc2, 0x22, 0x85, 0x18, 0x8b, 0x06, 0x48, 0x11,
	0x23, 0x15, 0x5a, 0x41, 0x40, 0x8d, 0x34, 0x69, 0x0b, 0xda, 0x88, 0x34, 0x32, 0xda, 0x49, 0xa8,
	0xee, 0x42, 0x14, 0x54, 0x07, 0x52, 0xbd, 0x11, 0xc5, 0xde, 0xc1, 0xcf, 0x5d, 0x82, 0x0b, 0x22,
	0x42, 0x73, 0x7b, 0xa8, 0x1b, 0xe6, 0xa0, 0xb9, 0xa3, 0x0f, 0x94, 0xbc, 0x7a, 0x01, 0x56, 0xc5,
	0xcc, 0x28, 0xd8, 0xa2, 0xf6, 0x4b, 0x97, 0x79, 0x4f, 0xd8, 0x36, 0x43, 0x55, 0x5f, 0x14, 0x7e,
	0x70, 0x1d, 0x56, 0xa8, 0x13, 0x9d, 0x6e, 0x6f, 0x48, 0xbd, 0xf7, 0xa0, 0x9a, 0xe3, 0x65, 0x68,
	0x50, 0x30, 0x86, 0x78, 0x68, 0x9b, 0x8f, 0x8c, 0x5e, 0xf7, 0x2e, 0x0f, 0xeb, 0x40, 0x9a, 0x4a,
	0x73, 0x69, 0x9c, 0x41, 0xb3, 0xdf, 0x7c, 0x8c, 0xca, 0xc7, 0x5d, 0x7d, 0x78, 0xaf, 0x47, 0xba,
	0xbb, 0x09, 0x1b, 0xdc, 0x35, 0xcf, 0x80, 0x07, 0x23, 0x24, 0x55, 0x75, 0x95, 0x85, 0xf8, 0x8b,
	0x8f, 0xc8, 0x8d, 0x9d, 0x29, 0x95, 0x16, 0xd5, 0x57, 0xe0, 0x72, 0x0a, 0xcc, 0x1d, 0x69, 0x0c,
	0x9a, 0x9d, 0x36, 0x55, 0xca, 0x51, 0x94, 0x4e, 0xb7, 0xbf, 0x37, 0x64, 0x6d, 0x6a, 0xb6, 0xdb,
	0x86, 0x3e, 0x18, 0x28, 0xc5, 0xb8, 0xcd, 0xdb, 0x3d, 0xe3, 0xae, 0x3e, 0x44, 0x89, 0x01, 0x0f,
	0xaa, 0x5b, 0x8a, 0x73, 0x59, 0x9b, 0xe9, 0xf8, 0x62, 0xb8, 0x44, 0xa5, 0xac, 0x6e, 0x80, 0x4a,
	0x73, 0x77, 0x7a, 0x83, 0xa1, 0xd9, 0xea, 0x75, 0x87, 0xcd, 0xd6, 0x50, 0x01, 0x32, 0x9b, 0xac,
	0xce, 0xe6, 0x7d, 0x1e, 0xd6, 0xa2, 0x12, 0x63, 0xb3, 0xf6, 0x35, 0x07, 0xf7, 0xf5, 0xb6, 0x52,
	0x8d, 0x1b, 0xc8, 0xe0, 0x52, 0x65, 0x35, 0xf5, 0x1a, 0xbc, 0x2c, 0x65, 0x77, 0x7b, 0xa6, 0xde,
	0xed, 0xed, 0xdd, 0xbd, 0x67, 0xee, 0xf6, 0xba, 0xfa, 0x63, 0xa5, 0xae, 0x36, 0x60, 0x4d, 0xc2,
	0x18, 0xf6, 0x7a, 0xe6, 0x76, 0xd3, 0x50, 0x96, 0xd5, 0x8b, 0xb0, 0xce, 0x87, 0xa7, 0x33, 0xd4,
	0xdb, 0x98, 0xb3, 0xd3, 0xeb, 0xde, 0x55, 0x14, 0xb2, 0x2e, 0xd8, 0xb0, 0x0c, 0xf5, 0xdd, 0x81,
	0x14, 0x40, 0x72, 0x85, 0xac, 0x0b, 0x36, 0x91, 0x52, 0x60, 0x48, 0x35, 0x2e, 0x65, 0xe8, 0x83,
	0x61, 0x73, 0xcf, 0xc0, 0x51, 0xdf, 0xe9, 0x0d, 0xf4, 0xb6, 0xb2, 0xaa, 0x2a, 0x50, 0xa5, 0x99,
	0x4c, 0xe5, 0xf6, 0x1e, 0x1a, 0xd9, 0x47, 0x2e, 0x4b, 0xf6, 0x86, 0x66, 0x6f, 0xdb, 0x1c, 0x0c,
	0x7b, 0xad, 0xfb, 0xca, 0x97, 0x50, 0x9b, 0xc7, 0xb3, 0xa8, 0x4b, 0xa4, 0x47, 0xcd, 0x81, 0xb9,
	0xb5, 0x37, 0x78, 0xac, 0xbc, 0x4f, 0x86, 0x24, 0x23, 0x93, 0x7d, 0xe8, 0xcb, 0x52, 0xb5, 0xbb,
	0x9d, 0xc1, 0x40, 0x6f, 0xb3, 0x41, 0xfe, 0x8a, 0x94, 0x45, 0x75, 0xd3, 0x2c, 0xeb, 0x03, 0xb2,
	0x9b, 0xe2, 0xc6, 0x30, 0xaf, 0x24, 0xe8, 0xf0, 0x82, 0x0d, 0x7b, 0x73, 0x18, 0x3b, 0x70, 0x52,
	0x6c, 0x41, 0x15, 0xd9, 0x6a, 0x76, 0xc9, 0x3a, 0x8f, 0xf2, 0x0e, 0xd0, 0x8b, 0x06, 0xcd, 0xdb,
	0xee, 0x20, 0x7d, 0x10, 0xc6, 0x43, 0x39, 0x14, 0x2a, 0xe5, 0xd9, 0x38, 0x2e, 0xca, 0x91, 0xa0,
	0x48, 0xdd, 0xe9, 0x3d, 0x8a, 0x35, 0xd4, 0x0f, 0xf6, 0x9a, 0x3b, 0x9d, 0xe1, 0x63, 0xc5, 0x11,
	0xbe, 0x9a, 0x9c, 0xe7, 0xef, 0xa1, 0xd7, 0x1a, 0xb6, 0x74, 0x5a, 0xad, 0x4e, 0x5b, 0xef, 0x0e,
	0x9b, 0x3b, 0x3b, 0x8f, 0xcd, 0x61, 0xbc, 0xc8, 0x9e, 0x90, 0xfe, 0x33, 0x9c, 0x2d, 0xa3, 0x77,
	0x5f, 0xef, 0x9a, 0x0f, 0xf5, 0x7b, 0x9d, 0xd6, 0x8e, 0xae, 0x4c, 0xd4, 0xdb, 0x70, 0x93, 0x67,
	0xe1, 0x2c, 0xe1, 0xfa, 0x33, 0xb7, 0xf4, 0x56, 0x93, 0xac, 0x79, 0x79, 0xa6, 0x8f, 0xc9, 0xca,
	0x67, 0xd8, 0xe9, 0x05, 0x42, 0x6e, 0x10, 0x6a, 0xba, 0x2e, 0xc5, 0x13, 0x4a, 0xa5, 0x17, 0xc8,
	0x54, 0xbd, 0x02, 0x9b, 0xe9, 0xdc, 0xc8, 0x82, 0xe0, 0x53, 0x8c, 0xd6, 0xc4, 0xc6, 0x2d, 0xee,
	0x93, 0xaf, 0xaa, 0x91, 0x32, 0x99, 0x4d, 0xdb, 0x8f, 0xe7, 0xd4, 0x57, 0xe0, 0x65, 0xee, 0x03,
	0x84, 0xcf, 0xcf, 0x6e, 0x73, 0xd8, 0xba, 0xc7, 0x75, 0xbb, 0x3f, 0x41, 0xa8, 0xd1, 0x85, 0x08,
	0x85, 0xd3, 0x1a, 0x16, 0x61, 0xeb, 0x27, 0x09, 0x5d, 0xdc, 0x88, 0x72, 0xe9, 0xae, 0xd6, 0xbf,
	0xdd, 0xef, 0x18, 0x7a, 0x5b, 0xf9, 0xa9, 0x9c, 0xfa, 0x3a, 0x68, 0xd9, 0x99, 0xe6, 0x5e, 0x37,
	0x8e, 0x55, 0xfb, 0xd3, 0x39, 0xf5, 0x0e, 0xbc, 0x11, 0x21, 0x32, 0x95, 0x38, 0x76, 0xd6, 0x6c,
	0x76, 0xdb, 0xe8, 0x53, 0xc5, 0x34, 0x74, 0x1a, 0xd3, 0x4a, 0x6f, 0x2b, 0x7f, 0x1a, 0x03, 0xb3,
	0x52, 0xc7, 0x1f, 0x32, 0xed, 0x34, 0xb7, 0x7b, 0xbd, 0xb6, 0xf2, 0x27, 0xba, 0xea, 0x35, 0xb8,
	0x14, 0xe5, 0x67, 0x10, 0xd1, 0x1f, 0xe9, 0xaa, 0xd7, 0xe1, 0x4a, 0x84, 0x91, 0x4d, 0x48, 0x7f,
	0xb4, 0x2b, 0x7d, 0x26, 0x45, 0x4c, 0x7f, 0xac, 0xab, 0x5e, 0x84, 0xb5, 0x28, 0x5f, 0x24, 0xa8,
	0x7f, 0xb2, 0xab, 0xde, 0x80, 0x6b, 0x59, 0x59, 0x12, 0x51, 0xfd, 0xf1, 0x2e, 0x19, 0xff, 0x08,
	0x2d, 0x8b, 0xb0, 0xfe, 0x84, 0xdc, 0x97, 0x0c, 0xe2, 0xfa, 0x93, 0x5d, 0xb5, 0x01, 0xab, 0x02,
	0x41, 0x8d, 0x16, 0xdf, 0x4f, 0x75, 0xd5, 0x4d, 0x58, 0x8f, 0xca, 0x4a, 0xf4, 0xf0, 0xa7, 0xbb,
	0xea, 0x32, 0x80, 0xb0, 0x3c, 0xfe, 0x14, 0xf6, 0x26, 0x26, 0xa9, 0xe6, 0xb0, 0xc7, 0x7b, 0xf3,
	0xa7, 0xf1, 0x0b, 0x59, 0x54, 0xf5, 0x67, 0xb0, 0x75, 0xf1, 0x46, 0xbb, 0xd7, 0x7c, 0xa8, 0xcb,
	0xbb, 0xed, 0xcf, 0x74, 0xd5, 0x55, 0xa8, 0x27, 0x08, 0xea, 0x9f, 0xed, 0xaa, 0x97, 0xa1, 0x21,
	0x0c, 0x8f, 0x4c, 0x54, 0x7f, 0xb6, 0xab, 0x6e, 0xc0, 0x4a, 0x7a, 0xbb, 0xfc, 0xb9, 0x2e, 0x59,
	0xc2, 0x72, 0x1f, 0xff, 0x3c, 0x36, 0x5b, 0xd8, 0x06, 0x9d, 0x88, 0xbe, 0xfd, 0x05, 0x79, 0x74,
	0xc9, 0x24, 0x0c, 0x48, 0xaf, 0xd0, 0xaf, 0x1d, 0xed, 0xf4, 0xcf, 0xc9, 0x28, 0x86, 0x7e, 0xd7,
	0xd0, 0x87, 0xfc, 0x6c, 0xdf, 0xdb, 0xda, 0xed, 0x0c, 0x95, 0x9f, 0xc7, 0x8f, 0xd2, 0x0d, 0x63,
	0x52, 0x83, 0x0f, 0xe5, 0xd7, 0x70, 0x40, 0x84, 0x8f, 0x46, 0x24, 0xf7, 0x6f, 0x74, 0xc9, 0x76,
	0x11, 0x72, 0x24, 0xb2, 0xfa, 0xeb, 0x5d, 0xb2, 0x5d, 0x38, 0x39, 0x20, 0x9d, 0x33, 0xf4, 0x41,
	0xbf, 0xd7, 0x1d, 0x90, 0x63, 0xff, 0x37, 0xc5, 0x4c, 0x4a, 0x53, 0xe2, 0x29, 0xf8, 0x9b, 0xd8,
	0x0a, 0x99, 0xb4, 0xfe, 0x6e, 0x57, 0x7d, 0x15, 0xae, 0xca, 0xb4, 0x95, 0x4c, 0x4c, 0xa7, 0xbb,
	0x27, 0x60, 0xfd, 0x1f, 0x5d, 0x55, 0x83, 0xcb, 0x32, 0x16, 0x52, 0x53, 0x81, 0xd2, 0xfe, 0x03,
	0x71, 0x1a, 0x85, 0x9a, 0x9a, 0xad, 0x21, 0xa3, 0xb8, 0xbf, 0x87, 0xc3, 0x9c, 0x49, 0x6b, 0xff,
	0x4f, 0xdc, 0x4b, 0x99, 0x04, 0xb5, 0xd7, 0xbb, 0xcf, 0x7a, 0xfe, 0x7f, 0xe3, 0x52, 0x64, 0x48,
	0x8c, 0x94, 0x32, 0xca, 0xaa, 0xfc, 0xc3, 0xae, 0x7a, 0x13, 0xae, 0x47, 0x04, 0xad, 0xdf, 0x33,
	0x86, 0x66, 0x34, 0x25, 0x74, 0x20, 0xd8, 0x28, 0xfc, 0xe3, 0xe4, 0xe8, 0x4a, 0x27, 0xd3, 0x0f,
	0xf7, 0xc8, 0xaa, 0x92, 0xeb, 0x11, 0x16, 0xf8, 0x1f, 0xea, 0xa9, 0x6f, 0xc2, 0x6b, 0x2c, 0x7b,
	0xb7, 0x37, 0xec, 0x45, 0xa4, 0xbd, 0xd7, 0x35, 0x1f, 0x35, 0x1f, 0x4b, 0xbe, 0xb2, 0xfe, 0x70,
	0x4f, 0x68, 0xd3, 0x1c, 0x64, 0x3a, 0x32, 0xff, 0xa2, 0x88, 0x49, 0x96, 0xaf, 0xf9, 0x60, 0x4f,
	0xdf, 0x43, 0xdf, 0x5d, 0xc3, 0x7b, 0xba, 0x38, 0xca, 0xff, 0x52, 0x4f, 0xbd, 0x10, 0x93, 0xfb,
	0x66, 0xdb, 0x7c, 0xa4, 0x37, 0xc9, 0xb2, 0x52, 0xfe, 0x48, 0x8f, 0x2c, 0xa7, 0x2c, 0xea, 0xfb,
	0x6f, 0xf6, 0xd4, 0x35, 0x58, 0x16, 0x89, 0xee, 0x9e, 0xa1, 0x2b, 0xff, 0x96, 0x04, 0x1d, 0x76,
	0x76, 0xf5, 0xde, 0xde, 0x50, 0xf9, 0x85, 0x1e, 0x21, 0x57, 0xf3, 0xa9, 0xec, 0xbf, 0xdd, 0x23,
	0x0b, 0x81, 0x4c, 0x61, 0xc4, 0x1a, 0x9b, 0x46, 0x93, 0xc6, 0xfe, 0x6e, 0x77, 0x5a, 0xc8, 0x55,
	0xff, 0x22, 0x0e, 0x21, 0xb5, 0xd8, 0x21, 0x0b, 0x94, 0x92, 0x56, 0xb2, 0x44, 0xd1, 0x0d, 0xda,
	0xbf, 0x87, 0xd9, 0xd1, 0xe1, 0x9f, 0x5c, 0xc1, 0xff, 0x7e, 0x8f, 0x4c, 0x0f, 0xeb, 0x60, 0xbb,
	0x87, 0xa5, 0xfb, 0x9d, 0xd6, 0x7d, 0x4a, 0x95, 0xff, 0x52, 0x4f, 0x7d, 0x0b, 0x6e, 0x0a, 0x93,
	0x47, 0xb2, 0x7b, 0x7d, 0x9d, 0xc6, 0x03, 0x44, 0xd3, 0x33, 0x73, 0x70, 0xaf, 0xd7, 0xd7, 0x75,
	0x44, 0xff, 0xe5, 0x9e, 0x7a, 0x0b, 0x6e, 0x90, 0x9f, 0x71, 0x43, 0x9a, 0xed, 0xc7, 0xe6, 0xa3,
	0x7b, 0x7a, 0x14, 0xd4, 0x1c, 0x2b, 0xdf, 0xeb, 0x2b, 0xff, 0x41, 0x4f, 0xbd, 0x0d, 0xaf, 0x37,
	0x5b, 0xc3, 0xbd, 0xe6, 0x0e, 0xa3, 0x81, 0xa4, 0x00, 0x19, 0xff, 0x41, 0x73, 0x57, 0x37, 0x9b,
	0x03, 0x73, 0xa7, 0x33, 0x18, 0x32, 0x7e, 0xf3, 0x2f, 0xf7, 0xd4, 0xab, 0xb0, 0x19, 0xaf, 0x30,
	0x4a, 0x69, 0xb1, 0xc4, 0x76, 0x6f, 0xaf, 0xdb, 0x56, 0x7e, 0xa5, 0x27, 0x51, 0x6f, 0xd6, 0x93,
	0x66, 0xab, 0xa5, 0xf7, 0x69, 0xa5, 0x74, 0x41, 0xfd, 0x6a, 0x8f, 0xec, 0xbf, 0xce, 0x6e, 0xdf,
	0x20, 0xbd, 0xc0, 0x4e, 0x9a, 0xf7, 0x9a, 0x38, 0x52, 0xe6, 0xd6, 0x63, 0x3e, 0x85, 0x7f, 0xa5,
	0x47, 0xb6, 0x35, 0xe3, 0x02, 0x75, 0x63, 0xd0, 0xeb, 0x36, 0x77, 0xcc, 0x5e, 0xbf, 0xd3, 0xed,
	0xf4, 0xba, 0xca, 0xbf, 0x93, 0x27, 0x94, 0x8e, 0xb1, 0x96, 0xc2, 0xf9, 0xf4, 0xef, 0xe6, 0x85,
	0xa5, 0xb2, 0xd7, 0x65, 0x7b, 0x4e, 0x6f, 0x2b, 0x7f, 0x27, 0x2f, 0x50, 0x69, 0x9c, 0x5d, 0xb2,
	0x49, 0x91, 0x3a, 0xfe, 0x56, 0x5e, 0xd8, 0xe8, 0xe9, 0x56, 0xed, 0x90, 0x09, 0xfc, 0xef, 0xf3,
	0xc2, 0x0c, 0x61, 0xd6, 0x40, 0x6f, 0xee, 0xf0, 0x8d, 0xf8, 0x3f, 0x90, 0xfb, 0xd3, 0x72, 0x62,
	0x27, 0x2b, 0xff, 0x63, 0x5e, 0x7d, 0x0d, 0x5e, 0xe1, 0x5b, 0xa1, 0x69, 0xdc, 0xdf, 0xeb, 0xe3,
	0x64, 0x11, 0x3e, 0xb4, 0xd3, 0x25, 0x27, 0x36, 0x0d, 0xe8, 0xf8, 0x3f, 0xe5, 0x85, 0x53, 0x82,
	0x1d, 0x62, 0xbb, 0xbd, 0xbd, 0xee, 0x50, 0xf9, 0x9f, 0xf3, 0xc2, 0xe6, 0x27, 0x5c, 0xd6, 0x20,
	0xa6, 0xf5, 0x7f, 0x57, 0x6c, 0x11, 0x1b, 0xa5, 0x66, 0xa7, 0x6d, 0x0e, 0x1f, 0x91, 0xa9, 0xfa,
	0x7b, 0x62, 0x6e, 0xcc, 0xc8, 0x51, 0xe2, 0xaf, 0xfc, 0x2f, 0x79, 0x75, 0x1d, 0x94, 0x38, 0x97,
	0x2c, 0x87, 0xbd, 0xbe, 0xf2, 0xdb, 0x22, 0xb8, 0xdd, 0xd9, 0xde, 0xd6, 0x0d, 0xd2, 0x8f, 0xff,
	0x35, 0x4f, 0x88, 0x5c, 0xb4, 0x78, 0xb1, 0xf7, 0x8c, 0x86, 0x99, 0x9d, 0xc1, 0x60, 0x4f, 0x57,
	0xfe, 0x44, 0x81, 0xf4, 0x34, 0xc2, 0xe8, 0xf6, 0xcc, 0xed, 0xde, 0xce, 0x4e, 0xef, 0x11, 0x99,
	0xd0, 0x4e, 0x77, 0x30, 0x34, 0xf6, 0x5a, 0xd8, 0xd3, 0x1f, 0x29, 0x90, 0x56, 0xc9, 0x35, 0xf5,
	0x7b, 0x9d, 0x41, 0xaf, 0x4b, 0xc6, 0xf8, 0x47, 0x0b, 0xf2, 0x26, 0xc1, 0x63, 0xac, 0xd3, 0x6d,
	0xf5, 0x0c, 0x43, 0x6f, 0x0d, 0x95, 0x1f, 0x23, 0xf7, 0xb3, 0x75, 0xb9, 0x70, 0x73, 0x67, 0x47,
	0x37, 0xee, 0x3e, 0x56, 0xfe, 0x64, 0x81, 0x4c, 0x7b, 0xcc, 0x08, 0xf5, 0xfb, 0x66, 0xcb, 0x68,
	0x0e, 0xee, 0x29, 0x7f, 0xbd, 0x40, 0xe6, 0x36, 0xca, 0x18, 0xec, 0x0d, 0xfa, 0x9d, 0x56, 0xa7,
	0xb7, 0x37, 0x30, 0x5b, 0x3d, 0x7e, 0xb8, 0xfc, 0x8d, 0x82, 0xc4, 0xa9, 0xdd, 0x6b, 0x1a, 0x6d,
	0xba, 0xd3, 0x9b, 0x9d, 0xee, 0x50, 0xf9, 0x4f, 0x0a, 0x12, 0xab, 0x97, 0xc5, 0x2e, 0xfc, 0x7a,
	0x41, 0xfb, 0x89, 0x12, 0x2c, 0xcd, 0x89, 0xf0, 0x7a, 0x09, 0xca, 0x4c, 0x92, 0x12, 0xbf, 0x62,
	0xa1, 0x80, 0xd3, 0x43, 0x68, 0x7e, 0x05, 0x2e, 0x44, 0x46, 0xf3, 0x99, 0xa1, 0x34, 0xd7, 0xb9,
	0xfd, 0xbc, 0x6c, 0xa0, 0x85, 0x2e, 0x92, 0xa9, 0x9c, 0x33, 0x51, 0x8c, 0x2a, 0x6d, 0xd6, 0x98,
	0x38, 0x53, 0x2e, 0x95, 0x12, 0x6c, 0x2e, 0x65, 0x08, 0x36, 0x3f, 0x8a, 0x90, 0xa4, 0x17, 0x2e,
	0x8d, 0xb4, 0x6c, 0x26, 0x16, 0x66, 0x0a, 0x41, 0x53, 0x33, 0xa4, 0x91, 0xa5, 0x4c, 0x69, 0xe4,
	0xd5, 0x58, 0x54, 0x2b, 0x3c, 0x02, 0x65, 0xed, 0xce, 0x90, 0x22, 0x7e, 0x86, 0x77, 0x4e, 0x89,
	0xb8, 0xa7, 0xd5, 0x54, 0xdc, 0xd3, 0x84, 0x98, 0xb1, 0xf6, 0x99, 0xc4, 0x8c, 0xe2, 0xab, 0x9d,
	0x7a, 0xe2, 0xd5, 0x4e, 0x3b, 0x1a, 0x4c, 0x26, 0x3c, 0x5a, 0x3e, 0x9f, 0xa0, 0x8b, 0x8d, 0x29,
	0x93, 0x70, 0xb5, 0xe0, 0x4a, 0x42, 0x6c, 0x96, 0x9c, 0x75, 0xfa, 0xaa, 0xe5, 0x92, 0x24, 0x1e,
	0x4b, 0x4c, 0xbe, 0x28, 0x07, 0x5c, 0x91, 0xe5, 0x80, 0x1f, 0x47, 0x53, 0x81, 0x66, 0x06, 0x6a,
	0xda, 0x6b, 0x80, 0xdc, 0x46, 0x7c, 0xd4, 0xe0, 0x47, 0xbf, 0xb5, 0x5f, 0xcb, 0x41, 0x55, 0x12,
	0xc9, 0x5d, 0x84, 0x75, 0x26, 0xb2, 0xa2, 0xb7, 0x05, 0x21, 0x7e, 0xee, 0x26, 0xa8, 0x72, 0x56,
	0x73, 0x6f, 0xd8, 0x53, 0x72, 0x9b, 0xf9, 0x12, 0xb9, 0x4b, 0xad, 0xc9, 0x79, 0x2c, 0x74, 0x6f,
	0x1e, 0x73, 0xd1, 0xa4, 0x58, 0xcc, 0x1d, 0xf4, 0x77, 0x95, 0x31, 0x39, 0x65, 0x64, 0x30, 0xb3,
	0xd2, 0x88, 0x0d, 0xcf, 0x95, 0xdf, 0xc8, 0x11, 0xe2, 0x26, 0x63, 0x6d, 0x35, 0xbb, 0xf7, 0xcd,
	0xa1, 0xd1, 0xec, 0x0e, 0xb6, 0x75, 0x43, 0xf9, 0x2f, 0x73, 0xda, 0xd7, 0xb8, 0x58, 0x8e, 0x3b,
	0xd7, 0xe4, 0xf8, 0xbd, 0xb6, 0xce, 0x1a, 0x49, 0x4d, 0xa0, 0x63, 0x28, 0x6f, 0x9e, 0xf6, 0x00,
	0xca, 0x7b, 0xae, 0xe3, 0xb9, 0x2d, 0x27, 0x3c, 0x51, 0xd7, 0x60, 0x91, 0xec, 0x1c, 0xee, 0x07,
	0x99, 0x26, 0x30, 0x7e, 0x23, 0xf7, 0x4d, 0x5c, 0x36, 0xf0, 0x37, 0x59, 0x39, 0x3c, 0xd2, 0x05,
	0x7b, 0xcf, 0x1d, 0xa5, 0xb5, 0x5f, 0x2e, 0x40, 0x6d, 0xd7, 0x0a, 0x82, 0xf9, 0x81, 0x40, 0xdf,
	0x85, 0xf2, 0xb1, 0x15, 0x04, 0xa2, 0xd2, 0x59, 0x92, 0xbf, 0x92, 0xd2, 0x34, 0x84, 0xe2, 0x31,
	0xfb, 0x95, 0x8c, 0xf2, 0x59, 0x38, 0x77, 0x94, 0xcf, 0x4d, 0x28, 0x1d, 0x38, 0x13, 0x5b, 0x78,
	0x68, 0x17, 0xa5, 0x09, 0xed, 0x23, 0xbf, 0xcd, 0x23, 0x2b, 0x38, 0x62, 0x6f, 0xec, 0x30, 0xf3,
	0x9e, 0x15, 0x1c, 0x49, 0x9b, 0x63, 0xe9, 0x8c, 0x80, 0x99, 0xc5, 0x33, 0x03, 0x66, 0x96, 0x52,
	0x34, 0xe0, 0xab, 0xe8, 0xdd, 0x08, 0xeb, 0x60, 0x32, 0xec, 0xf2, 0xdc, 0x20, 0x9e, 0x35, 0x86,
	0xc9, 0xc4, 0xd7, 0x0d, 0x28, 0x8e, 0x3c, 0x37, 0xb4, 0x99, 0x82, 0xa7, 0x6c, 0xf0, 0xa4, 0xfa,
	0x21, 0x94, 0x26, 0xde, 0xa1, 0x68, 0xf8, 0x7a, 0x39, 0x39, 0xb0, 0xd1, 0xb4, 0xe0, 0x50, 0x15,
	0x27, 0xf4, 0x87, 0xf6, 0x73, 0x65, 0x58, 0x47, 0x62, 0xc1, 0x6d, 0xac, 0x5a, 0xd6, 0xf1, 0xd4,
	0x72, 0x0e, 0xdd, 0x2c, 0xbf, 0x49, 0x23, 0x96, 0x27, 0xf9, 0x4d, 0xe2, 0x40, 0xb4, 0x02, 0x7d,
	0x08, 0xf5, 0xd8, 0x7b, 0xbc, 0x30, 0x65, 0x6f, 0xa7, 0xb4, 0x62, 0xc9, 0xef, 0xdd, 0x89, 0x1c,
	0xcb, 0x53, 0x3d, 0xfa, 0x54, 0x4c, 0xaa, 0xdf, 0x05, 0x25, 0xae, 0x57, 0x32, 0x18, 0x78, 0xf7,
	0x05, 0x6a, 0x66, 0xf4, 0x7f, 0x79, 0x2a, 0x03, 0xd4, 0x01, 0xd4, 0xb8, 0x11, 0x1a, 0x6d, 0xf4,
	0x62, 0x3a, 0xba, 0x79, 0x76, 0xd5, 0x1c, 0x80, 0x6d, 0xae, 0x8e, 0x85, 0x94, 0xfa, 0x36, 0xac,
	0x46, 0x95, 0x4e, 0x6d, 0x7f, 0x64, 0xbb, 0xa1, 0x75, 0xc8, 0x0d, 0x1a, 0x55, 0x9e, 0xd5, 0x8f,
	0x72, 0xf0, 0xf5, 0x27, 0x2f, 0x30, 0xb2, 0xa6, 0x7c, 0x75, 0x8d, 0xa3, 0x6f, 0x4e, 0xc9, 0x59,
	0x15, 0xa1, 0x48, 0x0f, 0x32, 0xeb, 0x1c, 0xdc, 0x8c, 0x0c, 0x93, 0x62, 0x77, 0x92, 0xe5, 0x84,
	0x3b, 0x49, 0xdc, 0xef, 0xde, 0xe8, 0x09, 0x3b, 0xa1, 0x68, 0x82, 0xcc, 0xef, 0x2c, 0xb0, 0xc7,
	0xe6, 0xa7, 0x33, 0x0b, 0x63, 0xec, 0xb2, 0xe3, 0xa9, 0x4a, 0x80, 0x0f, 0x18, 0x4c, 0xd5, 0xa0,
	0x36, 0x71, 0x8e, 0x1d, 0xec, 0x91, 0x39, 0xb6, 0x4e, 0xb8, 0x99, 0x34, 0x02, 0xfb, 0xb6, 0xdf,
	0xb6, 0x4e, 0xd4, 0x57, 0xa1, 0x1e, 0xe3, 0xcc, 0x02, 0xdb, 0x67, 0xda, 0xbd, 0x2a, 0x47, 0xda,
	0x0b, 0x6c, 0x9f, 0x9a, 0x13, 0x47, 0xee, 0xdf, 0xa8, 0x66, 0xaf, 0x1c, 0x44, 0x9e, 0xdf, 0x2e,
	0x42, 0x29, 0xf2, 0xf9, 0x46, 0x55, 0x7a, 0x45, 0x9b, 0x1d, 0xb3, 0x97, 0xa0, 0x8c, 0x4f, 0x89,
	0x42, 0xeb, 0x30, 0xe0, 0xaf, 0x23, 0x09, 0x60, 0x68, 0x1d, 0x06, 0x9f, 0xcb, 0xd1, 0xe7, 0x0d,
	0xa8, 0x53, 0x15, 0x4a, 0x44, 0x39, 0x54, 0xfa, 0x96, 0x0c, 0xa1, 0xdb, 0x9c, 0x7c, 0x6c, 0xc1,
	0xb2, 0xfc, 0xae, 0x32, 0x68, 0xac, 0x5e, 0x2b, 0x9c, 0xfe, 0xb0, 0xb2, 0x2e, 0x3d, 0xac, 0x0c,
	0xc8, 0x14, 0x4c, 0xac, 0x7d, 0x7b, 0xc2, 0x9e, 0x46, 0xd2, 0x84, 0xa8, 0x13, 0x5b, 0x4f, 0x79,
	0xef, 0x10, 0xc9, 0xca, 0xc6, 0x59, 0xac, 0xc5, 0x85, 0x14, 0x6b, 0x71, 0x1b, 0x54, 0xee, 0xe3,
	0x95, 0xc5, 0xaf, 0x77, 0xc6, 0x41, 0xa3, 0x71, 0xad, 0x70, 0x73, 0xc1, 0x50, 0x78, 0x0e, 0x86,
	0xae, 0xef, 0x8c, 0x03, 0xed, 0x7d, 0xa8, 0x49, 0xfb, 0x11, 0xfd, 0xc6, 0x89, 0xaf, 0x6b, 0x30,
	0x42, 0x35, 0x61, 0x86, 0xcd, 0xc1, 0xde, 0xd6, 0xb0, 0x37, 0xc4, 0x53, 0xe5, 0x36, 0x2c, 0x27,
	0xf6, 0x9a, 0x5a, 0x81, 0x22, 0x8f, 0x34, 0x40, 0x9f, 0x49, 0x51, 0x67, 0x37, 0x6d, 0x25, 0xaf,
	0xdd, 0x82, 0xaa, 0xb8, 0x7d, 0xd4, 0x3a, 0x40, 0x5f, 0x37, 0x5a, 0x7a, 0x77, 0xd8, 0xbc, 0xcb,
	0xfd, 0x63, 0xd0, 0x1b, 0x47, 0x5e, 0xfb, 0x00, 0x6a, 0x64, 0xd5, 0x34, 0xc3, 0xd0, 0x77, 0xf6,
	0x67, 0x21, 0x46, 0x12, 0x7e, 0x62, 0x9f, 0xb0, 0x13, 0x8b, 0xfc, 0x24, 0x43, 0x4a, 0xc3, 0x28,
	0x53, 0xba, 0x44, 0x13, 0xda, 0x6f, 0xe7, 0x60, 0x85, 0xd9, 0xb5, 0x76, 0xc6, 0xb6, 0x1b, 0x3a,
	0x07, 0x8e, 0x8d, 0x84, 0x3c, 0x26, 0x27, 0x11, 0x95, 0xab, 0x44, 0x30, 0x6a, 0x1e, 0xc4, 0x2d,
	0x66, 0xa3, 0x30, 0xc6, 0x65, 0xa3, 0xc2, 0x60, 0xf8, 0xd8, 0xe1, 0x65, 0x28, 0x07, 0xce, 0xa1,
	0x6b, 0x85, 0x33, 0xdf, 0x66, 0xc7, 0x61, 0x0c, 0x50, 0x3f, 0x21, 0x3c, 0xca, 0x33, 0xcb, 0x1f,
	0x8b, 0x2f, 0xf8, 0x25, 0x3e, 0x8a, 0xb5, 0xeb, 0x8e, 0x41, 0xd1, 0x38, 0x9f, 0x46, 0x12, 0xfc,
	0x01, 0xff, 0xd4, 0xb7, 0x0f, 0x9c, 0xe7, 0xdc, 0xb5, 0x1c, 0x4d, 0x11, 0xf8, 0xc4, 0x76, 0x0f,
	0xc3, 0x23, 0x24, 0x26, 0x8b, 0x06, 0x4b, 0x69, 0x2d, 0x50, 0xda, 0x78, 0x1a, 0xef, 0xcf, 0x90,
	0x87, 0x9a, 0x4d, 0x38, 0x15, 0x8a, 0x60, 0x9c, 0xab, 0xa3, 0x9e, 0x22, 0x55, 0x31, 0x8b, 0x29,
	0xfb, 0x7e, 0x34, 0x07, 0xf5, 0x87, 0xd6, 0xc4, 0x19, 0x3b, 0xe1, 0x09, 0x9b, 0xc3, 0x26, 0x54,
	0x3f, 0x9d, 0x79, 0xa1, 0x25, 0x3b, 0x1a, 0xbd, 0x92, 0xd1, 0x95, 0x07, 0x04, 0x8d, 0xfb, 0x14,
	0xfb, 0x34, 0x4e, 0x10, 0x86, 0x0d, 0x63, 0xb3, 0x08, 0x0e, 0xfd, 0x12, 0x67, 0x14, 0xab, 0x81,
	0xac, 0x55, 0x56, 0x01, 0x84, 0xd1, 0x6f, 0xcd, 0x80, 0xea, 0xee, 0x6c, 0x12, 0x3a, 0x3b, 0x96,
	0x7b, 0x38, 0x7c, 0x1e, 0xd2, 0x28, 0xe7, 0xee, 0xe1, 0x2c, 0x8e, 0xde, 0x10, 0xa5, 0xb3, 0x17,
	0x02, 0x5f, 0x30, 0x85, 0x68, 0xc1, 0x68, 0x7f, 0x34, 0x07, 0x55, 0xfe, 0xd5, 0xa6, 0x3b, 0x6e,
	0xa1, 0x55, 0x31, 0x33, 0xe1, 0x09, 0x9d, 0x70, 0xc2, 0x6b, 0xae, 0x32, 0xe0, 0x90, 0xc0, 0x08,
	0x09, 0xe6, 0x48, 0xfc, 0x30, 0xce, 0xb3, 0xe7, 0x8c, 0x14, 0xdc, 0x62, 0x67, 0xf2, 0x2d, 0x58,
	0x91, 0x6a, 0x33, 0xe3, 0xcf, 0x2f, 0x8b, 0x35, 0xde, 0xb7, 0x4f, 0xb4, 0x7f, 0x98, 0x87, 0x0a,
	0xf3, 0xd5, 0xda, 0x71, 0x0f, 0x3c, 0x0c, 0xed, 0x3c, 0xf2, 0x5c, 0xd6, 0x00, 0xfc, 0x4d, 0xc8,
	0x1e, 0xf9, 0x6b, 0x86, 0xf6, 0x73, 0xfe, 0xc9, 0x12, 0x01, 0x0c, 0xed, 0xe7, 0x21, 0xe9, 0x33,
	0x6d, 0x32, 0xf3, 0x57, 0x88, 0x89, 0x98, 0xca, 0x2c, 0x88, 0x54, 0x46, 0x87, 0x95, 0x11, 0xf7,
	0x3c, 0x3e, 0x36, 0x11, 0x16, 0x34, 0x16, 0xd1, 0x0e, 0x46, 0xba, 0x33, 0x89, 0x03, 0x6e, 0x28,
	0x71, 0x91, 0x1d, 0x2c, 0xa1, 0x7e, 0x02, 0xcb, 0xe1, 0xc8, 0xe4, 0x5d, 0x9c, 0x38, 0x01, 0xb9,
	0x9d, 0xa5, 0x2a, 0x11, 0x07, 0xd8, 0xa8, 0x85, 0xa3, 0x01, 0xc5, 0xdf, 0x71, 0x82, 0x50, 0xfd,
	0x32, 0x5c, 0x88, 0x5c, 0xd9, 0xba, 0xe6, 0xc4, 0x72, 0xc7, 0x8e, 0x7b, 0x68, 0x4e, 0xc9, 0x9c,
	0x16, 0xd1, 0x48, 0x2b, 0xf2, 0x54, 0xeb, 0xee, 0xd0, 0xcc, 0x3e, 0x99, 0xdf, 0x3e, 0x28, 0xfb,
	0xbe, 0xf7, 0x2c, 0xb0, 0xf1, 0xa3, 0xf4, 0x18, 0x28, 0xa5, 0xcd, 0xe7, 0xd8, 0x97, 0x99, 0x93,
	0xf5, 0x80, 0xb5, 0x9b, 0x7c, 0xd8, 0xa8, 0xd3, 0xf2, 0xe4, 0x37, 0x39, 0x34, 0xb4, 0xbb, 0x50,
	0xd6, 0x9f, 0x87, 0xbe, 0x85, 0x63, 0xff, 0x35, 0x3c, 0x86, 0xb1, 0x55, 0x8e, 0x7b, 0xe0, 0x31,
	0x77, 0x95, 0x17, 0x32, 0xdc, 0xea, 0x12, 0x74, 0x3c, 0x9f, 0x79, 0x42, 0xfb, 0x17, 0x72, 0xa0,
	0x4a, 0x84, 0x7f, 0x30, 0xf2, 0xa6, 0x99, 0x27, 0x46, 0xee, 0x45, 0x4f, 0x8c, 0xd7, 0x60, 0x39,
	0x98, 0x1e, 0x0b, 0xef, 0xf0, 0xc9, 0x2e, 0x2a, 0xa0, 0x39, 0xfb, 0xf4, 0x38, 0x7a, 0x84, 0x1f,
	0x68, 0xbf, 0x9b, 0x83, 0x2a, 0xab, 0x89, 0x10, 0x80, 0x40, 0xed, 0xc3, 0x9a, 0xfc, 0x71, 0x33,
	0x20, 0x8d, 0x62, 0xfd, 0xba, 0x32, 0xb7, 0x05, 0xd8, 0x74, 0x43, 0x9d, 0xa6, 0xbb, 0xf3, 0x01,
	0x50, 0x43, 0x61, 0x56, 0x51, 0x3e, 0x1d, 0x78, 0x95, 0xda, 0x3d, 0x61, 0x05, 0xe0, 0x45, 0xbf,
	0xd5, 0xd7, 0xa0, 0xde, 0xf2, 0xed, 0xb1, 0x13, 0xb6, 0x2c, 0x7f, 0xbc, 0xe5, 0xb8, 0xdc, 0x0b,
	0x51, 0x02, 0xaa, 0xbe, 0x07, 0xeb, 0x9c, 0xf6, 0x46, 0xc2, 0x86, 0x93, 0xa9, 0x4d, 0x58, 0xbe,
	0xc2, 0xcd, 0x45, 0x63, 0x95, 0x65, 0xb2, 0xe6, 0x12, 0x5a, 0x19, 0x68, 0x1f, 0x41, 0x8d, 0x7b,
	0x33, 0xa7, 0x1f, 0xcb, 0x3e, 0xf0, 0x72, 0x73, 0x0e, 0xbc, 0x37, 0x00, 0xe2, 0x46, 0xcb, 0xec,
	0x53, 0x4e, 0x66, 0x9f, 0xb4, 0xbf, 0x58, 0x00, 0xa0, 0x6f, 0xd8, 0x10, 0xb7, 0x0d, 0x80, 0xe3,
	0x20, 0x3a, 0x78, 0x4d, 0x07, 0x50, 0x41, 0x5c, 0xe1, 0x27, 0x75, 0xf1, 0x1a, 0xf0, 0x9f, 0xe4,
	0x8b, 0xfc, 0x65, 0x16, 0x9f, 0xd8, 0x12, 0x7b, 0x9a, 0x15, 0x60, 0xa4, 0xa8, 0xe7, 0xa3, 0xc9,
	0x2c, 0x0a, 0x3e, 0xe4, 0x30, 0x07, 0x4e, 0x0b, 0xc6, 0x32, 0xcb, 0x18, 0x70, 0xdc, 0x3b, 0x40,
	0xcd, 0x43, 0x4c, 0x91, 0x0d, 0xa2, 0x23, 0x57, 0x33, 0x56, 0x30, 0x4b, 0x60, 0x80, 0x02, 0xc2,
	0xd1, 0x51, 0x7c, 0xea, 0x17, 0x9f, 0x52, 0x82, 0x05, 0x83, 0xba, 0x5e, 0x1b, 0x5a, 0x87, 0x64,
	0x70, 0xfe, 0x5a, 0x0e, 0xea, 0x72, 0xd3, 0xd5, 0xab, 0x70, 0x89, 0x4a, 0x77, 0x99, 0xdc, 0x11,
	0xb5, 0xd1, 0x83, 0x56, 0xaf, 0xaf, 0x9b, 0xcd, 0x9d, 0x1d, 0x25, 0xa7, 0xde, 0x84, 0x57, 0xe7,
	0x21, 0x6c, 0x3d, 0x66, 0xc9, 0x4e, 0x7b, 0xa0, 0xe4, 0xd5, 0xf7, 0xe0, 0xce, 0x29, 0x98, 0xad,
	0xde, 0x6e, 0xbf, 0x37, 0xe8, 0x0c, 0x31, 0xd2, 0x4f, 0xbb, 0x83, 0x12, 0xbb, 0x82, 0x7a, 0x1b,
	0x6e, 0x9e, 0x59, 0xfb, 0xb0, 0x79, 0x17, 0xbf, 0xb0, 0xa0, 0xfd, 0x31, 0xb2, 0x27, 0xa8, 0x13,
	0x42, 0xba, 0x27, 0x3e, 0x81, 0x7a, 0xb4, 0x36, 0xc4, 0xdd, 0x70, 0x31, 0xcb, 0x39, 0x3e, 0x5d,
	0xc7, 0xb5, 0x89, 0xb4, 0xba, 0x3e, 0xe0, 0xce, 0xe9, 0xe6, 0xee, 0x81, 0x78, 0xc0, 0x98, 0xd3,
	0x3a, 0xfc, 0xad, 0xf5, 0xa0, 0x4c, 0x38, 0x19, 0xda, 0x8e, 0x2d, 0x58, 0x46, 0x56, 0xd6, 0xe2,
	0x7c, 0x4d, 0x90, 0x15, 0x1f, 0x47, 0xe2, 0x7c, 0x8c, 0xfa, 0x4c, 0x4c, 0x92, 0xa3, 0x71, 0x89,
	0x32, 0x10, 0x73, 0xad, 0x53, 0xaf, 0x00, 0x08, 0x17, 0x10, 0xfa, 0xb2, 0x4b, 0x80, 0x90, 0xa3,
	0x91, 0xdc, 0x37, 0xa8, 0x97, 0x2a, 0xf2, 0x53, 0xb3, 0x60, 0x9d, 0x91, 0x4f, 0x5a, 0x35, 0xe7,
	0xd3, 0xc8, 0xe9, 0xc7, 0x98, 0x1a, 0x7e, 0xe1, 0xe0, 0x9e, 0x9b, 0x7d, 0x19, 0xf1, 0x6a, 0xc4,
	0xfd, 0x8c, 0x3c, 0xc7, 0x65, 0x12, 0x46, 0xc6, 0xdc, 0xb4, 0x3c, 0xc7, 0xd5, 0xfe, 0xb5, 0x3c,
	0x54, 0x48, 0xc7, 0xd8, 0x77, 0x08, 0x7d, 0xc3, 0xa1, 0xe0, 0x1b, 0x3f, 0xe2, 0xca, 0xc8, 0xad,
	0xc4, 0x8f, 0x58, 0x38, 0xf5, 0x02, 0x14, 0xb9, 0x03, 0x03, 0x5a, 0xe9, 0xd2, 0x2c, 0x60, 0xb6,
	0xb1, 0x6a, 0x5c, 0x96, 0x73, 0x7a, 0xd8, 0xa9, 0x4a, 0x26, 0xa7, 0x11, 0xb3, 0x83, 0xc6, 0xca,
	0xd3, 0x14, 0x87, 0x48, 0xf8, 0xe9, 0xc0, 0x3a, 0x14, 0x9d, 0x0f, 0x12, 0x7e, 0x9a, 0x80, 0x22,
	0xe7, 0x83, 0x14, 0x01, 0x6f, 0x35, 0x91, 0x33, 0x3f, 0x02, 0xda, 0x21, 0x10, 0xf5, 0x2d, 0x28,
	0xb2, 0x6a, 0x91, 0x4d, 0xab, 0xc8, 0xee, 0xc6, 0xf8, 0xf0, 0x72, 0x1c, 0xed, 0xf7, 0x56, 0xa0,
	0xc8, 0xc7, 0xe2, 0x23, 0x00, 0xa1, 0x0b, 0xb9, 0xf3, 0x74, 0x41, 0x28, 0x90, 0xe4, 0x3c, 0xf3,
	0x2f, 0xce, 0x79, 0x66, 0x4c, 0x73, 0xe1, 0x3c, 0xd3, 0xbc, 0x40, 0xd7, 0x56, 0x3c, 0xcd, 0xea,
	0x47, 0x70, 0x49, 0x40, 0x30, 0xed, 0x4f, 0x67, 0xce, 0x53, 0x6b, 0x82, 0x3e, 0x62, 0xb8, 0xf4,
	0x65, 0xc1, 0x68, 0xc4, 0x05, 0xf4, 0x08, 0xa1, 0x65, 0x05, 0x47, 0xea, 0x37, 0xe1, 0x65, 0x56,
	0x5c, 0x7a, 0xcb, 0x16, 0xb5, 0x8a, 0xde, 0xa6, 0x2f, 0x52, 0x1c, 0x21, 0x5a, 0x53, 0xd4, 0xc0,
	0x88, 0x31, 0x2a, 0x8a, 0x8c, 0xd1, 0x99, 0x52, 0x9a, 0xcb, 0xc0, 0x52, 0x63, 0x73, 0xff, 0x84,
	0xb9, 0x36, 0x2a, 0x33, 0xc8, 0xd6, 0x49, 0xd2, 0x11, 0x23, 0xa4, 0x1d, 0x31, 0x7e, 0x05, 0x79,
	0x9b, 0x98, 0xef, 0x16, 0xee, 0xba, 0xf4, 0x5e, 0xbd, 0x2e, 0x66, 0xc7, 0x1e, 0xcf, 0xdf, 0x03,
	0x29, 0x23, 0x76, 0x7c, 0x4e, 0x2f, 0xda, 0x12, 0x33, 0xcf, 0xfd, 0x9f, 0x77, 0x60, 0x45, 0x2a,
	0xe3, 0xcf, 0x26, 0x54, 0x34, 0x5c, 0x91, 0x9f, 0x53, 0x24, 0x2f, 0x07, 0x86, 0x32, 0x4e, 0x5e,
	0x17, 0x3e, 0x84, 0x86, 0x54, 0x15, 0x8d, 0x7f, 0x49, 0x97, 0x38, 0xbd, 0xa3, 0x6f, 0x88, 0xf9,
	0x18, 0x70, 0x9f, 0x2e, 0xf7, 0xec, 0x92, 0x74, 0x96, 0x96, 0xe7, 0x94, 0xa4, 0x3b, 0xe9, 0xbb,
	0xf0, 0xb2, 0x54, 0xf2, 0x29, 0xbb, 0x7d, 0xf0, 0xcb, 0x82, 0x92, 0x7e, 0x75, 0x24, 0x5f, 0x50,
	0x8c, 0x4d, 0xb1, 0x7c, 0xe2, 0xf2, 0xf2, 0x3e, 0x00, 0x0d, 0x13, 0x8a, 0xcc, 0xdc, 0x0a, 0xd6,
	0xb5, 0x2e, 0x39, 0xfe, 0xe3, 0x9c, 0x9f, 0x51, 0xb6, 0x23, 0x26, 0x50, 0xb8, 0xfd, 0x09, 0x82,
	0x00, 0x7e, 0xfb, 0x43, 0x51, 0x17, 0xf5, 0x48, 0x8c, 0xcc, 0x09, 0x19, 0xf0, 0x00, 0x6d, 0x7e,
	0x2b, 0x29, 0x8f, 0xc4, 0x11, 0x23, 0x66, 0x70, 0x6f, 0x43, 0x94, 0xf4, 0x93, 0xe2, 0xcc, 0xaf,
	0x2e, 0x2d, 0xbe, 0x96, 0x51, 0x5c, 0x38, 0xb3, 0x8c, 0xea, 0x54, 0x3c, 0xc1, 0x6e, 0xc1, 0x12,
	0x5d, 0xf4, 0x28, 0x29, 0xa8, 0xc8, 0xe2, 0x43, 0xba, 0xad, 0x0d, 0x86, 0xa1, 0xee, 0x02, 0xe7,
	0x98, 0x4c, 0x91, 0x2e, 0x6c, 0xcc, 0xbd, 0x84, 0x19, 0x11, 0x25, 0x88, 0x48, 0x63, 0x0c, 0x3a,
	0x5b, 0xd4, 0x70, 0x19, 0x58, 0x0a, 0x37, 0x0f, 0xb5, 0xee, 0x2d, 0x33, 0xc8, 0xd6, 0x09, 0x61,
	0xcc, 0x28, 0xe5, 0x1c, 0xcf, 0x58, 0x8c, 0x92, 0x23, 0x9f, 0x06, 0x17, 0xa9, 0x19, 0x0a, 0xe6,
	0xb4, 0x59, 0xc6, 0x3d, 0x3f, 0x50, 0x6f, 0x02, 0x85, 0x89, 0x3b, 0x88, 0xfa, 0x61, 0xaa, 0x23,
	0x5c, 0x0a, 0x16, 0x40, 0x31, 0xa3, 0x3d, 0x73, 0x89, 0x4b, 0xb0, 0xac, 0xc3, 0x28, 0x58, 0xc0,
	0xdb, 0xb0, 0x46, 0xb1, 0xb8, 0x74, 0x8a, 0xad, 0x6e, 0xea, 0x97, 0x69, 0x05, 0xf3, 0x98, 0x8c,
	0x8a, 0x2e, 0xec, 0x5b, 0x40, 0x81, 0xd2, 0x8a, 0xa6, 0x2e, 0x9a, 0x96, 0x31, 0x43, 0x58, 0xca,
	0x09, 0x5c, 0x5a, 0xf3, 0x95, 0x24, 0x2e, 0xad, 0xb7, 0x0b, 0xeb, 0x14, 0x37, 0xb9, 0xde, 0xaf,
	0x9e, 0xb9, 0xde, 0x57, 0xb1, 0x60, 0x7a, 0xa1, 0x63, 0x77, 0xe8, 0x6a, 0xba, 0x96, 0x5e, 0xe8,
	0x11, 0xdb, 0x61, 0xa0, 0xfc, 0x8c, 0xae, 0xa3, 0xcb, 0x00, 0xc2, 0x89, 0xfb, 0x0a, 0x7b, 0x12,
	0x1d, 0x9d, 0xb6, 0x49, 0x29, 0x88, 0x96, 0x96, 0x82, 0x7c, 0x02, 0xf5, 0xe8, 0x69, 0x31, 0xed,
	0xc0, 0xf5, 0xf4, 0x23, 0x29, 0xfe, 0xb4, 0x98, 0xb9, 0xeb, 0x7f, 0x2a, 0x26, 0x53, 0xef, 0xd1,
	0x5e, 0x7d, 0x81, 0xf7, 0x68, 0x8f, 0xe1, 0x42, 0x62, 0x6d, 0x47, 0x67, 0xc3, 0x0d, 0x1c, 0x82,
	0x57, 0xe6, 0xae, 0x6f, 0x7e, 0x46, 0x18, 0xeb, 0x4f, 0x33, 0x79, 0x9d, 0xb7, 0x60, 0x75, 0xe4,
	0x99, 0xa8, 0x65, 0x8a, 0x04, 0xdf, 0xce, 0x18, 0x5d, 0x43, 0xe1, 0xb3, 0x9e, 0xed, 0x99, 0x3b,
	0xe6, 0x82, 0x60, 0xaa, 0x19, 0x8d, 0x9d, 0x4a, 0xd3, 0x77, 0xca, 0x5c, 0x46, 0x4b, 0x9d, 0x3e,
	0xad, 0x47, 0x7e, 0xa3, 0x69, 0x2e, 0x13, 0xd5, 0xbe, 0x0b, 0xeb, 0xae, 0xe7, 0x9a, 0xa3, 0x89,
	0xe5, 0x1c, 0x5b, 0xfb, 0x13, 0xdb, 0xdc, 0x3f, 0xa1, 0x63, 0x7d, 0x93, 0x3e, 0x54, 0x72, 0x3d,
	0xb7, 0xc5, 0xf3, 0xb6, 0x4e, 0x5a, 0xcc, 0x9b, 0x66, 0x30, 0x3b, 0x38, 0x70, 0x9e, 0x9b, 0x4c,
	0x0e, 0xf4, 0x06, 0xca, 0x81, 0xaa, 0x14, 0xb8, 0x83, 0x30, 0xf5, 0xeb, 0xf1, 0xd4, 0xe1, 0xa8,
	0xde, 0xca, 0x78, 0x6f, 0xce, 0xf2, 0xe9, 0xb0, 0x32, 0x6c, 0x2e, 0x7a, 0x62, 0xda, 0x89, 0x37,
	0xa9, 0x88, 0x89, 0xa6, 0xb4, 0x01, 0x54, 0x04, 0x9e, 0x81, 0x09, 0xf4, 0x5a, 0x28, 0xa4, 0x7b,
	0x29, 0x2d, 0x11, 0x44, 0x21, 0x61, 0xab, 0x87, 0x1e, 0x71, 0x06, 0xf7, 0xb6, 0x9a, 0xad, 0xfb,
	0x2c, 0x02, 0x85, 0x28, 0x49, 0x2c, 0x68, 0xdf, 0x86, 0xcd, 0xf9, 0x97, 0x75, 0xf5, 0x6b, 0xb0,
	0xc4, 0x64, 0x14, 0x94, 0x35, 0xd6, 0xce, 0xbe, 0xe4, 0x1b, 0xac, 0x84, 0xf6, 0x43, 0xb0, 0x91,
	0x8d, 0xa1, 0xde, 0xe1, 0xa2, 0x91, 0xdc, 0x19, 0x82, 0x0f, 0x26, 0x34, 0x59, 0x83, 0xc5, 0x91,
	0x37, 0xf1, 0x7c, 0xe4, 0xa6, 0x16, 0x0d, 0x9a, 0x20, 0xbb, 0x07, 0x03, 0x84, 0x52, 0x55, 0x12,
	0x13, 0x01, 0x22, 0xe4, 0x9e, 0x15, 0x1c, 0x69, 0xff, 0x79, 0x0e, 0x96, 0xb9, 0x00, 0xc4, 0x0a,
	0x9e, 0x6c, 0x3b, 0x13, 0x3b, 0x0a, 0x5b, 0x96, 0x13, 0xc2, 0x96, 0x35, 0x99, 0x42, 0x4a, 0x60,
	0xd7, 0x5e, 0xcd, 0x12, 0xa2, 0xb0, 0x3a, 0xee, 0x90, 0xff, 0xa8, 0xa2, 0xec, 0x80, 0xfd, 0x22,
	0x3c, 0xfc, 0xcc, 0xe7, 0xe1, 0x2a, 0xc8, 0x4f, 0xf2, 0x21, 0x6c, 0x15, 0x0b, 0x56, 0x41, 0x7e,
	0x9f, 0xe9, 0x3a, 0x56, 0xbb, 0x0c, 0x25, 0x5e, 0x39, 0x99, 0xbb, 0xed, 0xce, 0x8e, 0x4e, 0x6d,
	0xe0, 0x5b, 0x83, 0x87, 0x4a, 0x4e, 0x9b, 0x82, 0xca, 0xc7, 0x93, 0x2c, 0x49, 0xb6, 0x7f, 0x65,
	0x1a, 0x92, 0x3b, 0x8b, 0x86, 0x64, 0x48, 0x52, 0x1b, 0x50, 0xc4, 0xf5, 0xcf, 0x9c, 0x6a, 0x97,
	0x0c, 0x9e, 0xd4, 0xfe, 0xda, 0x02, 0x54, 0x84, 0xee, 0xa7, 0xb4, 0x52, 0x1f, 0x42, 0x39, 0xb4,
	0x82, 0x27, 0xe2, 0xd0, 0x5d, 0x9a, 0x33, 0x74, 0x74, 0xc4, 0x42, 0xf6, 0x0b, 0x45, 0x92, 0xa4,
	0x24, 0x23, 0x5a, 0x85, 0xf9, 0x22, 0x49, 0x2b, 0x78, 0x12, 0x89, 0x24, 0xa3, 0xdf, 0x74, 0x13,
	0x8e, 0x46, 0x76, 0x10, 0x08, 0x77, 0x04, 0xdc, 0x84, 0x08, 0xa4, 0x07, 0xc2, 0x65, 0x80, 0x03,
	0xcb, 0xe1, 0xa7, 0xc6, 0x22, 0x62, 0x94, 0x09, 0xa4, 0xc5, 0x9d, 0x72, 0xd8, 0xcf, 0xed, 0xd1,
	0x2c, 0xe4, 0xf7, 0x0c, 0x2a, 0xd0, 0xad, 0x32, 0x60, 0x74, 0xd3, 0x10, 0x8f, 0x9e, 0x22, 0xa2,
	0x40, 0x18, 0x9f, 0x3a, 0xb2, 0x2a, 0xa5, 0x94, 0x54, 0xa5, 0xe0, 0x79, 0x3d, 0xf1, 0x2c, 0xd9,
	0x6e, 0x81, 0x82, 0xb8, 0xf3, 0xea, 0x48, 0xe5, 0x09, 0x09, 0x95, 0xe7, 0x37, 0xa2, 0xc2, 0x64,
	0xa9, 0xb1, 0x17, 0xe0, 0x97, 0x4e, 0x59, 0x9c, 0xbc, 0x66, 0x5c, 0xec, 0x1f, 0x43, 0x95, 0x3a,
	0x02, 0xc4, 0xd2, 0xfc, 0x1d, 0xea, 0xa9, 0xc5, 0x2b, 0xb4, 0x00, 0xf9, 0x8d, 0xf7, 0x74, 0xf9,
	0x7e, 0xcc, 0xd8, 0xda, 0x53, 0xae, 0xc7, 0x35, 0xe9, 0x7a, 0xac, 0x7d, 0x0c, 0x80, 0x52, 0x1b,
	0x72, 0xb7, 0x08, 0xe8, 0x2e, 0x76, 0xdc, 0x80, 0x5d, 0x90, 0x69, 0x82, 0x69, 0xb5, 0x47, 0xc2,
	0xa3, 0xcd, 0x28, 0xad, 0xfd, 0x66, 0x0e, 0x6a, 0x92, 0xea, 0x8f, 0x3e, 0x26, 0x8b, 0x8f, 0x83,
	0x1c, 0x7f, 0x4c, 0x16, 0x1d, 0x04, 0x69, 0x1d, 0x68, 0xfe, 0x0b, 0xd1, 0x81, 0x8a, 0xcd, 0x2c,
	0xc8, 0xcd, 0x4c, 0x2b, 0x67, 0x17, 0xd2, 0xca, 0x59, 0xed, 0x53, 0x28, 0xeb, 0x96, 0xef, 0xd2,
	0xa1, 0xb8, 0xc3, 0x1c, 0xc9, 0xe6, 0xd2, 0x2f, 0xbe, 0x22, 0x24, 0xd1, 0x81, 0x6c, 0x34, 0x74,
	0x79, 0x61, 0xe8, 0xb4, 0x2b, 0xcc, 0xef, 0x5e, 0x19, 0x16, 0xa9, 0xd9, 0x52, 0x4e, 0xad, 0x40,
	0x91, 0xdb, 0x32, 0xe7, 0xb5, 0xdf, 0xcd, 0x43, 0x39, 0xea, 0x94, 0xfa, 0x6e, 0x7c, 0x25, 0xce,
	0xcd, 0xbd, 0x12, 0xe3, 0xfb, 0x4d, 0x8e, 0x87, 0x72, 0x16, 0x32, 0x7f, 0x66, 0xfc, 0xf1, 0xa4,
	0x9c, 0x25, 0x9a, 0x5e, 0x03, 0x82, 0x78, 0xaa, 0xb7, 0x78, 0x50, 0xf9, 0xc8, 0xbd, 0x08, 0x4a,
	0xcc, 0x92, 0x61, 0x84, 0xc4, 0x69, 0x30, 0xea, 0x9e, 0x98, 0xa4, 0x77, 0x07, 0xcb, 0x77, 0xd9,
	0xb7, 0x17, 0x32, 0xee, 0x0e, 0x7c, 0xa4, 0x8c, 0xb2, 0x1d, 0x8d, 0xec, 0xdb, 0x50, 0x62, 0xad,
	0xe7, 0x62, 0xf5, 0xcc, 0x9b, 0x7f, 0x84, 0xa4, 0x3e, 0x80, 0x75, 0x74, 0x75, 0x62, 0xa2, 0x3b,
	0x14, 0x66, 0x79, 0x15, 0xda, 0xc7, 0x4c, 0x6e, 0x20, 0x89, 0x68, 0xb7, 0x09, 0xe2, 0xc0, 0x9a,
	0xd0, 0xc0, 0xd8, 0x9d, 0xd0, 0x3e, 0x36, 0xd4, 0x83, 0x14, 0x4c, 0xfb, 0xe5, 0x22, 0xac, 0x75,
	0x04, 0xcf, 0x2b, 0x9f, 0x4f, 0xab, 0xdf, 0x9a, 0xa3, 0xd5, 0x97, 0x6e, 0x97, 0xe2, 0xe7, 0xb2,
	0x96, 0xaf, 0x4c, 0xa5, 0x16, 0x4e, 0x53, 0xf8, 0x2e, 0xca, 0x0a, 0x5f, 0x23, 0x43, 0xf9, 0x4f,
	0xfd, 0x1f, 0xbf, 0x3e, 0xaf, 0x01, 0xd1, 0x8e, 0x9a, 0xa7, 0xf2, 0xe7, 0xee, 0x90, 0x22, 0x6d,
	0x77, 0x31, 0x76, 0x87, 0x14, 0x69, 0xbb, 0x45, 0x77, 0x59, 0x25, 0xd9, 0x5d, 0x96, 0xa0, 0xaa,
	0x2d, 0x9f, 0xaa, 0xaa, 0xfd, 0x0c, 0x56, 0x60, 0x84, 0x93, 0xb4, 0x9e, 0x9b, 0x59, 0xd6, 0x03,
	0x34, 0xe2, 0xfc, 0xfa, 0xb1, 0xf5, 0xbc, 0x9d, 0x36, 0x20, 0xf8, 0x26, 0xd4, 0x65, 0x5f, 0x3c,
	0xcc, 0xad, 0x46, 0x63, 0xde, 0x28, 0x19, 0x35, 0xc9, 0x3b, 0x0f, 0xb9, 0x93, 0xca, 0x76, 0x10,
	0x19, 0x8e, 0x35, 0x4e, 0xb1, 0x78, 0xd8, 0x81, 0x3a, 0x1b, 0x04, 0x6e, 0xda, 0xb2, 0x9c, 0x96,
	0x86, 0x4b, 0xb3, 0x44, 0xb1, 0xb9, 0xb5, 0xcb, 0x48, 0x4c, 0xaa, 0x77, 0x60, 0x55, 0x1a, 0x05,
	0xc6, 0x4b, 0xd3, 0xc7, 0xbb, 0x2b, 0xc2, 0x08, 0x30, 0x3e, 0x9a, 0x30, 0x56, 0x5e, 0x48, 0x35,
	0xfe, 0x84, 0xb1, 0xf2, 0x42, 0xe4, 0x2b, 0xa6, 0x33, 0x7f, 0xea, 0x05, 0xfc, 0x06, 0xcf, 0x93,
	0xb2, 0x11, 0xc1, 0x6a, 0xc2, 0x88, 0xe0, 0x01, 0xd4, 0xac, 0xe9, 0x74, 0xe2, 0xd8, 0x74, 0x3d,
	0xf2, 0xbb, 0xf9, 0xed, 0xb3, 0x56, 0x5b, 0x93, 0x16, 0x22, 0x93, 0x18, 0x18, 0x55, 0x4b, 0x48,
	0x69, 0xd7, 0xc5, 0x20, 0x10, 0x91, 0x12, 0xfc, 0x25, 0x49, 0x3f, 0xae, 0xfd, 0xc2, 0x12, 0x54,
	0xc5, 0x7a, 0x53, 0xbb, 0xf5, 0x02, 0x14, 0xc7, 0x4e, 0x70, 0x24, 0x08, 0x3f, 0x49, 0xb2, 0x33,
	0x56, 0x6f, 0x40, 0x3d, 0x5e, 0x2e, 0xbe, 0x33, 0x8a, 0x02, 0xc6, 0x47, 0x76, 0x26, 0x04, 0xa8,
	0xbe, 0x06, 0xcb, 0xb1, 0x69, 0x06, 0x75, 0x84, 0x4e, 0x37, 0x62, 0x8d, 0xdb, 0x66, 0x50, 0x97,
	0x04, 0xf7, 0x04, 0x3b, 0x13, 0xb6, 0xe1, 0x16, 0xd3, 0x52, 0x44, 0xb1, 0xa9, 0x7c, 0xa3, 0x45,
	0xcd, 0x10, 0x82, 0x15, 0x08, 0xa7, 0xe5, 0x52, 0xea, 0xb4, 0x14, 0xf7, 0x58, 0x71, 0xee, 0x1e,
	0x2b, 0x9d, 0xba, 0xc7, 0xca, 0x67, 0xed, 0x31, 0x48, 0xed, 0xb1, 0x3b, 0xb0, 0x1a, 0xb5, 0x2b,
	0x25, 0x9b, 0x5b, 0xe1, 0x59, 0xb1, 0x70, 0xe1, 0x16, 0x44, 0xc0, 0xa4, 0x4c, 0x6e, 0x99, 0x67,
	0xc4, 0x22, 0x86, 0x4c, 0xcb, 0x9f, 0x5a, 0xa4, 0x73, 0x4f, 0x6e, 0xdc, 0x8b, 0x50, 0xe2, 0x1a,
	0x2a, 0x66, 0x90, 0x59, 0x3c, 0xa4, 0x8a, 0xa9, 0xf4, 0x96, 0x5c, 0x7e, 0xa1, 0x2d, 0x99, 0x61,
	0x30, 0xa4, 0x64, 0x1a, 0x0c, 0xa5, 0xf7, 0xee, 0xca, 0xe7, 0xd8, 0xbb, 0x91, 0x85, 0x91, 0x8a,
	0x7d, 0x66, 0x16, 0x46, 0x64, 0xaa, 0xbd, 0xc9, 0xd8, 0x74, 0x67, 0xc7, 0xb8, 0xe5, 0x6a, 0x46,
	0x91, 0xa4, 0xbb, 0xb3, 0x63, 0xed, 0x9d, 0x73, 0x6c, 0x0f, 0x0c, 0xda, 0xaa, 0xd3, 0x47, 0xc0,
	0x79, 0xed, 0x6f, 0x2d, 0x80, 0x2a, 0xd1, 0x32, 0x7b, 0x94, 0x15, 0x32, 0xe5, 0x26, 0x28, 0x12,
	0x4d, 0x8c, 0xb7, 0x4e, 0x5d, 0xa4, 0x7d, 0xa7, 0x1b, 0x3d, 0x6b, 0x3c, 0x36, 0x2a, 0x56, 0xc5,
	0x83, 0x47, 0x33, 0x77, 0x49, 0xa4, 0x11, 0x2c, 0x7c, 0x34, 0xb7, 0x56, 0x5d, 0x94, 0xad, 0x55,
	0xc5, 0x25, 0xbe, 0x24, 0x2f, 0x71, 0x61, 0x43, 0x17, 0xa5, 0x0d, 0xbd, 0x09, 0xa5, 0xe8, 0x68,
	0x2a, 0xe1, 0x58, 0x45, 0x69, 0x2a, 0x9d, 0x47, 0x23, 0xe0, 0x08, 0xa5, 0x4c, 0xa3, 0x79, 0x52,
	0xf0, 0x03, 0x01, 0x91, 0xf9, 0x3d, 0x88, 0x10, 0x81, 0x22, 0x52, 0x70, 0x84, 0xf8, 0x2d, 0xa8,
	0xe0, 0xcc, 0x48, 0x9e, 0x21, 0xde, 0x98, 0x7b, 0x6c, 0xe0, 0x50, 0xdf, 0x19, 0x78, 0x13, 0x6e,
	0x51, 0x0d, 0x41, 0xf4, 0x3b, 0xb9, 0x37, 0xab, 0x67, 0xed, 0xcd, 0x5a, 0x96, 0x15, 0x34, 0x37,
	0x72, 0x16, 0x3c, 0xc8, 0x30, 0x03, 0xe6, 0x0c, 0x7f, 0x0e, 0xcb, 0x49, 0x7f, 0x0e, 0xda, 0x37,
	0x01, 0xe2, 0xd6, 0xa9, 0x75, 0x9a, 0xea, 0xb8, 0x4e, 0x68, 0x8f, 0xa9, 0x50, 0x82, 0xa4, 0x5b,
	0xcc, 0x45, 0xc4, 0x58, 0xc9, 0x73, 0x94, 0x6d, 0xcb, 0x99, 0xd8, 0x63, 0xa5, 0xa0, 0xfd, 0xc5,
	0xb2, 0x60, 0xca, 0xd4, 0xdb, 0xff, 0x9e, 0x3d, 0x0a, 0xcf, 0x63, 0x34, 0x74, 0x43, 0x64, 0x94,
	0x04, 0x76, 0x2a, 0x66, 0x85, 0x90, 0x9f, 0xba, 0x05, 0x2b, 0x02, 0x3f, 0xe5, 0x79, 0x93, 0x78,
	0xcd, 0xc5, 0x8c, 0xca, 0xd0, 0xf3, 0x26, 0x89, 0xc5, 0xb3, 0x20, 0x2f, 0x9e, 0x7e, 0x8a, 0x2d,
	0x5b, 0x4c, 0x4f, 0x5c, 0xa2, 0x17, 0xa7, 0x5f, 0x31, 0x64, 0x1e, 0x6d, 0xe9, 0x34, 0x1e, 0xad,
	0x28, 0xf3, 0x68, 0xad, 0x28, 0xbe, 0x04, 0x75, 0x83, 0xf2, 0xe6, 0xb9, 0xda, 0x90, 0x08, 0x33,
	0xd1, 0x87, 0x4a, 0x70, 0xe4, 0x3d, 0xe3, 0xcb, 0xb0, 0x9c, 0xbe, 0x36, 0xcd, 0xaf, 0xe9, 0xc8,
	0x7b, 0x16, 0x2d, 0xc6, 0xe8, 0xb7, 0x7a, 0x17, 0x4a, 0xf6, 0xf3, 0x90, 0xca, 0xfe, 0x21, 0x7d,
	0x88, 0xcf, 0xad, 0x4e, 0x7f, 0x1e, 0xa2, 0x4a, 0xa0, 0x68, 0xd3, 0x1f, 0xc9, 0x55, 0x5d, 0x39,
	0x6b, 0x55, 0x57, 0x53, 0xab, 0xfa, 0x07, 0x61, 0x55, 0x5e, 0x1b, 0xb4, 0x55, 0xf4, 0x42, 0xfb,
	0xd6, 0xb9, 0x5a, 0x45, 0x16, 0x0f, 0x36, 0x6b, 0x65, 0x9a, 0x04, 0x6d, 0xfe, 0x37, 0x39, 0x50,
	0x92, 0xcd, 0x27, 0x3c, 0x11, 0x32, 0x38, 0x39, 0x34, 0xb3, 0xc0, 0xdf, 0xcc, 0x79, 0x28, 0x5f,
	0xc6, 0xc7, 0x5c, 0x25, 0x5c, 0x36, 0xe2, 0xc5, 0xd4, 0x21, 0x50, 0xf5, 0x36, 0x14, 0xf7, 0x67,
	0x61, 0xe8, 0xb9, 0xfc, 0xe6, 0x24, 0xe9, 0x18, 0xb6, 0x30, 0xcb, 0xe0, 0x28, 0xea, 0x97, 0x01,
	0x04, 0x2d, 0xf6, 0x02, 0x16, 0x90, 0xee, 0x4a, 0xf1, 0x15, 0x5d, 0x40, 0xa4, 0x2f, 0x3c, 0x9e,
	0x3a, 0xf6, 0x33, 0x91, 0xcf, 0x40, 0x3f, 0x25, 0x04, 0xc8, 0x22, 0x1f, 0x3b, 0xb0, 0x92, 0x1a,
	0x03, 0xf5, 0x13, 0x58, 0x3e, 0x9e, 0x4d, 0x42, 0xc7, 0x9c, 0x58, 0x2e, 0x0b, 0xd5, 0x76, 0x96,
	0x2c, 0xaf, 0x76, 0xcc, 0x53, 0xb8, 0x0d, 0xb9, 0x28, 0x2e, 0x1f, 0x8b, 0xe2, 0xb4, 0x6f, 0x26,
	0x0d, 0x1f, 0xb9, 0x50, 0x33, 0x92, 0x73, 0xa2, 0xdb, 0xea, 0xed, 0x9d, 0xe6, 0xe0, 0x1e, 0xfa,
	0x8b, 0x50, 0xf2, 0xe2, 0x8d, 0xb7, 0x90, 0x65, 0x03, 0x79, 0x0a, 0xc7, 0x77, 0x0f, 0x56, 0x33,
	0x96, 0x30, 0xc1, 0xe9, 0xeb, 0xf4, 0x91, 0x1e, 0x5a, 0x4d, 0xee, 0xf5, 0x5b, 0xbd, 0x5d, 0x92,
	0xc2, 0x8f, 0xf5, 0xba, 0x77, 0x7b, 0x24, 0x51, 0x20, 0xd7, 0x6e, 0xbd, 0xdb, 0x46, 0xff, 0x17,
	0xbf, 0x9b, 0x83, 0x25, 0x3a, 0x27, 0x18, 0x88, 0x15, 0x7f, 0x99, 0x82, 0xa4, 0x11, 0x28, 0x88,
	0xc7, 0x99, 0xc1, 0xf7, 0x18, 0xce, 0xc1, 0x09, 0x5a, 0xa5, 0x31, 0x89, 0x1c, 0x87, 0xdd, 0xb7,
	0x4f, 0xe8, 0xa3, 0x9a, 0xb1, 0xe3, 0xdb, 0x23, 0xb6, 0x7b, 0x0a, 0x69, 0xf5, 0x94, 0xc1, 0x10,
	0x70, 0x49, 0x56, 0x7d, 0x21, 0xa5, 0x7e, 0x1c, 0x35, 0x41, 0x30, 0x7e, 0xbc, 0x9c, 0x5e, 0x3f,
	0xec, 0x0f, 0x55, 0x40, 0xef, 0x47, 0xbf, 0xb5, 0x9b, 0x00, 0x71, 0x0e, 0x0e, 0x87, 0xd1, 0xd9,
	0x6d, 0x1a, 0x8f, 0x95, 0x9c, 0x5a, 0x83, 0xf2, 0x40, 0x6f, 0xf5, 0xba, 0xed, 0x26, 0xba, 0xa6,
	0xfc, 0xdf, 0x0b, 0x50, 0x8e, 0xcd, 0x42, 0x3f, 0x84, 0xd2, 0x13, 0x5b, 0x32, 0xdc, 0xba, 0x9c,
	0xb9, 0x06, 0xef, 0xdc, 0xb7, 0xa9, 0xf9, 0x56, 0xf1, 0x09, 0xfd, 0xa1, 0x7e, 0x0c, 0x80, 0x86,
	0x82, 0xb4, 0x2c, 0x95, 0x33, 0x5c, 0xcd, 0x2e, 0xfb, 0x90, 0xe0, 0x51, 0x8d, 0xe1, 0x53, 0xfe,
	0x53, 0xfd, 0x16, 0xd4, 0xa3, 0x65, 0x3d, 0x37, 0x10, 0x75, 0x5c, 0x47, 0xf4, 0x8b, 0x92, 0x61,
	0x4b, 0x4c, 0x6e, 0x7e, 0x0c, 0x45, 0xd6, 0xbe, 0x0c, 0x3b, 0xd7, 0xb3, 0x27, 0x6f, 0xf3, 0x57,
	0x73, 0x50, 0x8e, 0x1a, 0x19, 0xdb, 0x43, 0xe6, 0x44, 0x7b, 0xc8, 0x73, 0xac, 0x81, 0x26, 0x13,
	0x11, 0xd1, 0x8e, 0xbc, 0x75, 0xc6, 0x60, 0xc4, 0xbf, 0x62, 0xa9, 0x91, 0x76, 0x07, 0x6a, 0x12,
	0x58, 0x05, 0x58, 0x1a, 0x0c, 0x0d, 0xba, 0xb0, 0x4b, 0xb0, 0x30, 0xec, 0xec, 0x92, 0x1d, 0x54,
	0x84, 0x42, 0xa7, 0x3b, 0x54, 0x0a, 0xda, 0xab, 0x50, 0x93, 0x46, 0x06, 0x71, 0xf4, 0x6f, 0x93,
	0x5d, 0x57, 0x86, 0xc5, 0x0e, 0x3a, 0xe5, 0xcf, 0x6b, 0xbf, 0x88, 0xcf, 0x77, 0x84, 0xe5, 0x86,
	0xbe, 0xfc, 0xd8, 0x6a, 0x9d, 0xf9, 0x13, 0xd6, 0xd3, 0x0a, 0x87, 0xed, 0xf9, 0x13, 0xb5, 0x05,
	0x95, 0xa9, 0xe5, 0x5b, 0xc7, 0xe6, 0xd4, 0x72, 0x7c, 0x6a, 0x62, 0x55, 0x49, 0xbe, 0x9c, 0x8a,
	0x6b, 0xbc, 0xd3, 0x27, 0xb8, 0x7d, 0xcb, 0xf1, 0x0d, 0x98, 0xf2, 0x9f, 0xc1, 0xe6, 0x97, 0xa0,
	0x1c, 0x65, 0x9c, 0xdb, 0x04, 0xf9, 0x7f, 0x2b, 0x8a, 0x34, 0xc5, 0xf3, 0x26, 0x29, 0x26, 0xf5,
	0x07, 0xc4, 0xa3, 0x01, 0xf9, 0x01, 0x41, 0x6c, 0x98, 0x7d, 0x92, 0x92, 0x7a, 0xe4, 0x14, 0x55,
	0xd7, 0x4e, 0x93, 0x20, 0xb5, 0x23, 0x1c, 0x81, 0x74, 0x13, 0xdf, 0x39, 0x67, 0x8d, 0x67, 0x1d,
	0x82, 0x9f, 0x21, 0xc2, 0xe5, 0x03, 0x58, 0x7e, 0x76, 0xe4, 0x84, 0x36, 0x5a, 0x6e, 0x52, 0xd3,
	0x29, 0x2a, 0xc9, 0xb9, 0x39, 0xbf, 0x4d, 0x8f, 0x48, 0x81, 0x1d, 0x27, 0x08, 0xa9, 0x31, 0x55,
	0x3d, 0xaa, 0x00, 0xd3, 0x9b, 0x3f, 0xb1, 0x00, 0x6b, 0x59, 0xcd, 0x56, 0x7f, 0x08, 0x1a, 0x89,
	0x51, 0x8d, 0x4f, 0x5d, 0x4a, 0x1b, 0xda, 0x2f, 0x36, 0x10, 0x32, 0x30, 0x3a, 0x8c, 0xd7, 0xa7,
	0x59, 0xe0, 0x34, 0x05, 0xcd, 0xbf, 0x10, 0x05, 0x75, 0x40, 0x11, 0xec, 0x49, 0xc4, 0xe9, 0xfb,
	0xf8, 0x05, 0x5b, 0xdd, 0x8e, 0xab, 0xc1, 0xef, 0x2c, 0x8f, 0x65, 0x40, 0x56, 0x58, 0xf3, 0xcd,
	0xef, 0xc1, 0x7a, 0x66, 0x6f, 0xc9, 0xc5, 0x39, 0x63, 0x54, 0xd9, 0x2e, 0x58, 0x49, 0x0d, 0xc5,
	0x79, 0xc8, 0xd5, 0x43, 0x58, 0x4e, 0xb4, 0x31, 0x69, 0x60, 0x93, 0x4b, 0x1b, 0xd8, 0x9c, 0x5d,
	0xaf, 0xd6, 0x12, 0xd8, 0x86, 0x68, 0x3b, 0xbc, 0xe8, 0x79, 0xfe, 0x1e, 0xd4, 0xe5, 0x05, 0x88,
	0x01, 0xf8, 0xa9, 0xe7, 0xab, 0x22, 0x14, 0x9a, 0xe8, 0xf1, 0x8a, 0x9c, 0x49, 0x91, 0x45, 0x63,
	0x41, 0xfb, 0xed, 0x0a, 0xd4, 0xf5, 0xa7, 0xb6, 0x1b, 0xc6, 0xa2, 0xef, 0x0c, 0x27, 0x8f, 0xf6,
	0x53, 0x5b, 0xbc, 0x8f, 0x16, 0x31, 0xdd, 0x19, 0xab, 0x13, 0xb8, 0x48, 0xb3, 0xb2, 0xd8, 0x45,
	0xba, 0x04, 0xa4, 0x47, 0x4f, 0xf2, 0x97, 0x12, 0xc9, 0x68, 0x95, 0x6e, 0xd8, 0x99, 0xf0, 0xd3,
	0xee, 0x17, 0xbd, 0x39, 0xf7, 0x8b, 0x9b, 0xa7, 0x7c, 0xfd, 0x9f, 0xd0, 0xf5, 0xe2, 0x2a, 0x54,
	0xbe, 0xe7, 0x39, 0x2e, 0x13, 0xc8, 0x71, 0x83, 0x2d, 0x0a, 0x42, 0x84, 0x61, 0xd6, 0xd5, 0xe1,
	0x4b, 0xe7, 0x1e, 0xa6, 0x39, 0xd7, 0x07, 0x13, 0xd6, 0x78, 0x50, 0x03, 0xea, 0xda, 0x9e, 0x55,
	0x0f, 0xe9, 0x13, 0x31, 0x51, 0x3d, 0x0b, 0x72, 0x81, 0xa5, 0x58, 0xc5, 0x6a, 0x90, 0x82, 0xa9,
	0x77, 0xa3, 0x6b, 0x53, 0x25, 0x7d, 0xd9, 0x39, 0xbd, 0xc5, 0xf2, 0xd5, 0xe9, 0xbe, 0x40, 0xe5,
	0x69, 0x78, 0xcb, 0x77, 0xce, 0x5d, 0xd5, 0x59, 0x74, 0xbe, 0x76, 0x16, 0x9d, 0xaf, 0x67, 0x89,
	0xd7, 0x7c, 0xfb, 0xd0, 0x09, 0x42, 0x6a, 0x15, 0xc2, 0xa7, 0x9c, 0xde, 0xd4, 0x57, 0x78, 0x96,
	0x24, 0x5e, 0x8b, 0xf0, 0xa3, 0x35, 0x40, 0x25, 0x55, 0xcb, 0x3c, 0x43, 0x8f, 0xdf, 0x7f, 0x05,
	0x27, 0xee, 0x48, 0x74, 0xd5, 0x58, 0x22, 0x00, 0x8c, 0x78, 0xf0, 0xb7, 0x73, 0xb0, 0x9e, 0xd9,
	0xbb, 0x7f, 0x5a, 0xee, 0x42, 0x2e, 0x6c, 0x64, 0xef, 0xf0, 0xdf, 0xaf, 0x17, 0xa2, 0x5d, 0x68,
	0xcc, 0xdb, 0x6b, 0x9f, 0xe5, 0x9e, 0xf3, 0x03, 0xa0, 0xa6, 0xf7, 0x16, 0xc1, 0xee, 0x74, 0x1f,
	0x76, 0xa8, 0x2b, 0xc1, 0x1a, 0x94, 0xf7, 0xba, 0x3c, 0x99, 0x27, 0x2c, 0xe7, 0xb7, 0x7a, 0x9d,
	0x2e, 0xba, 0x0e, 0xac, 0x03, 0x0c, 0x75, 0x63, 0xb7, 0xd3, 0x6d, 0xd2, 0x68, 0x5c, 0x35, 0x28,
	0xf3, 0x20, 0x59, 0x5d, 0x65, 0x51, 0x7b, 0x17, 0xd6, 0xb2, 0x76, 0xd9, 0x69, 0x37, 0xb8, 0x9f,
	0x2a, 0x43, 0x05, 0xcb, 0x30, 0x29, 0x91, 0x48, 0xd8, 0x73, 0x32, 0x61, 0xdf, 0x85, 0x65, 0x9a,
	0x15, 0x93, 0x73, 0xca, 0x13, 0xdc, 0x48, 0x6d, 0x55, 0x76, 0xf3, 0xc7, 0xdf, 0x11, 0x09, 0xaf,
	0xd9, 0x62, 0x52, 0xdd, 0x99, 0xa3, 0x95, 0x9b, 0x5b, 0xdb, 0xa9, 0xb4, 0x79, 0xce, 0x8e, 0x5d,
	0x78, 0xa1, 0x1d, 0xbb, 0x98, 0xbd, 0x63, 0x3f, 0x3b, 0xdd, 0xff, 0x16, 0xd4, 0xe9, 0x90, 0x45,
	0xc4, 0x8d, 0xbe, 0xf4, 0x79, 0xf5, 0xd4, 0x11, 0xe3, 0x04, 0xad, 0x6a, 0x0b, 0x29, 0xb5, 0x97,
	0xe6, 0x3d, 0xe9, 0x31, 0xf1, 0xda, 0xbc, 0xca, 0x4e, 0xe7, 0x3c, 0xbf, 0x00, 0x4d, 0xdf, 0xd7,
	0x23, 0xf2, 0x5f, 0x4d, 0x5f, 0x16, 0x53, 0xdd, 0x92, 0x49, 0xfe, 0xe6, 0x4f, 0xe5, 0xa1, 0x2a,
	0x76, 0x37, 0x93, 0xc2, 0x5d, 0x85, 0xca, 0xb1, 0xe5, 0xb8, 0xe6, 0xbe, 0xe5, 0xba, 0xb6, 0xcf,
	0x76, 0x36, 0x10, 0xd0, 0x16, 0x42, 0xd4, 0x77, 0x60, 0x2d, 0x5e, 0x45, 0x38, 0x34, 0x94, 0x0e,
	0x52, 0x4b, 0x22, 0x35, 0xca, 0x23, 0xc3, 0x40, 0x69, 0xe1, 0x67, 0xa4, 0x6e, 0x29, 0x7e, 0x78,
	0xf1, 0x85, 0xf8, 0x61, 0x81, 0x02, 0x2f, 0x9d, 0x49, 0x81, 0x37, 0x6d, 0xa8, 0x49, 0x7b, 0xe7,
	0xf7, 0x2b, 0x71, 0xfc, 0x2c, 0xdc, 0xe5, 0x4d, 0x46, 0x70, 0xce, 0xa6, 0x4d, 0x7f, 0x3c, 0x0f,
	0xe5, 0xa8, 0xfa, 0xd3, 0x28, 0x93, 0xc8, 0x04, 0xe6, 0x65, 0x26, 0xf0, 0xa3, 0x68, 0x89, 0x66,
	0x50, 0x97, 0xa8, 0x72, 0x61, 0xab, 0x9c, 0x1a, 0xb2, 0xff, 0x33, 0x5c, 0x19, 0xa5, 0xe3, 0x7e,
	0x49, 0x3e, 0xee, 0xb5, 0x37, 0x60, 0x39, 0xf1, 0x65, 0x72, 0x56, 0x3c, 0x6c, 0xee, 0x74, 0x98,
	0xc2, 0xa8, 0xd3, 0xa5, 0x89, 0xbc, 0xf6, 0x1b, 0x45, 0x28, 0x0c, 0x9d, 0x69, 0x16, 0x27, 0x1e,
	0x29, 0x6e, 0xf2, 0xb2, 0xe2, 0xe6, 0xd4, 0x30, 0xdd, 0x52, 0x70, 0x81, 0x85, 0x44, 0x70, 0x01,
	0x51, 0x99, 0xb4, 0x28, 0x2b, 0x93, 0x3e, 0x04, 0x08, 0x9d, 0xa9, 0x6c, 0xc7, 0x20, 0xd9, 0xa4,
	0x0c, 0x9d, 0x29, 0xf9, 0xc7, 0x06, 0xb2, 0x1c, 0xf2, 0x9f, 0xc2, 0xfb, 0x9e, 0xa2, 0x14, 0x85,
	0x39, 0x23, 0x4a, 0x5a, 0xe9, 0x9c, 0x11, 0x81, 0xcb, 0x5f, 0x48, 0x44, 0x60, 0x78, 0xe1, 0x88,
	0xc0, 0x95, 0x17, 0x88, 0x08, 0x5c, 0x3d, 0x3d, 0x22, 0x70, 0x6d, 0x6e, 0x44, 0xe0, 0xfa, 0xa9,
	0x11, 0x81, 0x97, 0xcf, 0x8e, 0x08, 0xac, 0x64, 0x46, 0x04, 0x3e, 0x3d, 0xec, 0xc0, 0xb9, 0x83,
	0x7f, 0x08, 0xbb, 0x62, 0xf5, 0xac, 0x5d, 0xb1, 0x96, 0xda, 0x15, 0xb7, 0x60, 0x25, 0x8a, 0xce,
	0x12, 0xad, 0x34, 0x1a, 0xb4, 0x2d, 0x0a, 0xdb, 0xd2, 0x63, 0x2b, 0xee, 0x32, 0x80, 0xfd, 0x7c,
	0xea, 0xdb, 0x41, 0x40, 0x90, 0xa8, 0xef, 0x80, 0x32, 0x83, 0x74, 0xd2, 0xe1, 0x40, 0x2e, 0xbc,
	0x80, 0xf9, 0xf5, 0x3a, 0x2c, 0x79, 0x93, 0x31, 0xa9, 0x96, 0x06, 0x58, 0x5e, 0xf4, 0x26, 0xe3,
	0xce, 0x58, 0xfb, 0x41, 0x28, 0x47, 0x2b, 0x98, 0x10, 0xa8, 0x61, 0xa7, 0xcf, 0x03, 0x40, 0x2e,
	0x43, 0x85, 0xa4, 0x62, 0xc7, 0xcf, 0x2c, 0x1b, 0x23, 0xa9, 0xa2, 0x75, 0x30, 0x66, 0x73, 0xc7,
	0xce, 0x05, 0x42, 0x52, 0x11, 0x12, 0xc7, 0x50, 0xd5, 0xfe, 0xd8, 0x02, 0x8b, 0x13, 0x19, 0xbb,
	0xaa, 0xce, 0xda, 0xd6, 0xf3, 0x48, 0x9a, 0xe4, 0xfb, 0xaa, 0x70, 0x8a, 0xef, 0xab, 0x05, 0x79,
	0xe7, 0x76, 0x60, 0x45, 0x70, 0xae, 0x2d, 0xd9, 0x45, 0xbc, 0x9c, 0x70, 0x49, 0xc3, 0x90, 0x78,
	0xd8, 0x92, 0x51, 0x02, 0x82, 0x01, 0x23, 0x52, 0xfe, 0xd2, 0x97, 0x98, 0x65, 0x79, 0xd2, 0x55,
	0x7a, 0x6a, 0x49, 0x15, 0xcf, 0xf6, 0x71, 0x5f, 0x4a, 0x2d, 0xcc, 0xd3, 0x62, 0xb5, 0x7f, 0x7e,
	0x4e, 0xa6, 0x2b, 0x75, 0x88, 0x51, 0x97, 0xea, 0x79, 0x1d, 0x8f, 0x0b, 0x7d, 0x66, 0x84, 0x26,
	0x83, 0xa6, 0xd5, 0xb2, 0x22, 0x3f, 0x6a, 0x7f, 0x3d, 0x07, 0xa5, 0x2d, 0x2b, 0xb0, 0xf1, 0xf9,
	0xd2, 0x1a, 0x2c, 0x4e, 0x3d, 0x87, 0x3d, 0x4a, 0xac, 0x19, 0x34, 0x81, 0x94, 0xda, 0xb6, 0x9f,
	0x98, 0xfb, 0x4e, 0x48, 0x2d, 0x08, 0x6b, 0x46, 0x89, 0x00, 0xb6, 0x9c, 0x30, 0x50, 0x6f, 0x40,
	0xdd, 0x71, 0x43, 0xdb, 0x7f, 0x6a, 0x4d, 0x28, 0xdf, 0xcb, 0x2d, 0x67, 0x38, 0x14, 0x59, 0x5e,
	0x4a, 0x3d, 0x18, 0x9a, 0xed, 0x46, 0x16, 0x00, 0x1c, 0xa6, 0xbb, 0xe9, 0x7d, 0xb4, 0xf8, 0x02,
	0xf1, 0x8b, 0xff, 0x9f, 0x25, 0xa8, 0x0c, 0xa6, 0xf6, 0xc8, 0xb1, 0x26, 0xa7, 0x74, 0xe4, 0x7d,
	0x26, 0x90, 0xa7, 0x82, 0xe1, 0x6b, 0x09, 0x2b, 0x48, 0x5e, 0xf8, 0x0e, 0xf9, 0x4f, 0xb0, 0xdc,
	0xfc, 0x0a, 0x2c, 0xd1, 0xc8, 0x93, 0x4c, 0x78, 0x74, 0x65, 0x5e, 0x39, 0x1a, 0x84, 0xd2, 0x60,
	0xd8, 0xa9, 0xfe, 0x2c, 0x9c, 0xbf, 0x3f, 0x9b, 0x9f, 0x42, 0x89, 0x2c, 0x0b, 0xec, 0x8b, 0x34,
	0xfc, 0xb9, 0x33, 0x87, 0x3f, 0x7f, 0x9e, 0xe1, 0x2f, 0xa4, 0x86, 0x7f, 0xf3, 0x9f, 0x87, 0x95,
	0x1d, 0xf1, 0x55, 0x37, 0x7e, 0xfb, 0x85, 0x1e, 0x81, 0xab, 0xdf, 0x80, 0xcd, 0x04, 0xb6, 0x28,
	0x84, 0xa4, 0x8c, 0x5f, 0x43, 0x2a, 0x25, 0xc8, 0x2d, 0x37, 0x7f, 0x29, 0x07, 0x75, 0x1e, 0xf0,
	0x63, 0xf4, 0x04, 0x3f, 0x7f, 0x1f, 0x1a, 0x4e, 0x60, 0x4e, 0x9d, 0xd1, 0x13, 0x73, 0x36, 0x35,
	0x71, 0x12, 0x4d, 0xdb, 0xb5, 0xf6, 0x27, 0xf6, 0x98, 0x19, 0xde, 0x4a, 0xa6, 0xa1, 0x3a, 0xcd,
	0x32, 0xd6, 0x9c, 0xa0, 0xef, 0x8c, 0x9e, 0xec, 0x4d, 0xfb, 0xa4, 0x04, 0x83, 0xaa, 0xbb, 0x70,
	0xd1, 0x09, 0xcc, 0xb1, 0xef, 0x4d, 0x4d, 0xef, 0xe0, 0x20, 0x51, 0x5b, 0x7e, 0x7e, 0x6d, 0xeb,
	0x4e, 0xd0, 0xf6, 0xbd, 0x69, 0xef, 0xe0, 0x40, 0xac, 0x6e, 0xf3, 0xef, 0xe7, 0x60, 0x89, 0xce,
	0xb8, 0xfa, 0x11, 0x94, 0xd1, 0x3b, 0x07, 0x3e, 0x1c, 0xa4, 0xa2, 0xf1, 0xb9, 0x8b, 0x8b, 0x4f,
	0xab, 0x51, 0x0a, 0xf9, 0x04, 0x3f, 0x86, 0xd5, 0xc4, 0xb0, 0x61, 0x45, 0xf4, 0x6e, 0xfb, 0xc6,
	0xbc, 0x8a, 0x52, 0x93, 0x65, 0xac, 0x4c, 0x52, 0xf3, 0xd7, 0x07, 0x85, 0xb9, 0x1a, 0x20, 0x63,
	0x4a, 0xeb, 0x2d, 0x64, 0x84, 0x4a, 0x12, 0xea, 0x95, 0xa7, 0x80, 0xd9, 0xf4, 0x46, 0x69, 0x6d,
	0x0d, 0x4a, 0x7c, 0x7f, 0x44, 0x0a, 0xa8, 0x9c, 0xf6, 0x8f, 0x8a, 0x50, 0xeb, 0xb8, 0x23, 0xdb,
	0x0d, 0x9d, 0xa7, 0x76, 0x7f, 0x62, 0xb9, 0x59, 0x0e, 0x13, 0xa7, 0x13, 0x4b, 0xb2, 0xea, 0x28,
	0x11, 0x00, 0xde, 0x0d, 0x12, 0xe2, 0xea, 0x42, 0x5a, 0x5c, 0xad, 0x43, 0x05, 0x8b, 0x4b, 0xbe,
	0xab, 0xa4, 0x5b, 0xac, 0xf4, 0xf9, 0x3b, 0xe4, 0x3f, 0x2e, 0x90, 0x9c, 0x46, 0xbf, 0xd5, 0x26,
	0xc0, 0xc8, 0x0a, 0x8e, 0xd8, 0x23, 0xaf, 0xc5, 0xb4, 0x12, 0x4b, 0xae, 0xa5, 0x65, 0x05, 0x47,
	0x38, 0x0a, 0xe5, 0x11, 0xfb, 0x15, 0xa8, 0x77, 0xa1, 0xe2, 0xdb, 0x9f, 0xce, 0x1c, 0x1f, 0x23,
	0x4a, 0x31, 0x1b, 0xe3, 0x1b, 0xf3, 0xeb, 0x30, 0x62, 0x64, 0x43, 0x2c, 0xa9, 0xbe, 0x0b, 0x65,
	0x82, 0x4e, 0x27, 0xa5, 0x88, 0xd5, 0x48, 0xee, 0xdc, 0x38, 0x55, 0x36, 0x4a, 0xfb, 0x9c, 0x3e,
	0x7f, 0x03, 0x6a, 0x01, 0x9d, 0x2a, 0xd6, 0x83, 0x52, 0x3a, 0xfc, 0x8e, 0x30, 0x97, 0x46, 0x35,
	0x88, 0x13, 0xc1, 0x29, 0x36, 0xb7, 0xb2, 0x80, 0x01, 0x4e, 0x13, 0x30, 0x54, 0x52, 0x82, 0xe5,
	0xcf, 0x69, 0xad, 0x74, 0x3a, 0xd1, 0xa8, 0x9f, 0x4e, 0x34, 0xc8, 0xa9, 0x4c, 0xea, 0xfd, 0xbe,
	0xe7, 0x52, 0x8e, 0xb4, 0x6c, 0x44, 0x69, 0xf5, 0x4b, 0x00, 0xd1, 0x00, 0x07, 0x0d, 0x05, 0x87,
	0x2a, 0x7b, 0x84, 0xcb, 0x7c, 0x84, 0x03, 0x72, 0x4d, 0xf5, 0x2d, 0xf7, 0x09, 0x72, 0xa6, 0x35,
	0x03, 0x7f, 0xab, 0x5f, 0x86, 0x0b, 0xb8, 0x6a, 0x46, 0x9e, 0xfb, 0xd4, 0xf6, 0x03, 0xfe, 0x46,
	0x98, 0xb0, 0x38, 0x94, 0x3b, 0x5d, 0x23, 0xd9, 0xad, 0x28, 0x97, 0xd4, 0x44, 0xf9, 0x46, 0x7c,
	0x9b, 0x28, 0x32, 0xa9, 0x65, 0x84, 0xa0, 0xa8, 0xf5, 0x43, 0x28, 0xf1, 0xf5, 0x35, 0xe7, 0xbc,
	0x92, 0xc3, 0xc9, 0x46, 0x17, 0x96, 0xcd, 0x43, 0xa8, 0x08, 0xab, 0x0a, 0x2d, 0x7d, 0x1d, 0xd7,
	0x64, 0xec, 0x4c, 0x14, 0x41, 0x96, 0x56, 0xb5, 0x72, 0xec, 0xb8, 0xad, 0x28, 0x07, 0x23, 0xad,
	0xde, 0x04, 0x85, 0xe0, 0xfb, 0x56, 0xe8, 0xb8, 0x87, 0x66, 0x30, 0xf2, 0x7c, 0xba, 0x23, 0xf3,
	0x46, 0xfd, 0xd8, 0x21, 0x28, 0x8e, 0x7b, 0x38, 0x20, 0x50, 0xed, 0x26, 0x40, 0xbc, 0x91, 0x54,
	0x80, 0x25, 0x16, 0x35, 0x3d, 0x97, 0x10, 0x04, 0xe6, 0xb5, 0x5f, 0x15, 0x09, 0x40, 0xe6, 0x4b,
	0x23, 0xe9, 0x32, 0x98, 0x4f, 0x5c, 0x06, 0x2f, 0x40, 0x11, 0xb7, 0x77, 0xc4, 0x50, 0x2e, 0x91,
	0x24, 0xe5, 0x35, 0xf1, 0x95, 0xd1, 0x98, 0xc7, 0xc4, 0xad, 0xd1, 0x27, 0x48, 0x6d, 0x16, 0x32,
	0x56, 0x58, 0xb6, 0x8b, 0xa7, 0x2d, 0xdb, 0x25, 0x79, 0xd9, 0x46, 0xe3, 0x5d, 0x14, 0xc7, 0xfb,
	0x3e, 0xd4, 0x46, 0xe8, 0x49, 0x45, 0x0e, 0x49, 0xf5, 0x5a, 0xe6, 0xe6, 0x26, 0x9d, 0xbc, 0x43,
	0x1d, 0xaf, 0x70, 0xbf, 0xa8, 0x23, 0x21, 0x25, 0x4c, 0x5e, 0x59, 0xba, 0x6d, 0x7e, 0x7e, 0x5e,
	0x51, 0x97, 0x5f, 0x5e, 0x55, 0x4f, 0xa1, 0x85, 0xd8, 0xc8, 0x39, 0x0f, 0xb0, 0xde, 0x81, 0xb5,
	0xd0, 0x7a, 0x6e, 0x3a, 0xee, 0x68, 0x32, 0x0b, 0x9c, 0xa7, 0x36, 0x67, 0xa3, 0x59, 0x38, 0xee,
	0xd0, 0x7a, 0xde, 0xe1, 0x59, 0x8c, 0x91, 0xb6, 0x60, 0x9d, 0x9e, 0x9a, 0xc9, 0x10, 0x86, 0xf5,
	0xb4, 0x3e, 0x47, 0x6e, 0x02, 0x9e, 0x9c, 0x89, 0xa8, 0x86, 0xab, 0xd3, 0x34, 0x90, 0xda, 0x66,
	0x1e, 0x5b, 0x8e, 0x4b, 0x96, 0x26, 0xb5, 0xb0, 0x5e, 0xe6, 0xb6, 0x99, 0x0c, 0x8c, 0x07, 0x94,
	0xf6, 0x65, 0xa8, 0x8a, 0x83, 0xaf, 0x56, 0xa0, 0xc8, 0xef, 0x44, 0x2f, 0xc9, 0x72, 0xf1, 0x0a,
	0x14, 0x07, 0x7b, 0xad, 0x96, 0x3e, 0x18, 0x28, 0x79, 0xed, 0x8f, 0xe7, 0x00, 0xe2, 0xf1, 0xc0,
	0xeb, 0x52, 0x73, 0x70, 0x5f, 0x70, 0x57, 0xca, 0x21, 0x71, 0x79, 0x72, 0x81, 0x22, 0x90, 0xed,
	0x4e, 0xb7, 0x33, 0xb8, 0x87, 0x22, 0x71, 0x72, 0x09, 0x23, 0x20, 0xe6, 0x5a, 0xbf, 0xa0, 0x5e,
	0x84, 0x75, 0x5a, 0xaa, 0xd7, 0xc1, 0xd8, 0x06, 0x3b, 0xad, 0xbd, 0x1d, 0x6c, 0x4b, 0x31, 0xca,
	0xda, 0xea, 0x75, 0xf7, 0x06, 0x62, 0x56, 0x49, 0xfb, 0x43, 0x39, 0x58, 0xcd, 0x18, 0x19, 0xf5,
	0x15, 0xb8, 0x4c, 0x2b, 0x1a, 0xe8, 0xc3, 0xe1, 0x8e, 0x4e, 0xfd, 0x9a, 0x3f, 0xee, 0xeb, 0xe6,
	0x5e, 0xf7, 0x7e, 0xb7, 0xf7, 0xa8, 0xab, 0xbc, 0xa4, 0x6a, 0x70, 0x25, 0x1b, 0x45, 0xdf, 0xe9,
	0xdc, 0xed, 0x6c, 0xed, 0xe8, 0x4a, 0x4e, 0x7d, 0x15, 0xae, 0x65, 0xe3, 0x74, 0xba, 0x11, 0x56,
	0x5e, 0xfb, 0xbb, 0x79, 0x50, 0x5b, 0x29, 0xf2, 0x95, 0xe9, 0xf0, 0x98, 0xd0, 0x3c, 0xf1, 0xfc,
	0x26, 0x00, 0x3c, 0xbf, 0xb7, 0xa5, 0x63, 0x95, 0x6a, 0x78, 0x5e, 0x97, 0xa3, 0x99, 0x25, 0x3f,
	0x90, 0x79, 0xb6, 0xea, 0x18, 0x73, 0x30, 0xb0, 0x79, 0x24, 0x40, 0xce, 0x9d, 0x2d, 0xcc, 0xe7,
	0xce, 0x54, 0x27, 0x18, 0x70, 0x7c, 0xce, 0xe9, 0x09, 0x07, 0xdd, 0xe2, 0xa9, 0x86, 0xef, 0x4b,
	0x67, 0x6d, 0xbe, 0x62, 0x72, 0xf3, 0x7d, 0x76, 0xaa, 0xad, 0xfd, 0xb7, 0x4b, 0xb0, 0x1a, 0xed,
	0x8a, 0x53, 0xc2, 0x8b, 0x9e, 0x4a, 0x28, 0x5f, 0x97, 0xe2, 0x87, 0x22, 0x55, 0x2c, 0xd0, 0xfd,
	0x21, 0x04, 0xc3, 0x27, 0xb4, 0xf1, 0x07, 0xe7, 0xc7, 0x08, 0x7d, 0x27, 0x73, 0x9f, 0x0a, 0x51,
	0x32, 0xcf, 0x11, 0x37, 0x34, 0xea, 0xfa, 0xa2, 0xd8, 0xf5, 0x79, 0x24, 0x65, 0x69, 0x2e, 0x49,
	0x99, 0x27, 0x93, 0x7b, 0x90, 0x4d, 0x8a, 0x6f, 0x9f, 0xd5, 0xf4, 0x53, 0x08, 0xf2, 0x29, 0xa7,
	0x78, 0xf9, 0x94, 0x53, 0xfc, 0x73, 0xd3, 0x6b, 0xed, 0x3f, 0xce, 0x81, 0x92, 0x1c, 0x52, 0xf5,
	0x75, 0xb8, 0xde, 0xe9, 0xb6, 0xf4, 0xee, 0xb0, 0xf3, 0x50, 0x17, 0x37, 0xe8, 0x60, 0xd8, 0x1c,
	0xee, 0x0d, 0x04, 0x82, 0x74, 0x13, 0x5e, 0x3d, 0x0d, 0x11, 0x21, 0x94, 0x50, 0xbd, 0x03, 0xb7,
	0x4f, 0xc3, 0x4c, 0x11, 0xa0, 0xfc, 0x59, 0x75, 0x47, 0x14, 0xaf, 0xa0, 0xfd, 0x4c, 0x2e, 0x41,
	0x6f, 0xdf, 0x82, 0x37, 0x32, 0x8b, 0xb6, 0x0c, 0x0c, 0x28, 0xc2, 0x6a, 0xa0, 0x24, 0x59, 0x79,
	0x49, 0xbd, 0x03, 0xb7, 0xce, 0x81, 0x1e, 0x13, 0xdd, 0xf3, 0xe1, 0xc7, 0x74, 0xfd, 0x0f, 0x2f,
	0x42, 0x2d, 0xf2, 0x4e, 0x90, 0xf9, 0x92, 0x41, 0x7e, 0x65, 0x9d, 0x3f, 0xeb, 0x95, 0x75, 0xe1,
	0x0c, 0x7f, 0x95, 0x0b, 0x49, 0x7f, 0x95, 0xc9, 0x78, 0xb8, 0x8b, 0xdc, 0x86, 0x2e, 0x8e, 0x87,
	0x7b, 0x1b, 0xd4, 0x70, 0x34, 0x92, 0x7c, 0x79, 0xb3, 0x27, 0x0d, 0x65, 0x43, 0x09, 0x47, 0x23,
	0xc1, 0x81, 0x77, 0x42, 0x92, 0x56, 0x94, 0x25, 0x69, 0xa7, 0x3c, 0xac, 0x13, 0xc5, 0xf1, 0x65,
	0x59, 0x1c, 0xaf, 0xc2, 0xc2, 0xd8, 0x0a, 0x2d, 0xf6, 0x46, 0x19, 0x7f, 0xab, 0x1f, 0x26, 0x0c,
	0x28, 0xae, 0x65, 0xba, 0x7b, 0xa0, 0xef, 0x15, 0x64, 0xcd, 0x84, 0x06, 0xd5, 0x96, 0x20, 0x40,
	0x63, 0xac, 0xbf, 0x04, 0x53, 0xaf, 0x44, 0x41, 0xe5, 0x04, 0xde, 0x3f, 0x86, 0x90, 0xfc, 0x56,
	0x24, 0x61, 0xe3, 0x66, 0x10, 0x31, 0x04, 0xf3, 0xa3, 0x8d, 0xc6, 0xdf, 0x29, 0xc4, 0x10, 0x92,
	0xbf, 0x17, 0xed, 0x33, 0x1e, 0x97, 0x72, 0x4f, 0xf2, 0xa4, 0x62, 0xb9, 0xa1, 0x63, 0x1e, 0xf8,
	0xd6, 0x6c, 0xcc, 0x5e, 0xb6, 0x95, 0x09, 0x64, 0x9b, 0x00, 0xb4, 0x5e, 0xf4, 0x6a, 0x46, 0xe0,
	0x1e, 0x50, 0xff, 0x1d, 0x4b, 0x4b, 0x51, 0x7d, 0x44, 0xc5, 0xa9, 0x54, 0x97, 0x5e, 0x85, 0x52,
	0x1c, 0x36, 0x8f, 0x06, 0xb0, 0x1b, 0xee, 0x19, 0x5d, 0xbd, 0xad, 0x2c, 0x6a, 0x3f, 0x9d, 0x87,
	0x72, 0x93, 0x57, 0xaf, 0xde, 0x86, 0x95, 0xb6, 0xfd, 0xd4, 0x19, 0xd9, 0xdb, 0x8e, 0x7b, 0x68,
	0xfb, 0x53, 0x9f, 0x1f, 0x15, 0x65, 0x23, 0x9d, 0xa1, 0xde, 0x84, 0xe5, 0xa1, 0xe7, 0x1e, 0x8e,
	0x67, 0xee, 0xd6, 0xc4, 0x1a, 0x3d, 0xd9, 0xf7, 0x9e, 0xb3, 0x63, 0x36, 0x09, 0x26, 0xbd, 0x1e,
	0xd8, 0xa3, 0x99, 0xef, 0x84, 0x27, 0xed, 0x03, 0xb6, 0x50, 0x05, 0x08, 0x59, 0xf9, 0x9d, 0x29,
	0x5b, 0xa0, 0xf9, 0xce, 0x54, 0x7d, 0x0d, 0xea, 0xcd, 0xe9, 0xf4, 0x21, 0xa5, 0x6a, 0xe4, 0xbc,
	0x66, 0x6b, 0x33, 0x01, 0x55, 0x5f, 0x65, 0x4e, 0x62, 0x0f, 0x19, 0x1f, 0xc2, 0xc8, 0xb6, 0x0c,
	0x24, 0x87, 0x6b, 0x73, 0x3a, 0xc5, 0x7c, 0xb6, 0x2a, 0x59, 0x92, 0x8c, 0xb6, 0xef, 0x9a, 0x8c,
	0x7a, 0xb2, 0x27, 0x67, 0x65, 0xdf, 0x65, 0x9f, 0xd0, 0xfe, 0xc8, 0x22, 0xac, 0xd2, 0x80, 0xcc,
	0x34, 0x5a, 0x3f, 0x53, 0x94, 0xa4, 0x36, 0xea, 0x55, 0xa8, 0x44, 0x8e, 0x40, 0xa2, 0x9d, 0x0a,
	0x1c, 0xd4, 0x19, 0xab, 0x5d, 0x41, 0xcd, 0x10, 0xab, 0xed, 0x25, 0x3b, 0xcf, 0x8c, 0xef, 0xdc,
	0x11, 0xdc, 0x1d, 0xc6, 0x3a, 0x09, 0xe6, 0x3b, 0x30, 0x3e, 0x70, 0x17, 0x12, 0x07, 0xae, 0x1c,
	0xba, 0x3e, 0x3e, 0xa0, 0x86, 0xb1, 0x2e, 0x48, 0x52, 0x45, 0xbd, 0x75, 0xce, 0x66, 0x70, 0x57,
	0x2e, 0x53, 0x31, 0x79, 0x9e, 0xa0, 0xda, 0x97, 0xa0, 0xec, 0xb8, 0x8e, 0xe4, 0xac, 0xa0, 0x44,
	0x00, 0xd9, 0xda, 0x93, 0x72, 0xb6, 0xa8, 0xdb, 0xb7, 0x9f, 0x7a, 0x4f, 0xe4, 0x13, 0x8d, 0x82,
	0xb2, 0x2e, 0xf5, 0x9f, 0xe1, 0xb1, 0x46, 0x52, 0xf6, 0x59, 0x7b, 0x01, 0x59, 0xee, 0x6b, 0x50,
	0x11, 0xa6, 0x0a, 0x79, 0xf9, 0xe6, 0x63, 0xb3, 0xb7, 0x37, 0xa4, 0x3e, 0x8d, 0x49, 0xa2, 0xd3,
	0xa5, 0x3e, 0x8d, 0xa5, 0xb1, 0x24, 0x99, 0x9d, 0x6e, 0x27, 0x73, 0x0f, 0x57, 0xa0, 0x68, 0xe8,
	0x0f, 0x7b, 0xf7, 0xf1, 0x2c, 0xfb, 0xb3, 0x8b, 0xa0, 0x8a, 0x33, 0x33, 0xe7, 0xc0, 0x90, 0x14,
	0x94, 0xf9, 0x84, 0x82, 0x32, 0x5e, 0x16, 0x05, 0x69, 0x59, 0x34, 0xa0, 0xb8, 0x6f, 0x4d, 0x08,
	0x05, 0x63, 0xce, 0xdc, 0x78, 0x52, 0xd2, 0xb9, 0x2d, 0x26, 0x74, 0x6e, 0x8f, 0x41, 0x11, 0x0f,
	0x85, 0xf0, 0x24, 0xb2, 0xeb, 0xbd, 0x33, 0x6f, 0x39, 0x31, 0xa2, 0x2c, 0x1c, 0x19, 0x38, 0x92,
	0xa2, 0xd4, 0x9f, 0x6f, 0x4a, 0x27, 0x30, 0xe9, 0xe4, 0x8e, 0x99, 0x5f, 0xd8, 0xb2, 0x13, 0x18,
	0x14, 0xa0, 0xde, 0x80, 0x7a, 0xe2, 0x38, 0xa2, 0x4b, 0xaa, 0x16, 0x4a, 0x67, 0xd1, 0xeb, 0x50,
	0x08, 0xad, 0x43, 0xa6, 0xee, 0x5c, 0x97, 0x4d, 0x0e, 0x48, 0x3b, 0x86, 0xd6, 0xa1, 0x41, 0x30,
	0x84, 0x88, 0xea, 0x20, 0x45, 0x54, 0x8f, 0x63, 0x83, 0x57, 0xc4, 0xd8, 0xe0, 0x5f, 0x80, 0xfc,
	0xe8, 0x5b, 0x50, 0xa1, 0x63, 0x2f, 0x5e, 0x45, 0xdf, 0x38, 0x63, 0xd8, 0x28, 0xf7, 0x49, 0x9f,
	0x4d, 0x58, 0xc7, 0xe2, 0x73, 0x4f, 0x36, 0x5d, 0x11, 0x19, 0xa3, 0x87, 0x4e, 0x9d, 0x81, 0x39,
	0x2d, 0xfb, 0x10, 0x96, 0x13, 0x23, 0x4f, 0x56, 0xdf, 0xb0, 0xd7, 0x37, 0xf7, 0xfa, 0x54, 0x27,
	0xc7, 0xcd, 0xa2, 0xe8, 0xe2, 0x63, 0xd1, 0xa9, 0x94, 0x82, 0x76, 0x1d, 0x20, 0xfe, 0x38, 0x29,
	0x44, 0x39, 0x1a, 0x6a, 0xa0, 0xdf, 0xd6, 0xb7, 0x3a, 0x43, 0x25, 0xaf, 0xfd, 0x58, 0x0d, 0x8a,
	0x7d, 0xdb, 0xb5, 0x26, 0xe1, 0xc9, 0x8b, 0x5d, 0x0f, 0xee, 0x82, 0x32, 0xa5, 0xe5, 0xcc, 0x91,
	0x15, 0xda, 0x87, 0x9e, 0x7f, 0x92, 0xe5, 0x6b, 0x80, 0xd5, 0x7d, 0xa7, 0xc5, 0x70, 0x8c, 0x65,
	0x56, 0x8a, 0x03, 0x50, 0xd5, 0xcd, 0x2a, 0x62, 0xef, 0x59, 0x17, 0xd2, 0xaa, 0xee, 0x07, 0x33,
	0x6b, 0xe2, 0x84, 0x27, 0xfc, 0x0d, 0x2b, 0x2b, 0xc0, 0xde, 0xb0, 0xde, 0x87, 0xe5, 0x60, 0x16,
	0x4c, 0x6d, 0x37, 0x48, 0x98, 0xbf, 0x6a, 0x59, 0x2d, 0x19, 0x44, 0xa8, 0x38, 0x29, 0xf5, 0x40,
	0x4a, 0xab, 0x6f, 0x81, 0x2a, 0x54, 0x16, 0xd8, 0x23, 0xcf, 0x1d, 0x53, 0x8a, 0x5b, 0x33, 0x56,
	0xe2, 0x9c, 0x01, 0xcd, 0x50, 0xbf, 0x0a, 0xe5, 0x03, 0xc7, 0x65, 0xb4, 0xa7, 0x38, 0xbf, 0xff,
	0xdb, 0x8e, 0x1b, 0x39, 0x02, 0x72, 0xb9, 0x63, 0xd6, 0x0a, 0x16, 0x95, 0xc2, 0x03, 0x00, 0x01,
	0xb1, 0x1b, 0xcb, 0x6b, 0xb0, 0x8c, 0x08, 0x9c, 0xfa, 0x47, 0x7c, 0x56, 0x8d, 0x80, 0x19, 0x45,
	0xa2, 0x14, 0x02, 0x2f, 0x45, 0x01, 0x7b, 0x33, 0xca, 0x52, 0x68, 0x30, 0x84, 0xbf, 0x4c, 0xdf,
	0x0e, 0xec, 0x30, 0xea, 0x4c, 0x85, 0x3e, 0x6f, 0xa6, 0x79, 0x06, 0xc9, 0xe2, 0xbd, 0xb9, 0x05,
	0x2b, 0x52, 0x09, 0xf1, 0xed, 0xb4, 0x80, 0x8e, 0xbb, 0xe1, 0x06, 0xd4, 0x29, 0x55, 0x09, 0x4d,
	0xf6, 0x75, 0xfa, 0x6c, 0xba, 0xc6, 0xa0, 0x7d, 0xda, 0x88, 0xa6, 0x30, 0xbd, 0xf4, 0xf4, 0x5a,
	0x4b, 0xfb, 0x31, 0x89, 0xe6, 0x86, 0x1f, 0x55, 0x6c, 0x7e, 0xa3, 0xa3, 0x4a, 0xb2, 0x07, 0x58,
	0x4f, 0xdb, 0x03, 0x5c, 0x07, 0x5a, 0xc6, 0xf9, 0xbe, 0xe4, 0x77, 0xbf, 0xca, 0x81, 0xdc, 0xb1,
	0x7e, 0x84, 0x84, 0xbe, 0x7e, 0x04, 0xaf, 0x78, 0x0a, 0xcf, 0xd9, 0xb6, 0x9c, 0x49, 0xd6, 0xd9,
	0xd5, 0x48, 0x9d, 0x5d, 0xd4, 0x08, 0x94, 0x20, 0xb0, 0x18, 0xe0, 0x57, 0x22, 0x23, 0x50, 0xef,
	0x89, 0xcd, 0xc2, 0x0e, 0x8b, 0xba, 0xdc, 0xab, 0x09, 0x5d, 0xae, 0x20, 0x3c, 0xb8, 0x96, 0x92,
	0x92, 0x4f, 0x2d, 0x9f, 0xce, 0x79, 0xd0, 0xd0, 0x50, 0x09, 0x56, 0xa6, 0x90, 0xce, 0x18, 0xcd,
	0x4f, 0x9f, 0x3a, 0xde, 0xc4, 0x62, 0x84, 0x34, 0x68, 0x5c, 0x47, 0x8c, 0x6a, 0x04, 0x64, 0xae,
	0x88, 0xd3, 0x76, 0x07, 0xaf, 0xce, 0xb5, 0x3b, 0xc0, 0x0b, 0x2a, 0x4a, 0xc5, 0xd1, 0x1d, 0x1b,
	0xe1, 0xa7, 0x66, 0x13, 0x1b, 0xa5, 0xe0, 0x49, 0xd2, 0xf9, 0xc6, 0x59, 0xa4, 0xf3, 0x56, 0x8a,
	0x74, 0xbe, 0x07, 0xeb, 0x76, 0x10, 0x3a, 0xc7, 0x04, 0x85, 0xfb, 0x51, 0x42, 0xd4, 0x37, 0xa9,
	0xb3, 0x4c, 0x9e, 0xa9, 0xd3, 0x3c, 0xce, 0x52, 0x53, 0x2b, 0x28, 0x44, 0xbc, 0xcd, 0x8c, 0x21,
	0x9e, 0x72, 0xfb, 0x0e, 0x72, 0x8d, 0x12, 0x06, 0xa1, 0xf1, 0x16, 0x5d, 0x15, 0xc2, 0x18, 0xa4,
	0x78, 0x83, 0x3b, 0x2f, 0x60, 0x2f, 0x21, 0x9b, 0x62, 0xbc, 0x9d, 0x30, 0xc5, 0xd0, 0x0c, 0x28,
	0x45, 0x14, 0xac, 0x02, 0xc5, 0x47, 0x4d, 0xa3, 0x4b, 0xaf, 0x93, 0x75, 0x80, 0xc1, 0xde, 0xa0,
	0xaf, 0x77, 0x07, 0x9d, 0x5e, 0x97, 0x09, 0xf0, 0x98, 0xf8, 0x9a, 0x3a, 0x44, 0xae, 0x03, 0x3c,
	0xd8, 0x1d, 0x50, 0xf9, 0xdd, 0x40, 0x59, 0x50, 0x4b, 0xb0, 0xb0, 0xdd, 0xe9, 0xea, 0xca, 0xa2,
	0xb6, 0x0d, 0x75, 0x99, 0x38, 0xd1, 0x77, 0xf4, 0xfc, 0x7a, 0xae, 0x42, 0x9d, 0x87, 0x88, 0xbc,
	0xa7, 0xb7, 0xee, 0x77, 0xba, 0x34, 0x16, 0x37, 0x83, 0xc5, 0xa7, 0x80, 0xf6, 0x14, 0x4a, 0x9c,
	0xdc, 0xa8, 0xeb, 0xb0, 0x82, 0x82, 0x38, 0xf2, 0x09, 0xe1, 0xaa, 0xdf, 0x80, 0xb5, 0x18, 0x4c,
	0x03, 0xee, 0x75, 0xbe, 0x83, 0xec, 0xcc, 0x26, 0x6c, 0xc4, 0x39, 0x92, 0xfb, 0xb7, 0xbc, 0x7a,
	0x19, 0x2e, 0xc6, 0x79, 0xf1, 0xa5, 0x19, 0xaf, 0xfb, 0x4a, 0x41, 0xeb, 0x44, 0x97, 0x9c, 0x1a,
	0x94, 0x09, 0x7f, 0xd4, 0x89, 0xaf, 0x39, 0x7d, 0xbd, 0xdb, 0xdc, 0xc1, 0x4f, 0x60, 0xac, 0xf0,
	0x28, 0xc9, 0x03, 0xda, 0x16, 0x44, 0xc6, 0x69, 0x41, 0xfb, 0x15, 0x80, 0xf2, 0x43, 0x3e, 0x93,
	0x2f, 0x76, 0x30, 0x65, 0xae, 0x7b, 0xe6, 0xcd, 0x3f, 0xb9, 0xee, 0xdf, 0x84, 0x15, 0xba, 0xc4,
	0x44, 0x45, 0x10, 0xbd, 0xce, 0x28, 0x98, 0x21, 0x2a, 0x80, 0xe4, 0xf5, 0xb8, 0x98, 0x5c, 0x8f,
	0x5c, 0x6c, 0x89, 0x77, 0x7a, 0x88, 0xc5, 0x96, 0x78, 0xa1, 0x7f, 0x03, 0x14, 0xcc, 0x14, 0xbf,
	0x43, 0xd9, 0x93, 0x65, 0x02, 0x17, 0x3f, 0x23, 0x89, 0x3f, 0xab, 0x09, 0xf1, 0xa7, 0xbc, 0x51,
	0x6b, 0xc9, 0x8d, 0xfa, 0x3e, 0x6c, 0xc4, 0xd9, 0x19, 0xda, 0xad, 0xb5, 0x08, 0x55, 0xfc, 0xe2,
	0x5d, 0x50, 0xe2, 0x9d, 0x24, 0x11, 0x69, 0xe9, 0x28, 0x8b, 0xe6, 0x23, 0x72, 0xd5, 0x13, 0x95,
	0x3a, 0x3f, 0xa1, 0x46, 0x1f, 0x8a, 0xa6, 0x6b, 0xdb, 0x63, 0x33, 0x8b, 0x60, 0xab, 0xae, 0xd7,
	0xb5, 0xed, 0x71, 0x5f, 0x24, 0xdb, 0xaf, 0xc3, 0x32, 0x43, 0x75, 0xdc, 0x43, 0x91, 0x66, 0xd7,
	0x63, 0x70, 0xf6, 0x21, 0xd0, 0x38, 0xf7, 0x21, 0x70, 0xf1, 0x7c, 0x87, 0xc0, 0x66, 0xea, 0x10,
	0x68, 0x4b, 0x63, 0x47, 0xf9, 0x97, 0x2b, 0x67, 0xf1, 0x2f, 0xc2, 0xc0, 0xc5, 0xf1, 0xa2, 0xd8,
	0x49, 0x70, 0x55, 0x3e, 0x09, 0xae, 0x43, 0x2d, 0xf2, 0xf6, 0x71, 0xe4, 0x1c, 0x84, 0x78, 0x52,
	0xd4, 0x50, 0xde, 0x88, 0x5e, 0x3c, 0x08, 0x8c, 0x4c, 0xbb, 0x10, 0x27, 0x42, 0x64, 0x2a, 0x5e,
	0x61, 0xe2, 0xc6, 0x28, 0x77, 0x3b, 0x66, 0x2f, 0x3e, 0x80, 0x86, 0xe4, 0xaa, 0x59, 0x2c, 0xa7,
	0x51, 0x3f, 0x98, 0x41, 0xec, 0xa7, 0x59, 0x28, 0xf8, 0x11, 0x5c, 0x72, 0xb8, 0x40, 0xd4, 0xdc,
	0xf7, 0xdc, 0x59, 0x40, 0xcb, 0x52, 0x19, 0x3a, 0x3a, 0x15, 0xad, 0x19, 0x8d, 0x08, 0x65, 0x8b,
	0x60, 0x90, 0xe2, 0x54, 0x68, 0x9e, 0x3e, 0x37, 0x6f, 0x66, 0x9c, 0x9b, 0xa8, 0x9d, 0x41, 0xa4,
	0xe8, 0xf8, 0x7c, 0x83, 0x8a, 0x12, 0x28, 0xb8, 0x37, 0xc7, 0x20, 0xea, 0xd6, 0x59, 0x67, 0xd3,
	0x9b, 0x67, 0xde, 0x20, 0x6f, 0x7f, 0xe6, 0x53, 0xe2, 0xad, 0xe4, 0x29, 0x31, 0x9d, 0x47, 0x11,
	0x57, 0x61, 0xb9, 0xdb, 0x33, 0xbb, 0xba, 0xde, 0x36, 0x91, 0x14, 0x0e, 0x1f, 0x53, 0xd7, 0x16,
	0x8c, 0x2e, 0x52, 0xf9, 0x8f, 0x44, 0x36, 0x17, 0xd4, 0x0d, 0x50, 0x29, 0xb1, 0x34, 0x87, 0x3d,
	0x93, 0x67, 0x28, 0x8b, 0x22, 0xe1, 0x5c, 0xd2, 0x7e, 0x23, 0x0f, 0x45, 0xb6, 0xd8, 0x5e, 0x8c,
	0x6c, 0x46, 0x62, 0xf6, 0x02, 0x75, 0x9b, 0x49, 0xc5, 0xec, 0x5f, 0x87, 0x4d, 0xdf, 0xa6, 0x61,
	0xe3, 0xcc, 0x67, 0x4e, 0x78, 0x34, 0xf6, 0xad, 0x67, 0xf1, 0x23, 0x02, 0x2a, 0xc1, 0xb8, 0xc0,
	0x31, 0x1e, 0x31, 0x04, 0xfe, 0x98, 0xe0, 0xab, 0x70, 0x31, 0x2a, 0x8c, 0x91, 0x11, 0x1d, 0x37,
	0xf9, 0x00, 0x61, 0x83, 0x23, 0xb4, 0x68, 0x3e, 0x2f, 0xfa, 0x09, 0xac, 0x84, 0xb6, 0x7f, 0xec,
	0xb8, 0xc8, 0x30, 0x30, 0xdd, 0xcc, 0xd2, 0x7c, 0xdd, 0x8c, 0x12, 0x61, 0x73, 0xcd, 0x4c, 0x62,
	0x5d, 0x14, 0xcf, 0x5a, 0x17, 0xa5, 0x94, 0x30, 0xfd, 0x2f, 0xe7, 0xa0, 0x82, 0x07, 0x45, 0xcb,
	0x73, 0x0f, 0x9c, 0xc3, 0x0c, 0x87, 0x96, 0x8d, 0x48, 0x7a, 0x34, 0x22, 0x28, 0xfe, 0x31, 0x56,
	0xe5, 0xcd, 0xb8, 0x3e, 0x66, 0x83, 0xe7, 0xb7, 0x68, 0xf6, 0x90, 0xe6, 0x4a, 0x4c, 0x61, 0xe1,
	0x74, 0x03, 0x3f, 0xfb, 0xac, 0x76, 0x1f, 0xa4, 0xda, 0xfd, 0xb7, 0x72, 0x91, 0xb8, 0x62, 0x4e,
	0xcb, 0x6f, 0xa4, 0xac, 0x8b, 0xa9, 0xad, 0x5d, 0xc2, 0x84, 0x78, 0x03, 0x96, 0x82, 0x67, 0x4e,
	0x38, 0x3a, 0x62, 0x8a, 0x1f, 0x96, 0x42, 0x97, 0xeb, 0xb1, 0x49, 0x31, 0x55, 0x95, 0x97, 0x47,
	0x91, 0x2d, 0xb1, 0xd8, 0xbb, 0xc5, 0xd3, 0x7b, 0xf7, 0xe2, 0x5a, 0x31, 0xed, 0x1f, 0x2c, 0xc0,
	0x42, 0xd3, 0xb7, 0xad, 0xac, 0xd5, 0x6d, 0xf9, 0xb6, 0x25, 0xa9, 0x0d, 0x09, 0x00, 0xcf, 0xcd,
	0x0f, 0xa1, 0x82, 0x99, 0x92, 0x81, 0xbc, 0xb4, 0xc5, 0x49, 0x9d, 0xfc, 0x60, 0x03, 0x82, 0xcb,
	0x36, 0xae, 0x40, 0x9a, 0x17, 0x4e, 0xd5, 0xf0, 0x2d, 0x9e, 0xd5, 0x97, 0xa5, 0x14, 0xe5, 0x11,
	0x4d, 0x4a, 0x8a, 0x09, 0x93, 0x92, 0x1d, 0x58, 0x11, 0xa9, 0x92, 0x79, 0x30, 0xb1, 0x0e, 0xd9,
	0x93, 0x9a, 0x6b, 0xe9, 0x76, 0xc7, 0x24, 0x69, 0x7b, 0x62, 0x1d, 0x1a, 0xcb, 0x81, 0x0c, 0x38,
	0xcb, 0xa4, 0xf4, 0xc8, 0x19, 0x8f, 0x6d, 0x57, 0x12, 0xd2, 0x51, 0x10, 0x2a, 0x22, 0x7f, 0x2b,
	0x07, 0xcb, 0x89, 0x2f, 0xa8, 0x5f, 0x81, 0x2a, 0x69, 0xc4, 0x79, 0x6c, 0xe4, 0x2a, 0x04, 0xc6,
	0xb7, 0x65, 0x1f, 0x36, 0xff, 0x5f, 0xf6, 0xde, 0x36, 0xc8, 0x91, 0x24, 0x3b, 0x0c, 0x5b, 0x00,
	0xdd, 0x8d, 0xc6, 0x03, 0xba, 0x51, 0x5d, 0xfd, 0x39, 0x3d, 0xdf, 0x98, 0x9d, 0xdd, 0x19, 0xec,
	0xee, 0xec, 0xde, 0xdc, 0xee, 0xde, 0xf1, 0x8e, 0x7b, 0xcb, 0x6a, 0xa0, 0xba, 0xbb, 0x76, 0x00,
	0x14, 0xb6, 0xaa, 0xd0, 0x33, 0x73, 0x94, 0x55, 0xc6, 0x34, 0x6a, 0xa6, 0x71, 0x8b, 0x06, 0xfa,
	0x00, 0xf4, 0xce, 0x0e, 0x6d, 0x47, 0x98, 0x47, 0xca, 0x0e, 0x87, 0x23, 0x78, 0x77, 0x96, 0x29,
	0x52, 0xd4, 0x49, 0xa6, 0x2d, 0x99, 0x96, 0xec, 0x0b, 0x99, 0x92, 0x6c, 0x51, 0x0e, 0x4b, 0x16,
	0x45, 0xcb, 0x8c, 0x23, 0x2d, 0x59, 0x3c, 0x7e, 0x58, 0xb4, 0x2d, 0x4b, 0x32, 0xcd, 0x08, 0x91,
	0xb4, 0x64, 0x5b, 0xd4, 0x89, 0x47, 0x5a, 0x1f, 0x74, 0xe4, 0xcb, 0x8f, 0xca, 0xac, 0x2a, 0x00,
	0x3d, 0x33, 0x47, 0xd9, 0xa1, 0xb8, 0xf9, 0x31, 0x8d, 0x7a, 0xef, 0xe5, 0x77, 0xe6, 0xcb, 0x97,
	0x99, 0xef, 0x63, 0x74, 0xf2, 0x91, 0xdf, 0xed, 0x8f, 0xc6, 0xe8, 0x7e, 0xf9, 0x68, 0x70, 0x12,
	0x04, 0x67, 0xd1, 0x8d, 0xdb, 0x1c, 0x9d, 0x7c, 0x64, 0xd1, 0x54, 0x2e, 0x26, 0xe2, 0x39, 0x56,
	0x60, 0x55, 0xce, 0x91, 0x67, 0x95, 0x99, 0x9c, 0xd5, 0x4a, 0x98, 0x15, 0x03, 0x95, 0x4a, 0xb2,
	0x57, 0x2b, 0xab, 0x61, 0x54, 0x88, 0x60, 0xab, 0xbd, 0x80, 0x91, 0xcd, 0xe8, 0xef, 0x54, 0xe9,
	0xc7, 0x33, 0xb0, 0x58, 0x65, 0x31, 0x34, 0x93, 0xbc, 0x33, 0xf2, 0xf8, 0x9a, 0x8a, 0x77, 0x46,
	0x0e, 0xc4, 0x59, 0xb8, 0x09, 0xd9, 0xc3, 0xee, 0xf8, 0x89, 0xa4, 0x7b, 0x42, 0x3e, 0xe9, 0x4d,
	0x2b, 0x22, 0xe4, 0x20, 0x98, 0x04, 0xc0, 0x65, 0x3e, 0x8c, 0xf3, 0x49, 0xb1, 0xf3, 0xec, 0x35,
	0x88, 0x40, 0x78, 0xa6, 0x38, 0xb5, 0x85, 0xcb, 0xaa, 0x05, 0xf2, 0x69, 0x75, 0xf4, 0x8f, 0x8b,
	0x07, 0x97, 0x6c, 0xdc, 0xdb, 0x2e, 0x6f, 0xc8, 0xad, 0xe9, 0x56, 0x20, 0x8b, 0xb3, 0x26, 0x75,
	0x2e, 0x36, 0xa9, 0x13, 0x27, 0x2e, 0x3c, 0xeb, 0xc4, 0xdd, 0x82, 0x2c, 0xbf, 0x1f, 0xa3, 0xd7,
	0x16, 0xfc, 0xf3, 0x4c, 0x43, 0xf6, 0xc5, 0x74, 0x18, 0x6b, 0x88, 0x4a, 0xc8, 0x09, 0x6f, 0x75,
	0x54, 0x58, 0x96, 0x06, 0x2d, 0x87, 0x90, 0x68, 0xe7, 0x66, 0x94, 0xce, 0xa5, 0x97, 0x9d, 0x9d,
	0xe0, 0x61, 0xfb, 0xb4, 0x37, 0xe6, 0x3c, 0xb0, 0x3b, 0xaa, 0x52, 0xc0, 0xef, 0xa5, 0x5e, 0x80,
	0xc2, 0x35, 0x16, 0x23, 0x5c, 0x23, 0xb2, 0x96, 0x73, 0xd1, 0xb5, 0x5c, 0xfa, 0x6b, 0x29, 0xb8,
	0xc0, 0xc7, 0x5e, 0xe9, 0x99, 0x9d, 0x2e, 0xc6, 0xed, 0x22, 0x39, 0x88, 0x89, 0x1c, 0x3a, 0xcd,
	0xe5, 0x20, 0x7a, 0xbe, 0x8a, 0x29, 0xea, 0xb2, 0xfd, 0xae, 0x18, 0xd1, 0xd3, 0x8d, 0xf4, 0x52,
	0x26, 0xda, 0x4b, 0xcf, 0x6d, 0x72, 0x54, 0xfa, 0xd9, 0x97, 0x60, 0xd5, 0xe8, 0x3d, 0x1a, 0xa0,
	0xaf, 0x8f, 0x60, 0x3c, 0x71, 0xaf, 0xfe, 0x0c, 0x2c, 0x1c, 0x0f, 0x3a, 0x5c, 0xd7, 0x35, 0xa2,
	0x68, 0x95, 0x90, 0xc1, 0xad, 0x3a, 0x52, 0x3b, 0x2c, 0x95, 0x5e, 0x85, 0xc5, 0x93, 0x61, 0x77,
	0x30, 0xec, 0x8e, 0xf9, 0x2d, 0xe7, 0x8d, 0x59, 0x39, 0x34, 0x19, 0xbd, 0x23, 0x52, 0xca, 0xb3,
	0x69, 0x4e, 0x99, 0x4d, 0xca, 0xde, 0x35, 0x1f, 0xd9, 0xbb, 0x22, 0x23, 0xb2, 0x10, 0x1b, 0x91,
	0x18, 0xef, 0xc9, 0x26, 0xf0, 0x9e, 0x3d, 0xc8, 0x9d, 0xf0, 0x1a, 0xb2, 0x7d, 0xe4, 0xe6, 0xcc,
	0x26, 0xf0, 0x6f, 0x27, 0x4c, 0xfb, 0x7b, 0xea, 0x4f, 0x35, 0x2a, 0x8a, 0x17, 0x9e, 0x42, 0x91,
	0xfd, 0x2f, 0x01, 0x73, 0xf9, 0x82, 0xb5, 0xdc, 0x07, 0x1a, 0xce, 0xcc, 0x7f, 0xd8, 0x1b, 0x3c,
	0x66, 0x9a, 0xd2, 0x33, 0xdb, 0x8b, 0xd2, 0xde, 0x6e, 0x6f, 0xf0, 0xd8, 0xc9, 0x0d, 0xf8, 0x4f,
	0xfd, 0xb3, 0xa0, 0x31, 0xa9, 0xf9, 0x61, 0xb7, 0x37, 0x0e, 0x86, 0xdd, 0xfe, 0x23, 0xa6, 0x30,
	0xfd, 0xfa, 0xac, 0xfc, 0xe8, 0x73, 0xc0, 0x2e, 0x4f, 0xe6, 0x14, 0x3b, 0x2a, 0x80, 0xe4, 0x7d,
	0xdc, 0x1e, 0x1f, 0x1e, 0xf9, 0xed, 0xd1, 0x28, 0x18, 0x8d, 0x50, 0xcd, 0x37, 0x73, 0xb6, 0xbc,
	0xeb, 0x24, 0x9d, 0x21, 0x92, 0x39, 0xc5, 0x63, 0x15, 0xa0, 0xbf, 0x05, 0x99, 0x60, 0xdc, 0x66,
	0xbe, 0x90, 0xaf, 0xcd, 0xca, 0xce, 0xf4, 0x0c, 0x87, 0xd0, 0xeb, 0x0d, 0x28, 0xc8, 0xa7, 0x42,
	0x66, 0xfb, 0xf9, 0xca, 0xac, 0xf4, 0x52, 0x44, 0x1f, 0x27, 0x2f, 0x1d, 0x1b, 0xf5, 0xdf, 0x0f,
	0x3a, 0xd5, 0x12, 0x50, 0x72, 0x5d, 0x88, 0x3b, 0x3e, 0x48, 0xca, 0x75, 0x87, 0xa4, 0x94, 0xb3,
	0xd6, 0x1e, 0x44, 0x20, 0x7a, 0x1b, 0x56, 0xd9, 0xf0, 0x28, 0x05, 0x64, 0xe3, 0xde, 0x37, 0x26,
	0x8f, 0x90, 0x5c, 0xc2, 0x4a, 0x27, 0x0a, 0xd2, 0xef, 0x00, 0x9f, 0x68, 0x98, 0x35, 0x5d, 0x3c,
	0xe5, 0x99, 0x3d, 0x42, 0x93, 0x90, 0x3c, 0x61, 0x24, 0x7e, 0x93, 0xcc, 0x3a, 0x0f, 0x1f, 0xa2,
	0x5e, 0x23, 0x99, 0x49, 0xb9, 0xb3, 0x65, 0x56, 0xdd, 0xdd, 0x75, 0x69, 0x0a, 0x07, 0x3a, 0x0f,
	0x1f, 0xb2, 0xdf, 0xfa, 0xfb, 0xb0, 0xd4, 0xed, 0x8f, 0x4e, 0x87, 0xf8, 0x8e, 0x44, 0xea, 0x96,
	0x8f, 0x7b, 0xce, 0x4b, 0xca, 0xce, 0xe2, 0x89, 0x48, 0xed, 0x0a, 0x5d, 0xe9, 0x4b, 0x7f, 0x4c,
	0x0e, 0xf7, 0x8a, 0x70, 0xa6, 0xf4, 0x2b, 0xf5, 0x58, 0xf1, 0xc9, 0x33, 0x14, 0x10, 0x4a, 0x6a,
	0x72, 0xf7, 0x6e, 0x75, 0x27, 0x60, 0xf4, 0x7f, 0x03, 0x2e, 0xf2, 0x82, 0xc5, 0xfd, 0x9d, 0x52,
	0x34, 0xf5, 0xbf, 0xf7, 0xa9, 0x33, 0x16, 0x5d, 0x65, 0x79, 0xc8, 0x85, 0x6f, 0x77, 0x27, 0xe2,
	0xf4, 0x16, 0x14, 0x47, 0xc7, 0xed, 0x5e, 0x8f, 0xdd, 0x19, 0x92, 0x02, 0x97, 0xe3, 0x0e, 0xff,
	0x12, 0x07, 0x9a, 0x24, 0xa3, 0xac, 0x23, 0x08, 0x9c, 0xa5, 0x91, 0xfc, 0x49, 0xb2, 0xed, 0x0f,
	0xfa, 0x22, 0xc4, 0x1f, 0xc9, 0xb6, 0x78, 0xb6, 0x6c, 0x1b, 0x83, 0x3e, 0x0b, 0xff, 0x87, 0xd9,
	0xf6, 0xe5, 0x4f, 0x32, 0xf0, 0x8f, 0x07, 0xc3, 0x0f, 0x48, 0xd7, 0x1c, 0x0d, 0x4e, 0x87, 0x3c,
	0xf4, 0xd2, 0xcc, 0x81, 0xbf, 0x4b, 0x13, 0xed, 0x93, 0x34, 0x4e, 0xe1, 0xb1, 0xf4, 0xb5, 0xfd,
	0x69, 0xc8, 0x09, 0xfe, 0xf7, 0xb4, 0x8a, 0xde, 0xdb, 0xbf, 0x9a, 0x82, 0x62, 0x84, 0xdb, 0xe9,
	0xb7, 0x61, 0xfd, 0xb8, 0xfd, 0x91, 0x2f, 0xce, 0xc8, 0x64, 0x3b, 0xc2, 0xe7, 0x6a, 0xba, 0x2d,
	0xaf, 0x1e, 0xb7, 0x3f, 0xaa, 0x33, 0x5c, 0x95, 0xa1, 0x50, 0x23, 0x03, 0x6d, 0xe0, 0xe9, 0xc3,
	0x36, 0x8b, 0x80, 0x77, 0xdc, 0xed, 0xef, 0xb0, 0xb7, 0xed, 0x77, 0xe1, 0x02, 0xc9, 0xb4, 0xdd,
	0xeb, 0x0d, 0x1e, 0x07, 0x1d, 0xbf, 0x1f, 0x3c, 0x6a, 0xd3, 0x6b, 0x28, 0x96, 0x82, 0x86, 0xc6,
	0x3b, 0x77, 0xdc, 0xfe, 0xc8, 0xa0, 0x24, 0x0d, 0x46, 0xc1, 0x33, 0xf8, 0x34, 0x6c, 0xb7, 0x47,
	0x23, 0x74, 0x26, 0xdc, 0x3e, 0x0e, 0x7c, 0xa6, 0xc1, 0xc4, 0xac, 0x93, 0xf8, 0x8d, 0x06, 0xa5,
	0x70, 0xdb, 0xc7, 0x01, 0x72, 0x20, 0x8b, 0xa1, 0xb7, 0x7f, 0x22, 0x05, 0xc5, 0x08, 0xe3, 0x55,
	0xae, 0x01, 0x78, 0x13, 0xfd, 0xc7, 0x41, 0xf7, 0xd1, 0x11, 0x8f, 0xb8, 0x27, 0xae, 0x01, 0x78,
	0x33, 0xef, 0x22, 0x56, 0x7f, 0x13, 0x36, 0xda, 0xa7, 0xe3, 0x81, 0xdf, 0x3e, 0x3c, 0x0c, 0x4e,
	0x94, 0x74, 0x54, 0x9c, 0x5a, 0x23, 0x58, 0x43, 0x20, 0xc3, 0x54, 0x91, 0x61, 0xe1, 0xa9, 0x32,
	0xec, 0xb2, 0x4f, 0x19, 0x1a, 0x9a, 0x6a, 0xfb, 0x1f, 0xa4, 0x20, 0x63, 0x7a, 0x86, 0x5e, 0x87,
	0x25, 0xbc, 0x8a, 0x19, 0x9c, 0x8e, 0x69, 0xfc, 0x56, 0xba, 0x35, 0xde, 0x38, 0xc3, 0xfe, 0x40,
	0x8d, 0x18, 0x0a, 0x3c, 0x39, 0x46, 0x78, 0xad, 0xf3, 0x98, 0x94, 0xbd, 0xee, 0x68, 0x1c, 0xee,
	0x8c, 0x4f, 0x91, 0x1d, 0x26, 0xaf, 0xd1, 0xd4, 0xdb, 0xfb, 0x30, 0x47, 0xa0, 0x18, 0x8c, 0xa3,
	0xfb, 0x11, 0xf7, 0x21, 0xc4, 0xe2, 0x94, 0x20, 0x84, 0x3f, 0xfd, 0x70, 0x9e, 0x7f, 0x12, 0x04,
	0x5c, 0xfa, 0xcc, 0x33, 0xce, 0x4d, 0x40, 0xdb, 0x63, 0xc8, 0xcb, 0xab, 0x9b, 0x19, 0x22, 0x28,
	0xfc, 0x84, 0x85, 0x43, 0x3c, 0xee, 0xf6, 0x65, 0x4a, 0x1d, 0xe6, 0x1e, 0xb6, 0x99, 0x99, 0xc2,
	0x9c, 0x83, 0xbf, 0xd1, 0x3b, 0xef, 0xe0, 0xf8, 0xb8, 0x4b, 0x3d, 0x0b, 0x0d, 0xb9, 0x2a, 0xec,
	0x9c, 0xb3, 0x1c, 0x82, 0x71, 0x19, 0xfc, 0xeb, 0x50, 0x94, 0xf2, 0xf2, 0xba, 0x34, 0x7a, 0xfa,
	0xb8, 0xcb, 0x3d, 0x75, 0xf0, 0xa6, 0x10, 0x08, 0x35, 0x97, 0x3b, 0x47, 0x84, 0x79, 0xea, 0x98,
	0x83, 0x1b, 0xbf, 0x92, 0x6f, 0xb3, 0x8f, 0x42, 0x21, 0xed, 0x04, 0x52, 0x59, 0x66, 0xfc, 0x8a,
	0x00, 0xb9, 0x9a, 0x73, 0x61, 0x35, 0xb7, 0xbf, 0x90, 0x82, 0x22, 0xe9, 0xbe, 0x67, 0x6b, 0xb8,
	0x09, 0xf3, 0xa4, 0x64, 0xee, 0x70, 0xef, 0xf5, 0xa7, 0xd8, 0xf1, 0x49, 0x43, 0x1d, 0x9a, 0x7a,
	0xfb, 0xef, 0xa4, 0x40, 0xdb, 0x89, 0x6f, 0xd2, 0x6b, 0x9c, 0x03, 0xc6, 0x6a, 0x72, 0x86, 0xa2,
	0x22, 0x8d, 0x72, 0x74, 0x96, 0x99, 0x5c, 0xc4, 0x11, 0x6c, 0xc9, 0x8c, 0x56, 0x29, 0x26, 0xfd,
	0x6c, 0xc5, 0xac, 0x87, 0x3c, 0x57, 0x02, 0x6f, 0x7f, 0x29, 0x05, 0x2b, 0x31, 0xb9, 0x41, 0x77,
	0x22, 0x72, 0xd3, 0x33, 0x36, 0x4d, 0x91, 0x9d, 0x12, 0xe6, 0x5d, 0x3a, 0x71, 0xde, 0xfd, 0x5a,
	0x0a, 0x20, 0x94, 0x37, 0xf4, 0x7f, 0x05, 0xb4, 0xfe, 0x60, 0x78, 0xdc, 0xee, 0x09, 0xc6, 0xc6,
	0x43, 0x32, 0xdd, 0x3e, 0xbb, 0xd4, 0xc2, 0x99, 0x9e, 0x53, 0xa4, 0x79, 0xf1, 0xef, 0x11, 0xc9,
	0x9e, 0x2c, 0xf7, 0xa0, 0x23, 0x65, 0x9f, 0x7e, 0xf6, 0xec, 0x69, 0x5e, 0x61, 0xf6, 0x17, 0xd0,
	0x25, 0x26, 0x35, 0x5d, 0x62, 0xf3, 0x3e, 0x04, 0x6c, 0x07, 0xa0, 0xc7, 0x33, 0x41, 0x27, 0xf1,
	0x72, 0x4f, 0xf5, 0x1f, 0xf9, 0x3c, 0x20, 0x70, 0xda, 0x59, 0x91, 0x7b, 0xab, 0xff, 0xc8, 0xa4,
	0xca, 0x40, 0xb2, 0x48, 0xc7, 0x34, 0xff, 0x42, 0x31, 0x6d, 0xfb, 0xf3, 0xb0, 0x24, 0x84, 0x24,
	0x5c, 0xc7, 0x49, 0xd1, 0xa0, 0x5e, 0x81, 0x95, 0x50, 0xfc, 0x3a, 0x19, 0x06, 0xc7, 0xdd, 0xd3,
	0x63, 0x96, 0x97, 0x26, 0x10, 0x4d, 0x0a, 0xc7, 0x22, 0x4f, 0x8f, 0x89, 0xa4, 0x7f, 0x3a, 0x0c,
	0xf8, 0x75, 0x02, 0x8c, 0x4e, 0x8f, 0x0d, 0x0a, 0xd9, 0x76, 0xa1, 0x20, 0xcb, 0x65, 0x7a, 0x85,
	0x2f, 0x48, 0x3a, 0x74, 0xaf, 0x9d, 0x59, 0xa8, 0x93, 0x97, 0xe3, 0x57, 0x52, 0x00, 0xa1, 0xf0,
	0xa8, 0xd7, 0x61, 0xee, 0x78, 0xd0, 0xe1, 0xb1, 0x64, 0xbe, 0xe3, 0xec, 0x62, 0xa7, 0xf4, 0xb3,
	0x3e, 0xe8, 0x04, 0x0e, 0x66, 0x53, 0x7a, 0x17, 0x96, 0x55, 0x38, 0xfa, 0x38, 0xd9, 0xdd, 0xf5,
	0xed, 0x46, 0xed, 0x3e, 0x35, 0x68, 0x31, 0x9a, 0xcd, 0xda, 0x7d, 0x7f, 0xe7, 0xbe, 0x6f, 0xd4,
	0xf6, 0x6c, 0x2d, 0x4d, 0x08, 0xea, 0x9c, 0x20, 0xb3, 0xbd, 0x0b, 0x5b, 0x93, 0x44, 0x45, 0xbd,
	0x0c, 0x2b, 0x68, 0x54, 0x97, 0xc0, 0xbb, 0x8a, 0x0f, 0xd4, 0x65, 0xb3, 0xbd, 0x0f, 0xdb, 0x93,
	0xe5, 0xbe, 0xa7, 0xca, 0xc9, 0x83, 0x25, 0x45, 0xa0, 0x9b, 0x1a, 0x61, 0x1a, 0x63, 0x7d, 0x47,
	0xa4, 0x46, 0x66, 0x15, 0xad, 0x88, 0x81, 0xdb, 0x9f, 0x80, 0x25, 0x45, 0x9e, 0x23, 0x09, 0xa3,
	0x72, 0x21, 0x0b, 0xa2, 0xab, 0x08, 0x7a, 0xdb, 0xfb, 0x50, 0x90, 0x65, 0xb6, 0x88, 0x21, 0x1a,
	0x95, 0xc7, 0x26, 0x18, 0xa2, 0xd1, 0x3b, 0x7d, 0x6e, 0x88, 0x56, 0xfa, 0xe9, 0x0c, 0x2c, 0xd0,
	0x5b, 0x0d, 0x5d, 0x87, 0x65, 0xfa, 0xcb, 0x6f, 0xf5, 0x3f, 0xe8, 0x0f, 0x1e, 0xf7, 0xb5, 0x17,
	0xf4, 0x35, 0xd0, 0x18, 0x4c, 0x48, 0x81, 0x54, 0x1b, 0x80, 0x41, 0x23, 0xd2, 0x9d, 0x96, 0x96,
	0x70, 0x11, 0x91, 0x88, 0x2a, 0x39, 0x30, 0x9c, 0xe9, 0x19, 0xf4, 0xed, 0x8a, 0x7d, 0x4b, 0x7d,
	0xad, 0xcd, 0xeb, 0xe7, 0x61, 0x93, 0xc1, 0xa3, 0x7b, 0x86, 0xb6, 0xa0, 0x5f, 0x80, 0x2d, 0xa5,
	0x70, 0x19, 0x9b, 0xd5, 0xd7, 0x61, 0x85, 0x67, 0x29, 0x96, 0xad, 0xb6, 0x28, 0x95, 0x54, 0x0d,
	0x7a, 0xed, 0x27, 0x06, 0x4a, 0x72, 0x5a, 0x4e, 0xaa, 0x51, 0x75, 0x77, 0x57, 0x03, 0xa9, 0xbd,
	0x62, 0xdd, 0x68, 0x79, 0xfd, 0x25, 0x28, 0x85, 0x50, 0x3c, 0x8b, 0xd0, 0x79, 0x29, 0xaa, 0xed,
	0x93, 0x52, 0x0a, 0xfa, 0x0d, 0x78, 0x31, 0x42, 0xc7, 0xe7, 0x9d, 0x4a, 0xb9, 0x24, 0xf5, 0x12,
	0x4e, 0x2b, 0xda, 0xbb, 0x88, 0x5b, 0x96, 0x70, 0x8d, 0x41, 0xdf, 0x67, 0xa3, 0x8e, 0xb8, 0xa2,
	0xbe, 0x05, 0x6b, 0x0c, 0xc7, 0xc6, 0xdf, 0xc7, 0x09, 0xa0, 0x69, 0xa5, 0xbb, 0xb0, 0xc8, 0xef,
	0x96, 0x50, 0x95, 0x82, 0xfd, 0x96, 0xc6, 0x52, 0x83, 0x82, 0x80, 0xd6, 0x70, 0x1c, 0x65, 0x48,
	0xbd, 0xdb, 0xd1, 0xd2, 0x64, 0x69, 0x0a, 0xc8, 0x7e, 0xf7, 0xd1, 0x91, 0x96, 0x29, 0x7d, 0xdf,
	0x1c, 0xe4, 0x2b, 0x83, 0xfe, 0x98, 0x45, 0x3e, 0xd5, 0xbf, 0x13, 0x96, 0xd4, 0xd0, 0xe4, 0x34,
	0x14, 0xfe, 0xa6, 0xea, 0x83, 0x46, 0x44, 0x28, 0x77, 0x0a, 0x27, 0x72, 0xb8, 0xf2, 0x1b, 0xa0,
	0xc9, 0x76, 0x9f, 0xfe, 0x31, 0x0b, 0x2e, 0x9d, 0x76, 0x96, 0x87, 0xa1, 0xe1, 0x67, 0xbd, 0xdb,
	0x8f, 0x53, 0xb6, 0x3f, 0x42, 0xf6, 0x18, 0xa1, 0x6c, 0x7f, 0x44, 0x67, 0x3f, 0x0b, 0x81, 0x4e,
	0x1d, 0x5a, 0xa1, 0x19, 0x26, 0x8d, 0x7f, 0x3e, 0xd2, 0xab, 0xa0, 0x51, 0x34, 0xd3, 0x48, 0xec,
	0x0a, 0xcb, 0xeb, 0x73, 0x71, 0xcf, 0x16, 0x42, 0x21, 0x71, 0x24, 0x7d, 0x76, 0x83, 0x91, 0xbe,
	0xcb, 0x73, 0x21, 0x85, 0xf8, 0xbd, 0xc1, 0xa3, 0xee, 0x21, 0x7b, 0x7a, 0x54, 0x7d, 0x87, 0x84,
	0x3d, 0x55, 0x23, 0x34, 0xce, 0xb2, 0xa8, 0x08, 0x7e, 0xeb, 0x0e, 0x6c, 0x44, 0x6b, 0xc3, 0x72,
	0xcb, 0x9e, 0x21, 0xb7, 0xb5, 0x48, 0xb5, 0x68, 0x9e, 0xe7, 0x21, 0x87, 0x51, 0x28, 0xb0, 0xfd,
	0x8b, 0x34, 0xf8, 0x3c, 0x01, 0xb0, 0xe6, 0x17, 0x05, 0x92, 0x95, 0x94, 0x3b, 0x43, 0x49, 0x4b,
	0x3c, 0x03, 0xfc, 0x2c, 0xfd, 0xe9, 0x79, 0xc8, 0xda, 0x1f, 0x06, 0xc3, 0x5e, 0x3b, 0xfe, 0x82,
	0x9c, 0xe0, 0x59, 0x8b, 0x8c, 0x49, 0x6f, 0xf0, 0x68, 0xa0, 0x38, 0x23, 0xcb, 0x11, 0x08, 0xf5,
	0x41, 0x76, 0x15, 0x0a, 0xd4, 0xa3, 0x19, 0x23, 0xa0, 0xaf, 0x1b, 0x79, 0x0a, 0xa3, 0x24, 0xdb,
	0xd2, 0xe5, 0x2a, 0x35, 0xf2, 0x0a, 0xaf, 0x4c, 0x63, 0x41, 0xef, 0x17, 0x62, 0x41, 0xef, 0xf5,
	0xef, 0x04, 0x90, 0x9a, 0x9c, 0x8d, 0x7b, 0x30, 0x67, 0xcd, 0xb9, 0x25, 0x1a, 0xe9, 0xe4, 0xc6,
	0x62, 0x98, 0x6e, 0x47, 0xe2, 0x21, 0x6c, 0x27, 0xa5, 0x8c, 0xbc, 0x92, 0x5c, 0x87, 0xe5, 0xe0,
	0xe1, 0xc3, 0xe0, 0x10, 0x8f, 0x9e, 0xd2, 0x4d, 0xfb, 0x92, 0x80, 0xf2, 0xfb, 0xce, 0xe0, 0xa3,
	0x93, 0xee, 0x50, 0xbd, 0x10, 0xa5, 0x20, 0x24, 0x90, 0xee, 0x52, 0xf3, 0x53, 0xef, 0x52, 0x9f,
	0x41, 0x5b, 0xf9, 0x5d, 0xd5, 0xcf, 0x2a, 0xd5, 0x56, 0xbe, 0x94, 0xd8, 0xb8, 0x44, 0x97, 0xaa,
	0xa5, 0xdb, 0x90, 0x0b, 0x27, 0xb3, 0x0e, 0xcb, 0x9e, 0xb1, 0xe7, 0xfa, 0x35, 0x7b, 0xcf, 0xaa,
	0xf8, 0x46, 0xa3, 0xca, 0xcd, 0x55, 0x05, 0xcc, 0x76, 0xb4, 0x74, 0xe9, 0x63, 0xe2, 0x51, 0x66,
	0x15, 0x8a, 0xdc, 0xc0, 0x8c, 0xfb, 0x3c, 0x4b, 0x91, 0x5c, 0x18, 0x90, 0xbb, 0x3e, 0x4b, 0x63,
	0x04, 0x10, 0xc5, 0xcf, 0x24, 0x77, 0x26, 0x19, 0xf5, 0x33, 0x29, 0xbb, 0x4f, 0xcb, 0xe8, 0x8b,
	0x30, 0xd7, 0x34, 0x5c, 0x4f, 0x9b, 0x2b, 0x99, 0x90, 0x43, 0x57, 0x17, 0xed, 0xfe, 0xa3, 0x20,
	0x61, 0x7f, 0x9c, 0x9b, 0xb6, 0x3f, 0x86, 0x86, 0xda, 0xa5, 0x5f, 0xc8, 0xc1, 0x45, 0x7e, 0x1f,
	0x41, 0x35, 0xb8, 0x8d, 0xce, 0xe7, 0x4e, 0x47, 0x63, 0xb2, 0xa3, 0xd1, 0x58, 0x4b, 0xd1, 0xd5,
	0xf0, 0x08, 0x56, 0xda, 0x82, 0x84, 0xf7, 0x33, 0x7d, 0x5f, 0x50, 0x6e, 0xa9, 0xa6, 0xe6, 0x7a,
	0x2b, 0xfc, 0xe6, 0x26, 0x90, 0xed, 0x08, 0x44, 0x7f, 0x03, 0xd6, 0x64, 0x53, 0x4c, 0x74, 0x05,
	0x12, 0x3e, 0x49, 0xe9, 0x92, 0x3d, 0x26, 0xa2, 0xa6, 0xc7, 0x22, 0x89, 0x18, 0xbd, 0xcc, 0xc7,
	0x8c, 0x5e, 0x14, 0x6b, 0x84, 0x85, 0x88, 0x35, 0xc2, 0xbb, 0x90, 0x67, 0x48, 0x49, 0xe3, 0xf9,
	0xd2, 0xe4, 0xd6, 0x52, 0xc5, 0xf7, 0xc7, 0xe2, 0xb7, 0x64, 0xce, 0xb0, 0xa8, 0x98, 0x33, 0xb4,
	0x54, 0xe5, 0x7a, 0xca, 0xb8, 0xde, 0x7c, 0x8a, 0x6e, 0x4c, 0xd6, 0xb3, 0x8f, 0xaa, 0xa4, 0x41,
	0xa2, 0xee, 0x70, 0xfb, 0xe4, 0x64, 0x38, 0xf8, 0x30, 0x50, 0x1c, 0x4f, 0x14, 0x38, 0x30, 0xd9,
	0xdc, 0xa5, 0x90, 0x6c, 0xee, 0xf2, 0x10, 0xe3, 0xd2, 0x28, 0x6b, 0x92, 0x82, 0x90, 0x20, 0xb4,
	0x59, 0x58, 0x56, 0x6c, 0x16, 0xb6, 0x20, 0xdb, 0x3e, 0xed, 0x74, 0x09, 0x1f, 0xa0, 0xae, 0x25,
	0xf8, 0xa7, 0x7e, 0x0f, 0x0a, 0xf8, 0xd3, 0xa7, 0xc1, 0x36, 0xf1, 0x9e, 0x6f, 0xf9, 0xf6, 0x5b,
	0x4f, 0xd1, 0x2f, 0x24, 0xb5, 0x83, 0x89, 0x9d, 0x7c, 0x3b, 0xfc, 0xd0, 0xbf, 0x1b, 0x96, 0x86,
	0xc1, 0xe7, 0x82, 0xc3, 0x31, 0x57, 0xc3, 0xa2, 0x61, 0xa4, 0xde, 0x3e, 0x7b, 0xd6, 0x0e, 0x26,
	0xa7, 0x0a, 0x5b, 0x4e, 0x61, 0x28, 0x7d, 0xc9, 0x8c, 0x4d, 0x9f, 0xca, 0xd8, 0x9e, 0xc1, 0xa1,
	0x5a, 0xd4, 0x72, 0x69, 0x3d, 0x6e, 0xb9, 0x84, 0xfd, 0x8c, 0x8d, 0xda, 0xe0, 0xfd, 0x8c, 0xd5,
	0xba, 0x1a, 0xf6, 0x26, 0x8e, 0xc2, 0x26, 0xdd, 0x8c, 0x58, 0xb7, 0x10, 0x50, 0xe9, 0x00, 0xb4,
	0xe8, 0x8a, 0x54, 0xcc, 0x7d, 0x0a, 0xb0, 0x68, 0x34, 0x9b, 0x8e, 0x7d, 0x20, 0x2c, 0xf6, 0x84,
	0xf1, 0x4f, 0x86, 0x10, 0x32, 0x7d, 0x56, 0x74, 0x58, 0x6b, 0xde, 0xab, 0x98, 0x4d, 0x54, 0xfb,
	0x9d, 0x3f, 0x9b, 0x35, 0xc6, 0xc7, 0x21, 0x2f, 0x8d, 0x17, 0x61, 0x86, 0xa1, 0x1d, 0x7e, 0x1e,
	0xb2, 0xac, 0x60, 0x6a, 0x9d, 0xe4, 0x98, 0xef, 0x99, 0x15, 0x92, 0xe8, 0x3c, 0x14, 0xe4, 0x91,
	0x50, 0x94, 0x86, 0x4b, 0x7f, 0x3d, 0x07, 0xeb, 0x74, 0xf4, 0x42, 0xbb, 0xe0, 0x64, 0x6e, 0xe6,
	0x27, 0x99, 0x71, 0x53, 0x6e, 0xa6, 0x1c, 0xeb, 0x13, 0x73, 0x3b, 0x8b, 0x21, 0x77, 0x84, 0x75,
	0x64, 0x9e, 0x9a, 0x75, 0x7c, 0x02, 0xb6, 0x58, 0x06, 0x42, 0x15, 0x2d, 0xe2, 0x00, 0x6e, 0x9d,
	0xe2, 0xb9, 0x22, 0x9a, 0x1d, 0x46, 0x05, 0xe3, 0x25, 0x7f, 0xd4, 0x0f, 0x99, 0x1e, 0xab, 0x8e,
	0xf7, 0x51, 0x7f, 0x7a, 0xe8, 0xaf, 0x08, 0xc7, 0xcc, 0x4e, 0xe7, 0x98, 0x8b, 0x11, 0x8e, 0x79,
	0x15, 0x0a, 0x87, 0xbd, 0xc1, 0x88, 0x88, 0xb7, 0x68, 0x44, 0x4f, 0xd5, 0x18, 0xf2, 0x0c, 0x86,
	0x16, 0xf4, 0xcf, 0xbf, 0xd9, 0x47, 0xd9, 0xdc, 0x72, 0x9c, 0xcd, 0x51, 0x0f, 0xda, 0x87, 0xc1,
	0x68, 0x24, 0xd4, 0x68, 0x99, 0xc5, 0x51, 0x08, 0x16, 0x86, 0x1d, 0x3c, 0xe0, 0x96, 0xec, 0x5d,
	0x51, 0x30, 0xc0, 0x4e, 0x12, 0xb3, 0x5b, 0x89, 0x31, 0xbb, 0x97, 0xa0, 0xd8, 0x6b, 0x8f, 0xc6,
	0x7e, 0x30, 0x1c, 0x0e, 0x98, 0xa9, 0xb3, 0x8e, 0xb7, 0xf3, 0x4b, 0x04, 0x6c, 0x12, 0x28, 0x0b,
	0x4b, 0xcf, 0x77, 0x84, 0xb5, 0xf8, 0xe5, 0x71, 0xf2, 0x6c, 0xa3, 0x2b, 0x49, 0xec, 0x1d, 0x9f,
	0x82, 0x39, 0xd4, 0x32, 0x59, 0x8f, 0xfb, 0x9b, 0x4a, 0x4e, 0x8f, 0xba, 0x26, 0x98, 0x46, 0xff,
	0x2c, 0x97, 0xf6, 0x47, 0x47, 0xed, 0x61, 0x07, 0xef, 0xb1, 0x91, 0x69, 0x44, 0x5e, 0x27, 0x27,
	0xcc, 0x7a, 0xf4, 0x6f, 0x4d, 0x12, 0xd6, 0xba, 0xa3, 0x31, 0x3b, 0x01, 0x88, 0xef, 0xed, 0x2f,
	0xa5, 0x60, 0x21, 0xe6, 0x7d, 0x20, 0xa5, 0x6c, 0x7b, 0x17, 0x01, 0x1e, 0x06, 0x42, 0xed, 0x96,
	0xd9, 0x8a, 0x3f, 0x0c, 0xb8, 0xaa, 0xed, 0x45, 0x80, 0xc7, 0x47, 0x22, 0x20, 0x20, 0xbb, 0x0c,
	0x7b, 0x7c, 0xc4, 0x63, 0x01, 0xa2, 0x4b, 0xe0, 0xc0, 0xef, 0x04, 0x9d, 0x53, 0x6a, 0x55, 0xc7,
	0x08, 0xe9, 0x6a, 0xd0, 0x4f, 0x86, 0x41, 0x95, 0xa3, 0x68, 0x8a, 0xed, 0xef, 0x84, 0x39, 0xd4,
	0xab, 0x79, 0x13, 0x36, 0xd0, 0xff, 0x85, 0x58, 0xf0, 0x87, 0x83, 0xe3, 0x07, 0xdd, 0x3e, 0xd3,
	0xe4, 0x5a, 0x74, 0xd6, 0xba, 0xa3, 0xb0, 0xb1, 0x15, 0x86, 0xdb, 0x7e, 0x09, 0x96, 0xd5, 0x26,
	0x63, 0xfc, 0x40, 0xf2, 0x81, 0x67, 0xc3, 0x25, 0x87, 0x7e, 0x94, 0xee, 0x25, 0xb8, 0x21, 0x90,
	0x99, 0xe8, 0x32, 0x40, 0xd3, 0xb1, 0x2b, 0xa6, 0xeb, 0x52, 0xd1, 0x4e, 0xe1, 0x95, 0x19, 0x95,
	0xab, 0xce, 0x49, 0x5c, 0x75, 0xbe, 0xf4, 0x53, 0x39, 0x38, 0xaf, 0xb2, 0x09, 0x65, 0xb1, 0x27,
	0x70, 0xb5, 0xa2, 0x60, 0x16, 0x0a, 0x4f, 0x9b, 0xb2, 0xcf, 0x29, 0x39, 0xde, 0xe2, 0x5f, 0x3c,
	0x6c, 0xe6, 0x63, 0xe5, 0xfb, 0xf9, 0xb9, 0x5a, 0x8c, 0x39, 0xcd, 0x4d, 0x67, 0x4e, 0xf3, 0x53,
	0x99, 0xd3, 0xc2, 0x74, 0xe6, 0x94, 0x9d, 0x68, 0x5c, 0xba, 0x88, 0x4b, 0x93, 0x4f, 0xcb, 0xdf,
	0x37, 0xc1, 0xff, 0xec, 0x5b, 0x67, 0xed, 0xb5, 0xa9, 0xbe, 0x69, 0xdf, 0x80, 0xb5, 0xf6, 0xe1,
	0xf8, 0xb4, 0xdd, 0xf3, 0x4f, 0xda, 0x4f, 0x06, 0xa7, 0x62, 0x7e, 0x53, 0xe1, 0x4c, 0xa7, 0xb8,
	0x26, 0xa2, 0x8c, 0x44, 0x57, 0x46, 0x71, 0x3b, 0xe1, 0x04, 0xee, 0x56, 0x48, 0xe4, 0x6e, 0x33,
	0x59, 0x69, 0x9c, 0xfd, 0x2d, 0x9f, 0x81, 0xfd, 0x15, 0xcf, 0xc2, 0xfe, 0xb4, 0x24, 0xf6, 0xe7,
	0x42, 0x9e, 0xf5, 0x02, 0xde, 0xcc, 0xae, 0xc4, 0x77, 0xdc, 0x19, 0xfd, 0x3c, 0x38, 0x1d, 0xe3,
	0x95, 0x2c, 0x9c, 0x88, 0xdf, 0x64, 0xd0, 0x1f, 0xb4, 0xfb, 0x1f, 0x50, 0x75, 0x20, 0x2a, 0x81,
	0x2d, 0x12, 0x00, 0x57, 0x6a, 0x43, 0x64, 0xb7, 0xc3, 0xc4, 0xaf, 0x05, 0xf2, 0x69, 0xe1, 0x6d,
	0x26, 0x22, 0xda, 0x87, 0x34, 0x02, 0x67, 0x7f, 0x80, 0x2c, 0x39, 0xe7, 0x2c, 0x11, 0xb0, 0x41,
	0xa1, 0x8d, 0x01, 0xbd, 0x4f, 0x95, 0xe9, 0xda, 0xcc, 0xd8, 0x23, 0xe7, 0x14, 0x65, 0xca, 0x36,
	0x1d, 0x98, 0xa8, 0x7b, 0xd0, 0x8d, 0x24, 0xf7, 0xa0, 0x92, 0x6c, 0xbc, 0xa9, 0xc8, 0xc6, 0xea,
	0xfa, 0x18, 0xf5, 0xd1, 0xaa, 0x23, 0x27, 0xad, 0x0f, 0xb7, 0x5f, 0x3a, 0x80, 0x65, 0x75, 0x99,
	0x7e, 0x8b, 0xb8, 0xcd, 0x75, 0xa1, 0x49, 0xcd, 0x66, 0xee, 0x22, 0xcc, 0xed, 0x18, 0x8d, 0x3b,
	0x54, 0x02, 0xbb, 0x6b, 0xd4, 0x6a, 0x26, 0x91, 0xc0, 0x6e, 0x01, 0x84, 0xe3, 0x40, 0x30, 0xad,
	0xc6, 0x1d, 0x2a, 0xb4, 0x2d, 0xc2, 0x9c, 0xd1, 0xf2, 0x6c, 0x4a, 0x5f, 0x37, 0x1a, 0x2d, 0xa3,
	0xa6, 0xa5, 0x4b, 0xbf, 0x9e, 0x83, 0x65, 0x93, 0x1a, 0x09, 0xb0, 0xdb, 0x98, 0x24, 0xa7, 0xb8,
	0x42, 0xb6, 0x49, 0xab, 0x2e, 0x39, 0xa2, 0x4a, 0x52, 0x99, 0xa7, 0xb0, 0x57, 0xf8, 0x2e, 0x58,
	0xe6, 0xf6, 0x0a, 0x8a, 0xa3, 0x1e, 0xe5, 0x7e, 0x8c, 0x55, 0x8d, 0x1b, 0x63, 0x06, 0xf2, 0xa7,
	0x6e, 0x41, 0xe1, 0x70, 0xd0, 0xeb, 0x91, 0x73, 0xc3, 0xc3, 0xe1, 0xe0, 0x98, 0x59, 0xda, 0xbe,
	0x94, 0x90, 0x9e, 0x35, 0xed, 0x56, 0x85, 0x92, 0xef, 0x0e, 0x07, 0xc7, 0x4e, 0xfe, 0x30, 0xfc,
	0xa0, 0x2b, 0x8d, 0x66, 0xa5, 0x78, 0xef, 0x59, 0x62, 0x50, 0x61, 0xa7, 0xb2, 0x70, 0xd2, 0x7e,
	0xe2, 0x8f, 0x07, 0xec, 0xb4, 0x79, 0x65, 0x4a, 0x59, 0xcd, 0xf6, 0x13, 0x6f, 0xe0, 0xcc, 0x9f,
	0x90, 0x3f, 0xd4, 0x8a, 0xf2, 0x89, 0x6a, 0x5f, 0x9b, 0x3b, 0x69, 0x3f, 0x61, 0xf9, 0x5e, 0x87,
	0xe5, 0x4e, 0x70, 0x32, 0x18, 0x75, 0x45, 0xf1, 0xec, 0x12, 0x87, 0x41, 0x19, 0x99, 0xac, 0x6e,
	0x09, 0x11, 0x75, 0x4b, 0x9d, 0x09, 0x1e, 0x79, 0xf6, 0x0a, 0x4b, 0x76, 0xd6, 0x77, 0x60, 0x89,
	0xb9, 0xf7, 0x65, 0xe6, 0x40, 0x85, 0x78, 0x1c, 0x60, 0xea, 0x78, 0x84, 0x59, 0x03, 0x15, 0x0e,
	0xa5, 0x2f, 0xfd, 0x1d, 0x11, 0x09, 0xf6, 0x64, 0x38, 0x38, 0x19, 0x8c, 0x82, 0x21, 0x73, 0x69,
	0xb0, 0x16, 0x09, 0x26, 0x85, 0x38, 0x1e, 0x1f, 0x96, 0x7f, 0xeb, 0xdf, 0x25, 0x4a, 0x67, 0x07,
	0xa0, 0xe5, 0xb8, 0xee, 0xaf, 0xdb, 0xbc, 0x47, 0x2b, 0xc0, 0x8f, 0x6e, 0x87, 0xd2, 0x17, 0x99,
	0x5e, 0x2c, 0x87, 0xc3, 0x60, 0x38, 0x1e, 0x6d, 0x15, 0xe3, 0x8e, 0x1f, 0x2b, 0xc1, 0x70, 0xdc,
	0x7d, 0xd8, 0x3d, 0x6c, 0x8f, 0x03, 0x87, 0xf9, 0x32, 0x26, 0xa0, 0x11, 0x8d, 0x51, 0xcf, 0x4a,
	0xc7, 0xa5, 0xac, 0xf1, 0x18, 0xf5, 0xb4, 0x00, 0x5c, 0xd0, 0x11, 0x5e, 0xbe, 0x92, 0x24, 0xed,
	0x32, 0x15, 0x0d, 0xc9, 0x2d, 0x37, 0x50, 0x90, 0x20, 0x18, 0x0e, 0xc5, 0xdd, 0x1b, 0x3b, 0x43,
	0x52, 0x10, 0x27, 0x38, 0xe9, 0x1e, 0x7e, 0x70, 0x7a, 0xa2, 0x9c, 0x21, 0x29, 0x28, 0xf9, 0x38,
	0xbf, 0x3e, 0xc9, 0x7b, 0x45, 0x18, 0xdd, 0x76, 0x63, 0x56, 0x74, 0xdb, 0xcd, 0x98, 0x27, 0xe7,
	0xc8, 0x66, 0xb3, 0x15, 0xdb, 0x6c, 0x3e, 0x09, 0x5b, 0xc2, 0x2e, 0x96, 0xd5, 0xb8, 0x73, 0x3a,
	0x44, 0x1d, 0x5a, 0x66, 0x93, 0xb6, 0xc1, 0xf1, 0x4d, 0x44, 0x57, 0x19, 0x56, 0xff, 0x4e, 0xd8,
	0x16, 0x29, 0x85, 0xbe, 0x94, 0x48, 0x4b, 0x0d, 0xd5, 0x44, 0xde, 0xfc, 0x71, 0x82, 0xa7, 0x2e,
	0x19, 0x90, 0x97, 0x96, 0x25, 0x61, 0x81, 0xbb, 0x8e, 0x5d, 0x97, 0x3c, 0x7f, 0xe3, 0xa7, 0x6b,
	0x36, 0xaa, 0xa6, 0x43, 0xef, 0xed, 0x10, 0xe0, 0x98, 0x15, 0xab, 0x69, 0x99, 0x0d, 0xc2, 0xf4,
	0xae, 0xc3, 0x3c, 0xae, 0x36, 0x72, 0xde, 0xf4, 0x6c, 0xd9, 0x69, 0xb8, 0xed, 0xd7, 0x4d, 0xa7,
	0xb2, 0x6f, 0x34, 0x3c, 0x2d, 0x55, 0xfa, 0x45, 0x1d, 0x8a, 0x6c, 0x91, 0xf2, 0x5a, 0x24, 0x29,
	0x61, 0x9f, 0xb4, 0x0f, 0x3f, 0x68, 0x3f, 0x92, 0x7c, 0x80, 0xe7, 0x18, 0x24, 0xe6, 0x15, 0x3d,
	0x13, 0xf5, 0x8a, 0x3e, 0xd5, 0xa9, 0xca, 0x73, 0xb8, 0x7a, 0xd6, 0xdf, 0x83, 0x62, 0xa8, 0x89,
	0x26, 0x7b, 0x5e, 0xb9, 0x9a, 0xc0, 0x81, 0xc4, 0xbb, 0x23, 0x8f, 0xae, 0xae, 0x7c, 0x4b, 0x33,
	0x12, 0x37, 0x4b, 0xaa, 0xb7, 0xcd, 0x66, 0x24, 0xee, 0x93, 0x9f, 0x82, 0x02, 0x23, 0xa0, 0xcb,
	0x2e, 0x37, 0x63, 0xd9, 0x51, 0x62, 0xb1, 0xec, 0x58, 0x5a, 0xc5, 0x23, 0x06, 0xcb, 0x90, 0x2d,
	0xbb, 0x6b, 0xb0, 0x24, 0x5a, 0x23, 0xd9, 0x96, 0x16, 0x38, 0x10, 0x6b, 0x51, 0x97, 0x88, 0x24,
	0x77, 0x2a, 0x37, 0xa6, 0x34, 0xf8, 0x16, 0xff, 0xc1, 0x82, 0x9a, 0x4b, 0x5f, 0xfa, 0x67, 0x40,
	0xf4, 0x03, 0x6b, 0xd6, 0xf2, 0xf4, 0x66, 0x89, 0xd2, 0x69, 0xc3, 0x5e, 0x96, 0x46, 0x80, 0x35,
	0x8d, 0xde, 0x8f, 0x89, 0x6c, 0x59, 0xe3, 0x5c, 0x85, 0x50, 0xba, 0xce, 0x2a, 0x4f, 0xab, 0x39,
	0xf7, 0x20, 0xc5, 0xf8, 0xa0, 0x94, 0x29, 0x72, 0xc2, 0x70, 0xfd, 0x63, 0x7f, 0x51, 0x51, 0x88,
	0xad, 0x7f, 0x3e, 0x66, 0x8c, 0x80, 0x36, 0x6e, 0x7d, 0xc6, 0x98, 0x51, 0x62, 0x31, 0x66, 0x2c,
	0x2d, 0x6b, 0xd8, 0x06, 0xb7, 0x82, 0x24, 0x40, 0xd6, 0xac, 0xba, 0x44, 0x84, 0x8d, 0xda, 0x9a,
	0x3d, 0x1c, 0x0e, 0xcb, 0x80, 0xdf, 0xca, 0x85, 0x5f, 0xfa, 0xab, 0xa0, 0x8b, 0x27, 0xf0, 0xd1,
	0xe9, 0xf0, 0x11, 0x55, 0x7e, 0x60, 0xb6, 0xaf, 0x1c, 0xe3, 0x12, 0x04, 0xd3, 0x3e, 0x11, 0xd4,
	0xdd, 0xfe, 0xe1, 0x40, 0xd8, 0xbf, 0x2e, 0x73, 0xb0, 0x85, 0x50, 0x65, 0x87, 0x3c, 0x1f, 0xd9,
	0x21, 0xf7, 0x20, 0x3f, 0xe8, 0x1f, 0x0d, 0x7a, 0x1d, 0x6a, 0x07, 0x72, 0x61, 0xa2, 0xb4, 0x20,
	0xea, 0x6f, 0xf7, 0xf7, 0x07, 0xbd, 0x0e, 0x9e, 0xd0, 0x81, 0x26, 0xdd, 0xa5, 0xdb, 0x6a, 0x6c,
	0x5f, 0xbc, 0xf8, 0x14, 0xfb, 0x62, 0x6c, 0x57, 0xbe, 0xf4, 0x54, 0xbb, 0x72, 0x6c, 0x5b, 0xbd,
	0xfc, 0xb4, 0xdb, 0x6a, 0x64, 0xd7, 0xbb, 0x92, 0xb8, 0xeb, 0x49, 0x9b, 0xda, 0xd5, 0x59, 0x9b,
	0x5a, 0x69, 0xf6, 0xa6, 0x76, 0x2d, 0x61, 0x53, 0x0b, 0x43, 0xd2, 0x77, 0x82, 0x76, 0xa7, 0xd7,
	0xed, 0x07, 0xcc, 0x29, 0x04, 0x0b, 0x49, 0x5f, 0x65, 0xd0, 0xe8, 0xee, 0x77, 0x7d, 0xd6, 0xee,
	0xf7, 0xd2, 0xac, 0xdd, 0xef, 0xe5, 0x04, 0x87, 0x3a, 0x85, 0x47, 0xc1, 0xc0, 0x1f, 0x0f, 0xdb,
	0x87, 0x1f, 0x74, 0xfb, 0x8f, 0xd0, 0x10, 0x38, 0xe2, 0xce, 0x33, 0x3a, 0x3b, 0xf6, 0x82, 0x81,
	0xc7, 0xc8, 0x9d, 0xfc, 0xa3, 0xf0, 0x63, 0xfb, 0xeb, 0x29, 0xc8, 0x4b, 0x48, 0xfd, 0x16, 0xb0,
	0xbe, 0xf3, 0x1f, 0x05, 0x3c, 0x8a, 0x68, 0x51, 0xce, 0x79, 0x2f, 0x18, 0x38, 0x39, 0x4a, 0xb2,
	0x17, 0x0c, 0x08, 0x3d, 0xeb, 0x5d, 0x42, 0x9f, 0x9e, 0x40, 0x4f, 0x49, 0x08, 0xfd, 0x6d, 0x10,
	0xfd, 0x8a, 0x29, 0x32, 0xc9, 0x29, 0xf2, 0x9c, 0x88, 0x95, 0x41, 0x75, 0x3d, 0x31, 0xc5, 0xdc,
	0xa4, 0x3a, 0x21, 0xc9, 0x5e, 0x30, 0x28, 0xbd, 0x04, 0x10, 0xae, 0x06, 0xd5, 0x19, 0x04, 0xbe,
	0x93, 0xf9, 0xfb, 0x76, 0xad, 0xaa, 0xa5, 0x4a, 0xb7, 0xa1, 0x20, 0x33, 0x61, 0xf5, 0xde, 0x38,
	0x07, 0xf3, 0x3b, 0xad, 0xfb, 0xb8, 0x8d, 0x03, 0x2c, 0xd8, 0xde, 0xbe, 0xe9, 0xb8, 0x5a, 0xba,
	0xf4, 0xbf, 0xa5, 0x60, 0x59, 0xe5, 0x7f, 0xfa, 0x3a, 0xac, 0x54, 0xcd, 0x9a, 0x75, 0x60, 0x3a,
	0x66, 0x55, 0xf2, 0x15, 0x71, 0x1e, 0x36, 0x43, 0xf0, 0x81, 0xb9, 0x6f, 0x55, 0x6a, 0xa6, 0xbf,
	0xe3, 0xd8, 0x77, 0x4c, 0x2d, 0xa5, 0x5f, 0x82, 0xed, 0x10, 0xe9, 0x39, 0xc6, 0xee, 0xae, 0x55,
	0xf1, 0x8d, 0x4a, 0xc5, 0xaa, 0xa2, 0x94, 0xa0, 0x5f, 0x84, 0x73, 0x52, 0x62, 0xab, 0xe2, 0x59,
	0x75, 0xdf, 0xde, 0xf5, 0x2b, 0x8e, 0x55, 0x37, 0xb5, 0x8c, 0x7e, 0x01, 0xb6, 0x92, 0xd0, 0x8e,
	0x65, 0x7b, 0xda, 0x9c, 0x7e, 0x03, 0x5e, 0x4c, 0xc2, 0x36, 0x0c, 0xaf, 0xe5, 0x18, 0x35, 0x7c,
	0x58, 0x74, 0x3d, 0xd3, 0xd1, 0xe6, 0xf5, 0x35, 0xd0, 0x42, 0x4a, 0xd6, 0xc6, 0x85, 0xd2, 0x2f,
	0x63, 0xf4, 0x61, 0x89, 0x01, 0xae, 0x81, 0xc6, 0x7d, 0xe8, 0x49, 0x0d, 0xdc, 0x86, 0x0d, 0x01,
	0x8d, 0xb6, 0xef, 0x22, 0x9c, 0x13, 0xb8, 0x84, 0xe6, 0x5d, 0x80, 0xad, 0x30, 0x69, 0xac, 0x75,
	0xe7, 0x61, 0x33, 0x01, 0xcb, 0x1a, 0xf7, 0x32, 0x5c, 0x4b, 0x40, 0x26, 0xb4, 0x6d, 0x15, 0x8a,
	0x82, 0x50, 0x34, 0xed, 0x97, 0xe6, 0xc5, 0x11, 0xb2, 0x49, 0x05, 0xa5, 0x24, 0xa9, 0x4a, 0x12,
	0x9b, 0xd2, 0xb3, 0x82, 0xc9, 0x3c, 0xcd, 0x31, 0xf2, 0x13, 0xb0, 0x28, 0x9c, 0x3e, 0xcd, 0xc5,
	0x39, 0x21, 0xab, 0x91, 0x50, 0xb1, 0x10, 0xc4, 0xfa, 0x1e, 0x2c, 0x73, 0x49, 0x4f, 0x89, 0xca,
	0x92, 0x74, 0xa6, 0x63, 0xb9, 0x84, 0xee, 0xeb, 0xa4, 0x4f, 0x7d, 0x07, 0x96, 0xd9, 0x72, 0x6d,
	0x77, 0x3a, 0x84, 0x9a, 0x99, 0x94, 0xa8, 0x46, 0x8e, 0x6c, 0x51, 0x18, 0x94, 0xc4, 0x61, 0x52,
	0x12, 0xfb, 0xd4, 0x77, 0x41, 0x13, 0x42, 0x03, 0xcf, 0x25, 0x3b, 0x3b, 0x17, 0x21, 0x69, 0xf0,
	0x7c, 0x5e, 0x91, 0x3c, 0x8e, 0x08, 0x25, 0x77, 0x7a, 0xdc, 0x14, 0x05, 0x08, 0x0d, 0xf7, 0x0d,
	0x58, 0x60, 0xea, 0xda, 0x39, 0x6a, 0x54, 0x4d, 0xbf, 0x08, 0xbc, 0x17, 0xf4, 0x1f, 0x8d, 0x8f,
	0xb8, 0x13, 0x27, 0xfa, 0xa5, 0xaf, 0xc1, 0xfc, 0xe3, 0x6e, 0x67, 0x7c, 0xc4, 0xde, 0x0d, 0xe8,
	0x07, 0xa1, 0x3e, 0xa2, 0xb9, 0x14, 0x28, 0xf5, 0x91, 0xc8, 0x85, 0x89, 0x13, 0x4b, 0xca, 0x25,
	0x4a, 0x64, 0xf7, 0x59, 0x8e, 0xed, 0x3e, 0xb1, 0xbd, 0xa3, 0x38, 0xfb, 0x40, 0xa4, 0xcd, 0xda,
	0x12, 0x56, 0x66, 0x6d, 0x09, 0x7a, 0xcc, 0xa0, 0xef, 0x37, 0xb2, 0xb0, 0xc2, 0xc6, 0x9f, 0xaa,
	0x6e, 0x25, 0x3a, 0x6e, 0x9c, 0x31, 0xb5, 0xa7, 0x46, 0x03, 0x7b, 0x8e, 0x60, 0x29, 0x7a, 0x13,
	0x56, 0xda, 0xa2, 0x56, 0xea, 0x0c, 0xbe, 0x96, 0x30, 0x83, 0xc3, 0x16, 0x88, 0xa7, 0xfd, 0x08,
	0x84, 0xdd, 0x51, 0x70, 0xf7, 0x5e, 0x0b, 0xe2, 0x8e, 0x82, 0xb9, 0xf6, 0x8a, 0xdf, 0x51, 0x64,
	0x93, 0xee, 0x28, 0x9c, 0x90, 0x4c, 0xd1, 0x65, 0x79, 0x65, 0x6a, 0xa5, 0x6e, 0x55, 0x69, 0x1a,
	0xbe, 0xc2, 0x3a, 0xf2, 0x67, 0x5c, 0x62, 0xca, 0x3d, 0x9f, 0xc4, 0x04, 0xcf, 0x7b, 0x11, 0x91,
	0x7f, 0x9e, 0x8b, 0x88, 0xc2, 0xec, 0x8b, 0x88, 0xa5, 0x59, 0x17, 0x11, 0xcb, 0xb1, 0x8b, 0x88,
	0xb3, 0xae, 0x1a, 0x79, 0x51, 0x68, 0xb3, 0x16, 0xc5, 0x4a, 0x4c, 0x4e, 0x7a, 0x03, 0xd6, 0xa2,
	0xb7, 0x04, 0xd2, 0xf2, 0xd1, 0xd5, 0x1b, 0x02, 0x4c, 0x91, 0x20, 0x2d, 0x77, 0xce, 0x2e, 0x2d,
	0x97, 0x02, 0x58, 0x52, 0xe6, 0x06, 0xd9, 0x83, 0xaa, 0x66, 0xd3, 0x76, 0x2d, 0xcf, 0x57, 0x1c,
	0x52, 0x71, 0xa0, 0xb8, 0x6b, 0x45, 0x19, 0x82, 0x13, 0xe2, 0x5f, 0xee, 0xf2, 0x89, 0x83, 0x1d,
	0x73, 0xb7, 0x85, 0x11, 0x62, 0x33, 0xa5, 0x7f, 0x3b, 0x05, 0x1b, 0x11, 0x01, 0x8f, 0x6f, 0x66,
	0x6f, 0x42, 0x96, 0x31, 0x7c, 0x26, 0xbb, 0x6d, 0x4f, 0xde, 0x21, 0x1c, 0x4e, 0x4a, 0xf6, 0x25,
	0xce, 0x70, 0x99, 0x08, 0x77, 0x7e, 0x8a, 0x30, 0xe9, 0x08, 0xe2, 0xd2, 0x8f, 0x2d, 0x86, 0x6c,
	0xe7, 0xb4, 0xd3, 0x9d, 0xf0, 0x44, 0x7e, 0x19, 0xf2, 0x82, 0xd1, 0x87, 0xfe, 0x62, 0x39, 0xe8,
	0xff, 0xc3, 0x9b, 0x8a, 0x5d, 0x00, 0xaa, 0xd7, 0x20, 0xf9, 0xf3, 0x4c, 0x12, 0xa3, 0xc3, 0xb6,
	0x51, 0xbd, 0x10, 0xcc, 0x29, 0xd7, 0xe6, 0x3f, 0xf5, 0x1a, 0x14, 0x44, 0x10, 0x9f, 0xd0, 0x71,
	0xc0, 0xcd, 0xe9, 0x39, 0xf1, 0x30, 0x3e, 0x84, 0x87, 0xe4, 0x07, 0xe1, 0x87, 0x5e, 0x86, 0x05,
	0xc6, 0x3a, 0x28, 0x37, 0x52, 0xe2, 0x80, 0x32, 0xa6, 0xc1, 0x28, 0xf4, 0x8f, 0x0b, 0x8d, 0x8d,
	0xdc, 0x6c, 0x3e, 0xc1, 0xd5, 0x39, 0x5e, 0x83, 0x79, 0xca, 0x1a, 0x60, 0x3a, 0x6b, 0xa0, 0x54,
	0xd2, 0xe6, 0x98, 0x57, 0x36, 0xc7, 0x37, 0x60, 0x51, 0xac, 0x92, 0xc2, 0x94, 0x55, 0x22, 0xa8,
	0x64, 0xf5, 0x96, 0x25, 0x55, 0xbd, 0xe5, 0x93, 0x40, 0xb5, 0x49, 0xce, 0x76, 0xdd, 0x41, 0x47,
	0x8d, 0xb2, 0xac, 0xa8, 0x6e, 0x4a, 0x31, 0xa6, 0x9b, 0x22, 0xab, 0x09, 0x69, 0xaa, 0x9a, 0x50,
	0x8c, 0x59, 0xaf, 0x3c, 0x1f, 0xb3, 0xd6, 0x9f, 0xf3, 0x78, 0x1b, 0x57, 0xeb, 0x21, 0xcd, 0xa3,
	0x0a, 0x55, 0xf2, 0x9d, 0x6c, 0x9e, 0xc1, 0x92, 0x18, 0xe5, 0xfa, 0x2c, 0x46, 0xb9, 0x11, 0x93,
	0x1e, 0x6e, 0x40, 0x4e, 0xcc, 0x6b, 0x74, 0x9f, 0x8d, 0x69, 0x83, 0x0e, 0xf5, 0x41, 0x47, 0x8f,
	0x02, 0xa8, 0xbc, 0x5e, 0x7a, 0x9b, 0xf9, 0xf6, 0x49, 0xf2, 0xca, 0xad, 0xaa, 0xf8, 0xc8, 0x5e,
	0xb8, 0x33, 0xa5, 0xaf, 0xa7, 0x20, 0xcb, 0x96, 0x00, 0xe1, 0x51, 0x87, 0xf4, 0xdd, 0x61, 0x0a,
	0x8f, 0xe2, 0xea, 0xb6, 0x9c, 0x54, 0x7f, 0x97, 0x6f, 0x2a, 0x64, 0x0b, 0xe6, 0x86, 0x33, 0x17,
	0xa7, 0x6e, 0xd4, 0x8e, 0x9c, 0x42, 0xb7, 0x25, 0x71, 0x93, 0x31, 0x3e, 0x1e, 0x09, 0xa3, 0x34,
	0x85, 0xdb, 0x71, 0x66, 0x29, 0x44, 0x52, 0x06, 0x18, 0x95, 0x7e, 0xb1, 0x08, 0x45, 0xb7, 0x79,
	0x8f, 0xfb, 0x3a, 0x4a, 0x7c, 0x8f, 0xda, 0x84, 0xec, 0xe9, 0x48, 0x7e, 0x8e, 0x5a, 0x20, 0x9f,
	0x54, 0xbd, 0x45, 0xd1, 0xc6, 0xca, 0xc4, 0x9d, 0xd1, 0xbf, 0x27, 0xb8, 0x8a, 0xec, 0xdf, 0xf5,
	0xe5, 0xc8, 0xe4, 0x92, 0x8b, 0x67, 0x3c, 0x85, 0x4e, 0x55, 0xc6, 0x53, 0xe8, 0x4c, 0x7d, 0x1e,
	0x2e, 0x19, 0xae, 0xff, 0x85, 0xc8, 0xfa, 0x5f, 0x3b, 0xe9, 0xb5, 0xc7, 0x0f, 0x07, 0xc3, 0x63,
	0x5f, 0xb6, 0x0a, 0xca, 0x32, 0x2d, 0x0a, 0x86, 0x93, 0x0c, 0xac, 0xca, 0xb0, 0x22, 0xae, 0xc6,
	0xd0, 0xb2, 0x84, 0xdb, 0x85, 0xcf, 0x39, 0xe2, 0xce, 0x6c, 0xa7, 0x3d, 0x42, 0xda, 0xab, 0x11,
	0xc3, 0x30, 0xfa, 0xc8, 0xa4, 0xd8, 0x79, 0x5d, 0x8b, 0x9a, 0x71, 0xd3, 0x87, 0x70, 0xd5, 0x30,
	0xfb, 0x93, 0xb0, 0x15, 0x12, 0x31, 0x2b, 0x22, 0x2e, 0x14, 0xd2, 0xf7, 0xa7, 0x0d, 0x81, 0x67,
	0x26, 0x45, 0x4c, 0x3a, 0x7c, 0x1b, 0x36, 0x45, 0x0d, 0x78, 0xe4, 0x01, 0x96, 0xb0, 0xa0, 0xfa,
	0x79, 0x63, 0x6e, 0xf8, 0x59, 0xba, 0xab, 0x50, 0x38, 0x1c, 0x74, 0xfb, 0x23, 0x35, 0x5c, 0x4f,
	0x1e, 0x61, 0x8c, 0x24, 0x1e, 0xa7, 0x76, 0xf9, 0x29, 0xe3, 0xd4, 0x5e, 0x85, 0xc2, 0x78, 0x30,
	0x6e, 0xf7, 0x78, 0x21, 0x2c, 0xd8, 0x2b, 0xc2, 0x84, 0xbf, 0x39, 0x75, 0x57, 0xd2, 0xe2, 0x7a,
	0xda, 0x7c, 0xfe, 0x24, 0x6d, 0x43, 0xcf, 0xc9, 0x1b, 0xdf, 0x49, 0xe6, 0x8d, 0x09, 0xc9, 0x13,
	0x19, 0x63, 0x82, 0x24, 0xb6, 0xfa, 0x14, 0xf7, 0x96, 0xef, 0xc1, 0x0a, 0x6b, 0xbb, 0xa4, 0xcb,
	0xbd, 0x16, 0x57, 0x32, 0x11, 0x1d, 0x10, 0xea, 0x72, 0x17, 0x07, 0x2a, 0x40, 0xbc, 0x56, 0xae,
	0x4b, 0xaf, 0x95, 0x51, 0x21, 0x7b, 0xe3, 0x79, 0x84, 0xec, 0xcd, 0x04, 0x21, 0x9b, 0x1c, 0x70,
	0x7a, 0xed, 0x43, 0xe5, 0x05, 0x2c, 0x87, 0x90, 0xc4, 0x6d, 0xe1, 0x5c, 0x7c, 0x5b, 0x88, 0xc6,
	0xfa, 0xdd, 0x8e, 0xc7, 0xfa, 0x7d, 0x15, 0xf4, 0x41, 0x9f, 0x3f, 0x83, 0x09, 0x05, 0x90, 0xf3,
	0xf4, 0x08, 0x3e, 0xe8, 0x57, 0x05, 0x22, 0x59, 0x6a, 0xbf, 0x90, 0x20, 0xb5, 0xbf, 0x09, 0x1b,
	0xe1, 0xd3, 0x85, 0x42, 0x7d, 0x91, 0x9a, 0x59, 0x8b, 0x97, 0x0a, 0x39, 0xd5, 0x1b, 0xb0, 0x26,
	0xbd, 0x43, 0x84, 0x47, 0xe5, 0x4b, 0x94, 0x95, 0x84, 0x0f, 0x0c, 0x93, 0x8e, 0xcc, 0x97, 0x63,
	0x9b, 0xde, 0x6d, 0x58, 0x67, 0xd6, 0x31, 0x11, 0xb5, 0x14, 0x7a, 0x85, 0xbc, 0x4a, 0x91, 0x95,
	0xa8, 0x72, 0x8a, 0xbc, 0x1b, 0x5f, 0x9d, 0xa5, 0x50, 0x58, 0x3a, 0xf3, 0x91, 0xe3, 0xda, 0xc4,
	0x23, 0xc7, 0x9b, 0xb0, 0x11, 0x7f, 0x90, 0xc4, 0x34, 0xf4, 0x7e, 0x79, 0x2d, 0xfa, 0x18, 0x89,
	0xa9, 0xde, 0x92, 0x78, 0xd3, 0xc3, 0xf6, 0x30, 0xf0, 0x83, 0x8f, 0xc6, 0xc3, 0x36, 0x32, 0x41,
	0x7a, 0xe3, 0xbc, 0x26, 0x18, 0x65, 0x7b, 0x18, 0x98, 0x04, 0x49, 0x98, 0xa1, 0x01, 0x17, 0xd5,
	0x64, 0x9d, 0xee, 0x88, 0xea, 0xa2, 0x30, 0x36, 0x42, 0x6f, 0xa3, 0xb7, 0xe5, 0xc4, 0x55, 0x46,
	0xc2, 0xb8, 0x4a, 0x19, 0x56, 0xba, 0x23, 0x7f, 0x74, 0x78, 0x14, 0xa0, 0x95, 0x15, 0x8d, 0x00,
	0xf6, 0x32, 0x2a, 0xbf, 0x15, 0xbb, 0x23, 0x97, 0xc1, 0xe9, 0x41, 0xe0, 0x0d, 0x58, 0x13, 0x84,
	0x72, 0x6f, 0xdc, 0x60, 0x0a, 0xf8, 0x0c, 0x27, 0xf5, 0xc6, 0x6d, 0x58, 0xa7, 0x76, 0x08, 0xd2,
	0x7d, 0x81, 0xe4, 0x3c, 0x79, 0x15, 0x91, 0xe1, 0x0e, 0x8f, 0xd2, 0x4b, 0x9d, 0xcb, 0x24, 0x94,
	0xf1, 0x5c, 0x84, 0x73, 0xae, 0xdd, 0x72, 0x2a, 0xa6, 0xef, 0x36, 0xef, 0xf9, 0x56, 0xc3, 0xf5,
	0x8c, 0x86, 0xe7, 0xbb, 0xfb, 0x76, 0x13, 0x9d, 0xf1, 0x5e, 0x86, 0xf3, 0x09, 0x68, 0x76, 0x0b,
	0x7a, 0x5f, 0xcb, 0x94, 0x7e, 0x66, 0x1e, 0xf2, 0x6c, 0x8f, 0xc7, 0xc0, 0xfa, 0xff, 0x82, 0x54,
	0x4c, 0x9e, 0xf9, 0x6e, 0x30, 0xf1, 0x1a, 0x6d, 0x7e, 0xc2, 0x35, 0x5a, 0x6c, 0xcb, 0x5c, 0x78,
	0xca, 0x2d, 0x33, 0x3b, 0x75, 0xcb, 0x8c, 0x5f, 0x2f, 0x2e, 0x7e, 0x4b, 0xae, 0x17, 0x73, 0xcf,
	0x70, 0xbd, 0x18, 0xde, 0x18, 0xc2, 0x84, 0x1b, 0xc3, 0x7c, 0xf2, 0x8d, 0x61, 0x21, 0xf9, 0xc6,
	0x70, 0x69, 0xc2, 0x8d, 0xe1, 0xf2, 0xb4, 0x1b, 0x43, 0x6d, 0x16, 0x0b, 0x89, 0xdf, 0x5a, 0xe0,
	0xf6, 0x40, 0xc7, 0x56, 0xd6, 0x43, 0x2b, 0x70, 0x20, 0x3e, 0xa1, 0x62, 0x54, 0x61, 0x3e, 0x44,
	0x48, 0xb5, 0x4a, 0x35, 0xce, 0x04, 0x94, 0x90, 0x95, 0xbe, 0x92, 0x86, 0x45, 0xbe, 0xc5, 0xe9,
	0x6f, 0x45, 0xe5, 0xee, 0xf3, 0x53, 0x44, 0xc9, 0x50, 0xf0, 0xfe, 0x38, 0x2c, 0x0a, 0x71, 0x39,
	0x1d, 0xdf, 0xe6, 0xa4, 0xa5, 0xe2, 0x08, 0x42, 0xfd, 0x35, 0xb6, 0x67, 0xd2, 0xe7, 0x9d, 0x73,
	0x49, 0x05, 0x49, 0xda, 0xc4, 0xdb, 0xfb, 0x4c, 0xbd, 0xf6, 0x32, 0xe4, 0x31, 0x16, 0x06, 0x61,
	0xf3, 0x4c, 0xa7, 0x76, 0xc9, 0x81, 0xee, 0xc8, 0x61, 0x10, 0x41, 0xf0, 0xf0, 0xb4, 0xdf, 0x09,
	0xb8, 0xff, 0x4d, 0x24, 0xa0, 0x90, 0xd2, 0x2b, 0x90, 0x25, 0x39, 0xed, 0x74, 0xc7, 0x7a, 0x11,
	0xf2, 0x96, 0xeb, 0x8b, 0xe0, 0x3f, 0x2f, 0x08, 0x00, 0xbb, 0x48, 0x49, 0x95, 0xbe, 0xbc, 0x00,
	0xe0, 0x36, 0xef, 0x4d, 0x8a, 0x73, 0x33, 0x51, 0x78, 0x97, 0x59, 0x40, 0x66, 0x3a, 0x0b, 0x78,
	0x9a, 0x6b, 0xd2, 0x04, 0x9d, 0x3f, 0xba, 0x8e, 0xa3, 0x3a, 0x7f, 0xd2, 0xd6, 0xde, 0xeb, 0xf6,
	0xb9, 0x5c, 0xce, 0xb7, 0xf6, 0x5a, 0xb7, 0xff, 0x41, 0x82, 0x84, 0x99, 0x7d, 0x4a, 0x09, 0xf3,
	0x55, 0xd0, 0x79, 0x0e, 0x92, 0xdb, 0x52, 0x76, 0x3f, 0xcf, 0x30, 0x15, 0xe1, 0xbd, 0xf4, 0x4d,
	0xd8, 0x88, 0x52, 0x0f, 0xa8, 0x0b, 0x6d, 0xea, 0xed, 0x6c, 0x4d, 0x4d, 0x61, 0x53, 0x17, 0xda,
	0x51, 0x29, 0x16, 0xe2, 0x52, 0xac, 0x1c, 0x95, 0x25, 0x1f, 0x89, 0xca, 0x82, 0x8b, 0xf0, 0x11,
	0x29, 0xa4, 0xc0, 0x17, 0x21, 0xf9, 0x92, 0x1b, 0xcf, 0x44, 0xbf, 0xa5, 0x89, 0x8d, 0x4f, 0x0e,
	0xf3, 0xf3, 0x99, 0x48, 0x04, 0xa3, 0x64, 0x75, 0x30, 0x1e, 0x31, 0x28, 0x1e, 0xb1, 0xe8, 0x65,
	0x28, 0x52, 0x23, 0x02, 0x1a, 0x2e, 0x46, 0xb2, 0x1a, 0x08, 0xc1, 0x89, 0x52, 0x9a, 0x16, 0x97,
	0xd2, 0xce, 0xa2, 0xf8, 0x35, 0xfd, 0x75, 0xa0, 0x0c, 0x73, 0x58, 0xab, 0x22, 0xe4, 0x9b, 0x35,
	0xa3, 0x62, 0xfa, 0xb6, 0x43, 0x15, 0x94, 0x56, 0x60, 0xc9, 0x31, 0xef, 0x3a, 0x96, 0xc7, 0x41,
	0xe9, 0xd2, 0x1f, 0xdf, 0x82, 0x65, 0xb7, 0x79, 0x8f, 0xae, 0xb8, 0xe4, 0xfb, 0xbc, 0xdf, 0xa3,
	0x1d, 0x70, 0x37, 0x7c, 0x26, 0x09, 0x57, 0xce, 0xf5, 0x48, 0x97, 0x4b, 0xf5, 0x62, 0x2a, 0x1b,
	0x54, 0x33, 0x7c, 0x28, 0x7e, 0xcb, 0xcb, 0x76, 0x5e, 0x59, 0xb6, 0x3b, 0xb0, 0x3c, 0x0c, 0x46,
	0x27, 0x83, 0xfe, 0xa8, 0xfb, 0xa0, 0xdb, 0xeb, 0x8e, 0x9f, 0xb0, 0x2b, 0xbf, 0x6d, 0x35, 0x5c,
	0x8e, 0x4c, 0xe1, 0x44, 0x52, 0xd0, 0x4a, 0x12, 0x5e, 0x23, 0x1b, 0xf2, 0x4d, 0xaf, 0x24, 0xa1,
	0xe6, 0x95, 0xe4, 0xbf, 0xa9, 0x1e, 0x0b, 0xe6, 0xa3, 0x4c, 0xfd, 0x02, 0x05, 0x4a, 0x27, 0x50,
	0x6a, 0x0a, 0x7d, 0xd4, 0x1e, 0x3e, 0x0a, 0x1e, 0xb4, 0x0f, 0x3f, 0x50, 0x0f, 0x95, 0xeb, 0xd4,
	0xda, 0x59, 0x60, 0x59, 0xba, 0x9a, 0xd0, 0x7f, 0x51, 0x42, 0xc7, 0xbd, 0x3c, 0xb3, 0x2f, 0x79,
	0x58, 0xc6, 0xa1, 0xf4, 0x25, 0xe5, 0xc6, 0x4e, 0x72, 0x85, 0x33, 0xe6, 0x96, 0xa8, 0x4c, 0x13,
	0x53, 0xe0, 0x29, 0x26, 0x28, 0xf0, 0xc8, 0x57, 0x8b, 0xcb, 0x4f, 0x7b, 0xb5, 0xa8, 0xa9, 0x57,
	0x8b, 0x07, 0xb0, 0x3e, 0x78, 0xf8, 0xb0, 0xd7, 0xed, 0x07, 0x6c, 0xdf, 0xe0, 0x0c, 0x71, 0x25,
	0x1e, 0xec, 0x06, 0x9b, 0x41, 0x68, 0xd8, 0xb0, 0x31, 0xce, 0xb8, 0xca, 0x32, 0x90, 0x81, 0xba,
	0x0b, 0xeb, 0xb1, 0xc1, 0xc1, 0x39, 0x41, 0x0f, 0xba, 0x97, 0xe3, 0xa6, 0xf3, 0x48, 0xb7, 0xd3,
	0x3e, 0xfc, 0x80, 0x46, 0xd7, 0x8d, 0x8c, 0x1d, 0x4e, 0x8b, 0xfb, 0x09, 0x23, 0xce, 0xaa, 0xbb,
	0x1a, 0xd7, 0xa1, 0x73, 0xd5, 0x1c, 0x58, 0x6d, 0xa3, 0x93, 0x22, 0xbc, 0x31, 0x98, 0x75, 0x93,
	0x78, 0x56, 0xf5, 0x4e, 0x99, 0x1d, 0x6d, 0xcc, 0x62, 0x47, 0x9b, 0x31, 0x76, 0xf4, 0x9a, 0x08,
	0x3a, 0x48, 0xe3, 0xf9, 0x9c, 0xa7, 0x7b, 0x34, 0x0d, 0x7d, 0x8b, 0x7c, 0xc8, 0xa7, 0x57, 0x87,
	0x68, 0xfd, 0x5c, 0x7a, 0x97, 0x90, 0x8b, 0x85, 0x53, 0x84, 0x3c, 0xdd, 0xc1, 0xa9, 0xea, 0x64,
	0x4a, 0x02, 0xec, 0xb6, 0x6a, 0x35, 0x1a, 0x3a, 0x84, 0x01, 0x9a, 0x86, 0xe3, 0x69, 0x99, 0xd2,
	0x03, 0xae, 0xce, 0x20, 0x0e, 0xf4, 0xcb, 0xac, 0xc4, 0xf0, 0xf2, 0x52, 0x68, 0x0b, 0xf8, 0xd2,
	0x1d, 0xa6, 0xd0, 0x7b, 0xf0, 0x65, 0x6b, 0xc5, 0x90, 0x34, 0x0c, 0x33, 0x58, 0xfa, 0xfb, 0x4b,
	0x11, 0x9d, 0x89, 0x55, 0x58, 0x36, 0xef, 0x35, 0x1d, 0xd3, 0x75, 0xb9, 0xf6, 0xc1, 0xaf, 0x65,
	0xf5, 0x2d, 0x58, 0xe5, 0xc0, 0x1d, 0xa3, 0xea, 0xdf, 0x35, 0x0d, 0x82, 0xd2, 0x7e, 0x3d, 0xab,
	0xbf, 0x02, 0x2f, 0x71, 0x4c, 0xd5, 0x21, 0x47, 0x11, 0xa1, 0x2e, 0x61, 0xd4, 0x6a, 0xf7, 0x7d,
	0xcf, 0xb6, 0xef, 0x30, 0x16, 0xfd, 0x1b, 0x59, 0xfd, 0x55, 0x78, 0x39, 0x42, 0xac, 0xe8, 0x5f,
	0x34, 0x7c, 0xcf, 0xf6, 0x5d, 0xd2, 0x7d, 0x8e, 0xf6, 0x7f, 0x64, 0xf5, 0x9b, 0xf0, 0x62, 0x84,
	0xba, 0x62, 0xb7, 0x6a, 0xa4, 0xff, 0x3c, 0x7f, 0xd7, 0x6a, 0x54, 0x39, 0xe9, 0xdf, 0xcf, 0xea,
	0x6f, 0xc0, 0x2b, 0x11, 0x52, 0xc7, 0x6c, 0xda, 0x8e, 0xc7, 0x48, 0x7c, 0x1e, 0x48, 0xc5, 0x6e,
	0x78, 0x46, 0xc5, 0xd3, 0xfe, 0x41, 0x56, 0xff, 0x18, 0xbc, 0x3a, 0x35, 0x85, 0xe1, 0xde, 0xa1,
	0x9e, 0xf7, 0x69, 0x5f, 0x69, 0xff, 0x67, 0x56, 0x7f, 0x19, 0x4a, 0x3c, 0x49, 0xd3, 0xaa, 0xdc,
	0xf1, 0x5b, 0x4d, 0xdf, 0xa8, 0x56, 0xf1, 0xdb, 0x72, 0x49, 0x4b, 0xfd, 0x5d, 0xc3, 0xd1, 0xfe,
	0xaf, 0xac, 0x7e, 0x0b, 0x6e, 0x0a, 0xc2, 0x3b, 0x7b, 0x88, 0xd9, 0xb1, 0xe8, 0xdf, 0x7d, 0xd3,
	0x38, 0x20, 0xbd, 0x12, 0x1e, 0xdc, 0xfe, 0xef, 0xac, 0x7e, 0x1d, 0xae, 0xc8, 0xf4, 0x96, 0x8b,
	0x4d, 0xbc, 0x6b, 0xd6, 0x6a, 0x7e, 0xd3, 0x31, 0x9b, 0x86, 0x63, 0x56, 0xb5, 0x7f, 0x98, 0xd5,
	0x2f, 0xc0, 0xa6, 0x20, 0x73, 0xec, 0x7d, 0x6b, 0xc7, 0xf2, 0xcc, 0xaa, 0x6f, 0x79, 0x66, 0x5d,
	0xfb, 0xcd, 0xac, 0x7e, 0x11, 0xb6, 0x38, 0xd6, 0xf5, 0x6c, 0xc7, 0xf4, 0xef, 0x1a, 0x2e, 0x0f,
	0x23, 0xfd, 0x8f, 0x94, 0x71, 0xa2, 0xf1, 0x5f, 0x48, 0xaf, 0xec, 0x1b, 0x8d, 0x3d, 0xd3, 0x67,
	0x21, 0xc4, 0xfc, 0xba, 0xe9, 0xed, 0xdb, 0x55, 0xed, 0x1b, 0x4a, 0x85, 0x04, 0xf1, 0x3e, 0xc9,
	0x8e, 0x25, 0xa8, 0x19, 0x0d, 0xed, 0x1f, 0x67, 0xf5, 0x97, 0xe0, 0x6a, 0x8c, 0xcc, 0x6a, 0x34,
	0x5b, 0x9e, 0x7f, 0xd7, 0xb1, 0x1b, 0x7b, 0xbe, 0xd5, 0xd8, 0xb5, 0xb5, 0xdf, 0xca, 0xea, 0x37,
	0xe0, 0x5a, 0x8c, 0x6e, 0xd7, 0x76, 0xf6, 0x6c, 0xcf, 0x6f, 0xb9, 0xa6, 0x7f, 0x60, 0xb7, 0x2a,
	0x64, 0x36, 0x7d, 0x33, 0x69, 0x82, 0xd0, 0x71, 0x10, 0xc9, 0xc2, 0x01, 0xf9, 0x6d, 0x85, 0x3a,
	0x6c, 0x93, 0xd1, 0xf0, 0xa5, 0xa1, 0x66, 0xd9, 0x68, 0xbf, 0x93, 0xd5, 0x2f, 0xc1, 0xb9, 0x48,
	0xde, 0xd2, 0xa8, 0xfd, 0x3f, 0xca, 0x74, 0x53, 0x1a, 0x7d, 0xd7, 0xc0, 0x7e, 0x26, 0x94, 0x35,
	0xbb, 0xb1, 0xa7, 0xfd, 0x93, 0x64, 0x52, 0xc7, 0xdc, 0x73, 0x4c, 0xcf, 0x37, 0x76, 0x3d, 0xd3,
	0xf1, 0xdd, 0xd6, 0x4e, 0xdd, 0xf2, 0xb4, 0x7f, 0x9a, 0xd5, 0x4b, 0x70, 0x31, 0x36, 0xcf, 0xde,
	0x33, 0x2b, 0x9e, 0x5f, 0xbf, 0x4f, 0x87, 0xee, 0x9f, 0x65, 0xf5, 0xab, 0x70, 0x41, 0x64, 0xc7,
	0xaa, 0x5f, 0x37, 0xbc, 0xca, 0x3e, 0xaf, 0xfc, 0x3f, 0xcf, 0xea, 0xe7, 0x61, 0x43, 0x8c, 0x3d,
	0x1b, 0x2e, 0x66, 0xb5, 0xf2, 0xbb, 0xca, 0xd8, 0xd2, 0xeb, 0x02, 0xdf, 0x6a, 0x54, 0xad, 0x8a,
	0xe1, 0x99, 0xae, 0xef, 0xed, 0x5b, 0x38, 0x3d, 0x77, 0x1d, 0xa3, 0x55, 0xd5, 0xfe, 0xcd, 0x45,
	0xfd, 0x45, 0xb8, 0xcc, 0x89, 0xc3, 0xf0, 0x12, 0x55, 0xb3, 0x62, 0x57, 0x4d, 0xbf, 0x66, 0xef,
	0xd5, 0x0c, 0x4f, 0xfb, 0xde, 0x45, 0x7d, 0x05, 0x0a, 0x9c, 0xaa, 0x66, 0xbb, 0x9e, 0xf6, 0x85,
	0x45, 0x99, 0x31, 0x54, 0x8d, 0xba, 0xb1, 0x67, 0x6a, 0xdf, 0xb7, 0xa8, 0x97, 0xe1, 0x3a, 0x07,
	0x3a, 0xa6, 0x51, 0xd9, 0x37, 0xab, 0xbc, 0x99, 0x55, 0xc7, 0xa6, 0xb1, 0x84, 0x6a, 0x16, 0xe9,
	0x8a, 0xef, 0x5f, 0x54, 0xa6, 0x01, 0x63, 0x40, 0xfe, 0xce, 0x7d, 0xbf, 0xd5, 0x74, 0x3d, 0xc7,
	0x34, 0xea, 0xbe, 0x7b, 0xdf, 0x25, 0x1d, 0xf2, 0x07, 0x16, 0x13, 0x3a, 0x4d, 0xe5, 0x13, 0xda,
	0xcf, 0x15, 0xe5, 0x1e, 0xb1, 0x1a, 0xae, 0xe5, 0x7a, 0x3c, 0x57, 0xed, 0xeb, 0x89, 0x48, 0xca,
	0xfa, 0xb4, 0x9f, 0x2f, 0x26, 0x4e, 0x1b, 0xb6, 0xf8, 0x39, 0x43, 0xe7, 0x63, 0xfd, 0x0b, 0x45,
	0x79, 0xd5, 0xf3, 0x69, 0xd3, 0x88, 0xab, 0x86, 0xfd, 0x62, 0x51, 0xee, 0x0a, 0x46, 0xb8, 0x63,
	0x56, 0xec, 0xba, 0x19, 0x53, 0x14, 0xfb, 0xa5, 0xa2, 0xdc, 0xbd, 0xa8, 0x1e, 0xf6, 0x3f, 0x16,
	0xe5, 0xf5, 0x1b, 0x53, 0x0a, 0xfb, 0x9b, 0x49, 0xd5, 0xe0, 0x55, 0xb6, 0x8d, 0xaa, 0xbf, 0x53,
	0xb3, 0x2b, 0x77, 0xcc, 0xaa, 0xf6, 0xcb, 0xc5, 0xc9, 0x8c, 0x8d, 0x4f, 0x2d, 0x64, 0x9d, 0xa1,
	0x66, 0xff, 0xff, 0x54, 0xd4, 0x6f, 0xc3, 0x6b, 0x13, 0xf2, 0xe6, 0x54, 0x6c, 0xd2, 0x72, 0x76,
	0xf3, 0x3f, 0x17, 0xe5, 0x69, 0xc4, 0x7b, 0xd8, 0xb3, 0x79, 0xff, 0x51, 0x86, 0xff, 0xbf, 0x14,
	0xe5, 0x21, 0x97, 0xf3, 0xc2, 0xcc, 0x77, 0x8d, 0x3b, 0x5c, 0x7a, 0xff, 0x5b, 0x45, 0x7d, 0x1b,
	0xd6, 0x45, 0x7e, 0x9e, 0x59, 0xf7, 0x3d, 0xa3, 0xde, 0x34, 0x09, 0xe3, 0xfb, 0x5f, 0x8b, 0xfa,
	0x35, 0xb8, 0x24, 0xe6, 0x37, 0x9a, 0x28, 0x60, 0x3b, 0x8c, 0x4a, 0xc5, 0x6c, 0x7a, 0xb4, 0x42,
	0x7f, 0x5b, 0xa9, 0x90, 0xcc, 0x0c, 0x64, 0xb6, 0xff, 0x77, 0x8a, 0xa5, 0x2f, 0x2e, 0x42, 0x4e,
	0x08, 0x4b, 0x89, 0xa1, 0xe8, 0xa9, 0x8c, 0x17, 0x46, 0x4c, 0xa1, 0x80, 0xe9, 0x87, 0x67, 0x22,
	0x5a, 0x70, 0x2f, 0x9b, 0xe2, 0xa9, 0x1f, 0x38, 0xc8, 0xea, 0x4c, 0x16, 0xed, 0xa3, 0xe7, 0x8e,
	0x85, 0xa7, 0x38, 0x77, 0xec, 0x09, 0x51, 0x5c, 0x39, 0x29, 0x9f, 0x45, 0x30, 0x64, 0xe2, 0x3a,
	0x93, 0xb0, 0xde, 0x86, 0x4d, 0x71, 0x96, 0x8b, 0x9c, 0xe3, 0xe9, 0xb1, 0x79, 0x9d, 0x1f, 0xeb,
	0xd4, 0xe3, 0xfc, 0x9b, 0xb0, 0xc1, 0xcf, 0x14, 0x91, 0x64, 0x2c, 0xec, 0x39, 0x3b, 0x37, 0xa8,
	0xa9, 0x2a, 0x70, 0x29, 0x22, 0xd7, 0x46, 0x53, 0x53, 0x73, 0x86, 0xf3, 0x8a, 0xf0, 0x1a, 0xc9,
	0x24, 0x76, 0x0c, 0xc9, 0x27, 0x1c, 0x43, 0xde, 0x11, 0x44, 0xec, 0x38, 0x91, 0x60, 0x9a, 0x45,
	0x73, 0x0f, 0xcf, 0x0f, 0xe1, 0x97, 0x6e, 0x88, 0x23, 0x13, 0x5a, 0x6a, 0x2e, 0xc5, 0x35, 0x17,
	0x63, 0xbd, 0x8b, 0x76, 0x99, 0x43, 0xf1, 0x5b, 0x89, 0xc3, 0xb1, 0x1c, 0x8f, 0xc3, 0xc1, 0xdb,
	0x2f, 0x59, 0x94, 0xb2, 0x2e, 0x4b, 0x10, 0x58, 0x9f, 0xe1, 0x4a, 0x8e, 0x3e, 0xd6, 0x92, 0x22,
	0xf0, 0x11, 0x8f, 0x9d, 0xb0, 0x59, 0xb1, 0x15, 0x02, 0x2a, 0xfd, 0x14, 0xea, 0xcc, 0x4a, 0x93,
	0xe1, 0x1c, 0xac, 0x33, 0x29, 0x94, 0xca, 0x03, 0x8a, 0xe2, 0xac, 0xae, 0xa2, 0xa8, 0xad, 0xe3,
	0x76, 0x7a, 0x31, 0xa5, 0x5f, 0x80, 0x35, 0x15, 0xc7, 0xad, 0x1f, 0x11, 0xbb, 0x0e, 0x2b, 0x2a,
	0xd6, 0x6d, 0xd6, 0xb5, 0x0e, 0x59, 0xb3, 0x2a, 0x98, 0x9a, 0x58, 0xfa, 0x46, 0xf5, 0xbd, 0x96,
	0xeb, 0x61, 0x5c, 0xd3, 0xaf, 0xa5, 0xf4, 0x2b, 0x44, 0xd0, 0x96, 0xa9, 0x76, 0x8c, 0xc6, 0x1d,
	0xc2, 0x82, 0x1b, 0xee, 0xae, 0xe9, 0x68, 0x3f, 0x9f, 0x2a, 0x7d, 0x8a, 0x4b, 0xda, 0xd8, 0xe9,
	0x28, 0xfd, 0x52, 0x7a, 0xb2, 0xa9, 0x31, 0x83, 0xcc, 0x8d, 0xb0, 0xf2, 0x04, 0x2a, 0x8c, 0x33,
	0x7f, 0x6e, 0x1e, 0x34, 0xb7, 0x79, 0xef, 0xf7, 0x3a, 0xc4, 0x7b, 0x3c, 0x1c, 0x2e, 0xf5, 0x8c,
	0x15, 0x09, 0x87, 0x2b, 0x33, 0x99, 0x79, 0x95, 0xc9, 0x48, 0x3c, 0x64, 0x21, 0xfa, 0x24, 0xcf,
	0x4b, 0xc7, 0x28, 0xec, 0x59, 0xa5, 0xf4, 0x6a, 0x7b, 0xdc, 0xd6, 0xdf, 0x04, 0x38, 0x1d, 0x05,
	0xaa, 0xb2, 0xa0, 0x12, 0x6c, 0xb7, 0x35, 0xe2, 0x8a, 0xb7, 0xb9, 0x53, 0xfe, 0x53, 0x6f, 0x44,
	0x8f, 0xe3, 0xb9, 0xb8, 0x7e, 0x50, 0xb4, 0xeb, 0xa6, 0x1d, 0xc8, 0xa3, 0xcc, 0x0e, 0x9e, 0x82,
	0xd9, 0x45, 0x83, 0xc2, 0xe7, 0x67, 0x06, 0x85, 0x2f, 0xcc, 0x08, 0x0a, 0xbf, 0x34, 0x23, 0x28,
	0xfc, 0xf2, 0x8c, 0xa0, 0xf0, 0xc5, 0x19, 0x41, 0xe1, 0xb5, 0x68, 0x50, 0xf8, 0x47, 0x91, 0xe3,
	0x5c, 0x78, 0x80, 0x64, 0x4e, 0xb2, 0x5a, 0x0d, 0x1a, 0x33, 0x8c, 0x46, 0x00, 0x7b, 0x81, 0x2e,
	0x45, 0x99, 0x20, 0x3c, 0xf6, 0x09, 0x55, 0x73, 0x81, 0x0a, 0x63, 0x52, 0x97, 0xfe, 0xc8, 0x02,
	0x2c, 0xb9, 0xcd, 0x7b, 0x64, 0x81, 0x4f, 0x98, 0xcf, 0x53, 0x6e, 0xc2, 0xa4, 0x69, 0x96, 0x51,
	0xa6, 0xd9, 0x19, 0x67, 0xf0, 0xf3, 0x68, 0x6c, 0x5c, 0x85, 0x02, 0xfa, 0xdd, 0x94, 0xed, 0x83,
	0x33, 0x4e, 0x1e, 0x61, 0x8c, 0xa7, 0x7f, 0x92, 0x93, 0x28, 0x2a, 0x6b, 0x13, 0xe6, 0x32, 0x4d,
	0x19, 0xaa, 0xde, 0xd2, 0x94, 0x52, 0xa4, 0x9b, 0x1c, 0x42, 0x44, 0xf8, 0xd1, 0xf6, 0xb0, 0xef,
	0xe3, 0x1d, 0x2e, 0xce, 0xf4, 0x8c, 0x93, 0x23, 0x10, 0x8f, 0x00, 0xf4, 0x32, 0xac, 0x20, 0x9a,
	0x76, 0x9b, 0x74, 0xf7, 0x95, 0x71, 0x8a, 0x04, 0x81, 0xf7, 0x47, 0xac, 0x8e, 0xb7, 0x60, 0x15,
	0x69, 0x23, 0xca, 0x17, 0x79, 0xa4, 0xc6, 0x6c, 0x54, 0xc5, 0x8b, 0xb7, 0x21, 0x8f, 0xf4, 0xca,
	0x2e, 0x35, 0xa1, 0x49, 0x58, 0x49, 0xd6, 0xa2, 0xf3, 0x90, 0xa3, 0x55, 0x0e, 0xa7, 0xf3, 0x22,
	0xd6, 0x98, 0xb4, 0xe7, 0x4e, 0x74, 0xf1, 0x2e, 0xc7, 0x6d, 0xb1, 0x94, 0x49, 0x32, 0x6d, 0xe5,
	0x46, 0x34, 0xc1, 0x8b, 0x89, 0x9a, 0xe0, 0xcf, 0xb5, 0x57, 0xfd, 0x8b, 0x5b, 0x1d, 0x7f, 0x25,
	0x05, 0x2b, 0xbb, 0xbd, 0xf6, 0xe8, 0xc8, 0x6d, 0xf7, 0x82, 0x4a, 0xfb, 0xf8, 0xa4, 0xdd, 0x7d,
	0xd4, 0x4f, 0x0a, 0xf0, 0x74, 0xc8, 0x70, 0x4a, 0x80, 0x27, 0x0e, 0xc4, 0xd7, 0xac, 0x73, 0xb0,
	0xc8, 0x02, 0xbc, 0x50, 0x8d, 0xac, 0x39, 0x27, 0x4b, 0x23, 0xbc, 0x8c, 0x94, 0x9d, 0x7f, 0x6e,
	0x7a, 0x54, 0xb4, 0xa7, 0x8f, 0x24, 0x56, 0xfa, 0xd5, 0x14, 0x5c, 0x10, 0x6d, 0x30, 0x86, 0x41,
	0x9b, 0x40, 0x47, 0xbd, 0xc1, 0x98, 0x87, 0xf5, 0x49, 0x78, 0x12, 0xe2, 0xa1, 0x68, 0xd2, 0x4a,
	0x28, 0x9a, 0xcb, 0x90, 0x1f, 0xb3, 0xb4, 0xe1, 0x92, 0x07, 0x0e, 0xa2, 0x3a, 0xae, 0x92, 0x87,
	0xbd, 0xb9, 0x69, 0x1e, 0xf6, 0xe6, 0x15, 0x0f, 0x7b, 0xdf, 0x82, 0xe0, 0x6f, 0xdf, 0x90, 0x87,
	0x8a, 0x37, 0x31, 0x49, 0x4d, 0x57, 0x0c, 0x55, 0xa8, 0xa6, 0xcb, 0x41, 0xb1, 0x26, 0x64, 0xa6,
	0x35, 0x61, 0x4e, 0x6d, 0xc2, 0x06, 0x2c, 0x50, 0xcf, 0x95, 0x2c, 0x4a, 0x0f, 0xfb, 0x52, 0x46,
	0x77, 0x61, 0xfa, 0xe8, 0x3e, 0x43, 0x24, 0xc2, 0x1f, 0x4b, 0xc1, 0x56, 0x6c, 0x86, 0x72, 0x4d,
	0xbd, 0x3a, 0xac, 0x3e, 0x6c, 0xf7, 0x46, 0x47, 0xfe, 0xa8, 0xdd, 0x0b, 0x7c, 0xde, 0x4a, 0xf6,
	0x32, 0xaa, 0xe8, 0x15, 0xc6, 0xb2, 0x70, 0x56, 0x30, 0xa5, 0x32, 0xef, 0x3f, 0x0d, 0x39, 0x3e,
	0xd8, 0x89, 0xca, 0x89, 0xb1, 0xee, 0x77, 0x42, 0xfa, 0xd2, 0x0f, 0xa6, 0x61, 0x59, 0x10, 0xe0,
	0xa5, 0x6e, 0xd2, 0xe0, 0xc8, 0xf3, 0x2b, 0x1d, 0x9b, 0x5f, 0x11, 0x87, 0x36, 0x99, 0x98, 0x43,
	0x9b, 0x29, 0xbe, 0x0d, 0x85, 0x7f, 0x58, 0x35, 0x54, 0xda, 0x60, 0x18, 0xf0, 0xe5, 0x89, 0x0e,
	0x52, 0xfb, 0xa7, 0xc7, 0x2c, 0xa2, 0x7b, 0x96, 0x7c, 0x37, 0x4e, 0x8f, 0x95, 0x01, 0xcc, 0x4e,
	0x1f, 0xc0, 0xa7, 0x8f, 0x89, 0x56, 0xfa, 0xaf, 0xe7, 0x61, 0x5d, 0xf4, 0x4b, 0xb5, 0x3b, 0x3a,
	0xe2, 0xba, 0x28, 0x4f, 0xdf, 0x3d, 0x72, 0xeb, 0x33, 0x6a, 0xeb, 0x37, 0x01, 0x9b, 0x23, 0x85,
	0x97, 0x22, 0x9f, 0x4c, 0xef, 0x1c, 0xdb, 0x2d, 0x85, 0x97, 0xc2, 0x86, 0x93, 0x4e, 0x79, 0x1d,
	0xd6, 0x1e, 0x92, 0xaa, 0xd1, 0xf9, 0x13, 0xd2, 0xd1, 0x69, 0xbc, 0xf2, 0x50, 0xae, 0x36, 0x26,
	0x58, 0x83, 0xf9, 0xd1, 0x78, 0x70, 0xf8, 0x01, 0x9b, 0xc9, 0xf4, 0x03, 0xeb, 0x35, 0xe8, 0x75,
	0xb0, 0x6f, 0x17, 0x59, 0xbd, 0x06, 0xbd, 0x0e, 0xe9, 0xdb, 0x17, 0x61, 0xb9, 0xd7, 0x3d, 0xee,
	0x8e, 0xfd, 0x93, 0x60, 0xe8, 0x13, 0xe1, 0x81, 0xf5, 0x50, 0x01, 0xa1, 0xcd, 0x60, 0xd8, 0x1a,
	0x05, 0x43, 0x34, 0x75, 0xe1, 0x4a, 0x3c, 0x27, 0xc3, 0xee, 0x21, 0xd7, 0x82, 0x5c, 0xe2, 0xd0,
	0x26, 0x01, 0xea, 0xfb, 0xe8, 0xe4, 0x96, 0x92, 0x29, 0x8f, 0x42, 0x97, 0x13, 0x67, 0x29, 0xa9,
	0xb5, 0x30, 0xc9, 0x67, 0xe9, 0xd8, 0x86, 0x72, 0x17, 0x44, 0xd6, 0x72, 0xb4, 0xa9, 0xdb, 0x13,
	0xf3, 0xe1, 0x83, 0x76, 0x4b, 0xfe, 0x60, 0x56, 0xef, 0xd2, 0x97, 0xfe, 0x3a, 0xac, 0x86, 0x2d,
	0x09, 0x86, 0x87, 0x41, 0x7f, 0xdc, 0x7e, 0xc4, 0x37, 0x64, 0x5d, 0x34, 0x47, 0x60, 0x66, 0x9d,
	0x0a, 0xe5, 0xc9, 0x57, 0x9c, 0x35, 0xf9, 0xb4, 0xd8, 0xe4, 0x7b, 0x17, 0xb4, 0x68, 0x85, 0xd1,
	0x74, 0xc3, 0x72, 0x2b, 0x76, 0xab, 0xe1, 0xf9, 0x4d, 0xc7, 0xaa, 0x98, 0x5a, 0x4a, 0xdf, 0x84,
	0xd5, 0x10, 0x66, 0x3a, 0x15, 0xb3, 0xe1, 0x19, 0x7b, 0xa6, 0x96, 0x2e, 0x7d, 0x61, 0x1e, 0x36,
	0xd5, 0x0e, 0x1d, 0xf4, 0x3a, 0x4f, 0x2f, 0x48, 0x9e, 0x83, 0x45, 0x16, 0x6d, 0x45, 0xcc, 0x5c,
	0xfc, 0xa6, 0x6b, 0x5e, 0xf4, 0x58, 0x78, 0x5f, 0xc2, 0x41, 0xf1, 0x5d, 0x69, 0x7e, 0xea, 0xb2,
	0x58, 0x98, 0xb8, 0x2c, 0xb2, 0xca, 0xb2, 0x88, 0xcf, 0xb8, 0xc5, 0xa4, 0x19, 0xd7, 0x82, 0x3c,
	0xce, 0x6c, 0xe5, 0xcc, 0xf3, 0xe6, 0xe4, 0xd9, 0x26, 0x3a, 0xe7, 0x16, 0xfd, 0x43, 0x00, 0xc2,
	0xbd, 0xae, 0xf8, 0x4d, 0x06, 0xfd, 0xf3, 0xa7, 0xe4, 0x30, 0x30, 0x7e, 0xc2, 0x14, 0x7b, 0xc4,
	0xb7, 0x64, 0xa4, 0x2d, 0x48, 0xa8, 0x8e, 0x0f, 0x33, 0xd2, 0x7e, 0x5f, 0x22, 0x64, 0xda, 0x83,
	0x82, 0x90, 0x6a, 0xfd, 0x30, 0x3d, 0x52, 0x41, 0x18, 0x11, 0xd8, 0x96, 0x66, 0x99, 0xee, 0x2d,
	0x27, 0x29, 0xdf, 0x3f, 0xe7, 0x44, 0xfc, 0x34, 0x68, 0xd1, 0x1e, 0xd1, 0x17, 0x61, 0x8e, 0x48,
	0x71, 0xf4, 0x09, 0x9f, 0x3d, 0x99, 0x31, 0xb1, 0x2d, 0x2d, 0xb9, 0x62, 0xca, 0x94, 0xc6, 0xb0,
	0xa4, 0x74, 0xb3, 0xfe, 0x22, 0xcc, 0x91, 0x71, 0x64, 0x1b, 0x9d, 0x16, 0x09, 0x6e, 0x79, 0xe4,
	0x20, 0x56, 0x7f, 0x07, 0x59, 0xfe, 0xa1, 0xf0, 0xae, 0x97, 0x57, 0x1f, 0x1e, 0x13, 0xd7, 0xb7,
	0x23, 0x92, 0x94, 0xfe, 0x6c, 0x4a, 0x9a, 0xfa, 0x95, 0xf6, 0x70, 0x6c, 0x8d, 0x83, 0x63, 0xea,
	0x65, 0x97, 0x6c, 0x36, 0x78, 0x30, 0x42, 0x2e, 0xc6, 0x5d, 0x0d, 0x13, 0x48, 0x8d, 0x00, 0x9e,
	0xb3, 0x64, 0xfd, 0x3b, 0xa8, 0x53, 0x05, 0x32, 0xbd, 0x99, 0xf2, 0xd1, 0x8c, 0x6d, 0x58, 0x90,
	0x97, 0xfe, 0xa6, 0x2c, 0x2e, 0x50, 0x1f, 0x98, 0x61, 0xad, 0x23, 0x4b, 0x2d, 0x35, 0x6b, 0xa9,
	0xc5, 0x77, 0x20, 0x69, 0x3d, 0x65, 0x94, 0xf5, 0x74, 0x11, 0x00, 0x11, 0x74, 0x2d, 0x31, 0xc9,
	0x90, 0x40, 0xe8, 0x3a, 0x8a, 0x2f, 0xb7, 0xf9, 0xa4, 0xe5, 0x26, 0xaf, 0x0b, 0xe6, 0x7d, 0x98,
	0x7f, 0x97, 0x7e, 0x32, 0x05, 0x7a, 0xbc, 0x65, 0x0a, 0x67, 0x49, 0xa9, 0x9c, 0x45, 0xe6, 0x0b,
	0x69, 0x95, 0x2f, 0xc8, 0xac, 0x6a, 0x4e, 0x65, 0x55, 0xf7, 0x61, 0x23, 0xba, 0x27, 0x52, 0xaf,
	0xcb, 0xcc, 0x9d, 0xfc, 0x8b, 0x89, 0x43, 0x11, 0xe9, 0x6a, 0x67, 0x55, 0xd9, 0x3b, 0x29, 0xb0,
	0xf4, 0x4b, 0x29, 0xb8, 0x98, 0x38, 0xf6, 0x42, 0x9c, 0x95, 0x27, 0x4e, 0xea, 0xe9, 0x27, 0x8e,
	0x2a, 0xdc, 0xa6, 0xa7, 0x09, 0xb7, 0x99, 0xb8, 0x7c, 0x2e, 0xc9, 0xcd, 0x73, 0x31, 0xb9, 0x59,
	0x76, 0xf4, 0x31, 0xaf, 0x3a, 0xfa, 0x28, 0x7d, 0x7d, 0x11, 0x56, 0x69, 0x98, 0x06, 0xae, 0xd0,
	0x98, 0xac, 0x73, 0x33, 0x35, 0x08, 0x79, 0x1b, 0x2e, 0x30, 0xa4, 0xd0, 0x9c, 0x54, 0x34, 0xff,
	0x33, 0xf1, 0x2b, 0x57, 0xb5, 0x4c, 0xc6, 0x67, 0xcf, 0x75, 0xe2, 0x35, 0x61, 0x0c, 0x47, 0xf6,
	0x81, 0xf2, 0x30, 0x08, 0xd8, 0xf1, 0x7e, 0x4e, 0xf5, 0x81, 0xb2, 0x1b, 0x04, 0xf4, 0x94, 0xff,
	0xfb, 0x23, 0xd4, 0xdd, 0x71, 0x70, 0x3c, 0x62, 0x31, 0x11, 0xdf, 0x98, 0x5c, 0x0d, 0xe6, 0x1d,
	0x34, 0xcc, 0x8d, 0xcc, 0x8a, 0x91, 0x92, 0x3f, 0x42, 0x92, 0x75, 0x5e, 0x17, 0x26, 0xe8, 0xbc,
	0x9e, 0x87, 0x1c, 0x55, 0x32, 0x23, 0x32, 0x56, 0x96, 0x6e, 0x19, 0x08, 0x20, 0x42, 0x96, 0xa4,
	0xf2, 0x10, 0x0a, 0x61, 0x4b, 0xa1, 0xca, 0x03, 0x4a, 0x62, 0x57, 0xb9, 0xb6, 0x3f, 0xa3, 0xc9,
	0x31, 0x5f, 0xb4, 0x0c, 0x46, 0x48, 0xde, 0x81, 0x85, 0xe1, 0xe0, 0x74, 0x1c, 0x70, 0xa3, 0xba,
	0xeb, 0xb3, 0x5a, 0xe9, 0x10, 0x6a, 0x87, 0x25, 0x8a, 0x9a, 0xcc, 0xe6, 0x67, 0x9b, 0xcc, 0x16,
	0x66, 0x9b, 0xcc, 0x2e, 0xcd, 0xda, 0x8c, 0x96, 0x67, 0x6d, 0x46, 0xc5, 0xe8, 0x66, 0xb4, 0xdd,
	0x03, 0x2d, 0x3a, 0x3e, 0x13, 0xfc, 0xe3, 0xa4, 0x26, 0xf8, 0xc7, 0x49, 0x34, 0x02, 0x4a, 0x27,
	0x1a, 0x01, 0x6d, 0x7f, 0x33, 0x05, 0xf3, 0xd8, 0x51, 0xfa, 0xfb, 0xb0, 0x24, 0xc2, 0xe7, 0xa2,
	0xd4, 0x49, 0x43, 0xf1, 0xbc, 0x3a, 0xab, 0x9b, 0x79, 0xb0, 0x5e, 0x2a, 0x6f, 0xf6, 0xa4, 0x2f,
	0x52, 0x91, 0xc8, 0x72, 0x09, 0x23, 0xf2, 0x76, 0xe4, 0x4c, 0xa6, 0x3f, 0x5a, 0x6d, 0xc3, 0x62,
	0xaf, 0x3d, 0xee, 0x8e, 0x4f, 0x3b, 0x94, 0x79, 0xa7, 0x1d, 0xf1, 0xad, 0x5f, 0x80, 0x5c, 0x6f,
	0xd0, 0x7f, 0x44, 0x91, 0xf3, 0x88, 0x0c, 0x01, 0x24, 0x65, 0x64, 0xf2, 0x8a, 0xef, 0xd2, 0xa7,
	0xa0, 0x20, 0x57, 0x5d, 0x5f, 0x85, 0x62, 0xd3, 0xaa, 0xdc, 0x69, 0x35, 0xfd, 0x9a, 0x5d, 0x31,
	0xd0, 0x05, 0x63, 0x4a, 0xf2, 0x3c, 0x72, 0x3f, 0x04, 0xa7, 0x4b, 0x5f, 0xcd, 0xc3, 0x2a, 0xf5,
	0x37, 0x2b, 0x9c, 0xc9, 0xd6, 0x59, 0xd0, 0x34, 0xc1, 0xd4, 0x53, 0x2a, 0x53, 0x6f, 0xc2, 0x52,
	0x77, 0x44, 0x0e, 0x19, 0x3e, 0xf5, 0x0f, 0xc9, 0xbc, 0xbd, 0xbe, 0x1a, 0xd3, 0x36, 0x52, 0xb3,
	0xe4, 0xfe, 0x7d, 0xd9, 0x35, 0x61, 0x77, 0xd4, 0x1a, 0x05, 0x14, 0xa4, 0xba, 0xd2, 0xcc, 0x44,
	0x5c, 0x69, 0x26, 0x78, 0xcc, 0x9c, 0x4b, 0xf2, 0x98, 0x79, 0x19, 0xf2, 0x48, 0xf7, 0x60, 0xd8,
	0xee, 0x1f, 0x1e, 0x31, 0xe6, 0x09, 0x04, 0xb4, 0x83, 0x90, 0x64, 0x97, 0x9a, 0x0b, 0xc9, 0x2e,
	0x35, 0xa7, 0x7a, 0x74, 0xb5, 0x14, 0x37, 0xde, 0x8a, 0xf3, 0xd6, 0x0b, 0xea, 0x9d, 0xab, 0x68,
	0x3f, 0x7d, 0x02, 0x94, 0x1c, 0x76, 0xb3, 0x97, 0x9f, 0x4f, 0x00, 0x57, 0xdf, 0xf4, 0x1f, 0xb7,
	0x9f, 0xb0, 0xdb, 0xf9, 0x8d, 0x04, 0xd5, 0xd3, 0xbb, 0xed, 0x27, 0x0e, 0x77, 0x63, 0x70, 0xb7,
	0xfd, 0x44, 0xbf, 0x0a, 0x99, 0x0f, 0xdb, 0x63, 0x76, 0x2e, 0x53, 0x1c, 0xdc, 0x1c, 0xb4, 0xc7,
	0x0e, 0xc1, 0x11, 0x92, 0xc7, 0x4c, 0x17, 0x3d, 0x42, 0x72, 0xf7, 0x68, 0xec, 0x10, 0x9c, 0xfe,
	0x31, 0xc8, 0xd1, 0x2a, 0xf9, 0xe3, 0x41, 0x92, 0xf2, 0x1c, 0x6d, 0x81, 0x37, 0x70, 0x16, 0x47,
	0xec, 0x97, 0x18, 0x0e, 0x49, 0xcf, 0x97, 0xae, 0x7c, 0x1c, 0x8e, 0x50, 0xc9, 0xf7, 0x1d, 0x58,
	0xe2, 0x3e, 0x57, 0x69, 0x07, 0x69, 0xf1, 0x87, 0x40, 0xe6, 0xd1, 0x93, 0xbd, 0x8f, 0x9e, 0x48,
	0x5f, 0xfa, 0x01, 0x6c, 0x1c, 0x0e, 0x07, 0xa3, 0x91, 0x7f, 0x3c, 0xe8, 0x8f, 0x8f, 0x24, 0x2f,
	0xca, 0x4c, 0x15, 0x4f, 0xd9, 0xa0, 0x2a, 0x84, 0xb2, 0x4e, 0x08, 0xc3, 0x2e, 0x77, 0xd6, 0x0e,
	0x13, 0xa0, 0x64, 0x12, 0x70, 0x87, 0xb8, 0x87, 0x42, 0x42, 0xa3, 0x6f, 0x74, 0x45, 0x8a, 0x60,
	0xd3, 0xc0, 0x42, 0xad, 0x66, 0x0c, 0x1e, 0xc9, 0x12, 0x30, 0x1d, 0x44, 0xaa, 0x3c, 0xaf, 0x11,
	0x0c, 0xad, 0x3f, 0xd3, 0x43, 0x7c, 0x45, 0x99, 0x15, 0xc1, 0x71, 0xbb, 0xdb, 0x1b, 0x31, 0x87,
	0x66, 0xd2, 0xb8, 0x9b, 0x08, 0x27, 0xe7, 0x75, 0x69, 0xb2, 0x86, 0x2e, 0xf6, 0x0b, 0xe1, 0x7c,
	0xb5, 0x3a, 0xfa, 0x03, 0xd8, 0x60, 0xb3, 0x70, 0x18, 0xf4, 0x28, 0x3f, 0x63, 0xbb, 0xf4, 0xc6,
	0xd9, 0x96, 0x1c, 0x8d, 0x31, 0xc6, 0x96, 0xdc, 0x1a, 0xcd, 0xcb, 0x61, 0x59, 0xb1, 0xcd, 0xfa,
	0x21, 0x6c, 0x29, 0x2e, 0xaa, 0x49, 0x02, 0x5e, 0xca, 0xe6, 0x33, 0x94, 0xb2, 0x31, 0x92, 0x7c,
	0x5a, 0x87, 0x70, 0xfd, 0x5f, 0x85, 0xf5, 0x93, 0xe1, 0xa0, 0x73, 0x7a, 0x18, 0x2d, 0x64, 0xeb,
	0x19, 0x0a, 0x59, 0x65, 0x59, 0x29, 0x25, 0xd4, 0x61, 0x55, 0x59, 0xdf, 0x2c, 0xff, 0x73, 0xf1,
	0x60, 0x35, 0x3b, 0xe1, 0x6a, 0x67, 0x19, 0xae, 0x3c, 0x88, 0x82, 0x4a, 0x6f, 0x41, 0x41, 0xe6,
	0x58, 0xe4, 0x3c, 0xcf, 0x9e, 0x4a, 0x59, 0x88, 0x14, 0xed, 0x05, 0x72, 0xa0, 0x62, 0x30, 0x1a,
	0x6c, 0x45, 0x4b, 0x95, 0x7e, 0x1f, 0x14, 0x94, 0x5a, 0x6d, 0xc1, 0x9a, 0xfc, 0x2d, 0x85, 0x90,
	0xda, 0x84, 0x55, 0x05, 0x63, 0x60, 0x54, 0x1b, 0x2d, 0xa5, 0x9f, 0x83, 0x75, 0x05, 0x61, 0xf5,
	0xdb, 0x14, 0x95, 0x2e, 0xfd, 0x40, 0x1e, 0x36, 0xb8, 0xaf, 0xe2, 0x08, 0xc7, 0x8e, 0x5c, 0xea,
	0xa5, 0x62, 0x97, 0x7a, 0x6e, 0x32, 0xdf, 0x7e, 0x3d, 0xc9, 0x0f, 0xf2, 0xb7, 0x59, 0xf7, 0xff,
	0xdf, 0x59, 0x77, 0x02, 0x1f, 0x5e, 0x3e, 0x13, 0x1f, 0x2e, 0x7e, 0x8b, 0xf8, 0xb0, 0xf6, 0xad,
	0xe7, 0xc3, 0x2b, 0x4f, 0xc3, 0x87, 0xf5, 0xa7, 0xe1, 0xc3, 0xab, 0x67, 0xe6, 0xc3, 0x6b, 0x09,
	0x7c, 0x38, 0x98, 0xc8, 0x87, 0xd7, 0xcf, 0xbc, 0x84, 0xce, 0xc0, 0x8a, 0xbb, 0x53, 0x58, 0xf1,
	0xc6, 0xb3, 0x15, 0x34, 0x89, 0x1b, 0x1f, 0x4e, 0xe2, 0xc6, 0x9b, 0xcf, 0x56, 0xce, 0xd3, 0x30,
	0xe4, 0xad, 0x7f, 0x99, 0x18, 0xf2, 0x67, 0xe1, 0x12, 0x5e, 0x47, 0xb0, 0xab, 0x01, 0xfe, 0xc6,
	0x63, 0xf6, 0xdb, 0x0f, 0x7a, 0x42, 0x43, 0xe1, 0x19, 0xc3, 0x65, 0x4d, 0xcd, 0x1b, 0xa3, 0x9a,
	0x88, 0xbc, 0x3b, 0x3c, 0x74, 0x38, 0xcf, 0x1b, 0xd1, 0x2c, 0xef, 0x4e, 0x18, 0xd5, 0x96, 0xe4,
	0x4d, 0x50, 0xa5, 0x9f, 0x48, 0xc1, 0xc5, 0xa4, 0xcc, 0x8d, 0x93, 0x93, 0xde, 0x13, 0x4c, 0x6c,
	0x01, 0x60, 0x08, 0xf0, 0x30, 0xef, 0x48, 0x10, 0xfd, 0xe9, 0x75, 0x73, 0x72, 0x98, 0x1a, 0xb3,
	0xba, 0x03, 0x79, 0x9a, 0x15, 0x5e, 0x71, 0xb1, 0x27, 0xaf, 0x33, 0xe6, 0x85, 0x71, 0xc7, 0x68,
	0x4d, 0xf0, 0xfa, 0xa6, 0xd4, 0x87, 0x2b, 0x93, 0x2a, 0xde, 0xa5, 0xb6, 0xd9, 0x23, 0xfd, 0x3d,
	0xc8, 0xb7, 0x49, 0x43, 0xb0, 0xee, 0x3c, 0xba, 0xeb, 0xcd, 0x59, 0x05, 0x8a, 0xb6, 0x3b, 0xd0,
	0xe6, 0x3f, 0x47, 0xa5, 0x3f, 0x37, 0x07, 0x25, 0x27, 0x38, 0x1c, 0x9e, 0x76, 0x69, 0xbc, 0xa2,
	0x00, 0xa3, 0xdc, 0xd6, 0xdb, 0xe3, 0x60, 0xd8, 0x6d, 0xf7, 0xbc, 0xe0, 0xf8, 0xa4, 0x47, 0xda,
	0x98, 0xa0, 0xbe, 0x34, 0xa2, 0xa4, 0x92, 0xfa, 0x12, 0x83, 0xd0, 0xf7, 0xa2, 0xc3, 0xa3, 0x6e,
	0xaf, 0xc3, 0xde, 0xb1, 0xa9, 0xad, 0x1a, 0x01, 0x58, 0x9d, 0x91, 0x88, 0x01, 0x38, 0x27, 0xc5,
	0x00, 0xbc, 0x0e, 0xcb, 0x63, 0x56, 0x96, 0xff, 0x61, 0xbb, 0x77, 0xca, 0xaf, 0x87, 0x96, 0x38,
	0xf4, 0x80, 0x00, 0xf5, 0xf7, 0x61, 0xf1, 0x41, 0xf7, 0x7b, 0x64, 0xc5, 0xc6, 0xb7, 0x55, 0xd5,
	0xbb, 0x59, 0x0d, 0xb9, 0xb5, 0xd3, 0xfd, 0x1e, 0x3c, 0x00, 0x67, 0x1f, 0xd0, 0x1f, 0xfa, 0x3a,
	0x2c, 0x90, 0x2c, 0xc5, 0x6e, 0x3a, 0xff, 0xa0, 0xfb, 0x3d, 0x56, 0x47, 0x5f, 0x83, 0x79, 0x8c,
	0xbb, 0xc0, 0x1c, 0x2d, 0xd3, 0x0f, 0xbd, 0x2e, 0x42, 0xfd, 0x25, 0x44, 0xb3, 0x38, 0x43, 0xe9,
	0x91, 0x28, 0x80, 0x17, 0x01, 0xba, 0x23, 0xbf, 0x13, 0xe0, 0xf5, 0x0a, 0xee, 0xb1, 0xf3, 0x4e,
	0xae, 0x3b, 0xaa, 0x52, 0xc0, 0xec, 0x98, 0x15, 0x91, 0x3b, 0x8a, 0x42, 0xec, 0xc2, 0xfc, 0x15,
	0xc8, 0xb2, 0x06, 0xeb, 0x79, 0xc8, 0x72, 0xb5, 0x78, 0xb4, 0xf1, 0x60, 0x1f, 0x7e, 0xd3, 0xa8,
	0xdc, 0xa1, 0xaf, 0x34, 0x37, 0x45, 0xe8, 0xbd, 0xf0, 0x4e, 0x3d, 0x0f, 0x59, 0xb7, 0x55, 0xa9,
	0x98, 0xae, 0xab, 0xa5, 0x09, 0x78, 0xd7, 0xb0, 0x6a, 0x5a, 0xa6, 0xf4, 0x97, 0xd3, 0xb0, 0x9d,
	0xd0, 0x5c, 0xc6, 0x4a, 0x9f, 0x76, 0xb6, 0x4c, 0x79, 0x91, 0x7c, 0x5b, 0x74, 0xf8, 0x5c, 0x82,
	0xcb, 0x0a, 0x2a, 0x48, 0x63, 0x36, 0x91, 0x9e, 0x95, 0x1f, 0xc4, 0xe6, 0xa7, 0x3f, 0x88, 0x3d,
	0xbd, 0x16, 0x81, 0x6e, 0x40, 0x61, 0x1c, 0x0c, 0x8f, 0x47, 0xaa, 0xfa, 0x9b, 0x5a, 0x37, 0x5a,
	0x2d, 0x8f, 0x90, 0x71, 0xc9, 0x72, 0x1c, 0x7e, 0x94, 0xfe, 0xca, 0x02, 0x5c, 0x8a, 0xf7, 0xa0,
	0x13, 0x3c, 0xea, 0x8e, 0xc6, 0xcc, 0x41, 0xfb, 0x53, 0xf6, 0xe2, 0xcc, 0x67, 0xef, 0x77, 0x60,
	0xe9, 0x98, 0x4d, 0x48, 0xd9, 0xae, 0x50, 0x91, 0x95, 0xc4, 0x8c, 0xc5, 0x4b, 0xa2, 0x63, 0xe9,
	0x0b, 0xf3, 0xe7, 0xc9, 0xa5, 0xb0, 0x7f, 0x0c, 0x44, 0x2b, 0x40, 0x0d, 0x5d, 0x29, 0x01, 0xeb,
	0x57, 0x0e, 0xb2, 0x3a, 0x7a, 0x4b, 0x0c, 0x26, 0xd5, 0xb1, 0x7a, 0x67, 0xfa, 0xea, 0x91, 0x3b,
	0xe3, 0x96, 0xfc, 0x11, 0x19, 0xeb, 0x30, 0x56, 0xdb, 0xa2, 0x12, 0xab, 0xad, 0x25, 0xbc, 0x87,
	0xe5, 0x9e, 0xaf, 0x38, 0xd5, 0xd1, 0xd8, 0x01, 0xe4, 0x1f, 0x74, 0x43, 0x75, 0x31, 0x38, 0x0b,
	0x23, 0x50, 0xf2, 0xde, 0xe9, 0x0a, 0xf5, 0x60, 0x78, 0xd0, 0x95, 0xb5, 0xc9, 0x24, 0x66, 0x90,
	0x8f, 0x32, 0x03, 0xd4, 0x4f, 0x26, 0xb9, 0x04, 0x43, 0xe5, 0xda, 0x93, 0x03, 0x93, 0x6e, 0x35,
	0x97, 0x66, 0x4d, 0xed, 0xe5, 0x18, 0xc7, 0xa8, 0x81, 0x1e, 0xef, 0x6a, 0xc2, 0x06, 0xac, 0xc6,
	0x01, 0xba, 0xe2, 0x7b, 0x41, 0x07, 0x58, 0x78, 0xcf, 0xb6, 0x1a, 0x3c, 0x32, 0x8a, 0x67, 0x3a,
	0x75, 0xab, 0xc1, 0x1e, 0xdc, 0x96, 0x20, 0x77, 0xd7, 0xf2, 0xf6, 0xab, 0x8e, 0x71, 0xb7, 0xa1,
	0x65, 0x4a, 0xaf, 0x45, 0x72, 0xa3, 0x3d, 0x58, 0x80, 0xc5, 0xd0, 0xbf, 0xbf, 0x9e, 0x83, 0x79,
	0xa3, 0x5a, 0xb7, 0x1a, 0x5a, 0xba, 0xf4, 0x1a, 0x40, 0xd8, 0x39, 0x82, 0x0b, 0xbd, 0x20, 0x73,
	0xa1, 0x94, 0xe0, 0x42, 0xe9, 0xd2, 0x57, 0xd2, 0x70, 0x71, 0x32, 0x17, 0x32, 0x3f, 0x1a, 0xeb,
	0x47, 0x70, 0x61, 0x18, 0x12, 0xf8, 0x7c, 0xf9, 0xf0, 0x45, 0xc1, 0xf6, 0xfd, 0x97, 0x66, 0x70,
	0x71, 0x46, 0xed, 0x6c, 0x0f, 0x27, 0xb3, 0xbc, 0xc8, 0xe4, 0x4f, 0xc7, 0x26, 0xff, 0x35, 0x58,
	0x12, 0x04, 0xd2, 0x71, 0xb2, 0xc0, 0x81, 0x78, 0xba, 0xbb, 0x02, 0x05, 0x39, 0x58, 0x2d, 0x7f,
	0x41, 0x09, 0x63, 0xd5, 0xea, 0x37, 0x41, 0x23, 0x6c, 0xa4, 0xdb, 0x27, 0x63, 0xc8, 0xa6, 0x3d,
	0x65, 0x70, 0x45, 0x01, 0xa7, 0x76, 0x77, 0xa5, 0xaf, 0xa7, 0x61, 0x23, 0xde, 0x9a, 0xe6, 0x04,
	0x4f, 0xbf, 0x33, 0x18, 0xf4, 0xe3, 0xa3, 0x27, 0xfe, 0xe7, 0x06, 0xdd, 0x3e, 0xab, 0x76, 0xf6,
	0xf1, 0xd1, 0x93, 0xf7, 0x06, 0xdd, 0xbe, 0xbe, 0x0f, 0x73, 0x0f, 0xdb, 0x9f, 0xa7, 0xa1, 0x94,
	0xf3, 0xea, 0xa3, 0x76, 0x72, 0xd9, 0xb7, 0xde, 0x3f, 0x0d, 0x46, 0x18, 0x4f, 0xac, 0xdf, 0x31,
	0xfa, 0xa3, 0xc7, 0xc1, 0xd0, 0xc1, 0x1c, 0xd0, 0x6e, 0x95, 0x39, 0x65, 0x98, 0x67, 0x76, 0xab,
	0x4c, 0x41, 0xe9, 0xb9, 0x19, 0xf6, 0xf6, 0x1e, 0xac, 0xc4, 0x8a, 0xa5, 0xef, 0x84, 0x14, 0xc8,
	0x82, 0xf2, 0x8b, 0x6f, 0x0c, 0x6b, 0x85, 0x54, 0x4c, 0x4b, 0x8f, 0x7d, 0x95, 0xbe, 0xb8, 0x48,
	0x66, 0x74, 0xb4, 0x5d, 0x67, 0x0a, 0x73, 0x6c, 0xc1, 0x9c, 0x64, 0x08, 0x3e, 0x83, 0x61, 0x24,
	0x80, 0x90, 0x25, 0x63, 0x16, 0xba, 0x1d, 0xd9, 0x15, 0x3f, 0xf1, 0xd4, 0x99, 0x4d, 0x15, 0x44,
	0x68, 0x08, 0x65, 0x89, 0xf7, 0xdc, 0x82, 0x55, 0xc1, 0x7b, 0x24, 0x69, 0x9f, 0x0e, 0xc4, 0x0a,
	0x47, 0xb9, 0x42, 0xea, 0x2f, 0x83, 0x00, 0xfa, 0x42, 0xfc, 0xa7, 0xa3, 0x52, 0xe4, 0x08, 0x93,
	0xbd, 0x19, 0xbe, 0x0a, 0xfa, 0xf0, 0xb4, 0xdf, 0xc7, 0x17, 0x93, 0x30, 0x6b, 0xe6, 0x5c, 0x81,
	0x61, 0xc2, 0x9c, 0x6f, 0x00, 0x87, 0x85, 0x19, 0xe7, 0x98, 0xf7, 0x79, 0x0a, 0x37, 0x43, 0xed,
	0xdb, 0xd3, 0x7e, 0xf7, 0xf3, 0xa7, 0x81, 0xff, 0x41, 0xf0, 0x84, 0x19, 0x80, 0xe4, 0x28, 0xe4,
	0x4e, 0xf0, 0x84, 0xee, 0x66, 0xdd, 0xbe, 0xcf, 0x94, 0xf1, 0xa8, 0x3f, 0x05, 0x20, 0xa0, 0x1d,
	0xaa, 0x90, 0x87, 0x91, 0xf1, 0x06, 0xc7, 0x03, 0x3c, 0x0f, 0xf7, 0xba, 0xa3, 0x31, 0x0b, 0x3f,
	0x4d, 0xfd, 0x2b, 0xe8, 0x02, 0x57, 0xeb, 0x8e, 0xc6, 0x34, 0x0a, 0xb5, 0x0e, 0x73, 0x9d, 0x60,
	0x74, 0xc8, 0x1c, 0x3a, 0xe2, 0x6f, 0x74, 0xb1, 0xd2, 0x7e, 0x10, 0xf4, 0x46, 0xdc, 0x39, 0x0a,
	0xfd, 0x52, 0xe4, 0x93, 0xe2, 0x74, 0xf9, 0xe4, 0x19, 0xac, 0x34, 0xde, 0x86, 0xb9, 0x13, 0x52,
	0x57, 0x1d, 0xd9, 0x5b, 0x69, 0xf6, 0xa2, 0x74, 0x90, 0x5e, 0xaf, 0x41, 0x8e, 0xcb, 0xdb, 0xa3,
	0xad, 0x55, 0x5c, 0xd1, 0xb7, 0x9e, 0x4e, 0xc2, 0x75, 0xc2, 0x0c, 0xf4, 0x8f, 0xc3, 0x46, 0xb7,
	0xff, 0x61, 0x77, 0x1c, 0x90, 0xbd, 0x92, 0x30, 0xb5, 0x87, 0xdd, 0x5e, 0xe0, 0xb7, 0x86, 0x3d,
	0x76, 0x6f, 0xbc, 0xca, 0xb0, 0x28, 0xc6, 0xed, 0x76, 0x7b, 0x41, 0x6b, 0xd8, 0x63, 0x97, 0x65,
	0x1d, 0xf9, 0x06, 0x62, 0x1e, 0x2f, 0xcb, 0xd8, 0xae, 0x50, 0xda, 0x4f, 0x62, 0x6a, 0x28, 0xa0,
	0xac, 0xc0, 0x12, 0x1a, 0x7a, 0x71, 0x1d, 0x24, 0xba, 0x3d, 0xed, 0xd6, 0x0c, 0x77, 0xdf, 0x77,
	0x8d, 0x9a, 0xa9, 0xa5, 0x65, 0x21, 0x38, 0x53, 0xaa, 0xc2, 0xd6, 0xa4, 0x85, 0xa1, 0x04, 0x8e,
	0x4e, 0xc9, 0x31, 0xa5, 0xa3, 0x11, 0x5b, 0x4b, 0x9f, 0x83, 0x0d, 0xa6, 0x7b, 0xcd, 0xfc, 0xbf,
	0x88, 0x33, 0x13, 0x67, 0x02, 0x29, 0x89, 0x09, 0x6c, 0xc3, 0xe2, 0x83, 0xa0, 0x1f, 0x3c, 0xec,
	0x32, 0xdd, 0xc8, 0x9c, 0x23, 0xbe, 0x63, 0xcc, 0x3f, 0x13, 0x65, 0xfe, 0xa5, 0x2f, 0xce, 0x25,
	0x36, 0xbe, 0x3d, 0xfa, 0xe0, 0x19, 0x0e, 0x68, 0xe3, 0xf6, 0x48, 0xbd, 0xd8, 0x24, 0x00, 0xdc,
	0x85, 0xf6, 0x19, 0x52, 0x12, 0x12, 0x5f, 0x99, 0x3e, 0x0d, 0x48, 0x15, 0x6e, 0x91, 0xff, 0x90,
	0x49, 0x61, 0x4e, 0x38, 0x24, 0xa6, 0x60, 0x54, 0x54, 0x69, 0xff, 0xb5, 0x33, 0x66, 0x13, 0x61,
	0x4f, 0x2f, 0x41, 0xf1, 0xf4, 0xa4, 0x37, 0x68, 0x77, 0xe8, 0x14, 0x3a, 0x1d, 0xf6, 0xd8, 0xf5,
	0xe8, 0x12, 0x05, 0xf3, 0xc9, 0xf3, 0x22, 0x2c, 0xd3, 0x60, 0x79, 0x82, 0x8c, 0x6a, 0x62, 0x16,
	0x10, 0x2a, 0x4d, 0xb1, 0xe7, 0xd4, 0xc6, 0xdc, 0x87, 0x45, 0xde, 0x58, 0xfd, 0x02, 0x6c, 0x31,
	0xd1, 0x88, 0x59, 0x49, 0xbb, 0xc6, 0x81, 0xe9, 0x57, 0xf6, 0xcd, 0xca, 0x1d, 0x1a, 0xdd, 0x40,
	0xc5, 0xee, 0xa0, 0x19, 0x6e, 0xab, 0x59, 0x35, 0x3c, 0x72, 0xe6, 0xfa, 0x0c, 0x40, 0xd8, 0x5e,
	0x35, 0x76, 0x79, 0xf2, 0xd1, 0x8b, 0xcc, 0xcc, 0xa6, 0xe1, 0x78, 0xf8, 0x35, 0x57, 0xfa, 0xa3,
	0x99, 0xa4, 0xe3, 0x7b, 0x93, 0x33, 0x27, 0xf7, 0xf4, 0xf8, 0xb8, 0x3d, 0x7c, 0x32, 0xed, 0xbd,
	0x73, 0xa6, 0xae, 0xf3, 0x32, 0xa4, 0x3b, 0x63, 0x36, 0x47, 0xd2, 0x1d, 0xb4, 0x45, 0x38, 0x1d,
	0x05, 0x1d, 0x61, 0x8b, 0x80, 0xaf, 0xbf, 0x23, 0x26, 0xaa, 0xac, 0x10, 0x14, 0x5b, 0x0f, 0xf8,
	0x62, 0x3c, 0xd2, 0xdf, 0x85, 0x0b, 0x54, 0xe9, 0x40, 0x4d, 0xe0, 0x0f, 0x83, 0x0f, 0x83, 0xfe,
	0x29, 0xd7, 0xe1, 0x39, 0x87, 0x34, 0x4a, 0x4a, 0x87, 0x12, 0xa0, 0x11, 0x4c, 0xaf, 0xc7, 0xcb,
	0x61, 0x1e, 0xce, 0xdb, 0xbd, 0x1e, 0xcb, 0xff, 0x1a, 0x2c, 0xf5, 0x83, 0xc7, 0xfe, 0xe1, 0xe9,
	0x68, 0x3c, 0x38, 0x26, 0x14, 0x74, 0xa3, 0x29, 0xf4, 0x83, 0xc7, 0x15, 0x0e, 0x23, 0xc2, 0xc5,
	0xe8, 0xf4, 0xc1, 0xa8, 0xdb, 0x79, 0x22, 0x74, 0x4b, 0xe9, 0x67, 0xac, 0x39, 0x9d, 0xee, 0xe8,
	0x28, 0x18, 0xb1, 0x41, 0x97, 0x9b, 0x53, 0x45, 0x04, 0xd9, 0xaf, 0x14, 0xfa, 0x43, 0xc9, 0x67,
	0x89, 0x26, 0x91, 0x57, 0x50, 0xfd, 0xeb, 0xdf, 0x4d, 0xc1, 0x4b, 0xd2, 0xf8, 0xa8, 0x9c, 0xc2,
	0x61, 0x5b, 0x61, 0x45, 0xa8, 0xdd, 0x84, 0x2b, 0x36, 0x95, 0xb0, 0x62, 0xa9, 0xa8, 0x28, 0xa9,
	0xbd, 0x50, 0x00, 0x55, 0x44, 0x14, 0x1b, 0xee, 0xa1, 0x14, 0xe9, 0x55, 0x1c, 0x19, 0x68, 0x6d,
	0x7e, 0x33, 0x9d, 0xc4, 0xf2, 0x9c, 0xe0, 0x64, 0x30, 0x1c, 0x7f, 0xcb, 0x8f, 0x9b, 0x53, 0xb4,
	0xac, 0xdf, 0x80, 0xb5, 0xf0, 0x24, 0xca, 0xaf, 0x7d, 0xc4, 0x99, 0x52, 0x3f, 0x8e, 0x6c, 0x2a,
	0x54, 0x33, 0x6c, 0x88, 0xd5, 0x94, 0x16, 0x7f, 0x8e, 0x42, 0xc8, 0x92, 0xc6, 0xc3, 0x11, 0xa2,
	0xa5, 0x03, 0xe6, 0x12, 0x39, 0x1c, 0x11, 0x20, 0x5b, 0x5d, 0x68, 0xbb, 0x88, 0x44, 0xf2, 0xcd,
	0x4e, 0x9e, 0xc2, 0x30, 0x9c, 0xa6, 0xae, 0x41, 0xe6, 0xb8, 0xf3, 0x16, 0x73, 0xd4, 0x44, 0x7e,
	0x46, 0x99, 0x05, 0xcc, 0x62, 0x16, 0xf9, 0x28, 0xb3, 0x28, 0xbf, 0x02, 0x39, 0xe3, 0xc3, 0x76,
	0xb7, 0xd7, 0x7e, 0xd0, 0x43, 0x9f, 0x1d, 0xad, 0x86, 0x71, 0x60, 0x58, 0x35, 0x76, 0xa5, 0xbb,
	0x04, 0xb9, 0xf0, 0x33, 0x55, 0xbe, 0x09, 0x79, 0xf7, 0x28, 0xe8, 0x7d, 0x88, 0xc6, 0x39, 0x01,
	0xc1, 0xb6, 0x1a, 0xee, 0xbe, 0x59, 0x3b, 0xc0, 0x93, 0x17, 0x61, 0x09, 0xec, 0x23, 0x55, 0x7e,
	0x0c, 0x1a, 0xf5, 0x1d, 0xe5, 0x06, 0xbd, 0xe0, 0x90, 0x46, 0x8e, 0x5c, 0x06, 0x40, 0x5b, 0x44,
	0xf3, 0xfd, 0x96, 0x51, 0xd3, 0x52, 0xfa, 0x1a, 0x68, 0xf8, 0xbd, 0xe7, 0x98, 0x86, 0xc7, 0xa0,
	0x69, 0x7d, 0x15, 0x8a, 0x08, 0xad, 0x99, 0xae, 0xcb, 0x80, 0x19, 0x7d, 0x1b, 0x36, 0x10, 0xb8,
	0x63, 0x7a, 0x77, 0x4d, 0xb3, 0xe1, 0x5b, 0x8d, 0x4a, 0xad, 0xe5, 0x5a, 0x07, 0xa6, 0x36, 0x87,
	0x07, 0x36, 0x34, 0x7c, 0x6c, 0xdc, 0xd7, 0xe6, 0xcb, 0x3f, 0x98, 0x81, 0x65, 0xae, 0xc9, 0x18,
	0x06, 0xcb, 0x6c, 0xd8, 0x4e, 0xdd, 0xa8, 0x69, 0x2f, 0xa0, 0xa7, 0x76, 0xcb, 0xdd, 0xf7, 0xe5,
	0x76, 0xe6, 0x75, 0x0d, 0x0a, 0x08, 0xad, 0x9a, 0x74, 0xe3, 0x2c, 0x08, 0x3a, 0xbb, 0xe5, 0xf9,
	0xf6, 0xae, 0xef, 0x59, 0x75, 0x53, 0x5b, 0xd2, 0xaf, 0xc0, 0x05, 0x84, 0xd6, 0x2c, 0xd7, 0xb3,
	0x1a, 0x7b, 0xdc, 0xdc, 0xc6, 0x6a, 0x18, 0x15, 0x8f, 0x54, 0x66, 0x99, 0x54, 0xd4, 0xc6, 0xc8,
	0x9b, 0xfe, 0x9e, 0x63, 0xb7, 0x9a, 0x7e, 0xd8, 0x41, 0xeb, 0xfa, 0x16, 0xac, 0x29, 0x38, 0x5e,
	0xda, 0x86, 0x7e, 0x1e, 0x36, 0x15, 0x8c, 0xd5, 0x38, 0x30, 0x6a, 0x16, 0x72, 0xe1, 0x4d, 0x7d,
	0x03, 0x74, 0x86, 0x94, 0x2b, 0x7d, 0x59, 0xd7, 0x61, 0x99, 0xc1, 0x79, 0x46, 0x57, 0xf4, 0x75,
	0x58, 0xa9, 0x18, 0x0e, 0xb5, 0x12, 0x67, 0x7c, 0xbc, 0xaa, 0xdd, 0x50, 0xc1, 0x9c, 0xfa, 0x26,
	0xf2, 0x7f, 0x59, 0x26, 0xe1, 0xad, 0x75, 0x3d, 0xbb, 0x72, 0x47, 0xbb, 0x4d, 0xaa, 0x15, 0x0a,
	0x28, 0x2a, 0xf2, 0x1d, 0xd2, 0x43, 0x12, 0xd2, 0x44, 0x57, 0x6d, 0x9f, 0xd1, 0x37, 0x61, 0x55,
	0x82, 0x8a, 0x8e, 0x79, 0xb7, 0xfc, 0x37, 0xd2, 0xaa, 0x4b, 0xea, 0x98, 0x3e, 0x2c, 0x3a, 0xdc,
	0xa7, 0x20, 0xe1, 0xda, 0xa5, 0xa3, 0x17, 0x01, 0x28, 0xac, 0x69, 0x58, 0x55, 0xed, 0x6b, 0x29,
	0xfd, 0x22, 0x6c, 0x51, 0x00, 0x3f, 0xa4, 0xfb, 0x15, 0xbb, 0xb1, 0x6b, 0x39, 0x75, 0xb3, 0xaa,
	0x7d, 0x95, 0xcc, 0x1e, 0x9e, 0x87, 0xeb, 0x5a, 0x7b, 0x0d, 0xb3, 0xaa, 0x7d, 0x29, 0xa3, 0x5f,
	0x80, 0x4d, 0x0a, 0x14, 0x5a, 0x38, 0xd4, 0x98, 0xde, 0xac, 0x6a, 0x3f, 0x92, 0xd1, 0xaf, 0xc2,
	0x85, 0x28, 0xd6, 0x71, 0xac, 0x03, 0xbe, 0x29, 0x6a, 0x7f, 0x22, 0x13, 0x16, 0x2a, 0xfc, 0x05,
	0x84, 0x85, 0xfe, 0x29, 0x19, 0xcd, 0x73, 0x68, 0x5a, 0x95, 0x3b, 0x66, 0xd5, 0x6f, 0x35, 0xb5,
	0x3f, 0x9d, 0xd1, 0xd7, 0xa0, 0xa8, 0xa0, 0xcd, 0xaa, 0xf6, 0x17, 0x24, 0x68, 0x28, 0xaf, 0xfd,
	0xe8, 0x82, 0x04, 0x45, 0xe7, 0x0e, 0x64, 0xb3, 0xfd, 0xfe, 0x6c, 0xd8, 0x2a, 0xe1, 0xc9, 0xe6,
	0x07, 0xb2, 0xe5, 0x2f, 0xcc, 0x81, 0x1e, 0xf7, 0x8b, 0x4b, 0x66, 0xa0, 0xdb, 0xbc, 0xc7, 0xfc,
	0xf3, 0xb8, 0xfb, 0xf6, 0x5d, 0xa9, 0x87, 0x37, 0x61, 0x35, 0x82, 0xc3, 0x6e, 0xed, 0x90, 0x1e,
	0x8a, 0x20, 0xc4, 0x18, 0x7c, 0x2d, 0xa5, 0x5f, 0x83, 0x4b, 0x11, 0xac, 0x70, 0x3d, 0xc0, 0xb2,
	0xfe, 0x6a, 0x5a, 0x7f, 0x11, 0x2e, 0x4f, 0x20, 0x12, 0x43, 0xf1, 0xb3, 0xe9, 0x29, 0x59, 0xb1,
	0x4e, 0xd7, 0x7e, 0x71, 0x5a, 0x56, 0xb4, 0x5f, 0x5b, 0x4d, 0xed, 0x6f, 0x27, 0x51, 0x89, 0xee,
	0xe7, 0xb1, 0xa3, 0x7e, 0x33, 0x4d, 0xc6, 0x26, 0x99, 0x8a, 0x4e, 0x8d, 0x38, 0x9a, 0x5a, 0xd2,
	0x91, 0x8e, 0xff, 0x46, 0x46, 0xbf, 0x0e, 0x57, 0x26, 0xa1, 0x45, 0x21, 0xff, 0x3c, 0x93, 0xd0,
	0x7d, 0xc2, 0x9d, 0xe1, 0x8f, 0xcd, 0x25, 0x94, 0x11, 0x0e, 0xf9, 0x2f, 0x27, 0xa2, 0xc5, 0xd8,
	0xff, 0xc5, 0xf9, 0x84, 0xbc, 0xc5, 0x24, 0xf8, 0xe9, 0xf9, 0xf2, 0x3f, 0x4c, 0xa1, 0x1b, 0x38,
	0x79, 0x65, 0xad, 0xc3, 0x4a, 0x98, 0x20, 0x1c, 0xfb, 0x0d, 0x9c, 0x2d, 0x7e, 0x6c, 0x85, 0xad,
	0x62, 0x06, 0xbe, 0xba, 0xca, 0xce, 0xcb, 0x93, 0xc8, 0x6e, 0xb0, 0x2e, 0x23, 0x35, 0xfa, 0xf9,
	0x94, 0xbe, 0x25, 0xcf, 0x22, 0x65, 0x4e, 0x2b, 0x18, 0x65, 0x5e, 0xab, 0x18, 0x79, 0x6e, 0x6f,
	0xca, 0xf5, 0x92, 0xe6, 0xb7, 0x8a, 0x10, 0xfd, 0xf9, 0x6b, 0xd9, 0xb2, 0x0d, 0x45, 0xf6, 0xbc,
	0xdf, 0x64, 0xbe, 0xcb, 0x09, 0x33, 0x6a, 0xd6, 0x0c, 0x6f, 0xd7, 0x76, 0xea, 0x7e, 0x18, 0x1b,
	0x4c, 0x83, 0x82, 0x80, 0xba, 0xcd, 0x3a, 0xdd, 0x72, 0x04, 0xa4, 0x69, 0xd8, 0x9e, 0x41, 0x0e,
	0x4d, 0xe5, 0x3f, 0x93, 0x89, 0x06, 0x42, 0x2e, 0x42, 0xbe, 0x69, 0xdc, 0x97, 0xb2, 0xca, 0x43,
	0x96, 0x00, 0x2a, 0x76, 0x95, 0xbe, 0x49, 0x92, 0x0f, 0xe6, 0x7c, 0x86, 0xfc, 0xe4, 0xb1, 0x92,
	0xc9, 0x0a, 0x23, 0xdf, 0x07, 0x96, 0xe3, 0xb5, 0x8c, 0x1a, 0xe1, 0x33, 0x78, 0xd8, 0xcb, 0x10,
	0x7e, 0x47, 0x10, 0x56, 0xa3, 0x6a, 0xd7, 0x0d, 0xc7, 0xf4, 0xb4, 0x39, 0xac, 0x9e, 0x71, 0xdf,
	0x37, 0x6a, 0xbb, 0x46, 0xdd, 0x70, 0x3c, 0x6d, 0x9e, 0x8a, 0xcf, 0xf7, 0xd1, 0xe0, 0x5f, 0x5b,
	0x40, 0x5d, 0x42, 0x52, 0xe6, 0xfd, 0x1d, 0xd3, 0xa1, 0xbe, 0x70, 0xb5, 0x2c, 0x59, 0xde, 0x4d,
	0xc3, 0xf3, 0x9d, 0x66, 0xd3, 0xb7, 0x1b, 0x35, 0xab, 0x61, 0x22, 0x35, 0xe9, 0xcb, 0x45, 0x5e,
	0xb8, 0xd5, 0x34, 0xee, 0x7f, 0xf2, 0x93, 0xbe, 0xc5, 0x11, 0x39, 0x9e, 0x53, 0xdd, 0xae, 0x61,
	0x86, 0x86, 0xbb, 0xaf, 0x01, 0x2f, 0xcc, 0x68, 0x56, 0x2a, 0x5a, 0x9e, 0xcc, 0x1a, 0xfc, 0xb2,
	0x1c, 0xa9, 0x3d, 0x05, 0x9e, 0x92, 0x81, 0xf7, 0x2c, 0xc7, 0xd6, 0x96, 0x44, 0x39, 0xac, 0x00,
	0x86, 0xd5, 0x96, 0x31, 0x14, 0xb5, 0x71, 0xdf, 0xbf, 0xe3, 0x37, 0x6b, 0x2d, 0x57, 0x2b, 0x92,
	0x1d, 0x0f, 0x53, 0x7b, 0x75, 0x7f, 0xc7, 0xaa, 0xd5, 0xb8, 0x2f, 0x1f, 0x4d, 0x23, 0xbc, 0x9e,
	0xf5, 0x27, 0x0f, 0xc3, 0xba, 0xc2, 0xbb, 0x68, 0x87, 0xf7, 0xac, 0xa6, 0xf3, 0x0c, 0xa4, 0x9e,
	0xae, 0x19, 0x9e, 0xe9, 0x68, 0x6b, 0xe5, 0x3f, 0x96, 0x12, 0x63, 0x16, 0x06, 0x71, 0xe1, 0xbe,
	0x82, 0xc2, 0x59, 0x2f, 0x01, 0x9b, 0x66, 0xa3, 0x4a, 0x0f, 0x2f, 0xb4, 0xe3, 0x29, 0x90, 0x4c,
	0xf8, 0x34, 0xab, 0x8e, 0xec, 0x67, 0x28, 0x23, 0xc3, 0x98, 0x5f, 0xa9, 0x39, 0x39, 0x3b, 0xf3,
	0x5e, 0xd3, 0x22, 0xd3, 0x1e, 0xa3, 0xb3, 0x09, 0x42, 0x3e, 0x7f, 0x17, 0xca, 0xff, 0x8e, 0xf0,
	0x34, 0x21, 0xbb, 0x33, 0x43, 0x8f, 0x0c, 0x11, 0x77, 0x66, 0x08, 0x93, 0xdc, 0x99, 0x85, 0x40,
	0xee, 0x86, 0x86, 0xd6, 0x86, 0x7b, 0x4b, 0x63, 0xed, 0x98, 0x93, 0x3c, 0x3f, 0x84, 0x6b, 0x6d,
	0x9e, 0x3a, 0x8b, 0xa4, 0x8e, 0xd6, 0x68, 0x53, 0x16, 0xca, 0xb7, 0x55, 0xd7, 0xcb, 0x2b, 0xb0,
	0xc4, 0x7d, 0x2b, 0xd3, 0x8e, 0xc6, 0x2e, 0x61, 0xa0, 0x5d, 0xdb, 0xae, 0xde, 0xd7, 0xd2, 0xe5,
	0x5f, 0x4d, 0x41, 0x41, 0xf6, 0x1b, 0x4f, 0x6a, 0x40, 0x9b, 0x27, 0xb9, 0xc8, 0xd0, 0xa0, 0xc0,
	0x60, 0x3c, 0x08, 0x5f, 0x08, 0x61, 0xf7, 0xe6, 0xa4, 0x34, 0x9e, 0x8e, 0xfa, 0x77, 0xca, 0x48,
	0x20, 0xe6, 0x04, 0x09, 0x7b, 0x96, 0x81, 0xc4, 0xed, 0xfb, 0x3c, 0xe1, 0x59, 0x0c, 0xc8, 0xf6,
	0x7c, 0xe3, 0x8e, 0xe9, 0x68, 0x0b, 0x72, 0x7a, 0x3a, 0x79, 0xb2, 0xa4, 0x2f, 0x18, 0x28, 0xf4,
	0xf5, 0xb3, 0x28, 0xd5, 0x06, 0x9d, 0xbb, 0x69, 0x39, 0x32, 0x45, 0x79, 0xd2, 0x9a, 0xab, 0x41,
	0xf9, 0x0e, 0x2c, 0x39, 0xc1, 0xe3, 0x61, 0x77, 0x1c, 0xb0, 0x66, 0x6a, 0x50, 0xe0, 0xbe, 0x36,
	0x59, 0xd0, 0x5f, 0xec, 0x7a, 0x0a, 0x11, 0x2d, 0xc0, 0xae, 0xa7, 0xb0, 0xb0, 0xbe, 0xe5, 0x63,
	0x61, 0xd4, 0x2d, 0xe5, 0x85, 0x86, 0xd9, 0x52, 0xf7, 0x70, 0xff, 0x75, 0x61, 0xf7, 0x30, 0x88,
	0xdc, 0x3d, 0xdc, 0x9e, 0x5b, 0xea, 0x1e, 0x06, 0x92, 0x8a, 0xfb, 0xbb, 0xd7, 0xf9, 0x10, 0x31,
	0x67, 0x76, 0x05, 0x58, 0x74, 0x4c, 0xd7, 0x74, 0xa8, 0x40, 0xbe, 0x0e, 0x2b, 0x58, 0x2c, 0xba,
	0x0f, 0x72, 0xcc, 0x8a, 0x49, 0x24, 0xb1, 0x94, 0x7e, 0x01, 0xb6, 0x28, 0x18, 0x7d, 0x8c, 0x56,
	0x99, 0xf3, 0x32, 0xe6, 0x57, 0x54, 0xbf, 0x0c, 0xe7, 0x29, 0x36, 0xd9, 0x5b, 0x1a, 0x8a, 0xe2,
	0x94, 0x20, 0xf4, 0x90, 0x56, 0xa5, 0x2e, 0xd2, 0xe6, 0xc2, 0x12, 0xef, 0x1a, 0x62, 0x31, 0x68,
	0xf3, 0xfa, 0x55, 0xb8, 0x18, 0x03, 0x73, 0x51, 0xca, 0x25, 0x0b, 0x70, 0x41, 0xbf, 0x08, 0xe7,
	0x28, 0x89, 0xec, 0x50, 0x8d, 0xb9, 0x9b, 0xd3, 0xb2, 0x61, 0x9d, 0x77, 0x6d, 0x67, 0xcf, 0x54,
	0xfd, 0xa8, 0x2d, 0x86, 0x58, 0x56, 0x67, 0xb6, 0x97, 0xa1, 0xe1, 0x5f, 0x8e, 0x4c, 0x22, 0x8a,
	0xad, 0xd9, 0x6e, 0xe8, 0x1c, 0x09, 0xc8, 0x10, 0xb2, 0x3c, 0x43, 0xcf, 0x4c, 0xf9, 0x90, 0x5a,
	0x76, 0xc8, 0xa6, 0x15, 0xc2, 0x0a, 0x32, 0xb8, 0x92, 0x19, 0x9e, 0x0c, 0x14, 0x74, 0xc3, 0xf6,
	0xcd, 0x86, 0xdd, 0xda, 0xdb, 0xf7, 0xeb, 0x76, 0xc3, 0x24, 0xbc, 0x71, 0x0b, 0xd6, 0x14, 0x0a,
	0xee, 0x8a, 0xad, 0x48, 0xb6, 0x13, 0xde, 0x3d, 0xaa, 0xeb, 0x35, 0x8d, 0x48, 0xe0, 0xac, 0x5b,
	0x3c, 0xb3, 0xee, 0x2a, 0x07, 0x80, 0x15, 0xc2, 0x86, 0xd9, 0x40, 0x92, 0x96, 0xf2, 0xb1, 0xd0,
	0xf4, 0x30, 0x95, 0x63, 0xba, 0x9e, 0xd1, 0x72, 0x8c, 0x90, 0x85, 0xad, 0x92, 0x19, 0x48, 0x91,
	0xcc, 0xdd, 0xe1, 0x6d, 0x52, 0xbe, 0x10, 0xa6, 0x15, 0x21, 0xff, 0xe3, 0x24, 0x27, 0x81, 0x0a,
	0xdd, 0xec, 0xed, 0xb4, 0xdc, 0xfb, 0xda, 0x9b, 0xa4, 0x4b, 0x12, 0x90, 0xac, 0xa0, 0xb7, 0x94,
	0x6c, 0xeb, 0x96, 0xeb, 0x9a, 0x55, 0xd6, 0xc9, 0x6f, 0x2b, 0x28, 0xe6, 0x1f, 0x8e, 0xa2, 0x3e,
	0x81, 0xc7, 0x3f, 0x51, 0x19, 0x5a, 0xc3, 0x0e, 0xe9, 0x3b, 0xde, 0xed, 0x06, 0x59, 0x85, 0xdc,
	0x99, 0x60, 0x40, 0x66, 0x23, 0x77, 0x96, 0x48, 0x9d, 0x5f, 0x09, 0xdc, 0x43, 0x0c, 0xce, 0x49,
	0x71, 0xe8, 0x03, 0xac, 0x61, 0x4b, 0xfd, 0xa1, 0x3d, 0x92, 0x32, 0xe5, 0x68, 0xba, 0x48, 0x8f,
	0xc8, 0x1a, 0x10, 0xa3, 0x2c, 0x49, 0x95, 0xe4, 0x2c, 0x6a, 0x79, 0xf7, 0xb5, 0xae, 0x54, 0x6a,
	0x74, 0x9c, 0x3f, 0xa7, 0x97, 0xe0, 0x52, 0xa2, 0x67, 0xc8, 0x70, 0x92, 0x7d, 0x40, 0xda, 0xcf,
	0x7d, 0xa6, 0x51, 0x47, 0x90, 0xcc, 0xdf, 0x9b, 0xd6, 0xd3, 0x5f, 0x85, 0x1b, 0x1c, 0x85, 0xa3,
	0x44, 0x1d, 0x02, 0xee, 0x98, 0x15, 0x83, 0xcc, 0x79, 0x75, 0xa4, 0x8f, 0x31, 0xc0, 0x28, 0xf3,
	0xd2, 0x16, 0x9b, 0x20, 0x7d, 0x32, 0x97, 0xe3, 0x79, 0x69, 0x03, 0x29, 0x55, 0x7c, 0x82, 0x9c,
	0x60, 0xcc, 0xd3, 0x18, 0x56, 0xec, 0x44, 0x9f, 0x47, 0x6b, 0x06, 0xd6, 0x6f, 0x61, 0x9b, 0x86,
	0xba, 0x0e, 0x4b, 0x0c, 0xcc, 0x86, 0xed, 0x0f, 0xa5, 0xc8, 0xd1, 0x4a, 0x88, 0x5b, 0x6c, 0x7c,
	0x14, 0x4f, 0x7f, 0x3f, 0x44, 0xb8, 0xd1, 0xa6, 0x24, 0x91, 0x29, 0x5b, 0xf0, 0x0f, 0xa3, 0x1c,
	0x2a, 0xb0, 0x74, 0x55, 0xf3, 0x6d, 0xf7, 0x0f, 0xa7, 0xf4, 0x97, 0xa1, 0x94, 0x8c, 0xf4, 0x5b,
	0x8d, 0xf0, 0x7c, 0xf6, 0x23, 0x29, 0xfd, 0x16, 0xdc, 0x14, 0x84, 0xc8, 0x76, 0x59, 0x63, 0x7d,
	0x83, 0x6c, 0xbc, 0xb5, 0x3d, 0x32, 0x31, 0xc4, 0x21, 0xe5, 0x2b, 0xa9, 0x6f, 0xfb, 0x04, 0xfd,
	0xb6, 0x4f, 0xd0, 0x6f, 0xfb, 0x04, 0xfd, 0xb6, 0x4f, 0xd0, 0x6f, 0xfb, 0x04, 0xfd, 0xb6, 0x4f,
	0xd0, 0x7f, 0xf9, 0x7c, 0x82, 0x12, 0x26, 0x20, 0xb0, 0xd2, 0xc9, 0x00, 0x0f, 0x7e, 0xda, 0x97,
	0x1b, 0xfa, 0x15, 0x38, 0x2f, 0xf0, 0x09, 0x47, 0x84, 0x7f, 0xaf, 0x41, 0x2a, 0x33, 0x83, 0x81,
	0xfe, 0xc1, 0x86, 0x52, 0x4c, 0xec, 0xa8, 0xf0, 0xef, 0x37, 0xf4, 0x73, 0xb0, 0x26, 0xf0, 0xf2,
	0x71, 0xe1, 0x07, 0x1b, 0x84, 0xf7, 0x26, 0xa1, 0x94, 0x23, 0xc3, 0x1f, 0x6a, 0x10, 0x9e, 0x91,
	0xc8, 0x73, 0xf9, 0xb1, 0xe1, 0x87, 0xd4, 0xb6, 0x24, 0x1c, 0x1d, 0x7e, 0xb8, 0x41, 0xb6, 0x75,
	0xe9, 0xb8, 0x20, 0x44, 0xab, 0x3f, 0xdc, 0x20, 0xc3, 0x21, 0xd2, 0x2a, 0xd2, 0xfe, 0x8f, 0x34,
	0xf4, 0x22, 0x80, 0x34, 0x76, 0x7f, 0x04, 0x5b, 0x13, 0x72, 0x6b, 0x89, 0x45, 0x7f, 0x05, 0x4b,
	0x48, 0x3a, 0x33, 0xfc, 0x51, 0xac, 0x5d, 0x28, 0x46, 0xee, 0x1b, 0x07, 0xa6, 0x2a, 0x4b, 0xfe,
	0xb1, 0x06, 0x61, 0x38, 0x91, 0xe3, 0xc2, 0x7f, 0xd0, 0x20, 0xcb, 0x44, 0xea, 0x1e, 0x95, 0x33,
	0xff, 0x68, 0x43, 0xdf, 0x80, 0x95, 0xb8, 0x30, 0xf8, 0x1f, 0x36, 0x88, 0x80, 0xa6, 0xb6, 0xf1,
	0x3f, 0xc2, 0x6a, 0x4b, 0x42, 0x9e, 0x25, 0x76, 0xcb, 0x3f, 0xae, 0xf6, 0x2e, 0x19, 0x04, 0x9c,
	0xdc, 0x66, 0xd5, 0xe2, 0xa2, 0xfa, 0x9f, 0x50, 0x49, 0x92, 0x78, 0xff, 0x7f, 0x8c, 0x85, 0x52,
	0x11, 0x0a, 0x45, 0x2c, 0xbb, 0xa1, 0xfd, 0x14, 0x76, 0x88, 0x54, 0xa8, 0x38, 0x50, 0xfc, 0xd5,
	0x06, 0xd9, 0xde, 0x25, 0x8c, 0x72, 0x68, 0xf8, 0xe9, 0x06, 0xe1, 0x68, 0xe1, 0xae, 0xd5, 0x6a,
	0x38, 0xa6, 0xdb, 0xb4, 0x1b, 0xf8, 0x08, 0xf4, 0x33, 0x32, 0x32, 0x2a, 0xb6, 0xfc, 0x2c, 0xd6,
	0x42, 0x3d, 0x38, 0xfc, 0xe3, 0x06, 0x59, 0x2c, 0xea, 0xc9, 0x81, 0x0c, 0x8c, 0xd5, 0x68, 0x49,
	0x54, 0xbf, 0xd5, 0x20, 0x6c, 0x58, 0xa5, 0x62, 0xac, 0x43, 0x9c, 0x23, 0xbe, 0x29, 0x0f, 0xa3,
	0xba, 0xd8, 0xd8, 0x79, 0xe2, 0xb7, 0xb1, 0x9b, 0x13, 0x4f, 0x12, 0xbf, 0x83, 0x6b, 0x69, 0x86,
	0xd0, 0xf8, 0x4f, 0x70, 0x2a, 0x26, 0x6f, 0x02, 0xff, 0xb4, 0x41, 0xf8, 0x4b, 0x84, 0xc9, 0xf1,
	0x21, 0x61, 0x72, 0x03, 0xed, 0x85, 0xdf, 0x8d, 0xf6, 0xae, 0x72, 0xee, 0xfa, 0x5e, 0x9b, 0xcc,
	0x2a, 0x35, 0x1f, 0x69, 0x82, 0x7f, 0xc1, 0x26, 0x1b, 0x2c, 0x43, 0xd7, 0x6d, 0xcf, 0x16, 0x07,
	0x17, 0xbb, 0xe1, 0xdf, 0x35, 0x50, 0x9a, 0x13, 0xf7, 0x12, 0xdf, 0x67, 0x4b, 0x75, 0x9a, 0x40,
	0x4c, 0x7b, 0xe6, 0xfb, 0x65, 0x4a, 0x32, 0x7d, 0xfd, 0xf7, 0x5b, 0x66, 0xcb, 0xc4, 0xdd, 0x65,
	0xdf, 0x94, 0x7b, 0xf9, 0x0f, 0xd8, 0xfa, 0x66, 0x78, 0x98, 0x91, 0xc4, 0xef, 0x7f, 0xcb, 0x26,
	0xd3, 0x29, 0xe9, 0x6c, 0xf1, 0x9f, 0xd8, 0xfa, 0x5a, 0x78, 0x5b, 0x47, 0xf6, 0xf9, 0x96, 0x63,
	0x6a, 0x7f, 0x52, 0x81, 0x7a, 0x56, 0xdd, 0xb4, 0x5b, 0x9e, 0xf6, 0xa7, 0x6c, 0xc2, 0xae, 0x26,
	0x9f, 0x21, 0xfe, 0x53, 0x9b, 0x4c, 0x84, 0x9a, 0x7c, 0x73, 0xef, 0x3b, 0x64, 0x42, 0x35, 0x1d,
	0x93, 0x4a, 0x19, 0x55, 0xed, 0x3f, 0xc3, 0x2e, 0xa4, 0x1b, 0x38, 0x97, 0x5f, 0xe9, 0x14, 0xc5,
	0xdb, 0xba, 0x1f, 0x47, 0xb4, 0x38, 0xda, 0x46, 0x67, 0xf0, 0x9f, 0xb1, 0xc9, 0xf0, 0x70, 0xb9,
	0xc1, 0xc6, 0xd4, 0x28, 0x61, 0x23, 0x57, 0xfe, 0xb3, 0xb6, 0xfe, 0x1a, 0xdc, 0x90, 0x06, 0x8f,
	0xa0, 0xed, 0xa6, 0xe9, 0xa0, 0x29, 0xb9, 0x7f, 0xd7, 0xf2, 0xf6, 0x99, 0xd8, 0x83, 0xe4, 0x7f,
	0xce, 0x26, 0x3b, 0x31, 0xf9, 0x19, 0x56, 0xc4, 0xa8, 0xde, 0xf7, 0xef, 0xee, 0x9b, 0xfc, 0x96,
	0x89, 0x8b, 0xef, 0xda, 0x7f, 0x61, 0x13, 0x61, 0xc0, 0xa8, 0xe0, 0x75, 0x35, 0xe5, 0x0f, 0x24,
	0x01, 0xe9, 0x7f, 0xd7, 0xa8, 0x9b, 0xbe, 0xe1, 0xe2, 0x6b, 0x27, 0xbb, 0x4d, 0xf9, 0x2f, 0x6d,
	0xfd, 0x32, 0x6c, 0x87, 0x33, 0x8c, 0xc9, 0xfe, 0xb8, 0x30, 0xec, 0x56, 0xa3, 0xaa, 0xfd, 0x79,
	0x5b, 0xe1, 0xde, 0xac, 0x25, 0x6c, 0x9f, 0x22, 0x99, 0xd2, 0x09, 0xf5, 0x13, 0x36, 0x59, 0x7f,
	0x56, 0xbd, 0xe9, 0x90, 0x56, 0x60, 0x23, 0xfd, 0x7d, 0x03, 0x7b, 0x8a, 0xc8, 0x43, 0x6c, 0x08,
	0xff, 0x82, 0x5d, 0xfe, 0xaf, 0x52, 0xb0, 0xac, 0x7a, 0xbf, 0xa0, 0xc1, 0xb6, 0xd9, 0x42, 0x0a,
	0x6f, 0x52, 0xc9, 0x59, 0x57, 0x40, 0xc5, 0xc0, 0xa5, 0xf5, 0xf3, 0xb0, 0xa9, 0xbc, 0xca, 0x91,
	0x13, 0x0b, 0x7b, 0x69, 0xca, 0x28, 0x89, 0xc2, 0x27, 0xbb, 0xb9, 0x48, 0x66, 0xe1, 0xd5, 0xaa,
	0x6c, 0xc8, 0x1f, 0x5e, 0xf5, 0x2a, 0x60, 0x2e, 0xf3, 0x69, 0xd9, 0xf2, 0x18, 0xd6, 0x92, 0xdc,
	0x77, 0x48, 0xf7, 0x12, 0x09, 0x35, 0xee, 0x90, 0x99, 0x18, 0x47, 0xf3, 0x3a, 0xd0, 0x17, 0xd0,
	0x18, 0x9e, 0xd7, 0xe5, 0xab, 0xe9, 0x72, 0x0f, 0xf2, 0xcd, 0xf6, 0x70, 0xdc, 0x0f, 0x86, 0xdc,
	0x15, 0x56, 0xd3, 0x70, 0xbc, 0x06, 0x59, 0x61, 0x96, 0x4b, 0xfb, 0x4a, 0x82, 0xb1, 0x87, 0xf1,
	0x34, 0xbd, 0x13, 0xa7, 0x30, 0xd7, 0x33, 0x1c, 0x2d, 0x23, 0x43, 0xea, 0x46, 0xad, 0xa6, 0xcd,
	0xd1, 0x0b, 0x7a, 0x46, 0xd3, 0x6a, 0x9a, 0x8e, 0x36, 0x5f, 0xfe, 0x38, 0xe4, 0xa9, 0xa1, 0x83,
	0xb8, 0xe3, 0xa6, 0x27, 0x2f, 0xf1, 0xf2, 0x4b, 0xaf, 0x96, 0x11, 0xc6, 0x20, 0xe9, 0xf2, 0x87,
	0xb0, 0x56, 0xed, 0x8e, 0x4e, 0x7a, 0xed, 0x27, 0xf6, 0x49, 0xc0, 0x54, 0x28, 0x99, 0x0f, 0xcc,
	0x24, 0x38, 0xdf, 0x94, 0x52, 0xd8, 0x73, 0x49, 0x04, 0x76, 0xd3, 0x6c, 0x68, 0x69, 0xbc, 0xb9,
	0x48, 0x42, 0x37, 0x8d, 0x96, 0x6b, 0x6a, 0x99, 0xf2, 0xd5, 0x88, 0x15, 0x5b, 0x68, 0xb1, 0xc6,
	0xba, 0x21, 0x55, 0xbe, 0x0d, 0xc0, 0x2c, 0x32, 0x07, 0x9d, 0x80, 0x3d, 0x03, 0xd9, 0x2d, 0x8f,
	0x5f, 0x05, 0x03, 0x2c, 0x30, 0x4f, 0xca, 0x29, 0x3d, 0x0b, 0x19, 0xb7, 0x59, 0xd7, 0xd2, 0xe5,
	0xcf, 0x00, 0xd0, 0x6c, 0x59, 0x18, 0x5e, 0x9d, 0x65, 0x8a, 0x71, 0x52, 0xd8, 0x54, 0x4e, 0xe9,
	0x5b, 0xb0, 0x26, 0xc3, 0x05, 0xbb, 0x4c, 0x97, 0x7f, 0x21, 0x07, 0x45, 0xc9, 0xdf, 0x37, 0x57,
	0x17, 0xac, 0x38, 0xb8, 0xdb, 0x7a, 0x76, 0x93, 0x4c, 0xca, 0x14, 0x9d, 0xf7, 0x3b, 0x96, 0xe7,
	0x73, 0x1d, 0x76, 0x1c, 0xb7, 0x0b, 0xb0, 0xc5, 0x08, 0x43, 0x30, 0x8b, 0x9d, 0xa6, 0x65, 0xd0,
	0xac, 0x8e, 0x62, 0xdd, 0x7d, 0x8b, 0x9e, 0x45, 0x76, 0x4d, 0x53, 0x9b, 0x23, 0xcb, 0x82, 0x21,
	0xd8, 0x83, 0x60, 0xe8, 0x82, 0x7a, 0x1e, 0xaf, 0xb7, 0xb0, 0xa4, 0x18, 0x6e, 0x41, 0x2a, 0x8f,
	0x76, 0x84, 0x8c, 0xcd, 0xd2, 0xd5, 0xb6, 0x93, 0x88, 0x5c, 0x0c, 0xb3, 0x35, 0xaa, 0x07, 0x64,
	0xc2, 0x56, 0x79, 0x0c, 0x7d, 0x2d, 0x87, 0x66, 0x7e, 0x34, 0x5b, 0x35, 0x90, 0xbe, 0x06, 0x74,
	0x75, 0xed, 0x60, 0x14, 0x7e, 0x97, 0x6c, 0x8e, 0x98, 0x5b, 0x1e, 0x2f, 0xf2, 0x59, 0x0f, 0x59,
	0x4d, 0xad, 0x40, 0x72, 0x67, 0xdf, 0x56, 0xa3, 0x62, 0x36, 0xc8, 0x54, 0xf3, 0x77, 0xec, 0x46,
	0xcb, 0xd5, 0x96, 0x08, 0x2d, 0xcd, 0x62, 0xd7, 0x6a, 0x98, 0xda, 0x32, 0xbe, 0x2b, 0x50, 0x5a,
	0x02, 0xe0, 0x45, 0x15, 0xf5, 0x55, 0xc8, 0x4b, 0x70, 0x4d, 0x43, 0x67, 0xde, 0xe7, 0x78, 0xf9,
	0x32, 0xed, 0x0a, 0xa2, 0xae, 0xc3, 0xd5, 0x58, 0x99, 0xae, 0xe9, 0x79, 0x35, 0x13, 0xb7, 0x17,
	0x5a, 0xbc, 0x2e, 0x15, 0xd7, 0x34, 0x9c, 0x3b, 0x7c, 0x10, 0x56, 0xa5, 0x2a, 0x4b, 0x5b, 0x1a,
	0xe2, 0xd6, 0xc8, 0x5c, 0x66, 0xb8, 0x7d, 0xbb, 0x66, 0x55, 0x8d, 0xfb, 0xbe, 0x6b, 0x3a, 0x07,
	0x84, 0x3d, 0x13, 0xfc, 0xba, 0xd4, 0x61, 0x28, 0xd9, 0x34, 0xac, 0xbd, 0x7d, 0x0f, 0x51, 0x1b,
	0xfa, 0x4b, 0x50, 0x52, 0xc3, 0x69, 0xfa, 0x49, 0x73, 0x20, 0xd0, 0x5f, 0x81, 0x97, 0x93, 0xe9,
	0xe2, 0x83, 0xf7, 0x50, 0x2f, 0xc3, 0x4b, 0x11, 0xe2, 0x49, 0x03, 0xfd, 0x88, 0x2c, 0xd3, 0x44,
	0x5a, 0xec, 0xd4, 0x23, 0xd2, 0x6b, 0xc9, 0xe5, 0xca, 0x1d, 0xdc, 0x4d, 0xc8, 0x45, 0x1a, 0xef,
	0xcf, 0xe9, 0x37, 0xe1, 0xc5, 0x68, 0x54, 0xd0, 0xc4, 0x76, 0xfe, 0x4c, 0x8a, 0x6c, 0x70, 0x31,
	0xd2, 0x09, 0x33, 0xf1, 0x67, 0x53, 0x44, 0xd2, 0x99, 0x94, 0x71, 0x64, 0x6e, 0xfe, 0xf7, 0xa9,
	0x69, 0xb5, 0x90, 0x17, 0x8f, 0xf6, 0xd7, 0x52, 0x44, 0xd4, 0x99, 0x50, 0x0b, 0x85, 0xf2, 0xaf,
	0xa7, 0xc8, 0xe6, 0x3d, 0x29, 0x53, 0xa5, 0xbb, 0xb5, 0xff, 0x21, 0xb9, 0x02, 0x09, 0x23, 0xa3,
	0xfd, 0x0d, 0x74, 0x2c, 0x3f, 0x81, 0x14, 0x07, 0xe6, 0xe7, 0x92, 0xab, 0x98, 0x30, 0x36, 0x5f,
	0x4f, 0xce, 0x4b, 0x1a, 0x9e, 0x9f, 0x4f, 0x95, 0xbf, 0x6f, 0x11, 0x72, 0xd4, 0x1f, 0x9e, 0xd7,
	0x7e, 0xa4, 0x17, 0x60, 0xd1, 0x33, 0xf6, 0x68, 0x41, 0xf8, 0xec, 0xc9, 0xbf, 0x78, 0x9e, 0x69,
	0xc2, 0x20, 0x11, 0x68, 0xd7, 0x5d, 0x65, 0xa9, 0x23, 0x17, 0x23, 0x18, 0x36, 0x58, 0x62, 0xac,
	0x70, 0x9f, 0x26, 0x88, 0xc8, 0xb0, 0xe0, 0x8b, 0x2c, 0x81, 0x2b, 0xf3, 0x60, 0x81, 0x17, 0x10,
	0x63, 0x6a, 0x59, 0x3d, 0x0f, 0x59, 0x82, 0x21, 0x35, 0x5f, 0xd4, 0x4b, 0x70, 0x89, 0x7c, 0x4c,
	0x59, 0xd1, 0x39, 0xde, 0x00, 0x79, 0x39, 0x03, 0xaf, 0x66, 0x74, 0x2d, 0xe7, 0x09, 0x57, 0x24,
	0x88, 0xa4, 0x85, 0x5c, 0xe0, 0x6d, 0x88, 0xac, 0xe2, 0x25, 0xb2, 0xe0, 0x68, 0x35, 0xce, 0xb0,
	0x92, 0x5f, 0x87, 0x57, 0x26, 0xd3, 0x26, 0xad, 0xe6, 0x5b, 0x50, 0x4e, 0x48, 0x30, 0x79, 0x45,
	0x5f, 0x85, 0x8b, 0x13, 0xe9, 0xd9, 0xaa, 0xbe, 0x09, 0xd7, 0x27, 0xd7, 0x41, 0x5d, 0xd9, 0xc9,
	0xb9, 0x29, 0xab, 0xfb, 0x35, 0xb8, 0x21, 0x93, 0xcc, 0x5a, 0xe1, 0x6f, 0xa8, 0x1d, 0x70, 0x86,
	0x55, 0xfe, 0xba, 0xda, 0x03, 0xb3, 0x57, 0xfa, 0x8c, 0x1a, 0x45, 0x57, 0xfb, 0xab, 0xf0, 0xf2,
	0x94, 0x1a, 0x45, 0x57, 0xfc, 0x2d, 0xb8, 0x39, 0x2d, 0xf3, 0xd8, 0xaa, 0x9f, 0x54, 0x99, 0x09,
	0x2b, 0xff, 0x45, 0xb8, 0x3c, 0x85, 0x9c, 0xaf, 0xfe, 0x49, 0x55, 0x4e, 0xe6, 0x00, 0x93, 0xf2,
	0x54, 0xb9, 0xc0, 0x3f, 0x4a, 0x81, 0x16, 0x3a, 0x2f, 0x60, 0xcf, 0xe2, 0xcb, 0x00, 0x4c, 0xd9,
	0x80, 0xc8, 0x95, 0x2f, 0xe8, 0xaf, 0xc1, 0x4d, 0xf6, 0x1d, 0x15, 0x6c, 0xb9, 0xd6, 0x93, 0x34,
	0xda, 0xb2, 0xae, 0x02, 0x7f, 0xb4, 0xbe, 0x0e, 0x57, 0x79, 0x06, 0x6a, 0x4a, 0x79, 0x81, 0x66,
	0xf4, 0x2b, 0x70, 0x41, 0x4e, 0x18, 0x5b, 0xa9, 0x73, 0xfa, 0x8b, 0x70, 0x45, 0xa1, 0x48, 0x5a,
	0xb2, 0xf3, 0x52, 0x6c, 0x6a, 0x4a, 0x15, 0x59, 0xbb, 0x0b, 0xe5, 0x7f, 0x96, 0x86, 0xd5, 0xb0,
	0xd5, 0xa8, 0xbd, 0x8b, 0x51, 0x31, 0x2e, 0x82, 0xe6, 0xba, 0x4d, 0xcc, 0x8d, 0x9c, 0x34, 0x1d,
	0xc7, 0x76, 0xb4, 0xdf, 0xe5, 0xff, 0x30, 0x44, 0x1e, 0xa2, 0x99, 0x62, 0x3d, 0xfa, 0x7c, 0x27,
	0x80, 0xa6, 0xe9, 0xd4, 0x2d, 0xd7, 0xa5, 0xaa, 0x9e, 0x0d, 0x0b, 0xcf, 0x35, 0x97, 0xe0, 0x1c,
	0x41, 0x89, 0x03, 0xa5, 0x79, 0xcf, 0xf3, 0xad, 0xaa, 0x6f, 0xd6, 0x9b, 0xde, 0x7d, 0xed, 0xa7,
	0x32, 0xa8, 0xc1, 0x45, 0xf2, 0x42, 0xc9, 0x5b, 0x41, 0xfe, 0xb7, 0x02, 0xe9, 0x98, 0xbb, 0xa6,
	0x63, 0x12, 0x96, 0x2a, 0x90, 0x7f, 0x95, 0x2a, 0xb3, 0xb9, 0x4d, 0xdf, 0xa8, 0xa3, 0x4a, 0xe8,
	0x2e, 0x91, 0x8c, 0x3d, 0x56, 0xd7, 0xff, 0x0e, 0xb5, 0x25, 0x93, 0xca, 0xe5, 0x57, 0x23, 0xda,
	0x6f, 0x65, 0x78, 0xd5, 0x94, 0xa2, 0x05, 0xfe, 0x9b, 0x19, 0x72, 0x82, 0x8c, 0x95, 0x5e, 0x6d,
	0x35, 0x6b, 0x78, 0x90, 0xd6, 0x7e, 0x9b, 0xaa, 0x91, 0xb9, 0x4d, 0xbf, 0x52, 0xc3, 0xbb, 0x52,
	0x52, 0x37, 0x2c, 0xfd, 0x77, 0x50, 0x1f, 0xcf, 0x74, 0x2b, 0x8e, 0x7d, 0x37, 0xac, 0x80, 0xc4,
	0x9d, 0x29, 0xd9, 0xaf, 0x67, 0xcb, 0x1f, 0x87, 0x65, 0xc9, 0x63, 0x06, 0x93, 0xe4, 0x51, 0x49,
	0x98, 0x29, 0x36, 0xe1, 0x24, 0x42, 0x80, 0xbd, 0xbb, 0x5b, 0x23, 0xf3, 0x3f, 0x5d, 0xfe, 0xa2,
	0x3a, 0x55, 0xb9, 0xf9, 0xae, 0x2e, 0x15, 0xc0, 0x8f, 0x9b, 0x10, 0x81, 0x87, 0xaa, 0x45, 0x5b,
	0xb0, 0x26, 0xd3, 0x87, 0x7e, 0xf8, 0x23, 0x18, 0xf3, 0x1e, 0x39, 0x11, 0x5b, 0x76, 0x83, 0x6e,
	0x6f, 0x72, 0x1a, 0x11, 0xac, 0xb0, 0xfc, 0x1a, 0x6c, 0x84, 0x15, 0x52, 0x14, 0x3d, 0x42, 0x6d,
	0x99, 0x50, 0xdf, 0xa3, 0xbc, 0x23, 0xb7, 0x9a, 0xb9, 0x0f, 0x58, 0xc1, 0xc3, 0x46, 0x64, 0x01,
	0x9d, 0x83, 0x75, 0x29, 0x86, 0xa3, 0xc4, 0xe8, 0xd3, 0xe5, 0x3f, 0x98, 0x86, 0x25, 0x27, 0x78,
	0x18, 0x0c, 0x83, 0x3e, 0x0b, 0x52, 0x81, 0x81, 0x64, 0xc8, 0x0c, 0xaf, 0x4a, 0x5d, 0x4d, 0x8d,
	0x47, 0x38, 0x9c, 0x5f, 0x60, 0x35, 0xe9, 0x18, 0xa2, 0x77, 0x3b, 0x22, 0xbe, 0x45, 0xf1, 0x61,
	0x41, 0xa8, 0x46, 0x22, 0xd0, 0xca, 0x9a, 0xa5, 0xe7, 0x4c, 0x8e, 0xa3, 0xa0, 0x79, 0x72, 0xec,
	0xe0, 0x20, 0x76, 0xc5, 0x88, 0x2a, 0xc9, 0x88, 0x5d, 0x20, 0x12, 0x2f, 0xc7, 0x8a, 0x79, 0x11,
	0x8f, 0xad, 0x93, 0xa5, 0x5a, 0x34, 0x94, 0x8e, 0x5d, 0x94, 0x6b, 0x8b, 0x64, 0x37, 0x8a, 0x54,
	0x34, 0x52, 0xa1, 0x5c, 0xf9, 0x73, 0x90, 0x97, 0x82, 0x78, 0x90, 0xb9, 0x83, 0xfd, 0x17, 0xaa,
	0x07, 0x2e, 0x41, 0x0e, 0x21, 0x78, 0xfd, 0x82, 0x01, 0x19, 0x68, 0xbf, 0x27, 0x45, 0xb6, 0xbf,
	0x08, 0xe7, 0x62, 0xc8, 0x30, 0xae, 0x7d, 0xf9, 0xcb, 0xa8, 0x37, 0xd6, 0x0b, 0x5d, 0x0a, 0xe2,
	0xb9, 0x0f, 0x15, 0xae, 0x7c, 0xac, 0x27, 0xe9, 0x5e, 0x3c, 0x89, 0x36, 0x0d, 0x87, 0x0e, 0x05,
	0xc0, 0x82, 0xdb, 0xb4, 0xc9, 0x19, 0x37, 0xad, 0xe7, 0x60, 0xbe, 0xb2, 0x6f, 0xd5, 0xc8, 0xe1,
	0x0f, 0x60, 0x61, 0xd7, 0xb1, 0xcc, 0x46, 0x55, 0x9b, 0x43, 0xe5, 0x7c, 0x6b, 0x07, 0x75, 0x2e,
	0xe7, 0xa9, 0x9a, 0x10, 0xc9, 0xe9, 0x80, 0x88, 0x45, 0x39, 0x98, 0xa7, 0xca, 0x51, 0x59, 0x3c,
	0xde, 0xd2, 0xdf, 0x8b, 0xd4, 0x3b, 0x31, 0x55, 0x9a, 0x2a, 0xff, 0x78, 0x1a, 0x16, 0x62, 0xba,
	0x63, 0xad, 0xc6, 0x1d, 0xa1, 0x66, 0xc9, 0xd9, 0x39, 0xea, 0x34, 0xa1, 0x7c, 0xc7, 0x20, 0xe1,
	0x31, 0x57, 0x22, 0xa3, 0xb7, 0x7f, 0x19, 0x29, 0x2f, 0x76, 0x4a, 0x9e, 0xc3, 0x0b, 0x04, 0x0a,
	0xaa, 0x38, 0x76, 0xc3, 0x33, 0x76, 0xb4, 0x79, 0x69, 0xbb, 0x20, 0xe7, 0xed, 0x05, 0x29, 0x23,
	0xf3, 0x80, 0x8e, 0xeb, 0x3a, 0xac, 0x70, 0x0a, 0xcf, 0xf0, 0x2c, 0xd7, 0xb3, 0x2a, 0x64, 0x64,
	0x43, 0xb0, 0x37, 0xd8, 0x61, 0x0e, 0x6d, 0xb4, 0x1c, 0xb2, 0x59, 0xae, 0xeb, 0x56, 0x77, 0x35,
	0x90, 0xea, 0x71, 0x60, 0x36, 0xaa, 0xb6, 0xa3, 0xe5, 0x65, 0x15, 0x39, 0xfa, 0x24, 0x57, 0x90,
	0x72, 0x6b, 0x8d, 0x82, 0x61, 0x65, 0x18, 0x74, 0xba, 0x63, 0x6d, 0x49, 0x02, 0xb3, 0xbb, 0x91,
	0xbb, 0xc1, 0x03, 0x6d, 0xb9, 0xdc, 0x84, 0x65, 0x35, 0x44, 0x31, 0x19, 0x82, 0x70, 0xc2, 0xe4,
	0x60, 0x9e, 0xab, 0x84, 0x01, 0x2c, 0xb0, 0xe6, 0xa7, 0x15, 0xe3, 0x73, 0x6a, 0x4d, 0xc5, 0xf4,
	0x16, 0xb4, 0xb9, 0xf2, 0x6f, 0xa7, 0x60, 0x91, 0x47, 0xd4, 0x45, 0x9d, 0x43, 0xc7, 0x6e, 0xda,
	0xae, 0xe9, 0x48, 0xd3, 0x50, 0x87, 0x65, 0x01, 0xe5, 0xd9, 0xaf, 0x42, 0x51, 0xc0, 0x44, 0x39,
	0xeb, 0xb0, 0x22, 0x80, 0x52, 0x81, 0x32, 0x38, 0x2c, 0x19, 0xb5, 0x30, 0x39, 0x58, 0x56, 0xc4,
	0x9b, 0x57, 0x32, 0x67, 0xaa, 0x78, 0x0b, 0x84, 0x63, 0x08, 0x60, 0xf8, 0xc8, 0x96, 0x55, 0x6a,
	0xc7, 0x67, 0x99, 0x06, 0x85, 0x30, 0x83, 0x1a, 0x11, 0xad, 0x65, 0x2a, 0x3a, 0x9f, 0xa0, 0xfc,
	0x83, 0x3a, 0x80, 0x89, 0x3e, 0x92, 0x39, 0x5b, 0x23, 0xa2, 0xb9, 0x77, 0x9f, 0x5e, 0xa5, 0x50,
	0x35, 0x7d, 0xf4, 0xf0, 0x2e, 0x83, 0x2b, 0x86, 0x67, 0xd4, 0xec, 0x3d, 0x1a, 0x1f, 0x56, 0x46,
	0x54, 0x2d, 0x77, 0x5f, 0x23, 0xfb, 0xdc, 0x96, 0x0c, 0x95, 0x0d, 0x30, 0xe8, 0xd1, 0x22, 0x8e,
	0xd5, 0xe6, 0x49, 0x5f, 0xc8, 0x70, 0xd1, 0x79, 0x0b, 0xd1, 0x14, 0xac, 0xaf, 0xb3, 0xd1, 0xda,
	0x52, 0x9e, 0xb2, 0x48, 0x84, 0x91, 0x58, 0x23, 0x64, 0x0e, 0x9b, 0x23, 0x8c, 0x29, 0x9e, 0xa1,
	0x4c, 0x02, 0xd1, 0x36, 0x58, 0x9e, 0x59, 0x17, 0x06, 0xa6, 0xf9, 0x68, 0x5d, 0x05, 0x93, 0x29,
	0x10, 0x86, 0x99, 0x84, 0xa1, 0x96, 0x81, 0xe2, 0xb2, 0x7c, 0x49, 0xbf, 0x06, 0x97, 0x13, 0xe9,
	0xa8, 0xb6, 0x0c, 0x56, 0x62, 0x39, 0xda, 0x12, 0xf1, 0x44, 0xcc, 0xce, 0x4f, 0x5a, 0x31, 0x36,
	0x32, 0x76, 0xc3, 0xa3, 0x6a, 0xc0, 0x91, 0x1a, 0xe2, 0x21, 0xec, 0x7e, 0xd3, 0xd4, 0x56, 0xc8,
	0xcc, 0x8a, 0x60, 0x34, 0x9d, 0xb0, 0xce, 0x68, 0x73, 0x7d, 0xb7, 0xb2, 0x6f, 0x56, 0x5b, 0x35,
	0x53, 0x5b, 0x8d, 0xa2, 0xf9, 0x73, 0x86, 0xe1, 0x11, 0xb6, 0xb7, 0x46, 0xb8, 0x72, 0x74, 0x1a,
	0x70, 0xe4, 0x7a, 0xb4, 0x27, 0xe9, 0x70, 0x30, 0xec, 0x06, 0x39, 0x13, 0xca, 0xd8, 0xa6, 0x63,
	0x56, 0x4d, 0x22, 0x0f, 0x57, 0xfd, 0x3b, 0xe6, 0xfd, 0xbb, 0xb6, 0x53, 0xd5, 0x36, 0xa3, 0xb3,
	0xcc, 0x70, 0x4c, 0x43, 0xdb, 0x22, 0xdb, 0xa4, 0x0c, 0xe5, 0xee, 0x5f, 0xd9, 0x3c, 0x3b, 0x47,
	0x44, 0x57, 0x25, 0x55, 0x6d, 0xcf, 0x26, 0x8c, 0xc4, 0xa8, 0x9b, 0x1e, 0x6a, 0xfb, 0x34, 0x76,
	0xad, 0x3d, 0x6d, 0x3b, 0xda, 0x83, 0xf6, 0x81, 0xe9, 0xd4, 0x8c, 0xfb, 0xda, 0xf9, 0x09, 0x9d,
	0xcf, 0xb6, 0xe2, 0x86, 0xa7, 0x5d, 0x88, 0x36, 0xfb, 0xce, 0xfd, 0x8a, 0xef, 0x98, 0xef, 0xb7,
	0x4c, 0xd7, 0xd3, 0x2e, 0x46, 0x8b, 0xa7, 0xc9, 0xd9, 0xf3, 0x94, 0x78, 0xa6, 0xba, 0xa4, 0xbf,
	0x0c, 0xd7, 0x26, 0x93, 0x1d, 0x58, 0x36, 0xdb, 0x96, 0x2e, 0x4f, 0xcf, 0xaf, 0x69, 0x36, 0x8c,
	0x9a, 0x77, 0x5f, 0xbb, 0x12, 0xed, 0x6d, 0x4a, 0x46, 0xe6, 0x8b, 0xe9, 0x68, 0x57, 0x93, 0xb1,
	0xbe, 0xb1, 0x47, 0xe6, 0x4c, 0x29, 0x5a, 0x04, 0xd9, 0x46, 0xe3, 0x4b, 0xe3, 0x1a, 0x39, 0x8f,
	0x2a, 0x43, 0xc6, 0x2e, 0xae, 0x8d, 0x66, 0x93, 0xf5, 0x6a, 0x8b, 0xbe, 0x9e, 0x68, 0x2f, 0x12,
	0x79, 0x28, 0x9a, 0x23, 0x5d, 0xa5, 0xd7, 0xf5, 0x1b, 0xf0, 0xe2, 0xe4, 0xf6, 0x38, 0xad, 0x9a,
	0xc9, 0x06, 0xf2, 0x46, 0x74, 0x8a, 0xc4, 0x29, 0xb5, 0x9b, 0xd1, 0xe5, 0x24, 0x59, 0x4a, 0x55,
	0x8c, 0x7a, 0xd3, 0xb0, 0xf6, 0x1a, 0x5a, 0x79, 0x0a, 0x91, 0x67, 0xd5, 0x4d, 0xb7, 0x66, 0x7b,
	0xda, 0x2b, 0xd1, 0x61, 0x97, 0x88, 0x28, 0x37, 0x7c, 0x35, 0x39, 0x1b, 0x6a, 0xe5, 0xc6, 0x39,
	0xc4, 0x6b, 0xd1, 0x69, 0xc5, 0xdf, 0xc5, 0x6f, 0x25, 0x73, 0xa7, 0xca, 0xbe, 0xe1, 0xec, 0x99,
	0x3b, 0x46, 0xe5, 0x8e, 0xf6, 0x7a, 0x74, 0x5a, 0x91, 0x4e, 0xe3, 0x32, 0xd5, 0x1b, 0xe4, 0x1c,
	0xa5, 0xb2, 0x62, 0x77, 0x9f, 0xf4, 0xfa, 0x81, 0xe9, 0xe0, 0x29, 0x06, 0xbb, 0xe3, 0x63, 0xd1,
	0xb5, 0x11, 0xde, 0xb8, 0x78, 0x86, 0x7b, 0x47, 0xbb, 0x1d, 0x9d, 0x07, 0x4a, 0x67, 0xbe, 0x1d,
	0xed, 0xf0, 0x84, 0x41, 0xf9, 0x44, 0xb4, 0x04, 0x31, 0x11, 0x6d, 0xab, 0xe1, 0xb9, 0xda, 0x27,
	0xa3, 0xc3, 0xcb, 0x8e, 0x9b, 0xe1, 0x61, 0x8f, 0x2f, 0xc0, 0x77, 0x93, 0x27, 0x82, 0x6f, 0x78,
	0x9e, 0x63, 0xed, 0xb4, 0xf0, 0x25, 0xd0, 0xae, 0xb6, 0x2a, 0x9e, 0xf6, 0x5d, 0xb3, 0x29, 0x99,
	0x4f, 0x2b, 0x43, 0x2f, 0xc3, 0x4b, 0x53, 0x29, 0xc5, 0x2f, 0x6d, 0x27, 0xc6, 0xb1, 0xa3, 0xb4,
	0x74, 0xc2, 0x56, 0xf4, 0x57, 0xe1, 0xc6, 0x54, 0xba, 0xdd, 0x56, 0x6d, 0xd7, 0x62, 0x37, 0x6b,
	0xd5, 0x99, 0xd4, 0xf2, 0x3d, 0x9c, 0x19, 0x9d, 0x52, 0x8e, 0x59, 0x71, 0x5a, 0x16, 0xca, 0xd6,
	0xbe, 0x6b, 0xe2, 0xf9, 0x54, 0xdb, 0x8d, 0x66, 0x99, 0x40, 0xe4, 0xd7, 0x0d, 0xcf, 0x74, 0x2c,
	0xa3, 0xa6, 0xed, 0x45, 0x59, 0xb6, 0x5d, 0xa9, 0x18, 0x94, 0xc4, 0xae, 0x9a, 0xda, 0x7e, 0x6c,
	0x8f, 0xe6, 0x68, 0x72, 0x8e, 0xb1, 0xce, 0x54, 0x14, 0xdf, 0x9f, 0xdf, 0x8b, 0x4d, 0x58, 0x9c,
	0xd2, 0x74, 0xa2, 0xdc, 0x89, 0x76, 0xaf, 0x6a, 0x16, 0x29, 0x16, 0x67, 0x2d, 0x3a, 0xe9, 0x6c,
	0xc2, 0xd2, 0x9a, 0x16, 0x37, 0x9f, 0x27, 0x07, 0xdc, 0x7a, 0x94, 0x41, 0x71, 0x9a, 0x83, 0xa0,
	0xdf, 0x19, 0x0c, 0xf9, 0x8c, 0x6a, 0x44, 0xb3, 0xf2, 0x8c, 0x3d, 0xca, 0x00, 0xc3, 0x5d, 0xd0,
	0x8e, 0x76, 0x8f, 0x42, 0xa3, 0x35, 0xcb, 0x1f, 0x00, 0x54, 0x8e, 0xda, 0xfd, 0x47, 0xe2, 0xa4,
	0xc6, 0xb4, 0x71, 0xe8, 0xa2, 0xc3, 0xc3, 0x2a, 0x7d, 0x1a, 0x95, 0xe1, 0xdc, 0xbc, 0x3f, 0x0a,
	0xa7, 0x76, 0xa1, 0x54, 0x0a, 0x94, 0xe1, 0xae, 0x67, 0x38, 0x9e, 0x36, 0x57, 0xde, 0x86, 0xb4,
	0xed, 0x12, 0x29, 0xd6, 0x68, 0x54, 0x1d, 0xdb, 0xaa, 0xd2, 0x27, 0x30, 0xcb, 0x76, 0xb5, 0x74,
	0xf9, 0x22, 0x2c, 0x36, 0x4f, 0x47, 0x47, 0x58, 0x8d, 0x2c, 0x64, 0x76, 0x2b, 0x75, 0xea, 0x0b,
	0xc9, 0x68, 0x36, 0x08, 0xfa, 0x4f, 0x02, 0x2c, 0xd6, 0xdb, 0xa3, 0x11, 0x8b, 0x7a, 0x78, 0xb1,
	0x6e, 0xb8, 0xae, 0x3c, 0x0a, 0x3b, 0x2d, 0xd7, 0x6a, 0x50, 0x3d, 0xaa, 0x5d, 0x9b, 0x9e, 0xa2,
	0xa3, 0x24, 0x75, 0xb3, 0xd1, 0xd2, 0xd2, 0x68, 0x08, 0x1c, 0xc1, 0xd8, 0xfc, 0x1c, 0x7d, 0x19,
	0xce, 0xc7, 0x71, 0x26, 0x0f, 0x8a, 0xa7, 0xcd, 0x25, 0x95, 0xec, 0x98, 0x7b, 0xad, 0x9a, 0xe1,
	0xf8, 0xfb, 0x76, 0xcb, 0x71, 0xa9, 0xa9, 0x42, 0x94, 0xc4, 0x6d, 0x9a, 0x15, 0xcb, 0xa8, 0x31,
	0x12, 0x3c, 0x6c, 0x86, 0x24, 0x6c, 0xc5, 0x98, 0xf5, 0x66, 0xcd, 0xa6, 0x3a, 0x05, 0xac, 0xb4,
	0x2c, 0x19, 0xdf, 0x18, 0x9d, 0x72, 0x28, 0xd5, 0x16, 0x09, 0x9f, 0x9c, 0x44, 0xc3, 0x9f, 0xf3,
	0xa8, 0x20, 0x18, 0x52, 0x71, 0xcd, 0x7e, 0xb4, 0xf0, 0x61, 0x63, 0x09, 0x49, 0x6d, 0xa7, 0xdc,
	0xda, 0x47, 0x76, 0x8d, 0x77, 0xd0, 0x21, 0xc1, 0xfb, 0x75, 0x57, 0xda, 0xb5, 0x0b, 0x64, 0x21,
	0xcd, 0xaa, 0x06, 0x37, 0x50, 0xd2, 0x96, 0x92, 0x46, 0x07, 0x45, 0xea, 0x65, 0xb5, 0x10, 0x56,
	0x0b, 0x26, 0x85, 0x17, 0xd1, 0x5c, 0x20, 0x82, 0xbc, 0xbb, 0x6f, 0x79, 0x66, 0xcd, 0x72, 0x89,
	0x28, 0x98, 0xd4, 0x15, 0xec, 0x66, 0xb8, 0xe5, 0x9a, 0x4e, 0xc3, 0xa8, 0x13, 0xb1, 0xf0, 0x26,
	0x5c, 0x8f, 0x8d, 0x0f, 0x13, 0x00, 0xd1, 0x0a, 0x8a, 0xdd, 0x93, 0xb9, 0x9a, 0xae, 0xdf, 0x82,
	0x72, 0x48, 0xda, 0x74, 0xec, 0xba, 0x8d, 0x82, 0xd7, 0x84, 0xa5, 0xbd, 0x4a, 0xf8, 0x76, 0x48,
	0x3f, 0xe5, 0x1a, 0x61, 0x8d, 0x70, 0xa5, 0x58, 0x55, 0xb9, 0xd2, 0xd9, 0xba, 0x3a, 0x5a, 0x42,
	0x32, 0xa1, 0x5b, 0x0a, 0x2e, 0xeb, 0x0d, 0xfd, 0x75, 0x78, 0x25, 0x46, 0x52, 0xb1, 0x0f, 0xac,
	0xea, 0xc7, 0xbe, 0xc3, 0x3f, 0x30, 0x2a, 0x15, 0xab, 0x41, 0x85, 0x44, 0x36, 0x97, 0x36, 0x13,
	0xe7, 0xd2, 0x4e, 0xab, 0x76, 0x87, 0x2e, 0x72, 0x32, 0x88, 0x5b, 0x6a, 0xad, 0x44, 0xe7, 0x9b,
	0x7b, 0xb6, 0x73, 0x5f, 0x3b, 0xa7, 0xce, 0x5a, 0xd1, 0xba, 0xa8, 0x64, 0xb6, 0xad, 0x7f, 0x1c,
	0x5e, 0x4f, 0x2e, 0xc9, 0xa8, 0x56, 0xf9, 0xfe, 0xe8, 0x19, 0x95, 0x3b, 0xd2, 0xd8, 0x9d, 0x9f,
	0x9c, 0xc8, 0xa9, 0x1f, 0x4c, 0x48, 0x74, 0x41, 0x1d, 0x9f, 0x58, 0x8d, 0xcc, 0x7b, 0x95, 0x5a,
	0xab, 0x1a, 0x8a, 0x24, 0x17, 0x27, 0xd0, 0xc7, 0xc6, 0xc7, 0x37, 0x5a, 0x55, 0xcb, 0xd3, 0x2e,
	0xe9, 0x6f, 0xc2, 0x1b, 0x93, 0xe9, 0xa5, 0xc7, 0x72, 0x76, 0x5b, 0xde, 0xb0, 0x3d, 0x4b, 0xbb,
	0x3c, 0x21, 0x15, 0xaf, 0x15, 0x6d, 0x94, 0x79, 0x60, 0xdf, 0x31, 0xa5, 0x05, 0x74, 0x45, 0x7f,
	0x0d, 0x6e, 0xce, 0x6a, 0x0b, 0x6e, 0x47, 0xd8, 0x74, 0x14, 0x38, 0xa3, 0x43, 0xc5, 0xc4, 0xc8,
	0xf2, 0x21, 0xac, 0x10, 0x4e, 0x49, 0xd9, 0x7a, 0x6d, 0xf0, 0x08, 0x59, 0x26, 0x5f, 0x71, 0x8c,
	0x2d, 0xd7, 0xec, 0x3d, 0x7f, 0xd7, 0x42, 0x0f, 0x0d, 0x7c, 0xc5, 0x49, 0x18, 0x7e, 0xba, 0xc2,
	0x03, 0x71, 0x14, 0x69, 0xd4, 0x6a, 0x5a, 0xba, 0xfc, 0x22, 0x64, 0xa9, 0x87, 0xd7, 0x8e, 0x5e,
	0x80, 0x45, 0xe6, 0xc2, 0x97, 0xf9, 0x70, 0xa0, 0xce, 0x7b, 0xab, 0x5a, 0xaa, 0xfc, 0x03, 0x29,
	0xd0, 0x2a, 0x47, 0xed, 0xe1, 0xa3, 0xe0, 0x41, 0xfb, 0xf0, 0x83, 0xf0, 0x42, 0x34, 0x14, 0x03,
	0x25, 0xfd, 0x9b, 0x2d, 0x58, 0x93, 0xe1, 0xd2, 0xc5, 0x27, 0xdd, 0x4e, 0x04, 0x86, 0xaa, 0xa3,
	0x65, 0xf0, 0x01, 0x3b, 0x04, 0x37, 0x1d, 0xbb, 0x42, 0xb6, 0x6c, 0xb4, 0x6b, 0x54, 0xcb, 0xe0,
	0x76, 0xd6, 0xf3, 0xe5, 0xaf, 0xa6, 0x60, 0x1d, 0xb5, 0x4d, 0xc2, 0x5a, 0x31, 0x7b, 0xdd, 0x8b,
	0x70, 0x4e, 0x4a, 0x11, 0x8b, 0xe4, 0xfd, 0x32, 0x5c, 0x8b, 0xa3, 0xe3, 0x2b, 0x3b, 0x95, 0x9c,
	0x8f, 0xd5, 0x38, 0xb0, 0xad, 0x0a, 0xd9, 0x31, 0x5f, 0x85, 0x1b, 0x67, 0xc8, 0x87, 0x86, 0xe0,
	0xce, 0x94, 0x0f, 0x59, 0x78, 0x0f, 0x5a, 0xdb, 0x9d, 0xf6, 0xe1, 0x07, 0x7c, 0x30, 0xa5, 0x4c,
	0x70, 0x0a, 0xa0, 0x76, 0x49, 0x2a, 0x09, 0xb3, 0xdb, 0x22, 0x03, 0x96, 0x84, 0x21, 0x07, 0x1a,
	0x2d, 0x53, 0xf6, 0x61, 0xe9, 0xfd, 0xd3, 0x76, 0xaf, 0x3b, 0x7e, 0xc2, 0x2e, 0xe8, 0xb6, 0x61,
	0x83, 0xcf, 0xbb, 0xf0, 0xa2, 0x8e, 0xdd, 0x0f, 0x15, 0x21, 0xcf, 0x14, 0xd4, 0xd8, 0x45, 0xa5,
	0x06, 0x05, 0x0e, 0x40, 0xe5, 0xf8, 0x34, 0x6a, 0xb5, 0xbc, 0x4f, 0xc6, 0x67, 0x01, 0xd2, 0x15,
	0x17, 0x2f, 0xa1, 0x57, 0xaa, 0xdd, 0xd1, 0x51, 0xad, 0x3b, 0x1a, 0x87, 0x9a, 0x3a, 0x05, 0x58,
	0x14, 0x1a, 0x3e, 0x78, 0x17, 0xc9, 0xb5, 0x7d, 0xca, 0x6f, 0xc0, 0x32, 0x86, 0x89, 0xc3, 0x08,
	0x99, 0x48, 0xab, 0x41, 0x81, 0xea, 0x87, 0xd1, 0x4b, 0x5b, 0xed, 0x05, 0x92, 0x5a, 0x7c, 0xa5,
	0xca, 0x3f, 0x94, 0x02, 0x1d, 0xfb, 0x89, 0x17, 0x21, 0x6c, 0x27, 0xf1, 0x92, 0x88, 0xb5, 0x82,
	0xda, 0xf2, 0xee, 0xdb, 0x75, 0x22, 0x93, 0xd7, 0x6a, 0x66, 0x85, 0xc5, 0x56, 0x29, 0x42, 0x9e,
	0x02, 0x2d, 0xa7, 0x82, 0x5e, 0xb4, 0x00, 0x16, 0x76, 0x8c, 0x46, 0x83, 0x5f, 0x30, 0x36, 0x51,
	0x7d, 0xc6, 0x67, 0x20, 0xf4, 0x16, 0x52, 0xad, 0xf9, 0x56, 0xa3, 0x6a, 0xde, 0xd3, 0xe6, 0xf5,
	0x25, 0xc8, 0x55, 0x6b, 0xbe, 0xdd, 0xf2, 0x6a, 0xa6, 0xa7, 0x2d, 0xb0, 0x4f, 0x46, 0x9b, 0x2d,
	0x7f, 0x16, 0x74, 0xe1, 0x13, 0xe7, 0x89, 0xb8, 0x54, 0x0f, 0x35, 0x33, 0x2a, 0x86, 0x83, 0x76,
	0x63, 0xb2, 0x94, 0x9c, 0x92, 0x54, 0x6b, 0x10, 0x2f, 0x23, 0xb1, 0x7b, 0x2b, 0x76, 0x55, 0xcb,
	0x94, 0x1d, 0x28, 0x70, 0xb5, 0x30, 0x1e, 0xc5, 0x9d, 0x8d, 0x53, 0x78, 0x4f, 0x83, 0x26, 0x9c,
	0xc2, 0x72, 0x49, 0x80, 0x31, 0xa0, 0x8c, 0x60, 0x32, 0x02, 0x9c, 0x2e, 0xbf, 0x07, 0x85, 0x4a,
	0x7b, 0x1c, 0x3c, 0x1a, 0x0c, 0x9f, 0x30, 0xef, 0x4f, 0x9b, 0xf2, 0xb7, 0xef, 0x1e, 0x0d, 0x4e,
	0x82, 0x60, 0x77, 0x30, 0xe8, 0x68, 0xbf, 0x9e, 0x9d, 0x80, 0xad, 0xb7, 0x87, 0x63, 0xed, 0x37,
	0xb2, 0xe5, 0xdb, 0xb0, 0x49, 0x27, 0x2f, 0x23, 0xd9, 0xed, 0x0e, 0x47, 0xe3, 0x5a, 0xf0, 0x61,
	0xd0, 0x43, 0x1f, 0x1f, 0x96, 0xe3, 0x7a, 0x7e, 0xcd, 0x3c, 0x30, 0x6b, 0xe1, 0xf4, 0x2a, 0xbf,
	0x09, 0x5b, 0x4a, 0x1a, 0x37, 0x38, 0x1c, 0xf4, 0x3b, 0x34, 0x11, 0x3e, 0x7f, 0x54, 0xec, 0x46,
	0x35, 0x96, 0xea, 0x27, 0x53, 0xb0, 0x12, 0x73, 0x42, 0x8e, 0xd6, 0x99, 0x46, 0xe3, 0x0e, 0x77,
	0xb1, 0xc2, 0xf4, 0xaf, 0x36, 0x61, 0x55, 0x86, 0xe2, 0x75, 0x15, 0xb2, 0x9f, 0x08, 0x82, 0x3f,
	0xc8, 0xe0, 0xca, 0x91, 0x11, 0x92, 0x45, 0x75, 0x04, 0x73, 0x60, 0x3a, 0xd6, 0xae, 0x85, 0x56,
	0xde, 0x1b, 0xa0, 0xcb, 0x18, 0x9c, 0x0f, 0x55, 0x6d, 0x3e, 0x5a, 0x08, 0x77, 0xa4, 0xb2, 0x50,
	0xfe, 0xcb, 0xca, 0xd3, 0x11, 0xe3, 0x49, 0xdb, 0xb0, 0x21, 0x3d, 0xeb, 0x30, 0x66, 0xc1, 0xda,
	0xa1, 0x3e, 0x06, 0x31, 0x9c, 0xf7, 0x46, 0xec, 0x01, 0x89, 0x63, 0x3e, 0x46, 0x35, 0xbd, 0xe2,
	0x98, 0xbb, 0xa6, 0x79, 0xa7, 0x76, 0x5f, 0xcb, 0x10, 0xce, 0x15, 0xc7, 0xd6, 0xed, 0x86, 0xb7,
	0x5f, 0xbb, 0xaf, 0xcd, 0x91, 0x49, 0x1b, 0x47, 0xef, 0x58, 0x2c, 0xf9, 0x7c, 0x79, 0x0f, 0xf5,
	0xde, 0x78, 0x98, 0x04, 0xc9, 0xcc, 0x5d, 0xbd, 0x5c, 0xe6, 0x5a, 0xfe, 0x5c, 0x07, 0x4e, 0xb2,
	0xa4, 0x47, 0xa6, 0x97, 0x2e, 0xbf, 0x0e, 0x99, 0x83, 0xf6, 0x98, 0x2c, 0xcb, 0x03, 0xc3, 0x53,
	0x1d, 0x28, 0x10, 0xc0, 0x7d, 0xd3, 0xa5, 0x57, 0xde, 0xe4, 0xa3, 0x41, 0x12, 0xd8, 0x90, 0xb9,
	0x7b, 0x84, 0x09, 0xee, 0xee, 0x47, 0x12, 0x10, 0x80, 0x48, 0x40, 0x3e, 0x48, 0x02, 0x7d, 0x19,
	0x80, 0xfc, 0xde, 0x31, 0xf7, 0x8d, 0xda, 0xae, 0x96, 0xe1, 0xdf, 0xac, 0x4e, 0x73, 0xe5, 0x43,
	0x28, 0x1c, 0xb4, 0xc7, 0x95, 0x76, 0xef, 0xf0, 0xb4, 0x47, 0x3d, 0xb1, 0xaf, 0x93, 0xc2, 0x2a,
	0x46, 0xad, 0xd2, 0xc2, 0x97, 0xda, 0xb0, 0x8c, 0xf3, 0xb0, 0xa9, 0xa2, 0xd8, 0x4e, 0x8d, 0x7a,
	0x8b, 0x31, 0x64, 0xe8, 0x74, 0x28, 0x5d, 0xfe, 0x6f, 0x52, 0x50, 0x90, 0x43, 0x37, 0xe0, 0xa5,
	0x37, 0x55, 0x15, 0x54, 0x47, 0xfa, 0x32, 0x9c, 0x57, 0xe1, 0xaa, 0x87, 0x05, 0x7c, 0x47, 0x53,
	0x09, 0x70, 0x8a, 0x71, 0xc7, 0x11, 0x69, 0xe6, 0x5d, 0x40, 0xc2, 0x57, 0x2a, 0x5a, 0x86, 0x54,
	0x2e, 0x5a, 0x9c, 0x4f, 0x01, 0xda, 0x1c, 0x91, 0x16, 0x55, 0x24, 0x95, 0xa3, 0xa5, 0x62, 0xe7,
	0xcb, 0x3d, 0x58, 0x4b, 0x0a, 0x19, 0x81, 0x76, 0xf4, 0x8e, 0xed, 0xba, 0x74, 0xee, 0x48, 0xf3,
	0x55, 0x85, 0xfa, 0x6e, 0xb3, 0x86, 0x3e, 0xb8, 0x5f, 0x84, 0x2b, 0x32, 0x06, 0xc1, 0xbe, 0x77,
	0xd7, 0x96, 0x2f, 0xe3, 0xd2, 0xe5, 0xbf, 0xc5, 0x79, 0xfc, 0xdd, 0xa3, 0xee, 0x38, 0xe8, 0x75,
	0x47, 0x94, 0x95, 0xa2, 0x46, 0x60, 0x05, 0xbd, 0x58, 0xd8, 0x07, 0xa6, 0xe3, 0x59, 0x75, 0x7e,
	0x91, 0xf1, 0x02, 0xbe, 0xfa, 0xb4, 0x9a, 0xf8, 0x3e, 0xd1, 0x68, 0x69, 0x29, 0xc2, 0x9b, 0xf7,
	0xad, 0x2a, 0x6a, 0x27, 0x9b, 0xda, 0x1c, 0xea, 0xce, 0x51, 0xa5, 0xd9, 0x68, 0x52, 0x5c, 0xa7,
	0x48, 0x1a, 0x0a, 0x15, 0x4c, 0x03, 0x88, 0x2c, 0x21, 0x76, 0x9a, 0xc3, 0xc7, 0x5f, 0x26, 0x25,
	0xd7, 0x6c, 0xd7, 0xa4, 0x07, 0x36, 0x05, 0x1b, 0xaa, 0x49, 0x58, 0xae, 0x47, 0xc4, 0x16, 0x6d,
	0x91, 0x74, 0x8f, 0x4a, 0xb3, 0xbb, 0xab, 0xe5, 0xca, 0x06, 0xac, 0xdf, 0xed, 0x8e, 0x8f, 0x3a,
	0xc3, 0xf6, 0xe3, 0x76, 0x8f, 0xc5, 0xff, 0xe0, 0x2f, 0x85, 0x38, 0x9c, 0x84, 0x55, 0x37, 0xcc,
	0x1a, 0x73, 0xc3, 0x12, 0x7a, 0xb3, 0xe0, 0xf0, 0x54, 0xb9, 0x03, 0x4b, 0x6c, 0xaf, 0x11, 0xd1,
	0xee, 0x37, 0xb9, 0x17, 0x74, 0xce, 0x6f, 0x42, 0x39, 0x6d, 0x1b, 0x36, 0x22, 0x48, 0x21, 0xb6,
	0x25, 0xe0, 0x38, 0xa3, 0x4a, 0x13, 0x5e, 0x7b, 0x2e, 0xf4, 0x18, 0x37, 0x1e, 0x76, 0x1f, 0x9c,
	0x8e, 0xd1, 0x51, 0x30, 0xce, 0xe1, 0x6b, 0x70, 0x99, 0xa7, 0x24, 0x4d, 0xc6, 0x3b, 0x20, 0x7a,
	0x89, 0x42, 0x67, 0x2e, 0x2a, 0x6b, 0x5c, 0x87, 0xab, 0xd3, 0x88, 0x2a, 0x35, 0xc3, 0x22, 0x87,
	0xff, 0x1b, 0xf0, 0xe2, 0x34, 0xb2, 0xaa, 0xe5, 0x36, 0x0d, 0xaf, 0xb2, 0xaf, 0xa5, 0x89, 0xec,
	0x3c, 0x33, 0x43, 0x7f, 0x07, 0x7d, 0x85, 0x98, 0xda, 0x5c, 0xf9, 0xbb, 0xc5, 0xa6, 0xfc, 0xfe,
	0xe9, 0x60, 0xdc, 0x66, 0xbd, 0x55, 0x82, 0x4b, 0x3c, 0x93, 0xf7, 0x5b, 0xb6, 0x67, 0xf0, 0xa6,
	0xef, 0x1b, 0x2e, 0x05, 0x68, 0x2f, 0x90, 0x83, 0x59, 0x22, 0x4d, 0xc3, 0x66, 0x24, 0xa9, 0xf2,
	0x63, 0x58, 0x61, 0x99, 0x7b, 0xdd, 0x63, 0x2e, 0xc0, 0x5c, 0x81, 0x0b, 0x3c, 0x1d, 0x4e, 0x33,
	0x1e, 0xa0, 0x9f, 0xbb, 0xe0, 0xc4, 0x45, 0x9e, 0x44, 0x11, 0xba, 0x4b, 0x9c, 0x40, 0xc0, 0x8d,
	0x99, 0xd3, 0xe5, 0xbf, 0x97, 0x16, 0x25, 0x3b, 0xc1, 0xe3, 0xf6, 0xb0, 0x83, 0xd3, 0x47, 0x1a,
	0x10, 0xc7, 0xbc, 0x4b, 0xa4, 0x09, 0x76, 0xcd, 0x18, 0xde, 0xe1, 0xbe, 0x20, 0x57, 0x8f, 0x11,
	0x55, 0x6c, 0xab, 0x81, 0x77, 0xae, 0x78, 0xf6, 0x4f, 0x25, 0x50, 0xec, 0x3a, 0x66, 0xa8, 0x15,
	0xa0, 0xa5, 0x13, 0x0b, 0x32, 0x9b, 0x86, 0x55, 0x0d, 0xb3, 0xc9, 0xc8, 0x43, 0x1a, 0x25, 0x52,
	0x0a, 0x9c, 0x9b, 0x92, 0x9d, 0xa8, 0xf7, 0xbc, 0xdc, 0x27, 0x8c, 0x28, 0xa2, 0xaf, 0x27, 0xcd,
	0x34, 0x46, 0x40, 0x8d, 0xb7, 0x77, 0x4d, 0x33, 0xcc, 0x27, 0x2b, 0xcf, 0x1f, 0x46, 0x66, 0x35,
	0x3c, 0xd3, 0x31, 0x5d, 0x8f, 0xda, 0x68, 0x28, 0xe4, 0x8b, 0xe5, 0x9b, 0xb0, 0xcc, 0x3a, 0xda,
	0x0f, 0x3d, 0x7e, 0x8b, 0x6b, 0x00, 0xd9, 0xe3, 0x77, 0xf9, 0x36, 0x14, 0x38, 0x29, 0x0e, 0x07,
	0xd9, 0xd4, 0xf8, 0xca, 0x6a, 0xde, 0xa3, 0x41, 0x7d, 0x39, 0x80, 0xba, 0x4d, 0x79, 0xa1, 0xfc,
	0xa5, 0x14, 0x14, 0xf9, 0x14, 0xe2, 0x5e, 0x38, 0x51, 0x35, 0xce, 0xbd, 0x23, 0x9e, 0x9d, 0x70,
	0xe6, 0xf3, 0x93, 0x2d, 0xda, 0x7f, 0xba, 0xa6, 0xe3, 0xe3, 0x8d, 0xda, 0x4b, 0x50, 0x0a, 0x49,
	0xeb, 0x46, 0xc3, 0x6a, 0xd2, 0xbd, 0x87, 0x13, 0xd7, 0x8c, 0x1d, 0x93, 0x1c, 0x08, 0x50, 0x3b,
	0x70, 0x66, 0x96, 0x9e, 0xb1, 0xa7, 0x65, 0xca, 0xff, 0x5a, 0x38, 0xa9, 0x43, 0x6f, 0x9e, 0xa8,
	0xac, 0xe8, 0xc6, 0x04, 0x26, 0x64, 0x2d, 0x0a, 0x22, 0x3c, 0x98, 0xa5, 0xa8, 0x06, 0x65, 0x88,
	0xdb, 0xb5, 0x1a, 0x96, 0xbb, 0x8f, 0x87, 0xbc, 0x48, 0x76, 0xae, 0x67, 0x37, 0x9b, 0x44, 0xca,
	0x2a, 0x57, 0xe1, 0x9c, 0x12, 0xef, 0x63, 0x18, 0xb4, 0xc7, 0x03, 0xc9, 0x11, 0x0d, 0x9e, 0x20,
	0x6d, 0xfe, 0xd4, 0xfb, 0x02, 0xdd, 0x7f, 0x28, 0x28, 0x74, 0xc3, 0x5e, 0x7e, 0x0b, 0x0a, 0x4a,
	0x80, 0xef, 0x1c, 0xcc, 0x53, 0x83, 0x14, 0xdc, 0x27, 0xa4, 0x70, 0xde, 0x28, 0x2a, 0x50, 0xd5,
	0x25, 0x2d, 0x5d, 0xfe, 0x34, 0x68, 0x72, 0xe1, 0x98, 0x74, 0x11, 0xe6, 0x1a, 0x83, 0x7e, 0xc0,
	0x52, 0x0e, 0xbb, 0x87, 0x81, 0xdb, 0x6b, 0x8f, 0x8e, 0xe8, 0x0e, 0x23, 0xa2, 0xcf, 0x6a, 0xe9,
	0xf2, 0x77, 0x80, 0x56, 0xa1, 0x3e, 0xbe, 0x9d, 0xd3, 0x1e, 0x39, 0x8a, 0x77, 0x0f, 0x51, 0x33,
	0xa5, 0x55, 0xc3, 0xa3, 0xb4, 0x55, 0xf1, 0x6d, 0x87, 0x1a, 0x53, 0x48, 0x20, 0xa3, 0x41, 0x56,
	0xf3, 0x9b, 0x50, 0x74, 0x83, 0x5e, 0x2f, 0x18, 0x1a, 0xa7, 0xe3, 0xa3, 0xc1, 0xb0, 0x3b, 0x7e,
	0x42, 0x32, 0xa7, 0xaa, 0x7c, 0x74, 0x37, 0xd3, 0x61, 0x99, 0x2a, 0x84, 0xf3, 0x7b, 0x29, 0x94,
	0x84, 0x74, 0xee, 0xb1, 0x5d, 0xb2, 0x27, 0xd0, 0x61, 0x99, 0x1f, 0x0c, 0xd8, 0xe6, 0xfd, 0x82,
	0xe2, 0x24, 0x43, 0xd6, 0x68, 0xe2, 0x56, 0xef, 0xd4, 0x19, 0x55, 0xf9, 0x3f, 0x4f, 0xc1, 0x92,
	0xf9, 0xd1, 0xc9, 0x30, 0x18, 0x8d, 0x42, 0x1f, 0x49, 0x51, 0xd7, 0x6d, 0x1d, 0x7d, 0x1d, 0xb4,
	0x98, 0xab, 0xb6, 0xaf, 0xa5, 0xf4, 0xb5, 0x90, 0x96, 0x5b, 0xcc, 0x7c, 0x35, 0xad, 0x6f, 0xc0,
	0x8a, 0xea, 0x8c, 0xcd, 0x6f, 0x35, 0xb5, 0x2f, 0x65, 0xe4, 0x4c, 0x84, 0xaf, 0xae, 0x6f, 0x64,
	0x64, 0x72, 0xc5, 0xe9, 0x99, 0x44, 0x2e, 0x14, 0x9e, 0xfe, 0xe2, 0x7c, 0xf9, 0x47, 0x53, 0xb0,
	0xc9, 0x6a, 0x6c, 0x60, 0x50, 0x55, 0x49, 0x15, 0xeb, 0x12, 0x6c, 0xab, 0xd5, 0x54, 0x54, 0xb2,
	0x3a, 0xfa, 0x15, 0x38, 0x9f, 0x80, 0x97, 0x5b, 0x24, 0x19, 0x99, 0xcb, 0x39, 0x88, 0x7a, 0x7d,
	0x35, 0x3d, 0x21, 0x13, 0x51, 0xc5, 0x2f, 0x65, 0xca, 0xdf, 0x4c, 0xc1, 0x3a, 0xab, 0x62, 0xc4,
	0xae, 0xe7, 0x42, 0x68, 0xbe, 0x1c, 0x33, 0x50, 0xea, 0xc8, 0xc6, 0xcd, 0x51, 0x47, 0x83, 0xa4,
	0x6e, 0x97, 0xc3, 0xd6, 0x25, 0x98, 0x24, 0x7d, 0x35, 0x9d, 0x48, 0x10, 0xfa, 0xaa, 0xfb, 0x52,
	0x46, 0x31, 0xee, 0x57, 0x09, 0xcc, 0xaa, 0xf6, 0xe5, 0x4c, 0x62, 0x06, 0x61, 0xdb, 0xbf, 0x91,
	0x9c, 0x81, 0x68, 0xf9, 0x2f, 0xcf, 0x95, 0xbf, 0x9c, 0x82, 0x35, 0xd6, 0x72, 0xe6, 0x23, 0x36,
	0x14, 0x55, 0x42, 0xcb, 0x7c, 0x7c, 0xdc, 0x4a, 0x6e, 0x37, 0x47, 0x8a, 0x5a, 0x7d, 0x2d, 0x25,
	0x17, 0x2a, 0xd2, 0xca, 0x03, 0x92, 0x90, 0x5c, 0x1e, 0x8d, 0xbf, 0x94, 0x82, 0x22, 0xab, 0x0c,
	0x3f, 0x75, 0xa2, 0x52, 0x41, 0x24, 0x09, 0xde, 0x96, 0xa5, 0x12, 0x31, 0xb6, 0x5d, 0xa5, 0x87,
	0xab, 0x58, 0x31, 0x35, 0xdb, 0xdb, 0x27, 0x7d, 0x8b, 0x2f, 0x0b, 0x51, 0xac, 0x59, 0x33, 0x2b,
	0x9e, 0x63, 0x37, 0xac, 0x8a, 0x4b, 0xcd, 0x69, 0xa2, 0x04, 0x75, 0xb4, 0x0c, 0xac, 0x51, 0x73,
	0x9a, 0x28, 0x92, 0xb9, 0x15, 0x59, 0x28, 0xdf, 0x86, 0x6c, 0xb3, 0xfd, 0x44, 0x98, 0xfc, 0xd8,
	0x55, 0xdf, 0x6e, 0x70, 0x4d, 0x1a, 0x34, 0xf9, 0x61, 0xa0, 0x50, 0x8f, 0x26, 0x5d, 0xfe, 0x7b,
	0x05, 0x28, 0xba, 0xcd, 0x7b, 0x8a, 0x42, 0x20, 0x59, 0xfc, 0xcd, 0x7b, 0x92, 0x36, 0x20, 0x95,
	0x75, 0x55, 0xbf, 0x7a, 0xe2, 0x46, 0x2c, 0xa5, 0x17, 0x01, 0x10, 0x2b, 0xdc, 0x9b, 0xac, 0x61,
	0x9e, 0x51, 0xd7, 0x26, 0x2f, 0x43, 0x49, 0x7a, 0x5f, 0x9f, 0xe2, 0xd6, 0xe4, 0x06, 0x5c, 0x93,
	0x08, 0xa7, 0xb9, 0x34, 0x61, 0x2e, 0x15, 0x67, 0xb9, 0x33, 0x79, 0x15, 0x5e, 0x96, 0xc8, 0x66,
	0xb9, 0x32, 0x79, 0x0d, 0x6e, 0x4c, 0xa4, 0x4e, 0x70, 0x63, 0xc2, 0xbc, 0x50, 0x4e, 0x77, 0x61,
	0x52, 0x86, 0xeb, 0x48, 0x74, 0x16, 0xf7, 0x25, 0x57, 0xe1, 0x02, 0xa7, 0x9d, 0xe4, 0xba, 0x84,
	0x79, 0x40, 0x4c, 0x70, 0x5b, 0x72, 0x0e, 0xd6, 0x08, 0x26, 0xc9, 0x65, 0x09, 0xeb, 0xff, 0xd9,
	0xee, 0x4a, 0x58, 0x05, 0xa6, 0xb9, 0x2a, 0x29, 0xc1, 0x45, 0x85, 0x24, 0xc9, 0x4d, 0x09, 0xf3,
	0xa9, 0x39, 0xc3, 0x45, 0x89, 0x3a, 0xd8, 0xd3, 0xdc, 0x93, 0x30, 0xca, 0x33, 0xb8, 0x26, 0xd9,
	0x86, 0x75, 0x29, 0x4f, 0xd5, 0x2d, 0x09, 0x9b, 0x32, 0xb3, 0x5c, 0x92, 0x44, 0xc9, 0x26, 0xb8,
	0x23, 0xb9, 0x04, 0xe7, 0x94, 0xb9, 0x12, 0x75, 0x45, 0xc2, 0xfc, 0x71, 0x4e, 0x72, 0x43, 0xc2,
	0xdc, 0x52, 0xc6, 0x5d, 0x90, 0xb0, 0xb1, 0x9a, 0xed, 0x7e, 0xe4, 0x0a, 0x9c, 0x27, 0x84, 0x53,
	0x5c, 0x8f, 0x2c, 0xc1, 0x22, 0xa1, 0xe0, 0x6e, 0x47, 0xd8, 0x62, 0x0d, 0x5d, 0x8e, 0xbc, 0x04,
	0x57, 0xe9, 0x6a, 0x9f, 0xe1, 0x6e, 0x84, 0x0f, 0xe7, 0x74, 0x57, 0x23, 0x6a, 0x87, 0xc4, 0xdd,
	0x8c, 0xb0, 0x16, 0xc7, 0x5d, 0x8c, 0x44, 0x10, 0xa1, 0x7b, 0x91, 0xe8, 0xb0, 0x4f, 0x76, 0x2d,
	0xc2, 0x56, 0xe2, 0x74, 0xb7, 0x22, 0xac, 0xb9, 0x33, 0x5d, 0x8a, 0xb0, 0x6e, 0xe3, 0xee, 0x44,
	0xd8, 0xba, 0x4a, 0x72, 0x25, 0xa2, 0x16, 0x3b, 0xc1, 0x8d, 0x48, 0x22, 0x53, 0x99, 0xec, 0x42,
	0xe4, 0x16, 0xdc, 0x4c, 0xc8, 0x73, 0xb2, 0xfb, 0x10, 0x36, 0x0d, 0xa6, 0xb8, 0x0e, 0x61, 0xc3,
	0x37, 0xc3, 0x6d, 0xc8, 0x06, 0xf5, 0xf7, 0x1a, 0x73, 0x19, 0x72, 0x19, 0xb6, 0x71, 0x3e, 0x4e,
	0x74, 0x17, 0xc2, 0x2a, 0x30, 0xd9, 0x55, 0x08, 0x91, 0x48, 0xc5, 0x46, 0x83, 0x0e, 0x24, 0x71,
	0xa3, 0x3a, 0x4f, 0x3d, 0xd2, 0xaa, 0xf2, 0x1b, 0x7d, 0xda, 0x4c, 0xf1, 0x6d, 0x47, 0xe8, 0xb7,
	0xd3, 0xe7, 0x38, 0x8a, 0x4d, 0x97, 0xbf, 0x37, 0x2d, 0x84, 0xa7, 0x0a, 0x8b, 0x88, 0xcf, 0x36,
	0xb0, 0x6b, 0xa1, 0xef, 0x12, 0xe1, 0x52, 0x56, 0x9d, 0x8b, 0xf4, 0x74, 0x14, 0x27, 0x8a, 0xcd,
	0x18, 0xb4, 0x07, 0x49, 0xc8, 0x2c, 0x32, 0x61, 0x32, 0xa8, 0xa5, 0x34, 0x85, 0x0c, 0xe7, 0xd1,
	0x9c, 0xfe, 0x86, 0xe4, 0x4d, 0x26, 0x81, 0x2a, 0x36, 0xbd, 0xe6, 0x13, 0x04, 0x41, 0xb3, 0x1a,
	0x6e, 0xf9, 0xbf, 0x93, 0x82, 0x55, 0xd6, 0x07, 0xd4, 0x59, 0x24, 0xeb, 0x81, 0x52, 0xe8, 0xe2,
	0x85, 0x0b, 0x48, 0xb1, 0x0e, 0x90, 0x1a, 0x26, 0x68, 0x12, 0xda, 0x2f, 0x35, 0x2c, 0xcc, 0x2a,
	0xd6, 0x7c, 0xa9, 0xcb, 0x13, 0xa8, 0x58, 0xeb, 0x5f, 0x0f, 0xdd, 0x8a, 0x25, 0x10, 0x25, 0x34,
	0x5e, 0x12, 0x85, 0x44, 0x02, 0xd1, 0xf6, 0x16, 0xe4, 0x5a, 0xa3, 0x20, 0x34, 0xbf, 0x6e, 0x35,
	0xac, 0x86, 0xe5, 0x59, 0x46, 0xcd, 0xfa, 0x2c, 0x7f, 0x7f, 0x0c, 0x9f, 0x14, 0x31, 0x96, 0x49,
	0x68, 0xc9, 0xaf, 0x86, 0x36, 0xa1, 0xfa, 0xe9, 0x16, 0x35, 0x94, 0xf8, 0xf1, 0x34, 0xee, 0x1e,
	0x74, 0x8a, 0x0e, 0xdb, 0x87, 0xe1, 0x43, 0xd5, 0x75, 0xca, 0x3a, 0xa8, 0x14, 0xe4, 0x39, 0x46,
	0x85, 0xf0, 0xc7, 0xf8, 0x11, 0x88, 0xad, 0x15, 0x95, 0x4c, 0x3e, 0x3a, 0xb0, 0xb5, 0xa2, 0x12,
	0x28, 0xf2, 0x39, 0x63, 0xff, 0x2a, 0x45, 0xcc, 0x23, 0xf5, 0x9f, 0x4f, 0x27, 0x67, 0x15, 0x4a,
	0xf2, 0x3f, 0x99, 0x4e, 0xae, 0x8d, 0x7c, 0xaa, 0x4a, 0xcc, 0x42, 0x39, 0x5f, 0x25, 0x66, 0x21,
	0x9f, 0xb4, 0x3e, 0x03, 0xab, 0xe2, 0xb0, 0x8b, 0x0f, 0x76, 0xc2, 0x57, 0xbe, 0x08, 0xbd, 0x5a,
	0x80, 0xc5, 0x30, 0xda, 0x2a, 0x76, 0x3f, 0x5b, 0xb2, 0x1d, 0x2d, 0x53, 0xfe, 0x00, 0x16, 0x79,
	0x84, 0x7a, 0x54, 0x81, 0xc7, 0xdb, 0x5e, 0xc2, 0xc4, 0xc2, 0xdb, 0x75, 0x61, 0x23, 0xa3, 0xb8,
	0x07, 0xa1, 0xd6, 0x01, 0x02, 0x4e, 0xd5, 0x15, 0xd1, 0x4f, 0x43, 0x9c, 0xd8, 0xdf, 0x27, 0x3b,
	0x60, 0xa6, 0x6c, 0xc1, 0xe5, 0xa4, 0xa0, 0xa1, 0x7b, 0x83, 0x70, 0xa0, 0xa5, 0xe8, 0x24, 0x2f,
	0xc4, 0x03, 0xe4, 0x84, 0x17, 0x6d, 0xdf, 0xcd, 0x2e, 0xa2, 0xd5, 0x88, 0x3a, 0x52, 0x08, 0xb9,
	0x14, 0x8d, 0x6b, 0xc0, 0x3f, 0xd3, 0x52, 0x44, 0xb9, 0x4c, 0x24, 0xa2, 0xdc, 0x9c, 0x1a, 0x51,
	0x6e, 0xbe, 0xfc, 0x29, 0xd0, 0xe3, 0xa1, 0x15, 0x49, 0x06, 0xad, 0x86, 0x63, 0x1a, 0x55, 0x5a,
	0x33, 0xe1, 0x7b, 0x1e, 0xef, 0x2a, 0xe8, 0xb6, 0xa0, 0xa5, 0xcb, 0xe7, 0xa0, 0x20, 0xc7, 0x37,
	0xd4, 0x73, 0x30, 0xcf, 0x14, 0xdb, 0x77, 0xb4, 0xaf, 0xfd, 0xca, 0xa5, 0xd4, 0xcf, 0xfd, 0xca,
	0xa5, 0xd4, 0xdf, 0xfd, 0x95, 0x4b, 0xa9, 0x1f, 0xfe, 0xdf, 0x2f, 0xbd, 0xf0, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x3a, 0xf5, 0xdd, 0x68, 0x28, 0x02, 0x00,
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Hash != nil {
		i -= len(*m.Hash)
		copy(dAtA[i:], *m.Hash)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AsyncTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsyncTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsyncTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x68
	}
	if m.FailedLink != nil {
		i -= len(*m.FailedLink)
		copy(dAtA[i:], *m.FailedLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FailedLink)))
		i--
		dAtA[i] = 0x62
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x58
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x52
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.FailedCnt != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FailedCnt))
		i--
		dAtA[i] = 0x38
	}
	if m.SucceedCnt != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SucceedCnt))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.FileLink != nil {
		i -= len(*m.FileLink)
		copy(dAtA[i:], *m.FileLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FileLink)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileName != nil {
		i -= len(*m.FileName)
		copy(dAtA[i:], *m.FileName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutBizId != nil {
		i -= len(*m.OutBizId)
		copy(dAtA[i:], *m.OutBizId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OutBizId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.BlockedTime != nil {
		{
			size, err := m.BlockedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.Blocked != nil {
		i--
		if *m.Blocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.SyncItemGroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncItemGroupId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.OutOfStockTime != nil {
		{
			size, err := m.OutOfStockTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SpecialSaleDates) > 0 {
		for iNdEx := len(m.SpecialSaleDates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialSaleDates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.CrawlerPicture != nil {
		i -= len(*m.CrawlerPicture)
		copy(dAtA[i:], *m.CrawlerPicture)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CrawlerPicture)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.SalesTime != nil {
		{
			size, err := m.SalesTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.RawFlag != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RawFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.TimeForSales) > 0 {
		for iNdEx := len(m.TimeForSales) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeForSales[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.SaleStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.ListingStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ListingStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.InSaleTime != nil {
		i--
		if *m.InSaleTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.SaleWeekBit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleWeekBit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SaleEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleEndTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.SaleStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleStartTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.BindGroupCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BindGroupCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RatingBad != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingBad))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RatingGood != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingGood))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RatingTotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingTotal))
		i--
		dAtA[i] = 0x78
	}
	if m.SalesVolume != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SalesVolume))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Deleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Deleted))
		i--
		dAtA[i] = 0x58
	}
	if m.OptionGroupCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OptionGroupCount))
		i--
		dAtA[i] = 0x50
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x48
	}
	if m.CatalogId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CatalogId))
		i--
		dAtA[i] = 0x40
	}
	if m.Price != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x38
	}
	if m.Available != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Available))
		i--
		dAtA[i] = 0x30
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Picture != nil {
		i -= len(*m.Picture)
		copy(dAtA[i:], *m.Picture)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Picture)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dish_TimeForSales) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dish_TimeForSales) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dish_TimeForSales) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SaleEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleEndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.SaleStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SaleStartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dish_SalesDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dish_SalesDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dish_SalesDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sunday) > 0 {
		for iNdEx := len(m.Sunday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sunday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Saturday) > 0 {
		for iNdEx := len(m.Saturday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Saturday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Friday) > 0 {
		for iNdEx := len(m.Friday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Friday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Thursday) > 0 {
		for iNdEx := len(m.Thursday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Thursday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Wednesday) > 0 {
		for iNdEx := len(m.Wednesday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wednesday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tuesday) > 0 {
		for iNdEx := len(m.Tuesday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tuesday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Monday) > 0 {
		for iNdEx := len(m.Monday) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Monday[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Dish_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dish_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dish_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.QcFrozen != nil {
		i--
		if *m.QcFrozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Alcoholic != nil {
		i--
		if *m.Alcoholic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dish_SpecialSaleDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dish_SpecialSaleDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dish_SpecialSaleDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TimeForSales) > 0 {
		for iNdEx := len(m.TimeForSales) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeForSales[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EndDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndDate))
		i--
		dAtA[i] = 0x18
	}
	if m.StartDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Option) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Option) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Option) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutBizId != nil {
		i -= len(*m.OutBizId)
		copy(dAtA[i:], *m.OutBizId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OutBizId)))
		i--
		dAtA[i] = 0x62
	}
	if m.SyncItemGroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncItemGroupId))
		i--
		dAtA[i] = 0x58
	}
	if m.OutOfStockTime != nil {
		{
			size, err := m.OutOfStockTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x48
	}
	if m.GroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Available != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Available))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OptionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutBizId != nil {
		i -= len(*m.OutBizId)
		copy(dAtA[i:], *m.OutBizId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OutBizId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SyncItemGroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncItemGroupId))
		i--
		dAtA[i] = 0x60
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.SelectMax != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SelectMax))
		i--
		dAtA[i] = 0x40
	}
	if m.SelectMin != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SelectMin))
		i--
		dAtA[i] = 0x38
	}
	if m.SelectMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SelectMode))
		i--
		dAtA[i] = 0x30
	}
	if m.ShelveState != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShelveState))
		i--
		dAtA[i] = 0x28
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OptionGroup_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionGroup_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionGroup_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.QcFrozen != nil {
		i--
		if *m.QcFrozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DishOptionBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DishOptionBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DishOptionBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.ShelveState != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShelveState))
		i--
		dAtA[i] = 0x28
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x20
	}
	if m.GroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x18
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x10
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OptionGroupBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionGroupBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionGroupBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x20
	}
	if m.OptionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OptionId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Catalog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Catalog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Catalog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutBizId != nil {
		i -= len(*m.OutBizId)
		copy(dAtA[i:], *m.OutBizId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OutBizId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SyncItemGroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncItemGroupId))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.DishCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishCount))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Buyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Buyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Avatar != nil {
		i -= len(*m.Avatar)
		copy(dAtA[i:], *m.Avatar)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Avatar)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Phone != nil {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Phone != nil {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Driver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Driver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Driver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RatingScore != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RatingScore))))
		i--
		dAtA[i] = 0x45
	}
	if m.RatingTotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingTotal))
		i--
		dAtA[i] = 0x38
	}
	if m.VehiclePlateNo != nil {
		i -= len(*m.VehiclePlateNo)
		copy(dAtA[i:], *m.VehiclePlateNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VehiclePlateNo)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProfilePhoto != nil {
		i -= len(*m.ProfilePhoto)
		copy(dAtA[i:], *m.ProfilePhoto)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ProfilePhoto)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Phone != nil {
		i -= len(*m.Phone)
		copy(dAtA[i:], *m.Phone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FullName != nil {
		i -= len(*m.FullName)
		copy(dAtA[i:], *m.FullName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FullName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreciseLongitude != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PreciseLongitude))))
		i--
		dAtA[i] = 0x49
	}
	if m.PreciseLatitude != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PreciseLatitude))))
		i--
		dAtA[i] = 0x41
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Longitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Longitude))))
		i--
		dAtA[i] = 0x35
	}
	if m.Latitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Latitude))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Address != nil {
		i -= len(*m.Address)
		copy(dAtA[i:], *m.Address)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.District != nil {
		i -= len(*m.District)
		copy(dAtA[i:], *m.District)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.District)))
		i--
		dAtA[i] = 0x1a
	}
	if m.City != nil {
		i -= len(*m.City)
		copy(dAtA[i:], *m.City)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.City)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		i -= len(*m.State)
		copy(dAtA[i:], *m.State)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CartOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CartOptionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartOptionGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartOptionGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CartDish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartDish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartDish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CatalogId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CatalogId))
		i--
		dAtA[i] = 0x30
	}
	if m.Price != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Price))
		i--
		dAtA[i] = 0x28
	}
	if m.Image != nil {
		i -= len(*m.Image)
		copy(dAtA[i:], *m.Image)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SnapshotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SnapshotId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CartItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartItemDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartItemDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x30
	}
	if m.FlashSaleLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FlashSaleLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.FlashSaleDiscount != nil {
		{
			size, err := m.FlashSaleDiscount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Discount != nil {
		{
			size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OptionGroups) > 0 {
		for iNdEx := len(m.OptionGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptionGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Dish != nil {
		{
			size, err := m.Dish.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CartItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x38
	}
	if m.ItemId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemId))
		i--
		dAtA[i] = 0x30
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Quantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LateNightFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LateNightFee))
		i--
		dAtA[i] = 0x58
	}
	if m.HolidayFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HolidayFee))
		i--
		dAtA[i] = 0x50
	}
	if m.BadWeatherFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BadWeatherFee))
		i--
		dAtA[i] = 0x48
	}
	if m.ParkingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ParkingFee))
		i--
		dAtA[i] = 0x40
	}
	if m.ShippingSurgeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingSurgeFee))
		i--
		dAtA[i] = 0x38
	}
	if m.CollectFromCustomer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CollectFromCustomer))
		i--
		dAtA[i] = 0x30
	}
	if m.PayToMerchant != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayToMerchant))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverShippingIncome != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverShippingIncome))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *OrderCustomTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderCustomTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderCustomTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeliveryMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryMode))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if len(m.CustomTags) > 0 {
		for iNdEx := len(m.CustomTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.PaymentInfo != nil {
		{
			size, err := m.PaymentInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.IsMerchantVisible != nil {
		i--
		if *m.IsMerchantVisible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.DelayAssignDuration != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DelayAssignDuration))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.VendorId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VendorId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if len(m.CancelCerts) > 0 {
		for iNdEx := len(m.CancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.CancelRemark != nil {
		i -= len(*m.CancelRemark)
		copy(dAtA[i:], *m.CancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CancelRemark)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if len(m.BuyerLocationGroups) > 0 {
		for iNdEx := len(m.BuyerLocationGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerLocationGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.StoreLocationGroups) > 0 {
		for iNdEx := len(m.StoreLocationGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoreLocationGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.RewriteSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewriteSource))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.OvertimeMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OvertimeMode))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.MerchantConfirmedDeadline != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantConfirmedDeadline))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.DeliveryReconfirmTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryReconfirmTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.VoucherReferenceId != nil {
		i -= len(*m.VoucherReferenceId)
		copy(dAtA[i:], *m.VoucherReferenceId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherReferenceId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.PromotionFlag != nil {
		{
			size, err := m.PromotionFlag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.MakeupAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MakeupAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.RefundAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.RewriteRemark != nil {
		i -= len(*m.RewriteRemark)
		copy(dAtA[i:], *m.RewriteRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RewriteRemark)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.RewriteReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewriteReason))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.RewriteType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewriteType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.StoreSettlementFactor != nil {
		{
			size, err := m.StoreSettlementFactor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.ItemQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemQuantity))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.IsRatingCompleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsRatingCompleted))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.RatingCompletedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingCompletedTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.ReadyTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReadyTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.IsReady != nil {
		i--
		if *m.IsReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.IsReceived != nil {
		i--
		if *m.IsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.DeliveryCompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryCompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.DeliveryPickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryPickupTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DeliveryArriveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryArriveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.DeliveryAssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryAssignTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.PickupSeq != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupSeq))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.EstimateDeliveredTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateDeliveredTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.EstimateArrivedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateArrivedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MerchantConfirmTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantConfirmTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ReviewTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReviewTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PlaceTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlaceTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CancelProposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelProposer))
		i--
		dAtA[i] = 0x78
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x70
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x50
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DeliveryAddress != nil {
		{
			size, err := m.DeliveryAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Store != nil {
		{
			size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x20
	}
	if m.Source != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Source))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.UnitListPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UnitListPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Image != nil {
		i -= len(*m.Image)
		copy(dAtA[i:], *m.Image)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Image)))
		i--
		dAtA[i] = 0x32
	}
	if m.Subtotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Subtotal))
		i--
		dAtA[i] = 0x28
	}
	if m.FlatFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FlatFee))
		i--
		dAtA[i] = 0x20
	}
	if m.UnitPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UnitPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.CartItem != nil {
		{
			size, err := m.CartItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LateNightFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LateNightFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.HolidayFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HolidayFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.BadWeatherFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BadWeatherFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.NonPartnerFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.NonPartnerFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ParkingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ParkingFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ShippingFareDiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFareDiscountAmount))
		i--
		dAtA[i] = 0x78
	}
	if m.ShippingFareExtraFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFareExtraFee))
		i--
		dAtA[i] = 0x70
	}
	if m.SmallOrderFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SmallOrderFee))
		i--
		dAtA[i] = 0x68
	}
	if m.CollectFromCustomer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CollectFromCustomer))
		i--
		dAtA[i] = 0x60
	}
	if m.PayToMerchant != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayToMerchant))
		i--
		dAtA[i] = 0x58
	}
	if m.Promotion != nil {
		{
			size, err := m.Promotion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MerchantSurchargeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantSurchargeFee))
		i--
		dAtA[i] = 0x48
	}
	if m.ShippingSurgeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingSurgeFee))
		i--
		dAtA[i] = 0x40
	}
	if m.ShippingBasicFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingBasicFee))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.ShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFee))
		i--
		dAtA[i] = 0x28
	}
	if m.PlatformServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlatformServiceFee))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantServiceFee))
		i--
		dAtA[i] = 0x18
	}
	if m.TaxAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.Subtotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Subtotal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Promotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_Promotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Promotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VoucherMerchantSubsidyAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherMerchantSubsidyAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.ItemDiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemDiscountAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.CoinsCashback != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CoinsCashback))
		i--
		dAtA[i] = 0x30
	}
	if m.CoinsEarning != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CoinsEarning))
		i--
		dAtA[i] = 0x28
	}
	if m.ShippingVoucherAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingVoucherAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.ItemVoucherAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemVoucherAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.CoinsRedeemedAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CoinsRedeemedAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.ShippingDiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingDiscountAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Promotion_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_Promotion_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Promotion_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseCoins != nil {
		i--
		if *m.UseCoins {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UseCoinsCashbackVoucher != nil {
		i--
		if *m.UseCoinsCashbackVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UseShippingFeeVoucher != nil {
		i--
		if *m.UseShippingFeeVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UseItemVoucher != nil {
		i--
		if *m.UseItemVoucher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPaoTang != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsPaoTang))
		i--
		dAtA[i] = 0x50
	}
	if m.IsDff != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDff))
		i--
		dAtA[i] = 0x48
	}
	if m.CanMerchantRewrite != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CanMerchantRewrite))
		i--
		dAtA[i] = 0x40
	}
	if m.IsInstantPreparation != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsInstantPreparation))
		i--
		dAtA[i] = 0x38
	}
	if m.HasDropped != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HasDropped))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDriverRewritePreview != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDriverRewritePreview))
		i--
		dAtA[i] = 0x28
	}
	if m.CanDriverRewrite != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CanDriverRewrite))
		i--
		dAtA[i] = 0x20
	}
	if m.IsManualConfirmed != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsManualConfirmed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsRefunded != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsRefunded))
		i--
		dAtA[i] = 0x10
	}
	if m.IsReturned != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsReturned))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_StoreSettlementFactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_StoreSettlementFactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_StoreSettlementFactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SettleTo != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettleTo))
		i--
		dAtA[i] = 0x50
	}
	if m.VatCalculate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatCalculate))
		i--
		dAtA[i] = 0x48
	}
	if m.WhtRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtRate))
		i--
		dAtA[i] = 0x40
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x38
	}
	if m.VatRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatRate))
		i--
		dAtA[i] = 0x30
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x28
	}
	if m.ServiceChargeFeeRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceChargeFeeRate))
		i--
		dAtA[i] = 0x20
	}
	if m.TaxRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxRate))
		i--
		dAtA[i] = 0x18
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x10
	}
	if m.StoreSettlementMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreSettlementMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Order_PaymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order_PaymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_PaymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreditCardBin != nil {
		i -= len(*m.CreditCardBin)
		copy(dAtA[i:], *m.CreditCardBin)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CreditCardBin)))
		i--
		dAtA[i] = 0x12
	}
	if m.VoucherPaymentType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherPaymentType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DriverDeliveryOrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverDeliveryOrderId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.DeliveryRank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryRank))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.PickupRank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupRank))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.GroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.BeginAssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BeginAssignTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.AdvanceDepositRefundStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AdvanceDepositRefundStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CancelCerts) > 0 {
		for iNdEx := len(m.CancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CancelRemark != nil {
		i -= len(*m.CancelRemark)
		copy(dAtA[i:], *m.CancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CancelRemark)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.DepositRefund != nil {
		{
			size, err := m.DepositRefund.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.AdvanceDeposit != nil {
		{
			size, err := m.AdvanceDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.AssignOperator != nil {
		i -= len(*m.AssignOperator)
		copy(dAtA[i:], *m.AssignOperator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AssignOperator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.AssignType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.StoreAddress != nil {
		{
			size, err := m.StoreAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.Receipt != nil {
		i -= len(*m.Receipt)
		copy(dAtA[i:], *m.Receipt)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Receipt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.GeoTracking != nil {
		{
			size, err := m.GeoTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.PickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ArriveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ArriveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x78
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x70
	}
	if m.DeliveryStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryStatus))
		i--
		dAtA[i] = 0x68
	}
	if m.PickupSeq != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupSeq))
		i--
		dAtA[i] = 0x60
	}
	if m.DeliveryAmount != nil {
		{
			size, err := m.DeliveryAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EstimateDeliveredTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateDeliveredTime))
		i--
		dAtA[i] = 0x48
	}
	if m.EstimateArrivedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateArrivedTime))
		i--
		dAtA[i] = 0x40
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x38
	}
	if m.DeliveryAddress != nil {
		{
			size, err := m.DeliveryAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryOrder_GeoTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryOrder_GeoTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryOrder_GeoTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AcceptGeo != nil {
		{
			size, err := m.AcceptGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CompleteGeo != nil {
		{
			size, err := m.CompleteGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PickupGeo != nil {
		{
			size, err := m.PickupGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ArriveGeo != nil {
		{
			size, err := m.ArriveGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryOrder_AdvanceDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryOrder_AdvanceDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryOrder_AdvanceDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Time))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryOrder_DepositRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryOrder_DepositRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryOrder_DepositRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Time))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeliveryOrder_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliveryOrder_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeliveryOrder_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsGroupFirstDelivery != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsGroupFirstDelivery))
		i--
		dAtA[i] = 0x20
	}
	if m.IsGroupDelivery != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsGroupDelivery))
		i--
		dAtA[i] = 0x18
	}
	if m.IsDff != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDff))
		i--
		dAtA[i] = 0x10
	}
	if m.IsInstantPreparation != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsInstantPreparation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThirdPartyTransactionRef != nil {
		i -= len(*m.ThirdPartyTransactionRef)
		copy(dAtA[i:], *m.ThirdPartyTransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ThirdPartyTransactionRef)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Platform != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Platform))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PaymentLink != nil {
		i -= len(*m.PaymentLink)
		copy(dAtA[i:], *m.PaymentLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.PaymentType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x68
	}
	if m.InitiationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitiationTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x52
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TotalAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.ChannelOption != nil {
		i -= len(*m.ChannelOption)
		copy(dAtA[i:], *m.ChannelOption)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ChannelOption)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChannelId))
		i--
		dAtA[i] = 0x30
	}
	if m.Method != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Method))
		i--
		dAtA[i] = 0x28
	}
	if m.TransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionRef))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x10
	}
	if m.CheckoutId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CheckoutId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Geo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Geo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Geo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreciseLatitude != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PreciseLatitude))))
		i--
		dAtA[i] = 0x21
	}
	if m.PreciseLongitude != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.PreciseLongitude))))
		i--
		dAtA[i] = 0x19
	}
	if m.Latitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Latitude))))
		i--
		dAtA[i] = 0x15
	}
	if m.Longitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Longitude))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.OperateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OperateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Source != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Source))
		i--
		dAtA[i] = 0x60
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NewValue != nil {
		i -= len(*m.NewValue)
		copy(dAtA[i:], *m.NewValue)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.NewValue)))
		i--
		dAtA[i] = 0x52
	}
	if m.OldValue != nil {
		i -= len(*m.OldValue)
		copy(dAtA[i:], *m.OldValue)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OldValue)))
		i--
		dAtA[i] = 0x4a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x40
	}
	if m.SellerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SellerId))
		i--
		dAtA[i] = 0x38
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x30
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChangeType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChangeType))
		i--
		dAtA[i] = 0x20
	}
	if m.EntityId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EntityId))
		i--
		dAtA[i] = 0x18
	}
	if m.EntityType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EntityType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		i -= len(*m.Msg)
		copy(dAtA[i:], *m.Msg)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BundleId != nil {
		i -= len(*m.BundleId)
		copy(dAtA[i:], *m.BundleId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BundleId)))
		i--
		dAtA[i] = 0x72
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x68
	}
	if m.Mac != nil {
		i -= len(*m.Mac)
		copy(dAtA[i:], *m.Mac)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Mac)))
		i--
		dAtA[i] = 0x62
	}
	if m.Idfa != nil {
		i -= len(*m.Idfa)
		copy(dAtA[i:], *m.Idfa)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Idfa)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Imei != nil {
		i -= len(*m.Imei)
		copy(dAtA[i:], *m.Imei)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Imei)))
		i--
		dAtA[i] = 0x52
	}
	if m.Ip != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Ip))
		i--
		dAtA[i] = 0x48
	}
	if m.Channel != nil {
		i -= len(*m.Channel)
		copy(dAtA[i:], *m.Channel)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Channel)))
		i--
		dAtA[i] = 0x42
	}
	if m.AppVersion != nil {
		i -= len(*m.AppVersion)
		copy(dAtA[i:], *m.AppVersion)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AppVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PushType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PushType))
		i--
		dAtA[i] = 0x30
	}
	if m.PushToken != nil {
		i -= len(*m.PushToken)
		copy(dAtA[i:], *m.PushToken)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PushToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OsVersion != nil {
		i -= len(*m.OsVersion)
		copy(dAtA[i:], *m.OsVersion)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OsVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.Os != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Os))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviceModel != nil {
		i -= len(*m.DeviceModel)
		copy(dAtA[i:], *m.DeviceModel)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeviceModel)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceId != nil {
		i -= len(*m.DeviceId)
		copy(dAtA[i:], *m.DeviceId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Store) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BankBranchId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankBranchId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.ShippingFees != nil {
		{
			size, err := m.ShippingFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.MinFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinFee))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.DeliveryMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryMethod))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.MaximumSubtotalPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaximumSubtotalPrice))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.CategoryType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CategoryType))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ExtraContactPhones != nil {
		i -= len(*m.ExtraContactPhones)
		copy(dAtA[i:], *m.ExtraContactPhones)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ExtraContactPhones)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.SmallOrderFeeMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SmallOrderFeeMode))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ParkingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ParkingFee))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x88
	}
	if m.AutoPayoutRemark != nil {
		i -= len(*m.AutoPayoutRemark)
		copy(dAtA[i:], *m.AutoPayoutRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AutoPayoutRemark)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	if m.BankAccountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankAccountStatus))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf8
	}
	if m.ProductConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProductConfigStatus))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf0
	}
	if m.SettlementConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementConfigStatus))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe8
	}
	if m.WalletRelationStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletRelationStatus))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe0
	}
	if m.PayoutAccountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutAccountId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd8
	}
	if m.StatusInAdmin != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StatusInAdmin))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxDelayTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxDelayTime))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc8
	}
	if m.MaxDelayTimeMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxDelayTimeMode))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc0
	}
	if m.SubCategory != nil {
		{
			size, err := m.SubCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	if m.MainCategory != nil {
		{
			size, err := m.MainCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	if m.DistrictId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistrictId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa8
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	if m.DffSetting != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DffSetting))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x98
	}
	if m.DffMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DffMode))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if m.ServiceFeeMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceFeeMode))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x88
	}
	if m.SmallOrderFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SmallOrderFee))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x80
	}
	if m.HalalType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HalalType))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf8
	}
	if m.CrossMonthSettlement != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CrossMonthSettlement))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf0
	}
	if m.PayoutMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMethod))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe8
	}
	if m.VatCalculate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatCalculate))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe0
	}
	if m.BankChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankChannelId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd8
	}
	if m.SourceUpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SourceUpdateTime))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd0
	}
	if m.SettleTo != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettleTo))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.WhtRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtRate))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if m.VatRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatRate))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.PaymentWay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentWay))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.SettlementMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMethod))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.TaxId != nil {
		i -= len(*m.TaxId)
		copy(dAtA[i:], *m.TaxId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TaxId)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.BankAccountName != nil {
		i -= len(*m.BankAccountName)
		copy(dAtA[i:], *m.BankAccountName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if m.BankBranch != nil {
		i -= len(*m.BankBranch)
		copy(dAtA[i:], *m.BankBranch)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankBranch)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.TobUserIds != nil {
		i -= len(*m.TobUserIds)
		copy(dAtA[i:], *m.TobUserIds)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TobUserIds)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.VendorId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VendorId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.EffectiveCommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EffectiveCommissionRate))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.ScheduledCommissions != nil {
		{
			size, err := m.ScheduledCommissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.Overlay != nil {
		{
			size, err := m.Overlay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.StatusReasonRemark != nil {
		i -= len(*m.StatusReasonRemark)
		copy(dAtA[i:], *m.StatusReasonRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.StatusReasonRemark)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.StatusReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StatusReason))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.ModifyOrderMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ModifyOrderMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.IsInstantPrep != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsInstantPrep))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.BusinessInfoAdded != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BusinessInfoAdded))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.DeliveryDistanceMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistanceMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.DriverModifyOrderEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverModifyOrderEnabled))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.ServiceChargeFeeRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceChargeFeeRate))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.SurchargeIntervals != nil {
		{
			size, err := m.SurchargeIntervals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.OpeningStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OpeningStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.RatingScore != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RatingScore))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8d
	}
	if m.RatingTotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingTotal))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.AutoConfirmedEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AutoConfirmedEnabled))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.AutoConfirmed != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AutoConfirmed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.ContactPhone != nil {
		i -= len(*m.ContactPhone)
		copy(dAtA[i:], *m.ContactPhone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ContactPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.PreparationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PreparationTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TaxRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PartnerType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PartnerType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Banner != nil {
		i -= len(*m.Banner)
		copy(dAtA[i:], *m.Banner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Banner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Logo != nil {
		i -= len(*m.Logo)
		copy(dAtA[i:], *m.Logo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Logo)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RegisterTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterTime))
		i--
		dAtA[i] = 0x70
	}
	if m.EmailSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EmailSource))
		i--
		dAtA[i] = 0x68
	}
	if m.Email != nil {
		i -= len(*m.Email)
		copy(dAtA[i:], *m.Email)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if m.RegisterPhone != nil {
		i -= len(*m.RegisterPhone)
		copy(dAtA[i:], *m.RegisterPhone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RegisterPhone)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PostalCode != nil {
		i -= len(*m.PostalCode)
		copy(dAtA[i:], *m.PostalCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PostalCode)))
		i--
		dAtA[i] = 0x52
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.IsUseMerchantApp != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseMerchantApp))
		i--
		dAtA[i] = 0x40
	}
	if m.IsUseWallet != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseWallet))
		i--
		dAtA[i] = 0x38
	}
	if m.TobUserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TobUserId))
		i--
		dAtA[i] = 0x30
	}
	if m.BrandId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BrandId))
		i--
		dAtA[i] = 0x28
	}
	if m.TagId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TagId))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store_SurChargeIntervals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_SurChargeIntervals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_SurChargeIntervals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Intervals) > 0 {
		for iNdEx := len(m.Intervals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Intervals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Store_SurChargeInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_SurChargeInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_SurChargeInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Fee))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderPriceEnd != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderPriceEnd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpecialModeStoreDff != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpecialModeStoreDff))
		i--
		dAtA[i] = 0x60
	}
	if m.SpecialModeDeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpecialModeDeliveryDistance))
		i--
		dAtA[i] = 0x58
	}
	if m.SpecialModeStoreClose != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpecialModeStoreClose))
		i--
		dAtA[i] = 0x50
	}
	if m.HideProcessingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HideProcessingFee))
		i--
		dAtA[i] = 0x48
	}
	if m.ShowBuyerHalalType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShowBuyerHalalType))
		i--
		dAtA[i] = 0x40
	}
	if m.EditPromotionEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EditPromotionEnabled))
		i--
		dAtA[i] = 0x38
	}
	if m.AutoPrintDisabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AutoPrintDisabled))
		i--
		dAtA[i] = 0x30
	}
	if m.HideDishNoteEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HideDishNoteEnabled))
		i--
		dAtA[i] = 0x28
	}
	if m.EditMenuEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EditMenuEnabled))
		i--
		dAtA[i] = 0x20
	}
	if m.RequiredReceiptPhoto != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RequiredReceiptPhoto))
		i--
		dAtA[i] = 0x18
	}
	if m.IsSuperMenu != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsSuperMenu))
		i--
		dAtA[i] = 0x10
	}
	if m.OvertimeOrderMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OvertimeOrderMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store_Overlay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_Overlay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_Overlay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BannerImage != nil {
		i -= len(*m.BannerImage)
		copy(dAtA[i:], *m.BannerImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BannerImage)))
		i--
		dAtA[i] = 0x12
	}
	if m.LogoImage != nil {
		i -= len(*m.LogoImage)
		copy(dAtA[i:], *m.LogoImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.LogoImage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Store_ScheduledCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_ScheduledCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_ScheduledCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpireTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpireTime))
		i--
		dAtA[i] = 0x20
	}
	if m.EffectiveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EffectiveTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Priority != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store_ScheduledCommissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_ScheduledCommissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_ScheduledCommissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScheduledCommissions) > 0 {
		for iNdEx := len(m.ScheduledCommissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScheduledCommissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Store_SubCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_SubCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_SubCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubCategory) > 0 {
		for iNdEx := len(m.SubCategory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubCategory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Store_ShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_ShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_ShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Fee))
		i--
		dAtA[i] = 0x18
	}
	if m.To != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store_ShippingFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store_ShippingFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store_ShippingFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShippingFees) > 0 {
		for iNdEx := len(m.ShippingFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShippingFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StoreMin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreMin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreMin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.ContactPhone != nil {
		i -= len(*m.ContactPhone)
		copy(dAtA[i:], *m.ContactPhone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ContactPhone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.PreparationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PreparationTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TaxRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PartnerType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PartnerType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Banner != nil {
		i -= len(*m.Banner)
		copy(dAtA[i:], *m.Banner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Banner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Logo != nil {
		i -= len(*m.Logo)
		copy(dAtA[i:], *m.Logo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Logo)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RegisterTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterTime))
		i--
		dAtA[i] = 0x70
	}
	if m.EmailSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EmailSource))
		i--
		dAtA[i] = 0x68
	}
	if m.Email != nil {
		i -= len(*m.Email)
		copy(dAtA[i:], *m.Email)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if m.RegisterPhone != nil {
		i -= len(*m.RegisterPhone)
		copy(dAtA[i:], *m.RegisterPhone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RegisterPhone)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PostalCode != nil {
		i -= len(*m.PostalCode)
		copy(dAtA[i:], *m.PostalCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PostalCode)))
		i--
		dAtA[i] = 0x52
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.IsUseMerchantApp != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseMerchantApp))
		i--
		dAtA[i] = 0x40
	}
	if m.IsUseWallet != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseWallet))
		i--
		dAtA[i] = 0x38
	}
	if m.TobUserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TobUserId))
		i--
		dAtA[i] = 0x30
	}
	if m.BrandId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BrandId))
		i--
		dAtA[i] = 0x28
	}
	if m.TagId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TagId))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level_2 != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Level_2))
		i--
		dAtA[i] = 0x10
	}
	if m.Level_1 != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Level_1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpeningStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CloseStatus != nil {
		{
			size, err := m.CloseStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PauseTime != nil {
		{
			size, err := m.PauseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.OpeningStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OpeningStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.NextOpeningTime != nil {
		{
			size, err := m.NextOpeningTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CurrentOpeningTime != nil {
		{
			size, err := m.CurrentOpeningTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OrderEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderEnabled))
		i--
		dAtA[i] = 0x10
	}
	if m.DisplayOpeningStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DisplayOpeningStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpeningStatus_Interval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningStatus_Interval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningStatus_Interval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndRelativeSec != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndRelativeSec))
		i--
		dAtA[i] = 0x10
	}
	if m.StartRelativeSec != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartRelativeSec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpeningStatus_SpecialMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningStatus_SpecialMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningStatus_SpecialMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModeTypeName != nil {
		i -= len(*m.ModeTypeName)
		copy(dAtA[i:], *m.ModeTypeName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ModeTypeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ModeTypeId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ModeTypeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpeningStatus_PauseTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningStatus_PauseTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningStatus_PauseTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpecialMode != nil {
		{
			size, err := m.SpecialMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PauseType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PauseType))
		i--
		dAtA[i] = 0x18
	}
	if m.PauseEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PauseEndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.PauseStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PauseStartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OpeningStatus_CloseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpeningStatus_CloseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpeningStatus_CloseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CloseType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CloseType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OpeningStatus != nil {
		{
			size, err := m.OpeningStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Store != nil {
		{
			size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Merchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merchant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Merchant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BankBranchId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankBranchId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.MerchantStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.AutoPayoutRemark != nil {
		i -= len(*m.AutoPayoutRemark)
		copy(dAtA[i:], *m.AutoPayoutRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AutoPayoutRemark)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.BankAccountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankAccountStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.ProductConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProductConfigStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.SettlementConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementConfigStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.WalletRelationStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletRelationStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.PayoutAccountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutAccountId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.CrossMonthSettlement != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CrossMonthSettlement))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.PayoutMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMethod))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.VatCalculate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatCalculate))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.BankChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankChannelId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.SourceUpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SourceUpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.IsUseWallet != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseWallet))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.WhtRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtRate))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.VatRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.PaymentWay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentWay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.SettlementMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.TaxId != nil {
		i -= len(*m.TaxId)
		copy(dAtA[i:], *m.TaxId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TaxId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.BankAccountName != nil {
		i -= len(*m.BankAccountName)
		copy(dAtA[i:], *m.BankAccountName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.BankBranch != nil {
		i -= len(*m.BankBranch)
		copy(dAtA[i:], *m.BankBranch)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankBranch)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.TobUserIds != nil {
		i -= len(*m.TobUserIds)
		copy(dAtA[i:], *m.TobUserIds)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TobUserIds)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TobUserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TobUserId))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.RegisterTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Banner != nil {
		i -= len(*m.Banner)
		copy(dAtA[i:], *m.Banner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Banner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Logo != nil {
		i -= len(*m.Logo)
		copy(dAtA[i:], *m.Logo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Email != nil {
		i -= len(*m.Email)
		copy(dAtA[i:], *m.Email)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MerchantName != nil {
		i -= len(*m.MerchantName)
		copy(dAtA[i:], *m.MerchantName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.MerchantName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Brand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Brand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Brand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StoreCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Deleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Deleted))
		i--
		dAtA[i] = 0x18
	}
	if m.BrandName != nil {
		i -= len(*m.BrandName)
		copy(dAtA[i:], *m.BrandName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BrandName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Editable != nil {
		i--
		if *m.Editable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DeleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeleteTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TagTypeId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TagTypeId))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Deleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Deleted))
		i--
		dAtA[i] = 0x18
	}
	if m.TagName != nil {
		i -= len(*m.TagName)
		copy(dAtA[i:], *m.TagName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TagName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TagType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Editable != nil {
		i--
		if *m.Editable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DeleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeleteTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Deleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Deleted))
		i--
		dAtA[i] = 0x40
	}
	if m.TagCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TagCount))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TypeName != nil {
		i -= len(*m.TypeName)
		copy(dAtA[i:], *m.TypeName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TypeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PredefinedKeyword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredefinedKeyword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PredefinedKeyword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeleteTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Deleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Deleted))
		i--
		dAtA[i] = 0x28
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserSearchKeywords) > 0 {
		for iNdEx := len(m.UserSearchKeywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserSearchKeywords[iNdEx])
			copy(dAtA[i:], m.UserSearchKeywords[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.UserSearchKeywords[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ActualSearchKeyword != nil {
		i -= len(*m.ActualSearchKeyword)
		copy(dAtA[i:], *m.ActualSearchKeyword)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ActualSearchKeyword)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopeePay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShopeePay))
		i--
		dAtA[i] = 0x10
	}
	if m.Bank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Bank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithdrawalChannel != nil {
		{
			size, err := m.WithdrawalChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.BalanceVersion != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BalanceVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.ModeUpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ModeUpdateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.ModeOperator != nil {
		i -= len(*m.ModeOperator)
		copy(dAtA[i:], *m.ModeOperator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ModeOperator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PayoutMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMode))
		i--
		dAtA[i] = 0x40
	}
	if m.WalletType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletType))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.WalletStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.Balance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Balance))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverWalletTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverWalletTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverWalletTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelatedOrder != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RelatedOrder))
		i--
		dAtA[i] = 0x70
	}
	if m.BalanceVersion != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BalanceVersion))
		i--
		dAtA[i] = 0x68
	}
	if m.Extend != nil {
		i -= len(*m.Extend)
		copy(dAtA[i:], *m.Extend)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Extend)))
		i--
		dAtA[i] = 0x62
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x40
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Balance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Balance))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.TransactionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionType))
		i--
		dAtA[i] = 0x20
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x18
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverWalletOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverWalletOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverWalletOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.ShopeeUserName != nil {
		i -= len(*m.ShopeeUserName)
		copy(dAtA[i:], *m.ShopeeUserName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ShopeeUserName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.WithdrawalChannel != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WithdrawalChannel))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.ShopeeUserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShopeeUserId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.BankAccountHolder != nil {
		i -= len(*m.BankAccountHolder)
		copy(dAtA[i:], *m.BankAccountHolder)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountHolder)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.PayoutNotifyTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutNotifyTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.EstimateApproveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateApproveTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.AuditTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AuditTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.AuditOperator != nil {
		i -= len(*m.AuditOperator)
		copy(dAtA[i:], *m.AuditOperator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AuditOperator)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.AuditRemark != nil {
		i -= len(*m.AuditRemark)
		copy(dAtA[i:], *m.AuditRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AuditRemark)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.AuditResult != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AuditResult))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.PaymentErrorCode != nil {
		i -= len(*m.PaymentErrorCode)
		copy(dAtA[i:], *m.PaymentErrorCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentErrorCode)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.PayoutMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMode))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.RejectTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RejectTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.AdjustTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AdjustTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.PaymentLink != nil {
		i -= len(*m.PaymentLink)
		copy(dAtA[i:], *m.PaymentLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PaymentChannelOption != nil {
		i -= len(*m.PaymentChannelOption)
		copy(dAtA[i:], *m.PaymentChannelOption)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentChannelOption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PaymentChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentChannelId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.TransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionRef))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x7a
	}
	if m.EscrowNo != nil {
		i -= len(*m.EscrowNo)
		copy(dAtA[i:], *m.EscrowNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.EscrowNo)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.EscrowCerts) > 0 {
		for iNdEx := len(m.EscrowCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EscrowCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x62
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x58
	}
	if m.AdjustReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AdjustReason))
		i--
		dAtA[i] = 0x50
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.DriverPhone != nil {
		i -= len(*m.DriverPhone)
		copy(dAtA[i:], *m.DriverPhone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DriverPhone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DriverName != nil {
		i -= len(*m.DriverName)
		copy(dAtA[i:], *m.DriverName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DriverName)))
		i--
		dAtA[i] = 0x22
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProcessingTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProcessingTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.StoreSettlementMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreSettlementMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.StoreName != nil {
		i -= len(*m.StoreName)
		copy(dAtA[i:], *m.StoreName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.StoreName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.WalletType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x78
	}
	if m.SettlementDetailId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementDetailId))
		i--
		dAtA[i] = 0x70
	}
	if m.WalletSettlementId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletSettlementId))
		i--
		dAtA[i] = 0x68
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x60
	}
	if m.ReferenceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceType))
		i--
		dAtA[i] = 0x58
	}
	if m.TransactionRef != nil {
		i -= len(*m.TransactionRef)
		copy(dAtA[i:], *m.TransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransactionRef)))
		i--
		dAtA[i] = 0x52
	}
	if m.ClearingFlag != nil {
		{
			size, err := m.ClearingFlag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.SettlementErrorCode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementErrorCode))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFromCompensation != nil {
		i--
		if *m.IsFromCompensation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SettlementStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SettlementMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMode))
		i--
		dAtA[i] = 0x18
	}
	if m.SettlementSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementSource))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreSettlement_Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSettlement_Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreSettlement_Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SurchargeRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SurchargeRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.SurchargeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SurchargeFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FlashsaleDiscountsSubsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FlashsaleDiscountsSubsidy))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ItemDiscountsSubsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemDiscountsSubsidy))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DeliveryCost != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryCost))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ShippingFeeVoucherSubsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFeeVoucherSubsidy))
		i--
		dAtA[i] = 0x78
	}
	if m.ItemVoucherSubsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemVoucherSubsidy))
		i--
		dAtA[i] = 0x70
	}
	if m.VatCalculate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatCalculate))
		i--
		dAtA[i] = 0x68
	}
	if m.WhtAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtAmount))
		i--
		dAtA[i] = 0x60
	}
	if m.WhtRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtRate))
		i--
		dAtA[i] = 0x58
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x50
	}
	if m.VatAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatAmount))
		i--
		dAtA[i] = 0x48
	}
	if m.VatRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VatRate))
		i--
		dAtA[i] = 0x40
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x38
	}
	if m.TaxRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxRate))
		i--
		dAtA[i] = 0x30
	}
	if m.StoreSubsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreSubsidy))
		i--
		dAtA[i] = 0x28
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x20
	}
	if m.Commission != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Commission))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemSubtotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemSubtotal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreSettlement_ClearingFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSettlement_ClearingFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreSettlement_ClearingFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsMerchantDelivery != nil {
		i--
		if *m.IsMerchantDelivery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsUseMerchantWallet != nil {
		i--
		if *m.IsUseMerchantWallet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsUseMerchantWalletOriginal != nil {
		i--
		if *m.IsUseMerchantWalletOriginal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFromCompensation != nil {
		i--
		if *m.IsFromCompensation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PaymentId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentId))
		i--
		dAtA[i] = 0x78
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x62
	}
	if m.DeliveryAmount != nil {
		{
			size, err := m.DeliveryAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.OrderAmount != nil {
		{
			size, err := m.OrderAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ReferenceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceType))
		i--
		dAtA[i] = 0x48
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x40
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x38
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.SettlementStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SettlementSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementSource))
		i--
		dAtA[i] = 0x18
	}
	if m.SettlementMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMode))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXDriverSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXDriverSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXDriverSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Extend != nil {
		i -= len(*m.Extend)
		copy(dAtA[i:], *m.Extend)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Extend)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.IsFromCompensation != nil {
		i--
		if *m.IsFromCompensation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PaymentId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentId))
		i--
		dAtA[i] = 0x48
	}
	if m.ReferenceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceType))
		i--
		dAtA[i] = 0x40
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x38
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x30
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x28
	}
	if m.SettlementStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SettlementType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementType))
		i--
		dAtA[i] = 0x18
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXDriverSettlement_Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXDriverSettlement_Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXDriverSettlement_Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CollectionAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CollectionAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReturnOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreChargebackMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.StoreChargebackType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OfflineRefundMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OfflineRefundMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.Proposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Proposer))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.ReturnSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.StoreChargebackAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Responsibility != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Responsibility))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ReturnRemark != nil {
		i -= len(*m.ReturnRemark)
		copy(dAtA[i:], *m.ReturnRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReturnRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ReturnReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ReturnType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x78
	}
	if m.ApproveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ApproveTime))
		i--
		dAtA[i] = 0x70
	}
	if m.InitiationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitiationTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x60
	}
	if m.ReturnStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.RefundAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.RefundType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundType))
		i--
		dAtA[i] = 0x48
	}
	if m.OrderReferenceStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderReferenceStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.OrderCancelCerts) > 0 {
		for iNdEx := len(m.OrderCancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderCancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.OrderCancelRemark != nil {
		i -= len(*m.OrderCancelRemark)
		copy(dAtA[i:], *m.OrderCancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OrderCancelRemark)))
		i--
		dAtA[i] = 0x32
	}
	if m.OrderCancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderCancelReason))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderCancelResponsibility != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderCancelResponsibility))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderCancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderCancelSource))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Refund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefundMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OfflineRefundTransactionRef != nil {
		i -= len(*m.OfflineRefundTransactionRef)
		copy(dAtA[i:], *m.OfflineRefundTransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OfflineRefundTransactionRef)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RefundMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundMethod))
		i--
		dAtA[i] = 0x78
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x72
	}
	if m.ReturnType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnType))
		i--
		dAtA[i] = 0x68
	}
	if m.CheckoutId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CheckoutId))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.RefundTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundTime))
		i--
		dAtA[i] = 0x48
	}
	if m.InitiationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitiationTime))
		i--
		dAtA[i] = 0x40
	}
	if m.RefundStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.RefundAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.RefundTransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundTransactionRef))
		i--
		dAtA[i] = 0x28
	}
	if m.PaymentTransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTransactionRef))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReturnId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnionCity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnionCity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnionCity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.District != nil {
		i -= len(*m.District)
		copy(dAtA[i:], *m.District)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.District)))
		i--
		dAtA[i] = 0x1a
	}
	if m.City != nil {
		i -= len(*m.City)
		copy(dAtA[i:], *m.City)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.City)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != nil {
		i -= len(*m.State)
		copy(dAtA[i:], *m.State)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MassChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MassChangeLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MassChangeLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LogType))
		i--
		dAtA[i] = 0x58
	}
	if m.Content != nil {
		i -= len(*m.Content)
		copy(dAtA[i:], *m.Content)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Content)))
		i--
		dAtA[i] = 0x52
	}
	if m.OperateSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OperateSource))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.OperateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OperateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x32
	}
	if m.FileHash != nil {
		i -= len(*m.FileHash)
		copy(dAtA[i:], *m.FileHash)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FileHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Filename != nil {
		i -= len(*m.Filename)
		copy(dAtA[i:], *m.Filename)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Filename)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChangeType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChangeType))
		i--
		dAtA[i] = 0x18
	}
	if m.MassType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MassType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderDiscountCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDiscountCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDiscountCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocationGroupIds) > 0 {
		for iNdEx := len(m.LocationGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.LocationGroupIds[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc0
		}
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Label != nil {
		i -= len(*m.Label)
		copy(dAtA[i:], *m.Label)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Label)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.PaymentMethods) > 0 {
		for iNdEx := len(m.PaymentMethods) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.PaymentMethods[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
	}
	if m.StoreFilename != nil {
		i -= len(*m.StoreFilename)
		copy(dAtA[i:], *m.StoreFilename)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.StoreFilename)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.PartnerType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PartnerType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.UserTags != nil {
		i -= len(*m.UserTags)
		copy(dAtA[i:], *m.UserTags)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.UserTags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x78
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x70
	}
	if m.LimitPerUser != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LimitPerUser))
		i--
		dAtA[i] = 0x68
	}
	if m.LimitPerDay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LimitPerDay))
		i--
		dAtA[i] = 0x60
	}
	if m.UsedQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsedQuantity))
		i--
		dAtA[i] = 0x58
	}
	if m.Stock != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Stock))
		i--
		dAtA[i] = 0x50
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x48
	}
	if m.DiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.DiscountCap != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountCap))
		i--
		dAtA[i] = 0x38
	}
	if m.DiscountPercentage != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPercentage))
		i--
		dAtA[i] = 0x30
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x28
	}
	if m.PromotionStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignName != nil {
		i -= len(*m.CampaignName)
		copy(dAtA[i:], *m.CampaignName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CampaignName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoucherIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Length))
		i--
		dAtA[i] = 0x30
	}
	if m.Prefix != nil {
		i -= len(*m.Prefix)
		copy(dAtA[i:], *m.Prefix)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Prefix)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RewardType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardType))
		i--
		dAtA[i] = 0x20
	}
	if m.Signature != nil {
		i -= len(*m.Signature)
		copy(dAtA[i:], *m.Signature)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoucherCode != nil {
		i -= len(*m.VoucherCode)
		copy(dAtA[i:], *m.VoucherCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.PromotionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DistributionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DistributionMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistributionMethod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidityStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidityStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidityStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.QuotaStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.QuotaStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiLangTxt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiLangTxt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiLangTxt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Language != nil {
		i -= len(*m.Language)
		copy(dAtA[i:], *m.Language)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Language)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoucherTAndC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherTAndC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherTAndC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SectionTitleKey != nil {
		i -= len(*m.SectionTitleKey)
		copy(dAtA[i:], *m.SectionTitleKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SectionTitleKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SectionContent != nil {
		i -= len(*m.SectionContent)
		copy(dAtA[i:], *m.SectionContent)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SectionContent)))
		i--
		dAtA[i] = 0x12
	}
	if m.SectionTitle != nil {
		i -= len(*m.SectionTitle)
		copy(dAtA[i:], *m.SectionTitle)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SectionTitle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisplayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisplayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BrowseListTags != nil {
		{
			size, err := m.BrowseListTags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DisplayOnLandingPage != nil {
		i--
		if *m.DisplayOnLandingPage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.TcSectionList) > 0 {
		for iNdEx := len(m.TcSectionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcSectionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CustomizedLabels) > 0 {
		for iNdEx := len(m.CustomizedLabels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomizedLabels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Label != nil {
		i -= len(*m.Label)
		copy(dAtA[i:], *m.Label)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IconText != nil {
		i -= len(*m.IconText)
		copy(dAtA[i:], *m.IconText)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.IconText)))
		i--
		dAtA[i] = 0x12
	}
	if m.Icon != nil {
		i -= len(*m.Icon)
		copy(dAtA[i:], *m.Icon)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Icon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisplayInfo != nil {
		{
			size, err := m.DisplayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentMethodScope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentMethodScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentMethodScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpmChannelIds) > 0 {
		for iNdEx := len(m.SpmChannelIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.SpmChannelIds[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if len(m.PaymentMethods) > 0 {
		for iNdEx := len(m.PaymentMethods) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.PaymentMethods[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *PaymentRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VoucherPaymentTypes) > 0 {
		for iNdEx := len(m.VoucherPaymentTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.VoucherPaymentTypes[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.CreditCardBins) > 0 {
		for iNdEx := len(m.CreditCardBins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreditCardBins[iNdEx])
			copy(dAtA[i:], m.CreditCardBins[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.CreditCardBins[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OrderScope != nil {
		{
			size, err := m.OrderScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PaymentMethodScope != nil {
		{
			size, err := m.PaymentMethodScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocationScope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LocationGroupIds) > 0 {
		for iNdEx := len(m.LocationGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.LocationGroupIds[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderScope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreScope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreScope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreScope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StoreTagIds) > 0 {
		for iNdEx := len(m.StoreTagIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.StoreTagIds[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.StorePartnerTypes) > 0 {
		for iNdEx := len(m.StorePartnerTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.StorePartnerTypes[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if len(m.ExcludeStoreIds) > 0 {
		for iNdEx := len(m.ExcludeStoreIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.ExcludeStoreIds[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.StoreIds) > 0 {
		for iNdEx := len(m.StoreIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.StoreIds[iNdEx]))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.ScopeType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ScopeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProductRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProductRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreScope != nil {
		{
			size, err := m.StoreScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LocationScope != nil {
		{
			size, err := m.LocationScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAttributes) > 0 {
		for iNdEx := len(m.UserAttributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAttributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cap != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Cap))
		i--
		dAtA[i] = 0x18
	}
	if m.Percentage != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Percentage))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoucherRewardDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherRewardDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherRewardDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RewardCoin != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardCoin))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardDiscount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardDiscount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserVoucher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserVoucher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserVoucher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Voucher != nil {
		{
			size, err := m.Voucher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UsageLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.UsageCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageCount))
		i--
		dAtA[i] = 0x20
	}
	if m.VoucherIdentifier != nil {
		{
			size, err := m.VoucherIdentifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserVoucherId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserVoucherId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Voucher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voucher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voucher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Source != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Source))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.VoucherType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.SuffixLength != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SuffixLength))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.NonClaimableByCode != nil {
		i--
		if *m.NonClaimableByCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.MerchantSubsidyAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantSubsidyAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.CoFundCampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CoFundCampaignId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.VoucherRewardDiscount != nil {
		{
			size, err := m.VoucherRewardDiscount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.VoucherStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.VoucherCode != nil {
		i -= len(*m.VoucherCode)
		copy(dAtA[i:], *m.VoucherCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherCode)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.VoucherId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.UserRules != nil {
		{
			size, err := m.UserRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.UsageValidityStatus != nil {
		{
			size, err := m.UsageValidityStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.UsageTotalLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageTotalLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.UsageTotalCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageTotalCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.UsagePerUserLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsagePerUserLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.UsageEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageEndTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.UsageStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageStartTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.UsageDurationHrs != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsageDurationHrs))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.UpdatedBy != nil {
		i -= len(*m.UpdatedBy)
		copy(dAtA[i:], *m.UpdatedBy)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.UpdatedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.VoucherRewardType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherRewardType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ProductRules != nil {
		{
			size, err := m.ProductRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PaymentRules != nil {
		{
			size, err := m.PaymentRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.VoucherName != nil {
		i -= len(*m.VoucherName)
		copy(dAtA[i:], *m.VoucherName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ExtraInfo != nil {
		{
			size, err := m.ExtraInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.DistributionValidityStatus != nil {
		{
			size, err := m.DistributionValidityStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.DistributionTotalCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistributionTotalCount))
		i--
		dAtA[i] = 0x78
	}
	if m.DistributionTotalLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistributionTotalLimit))
		i--
		dAtA[i] = 0x70
	}
	if m.DistributionRule != nil {
		{
			size, err := m.DistributionRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DistributionEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistributionEndTime))
		i--
		dAtA[i] = 0x60
	}
	if m.DistributionStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistributionStartTime))
		i--
		dAtA[i] = 0x58
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedBy != nil {
		i -= len(*m.CreatedBy)
		copy(dAtA[i:], *m.CreatedBy)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CreatedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Title != nil {
		i -= len(*m.Title)
		copy(dAtA[i:], *m.Title)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Title)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RewardShippingFeeDiscount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardShippingFeeDiscount))
		i--
		dAtA[i] = 0x30
	}
	if m.RewardCoinEquivalentCash != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardCoinEquivalentCash))
		i--
		dAtA[i] = 0x28
	}
	if m.RewardCoin != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardCoin))
		i--
		dAtA[i] = 0x20
	}
	if m.RewardDiscount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardDiscount))
		i--
		dAtA[i] = 0x18
	}
	if m.RewardType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RewardType))
		i--
		dAtA[i] = 0x10
	}
	if m.Identifier != nil {
		{
			size, err := m.Identifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoucherCustomisedLabelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherCustomisedLabelList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherCustomisedLabelList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoucherCustomisedLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherCustomisedLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherCustomisedLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageHash != nil {
		i -= len(*m.ImageHash)
		copy(dAtA[i:], *m.ImageHash)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ImageHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Color != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Color))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Label) > 0 {
		for iNdEx := len(m.Label) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Label[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoucherTaskFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherTaskFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherTaskFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Hash != nil {
		i -= len(*m.Hash)
		copy(dAtA[i:], *m.Hash)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Url != nil {
		i -= len(*m.Url)
		copy(dAtA[i:], *m.Url)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FileType))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoucherClaimStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherClaimStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherClaimStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Claimed != nil {
		i--
		if *m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VoucherCode != nil {
		i -= len(*m.VoucherCode)
		copy(dAtA[i:], *m.VoucherCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.VoucherId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoucherTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserAttribute != nil {
		{
			size, err := m.UserAttribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ResultFiles) > 0 {
		for iNdEx := len(m.ResultFiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultFiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.UploadFile != nil {
		{
			size, err := m.UploadFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x52
	}
	if m.UploadTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UploadTime))
		i--
		dAtA[i] = 0x48
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ExecuteCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExecuteCount))
		i--
		dAtA[i] = 0x30
	}
	if m.FailCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FailCount))
		i--
		dAtA[i] = 0x28
	}
	if m.SuccessCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SuccessCount))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaskStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaskType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpendCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Discount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Discount))
		i--
		dAtA[i] = 0x10
	}
	if m.Coins != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Coins))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CampaignName != nil {
		i -= len(*m.CampaignName)
		copy(dAtA[i:], *m.CampaignName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CampaignName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Discount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Discount))
		i--
		dAtA[i] = 0x18
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x10
	}
	if m.CampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EarnCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EarnCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EarnCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Coins != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Coins))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Promotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Promotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Promotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlashSaleOrderItem != nil {
		{
			size, err := m.FlashSaleOrderItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vouchers) > 0 {
		for iNdEx := len(m.Vouchers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vouchers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EarnCoins != nil {
		{
			size, err := m.EarnCoins.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderDiscounts) > 0 {
		for iNdEx := len(m.OrderDiscounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderDiscounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SpendCoins != nil {
		{
			size, err := m.SpendCoins.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Voucher != nil {
		{
			size, err := m.Voucher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AppliedTimes != nil {
		{
			size, err := m.AppliedTimes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.UserTags != nil {
		i -= len(*m.UserTags)
		copy(dAtA[i:], *m.UserTags)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.UserTags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Purpose != nil {
		i -= len(*m.Purpose)
		copy(dAtA[i:], *m.Purpose)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Purpose)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Note != nil {
		i -= len(*m.Note)
		copy(dAtA[i:], *m.Note)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Note)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.MaxDiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxDiscountAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreatorSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreatorSource))
		i--
		dAtA[i] = 0x78
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ItemDiscounts) > 0 {
		for iNdEx := len(m.ItemDiscounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemDiscounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.MaxDiscountPercentage != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxDiscountPercentage))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x40
	}
	if m.ItemQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemQuantity))
		i--
		dAtA[i] = 0x38
	}
	if m.PromotionStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignName != nil {
		i -= len(*m.CampaignName)
		copy(dAtA[i:], *m.CampaignName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CampaignName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SoldNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SoldNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Stock != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Stock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreatorSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreatorSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x78
	}
	if m.GroupId != nil {
		i -= len(*m.GroupId)
		copy(dAtA[i:], *m.GroupId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.GroupId)))
		i--
		dAtA[i] = 0x72
	}
	if m.DiscountPercentage != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPercentage))
		i--
		dAtA[i] = 0x68
	}
	if m.CampaignEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignEndTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CampaignStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignStartTime))
		i--
		dAtA[i] = 0x58
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x38
	}
	if m.CampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignId))
		i--
		dAtA[i] = 0x30
	}
	if m.DiscountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.LimitPerOrder != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LimitPerOrder))
		i--
		dAtA[i] = 0x20
	}
	if m.DiscountPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x78
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.SoldStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SoldStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.CancelQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelQuantity))
		i--
		dAtA[i] = 0x50
	}
	if m.ReturnQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnQuantity))
		i--
		dAtA[i] = 0x48
	}
	if m.Quantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Quantity))
		i--
		dAtA[i] = 0x40
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x38
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x30
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderItemId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderItemId))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemDiscountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ItemDiscountId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PromotionObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PromotionNameInfo != nil {
		{
			size, err := m.PromotionNameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ExtInfo != nil {
		{
			size, err := m.ExtInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ShowStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShowStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x28
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x20
	}
	if m.PromotionToolId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionToolId))
		i--
		dAtA[i] = 0x18
	}
	if m.PromotionName != nil {
		i -= len(*m.PromotionName)
		copy(dAtA[i:], *m.PromotionName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PromotionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PromotionObject_PromotionExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionObject_PromotionExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionObject_PromotionExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReviewStatus != nil {
		i -= len(*m.ReviewStatus)
		copy(dAtA[i:], *m.ReviewStatus)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReviewStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Buttons) > 0 {
		for iNdEx := len(m.Buttons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buttons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PromotionImage != nil {
		i -= len(*m.PromotionImage)
		copy(dAtA[i:], *m.PromotionImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PromotionObject_PromotionNameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionObject_PromotionNameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionObject_PromotionNameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiLangName) > 0 {
		for iNdEx := len(m.MultiLangName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiLangName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Button) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Button) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Button) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ButtonType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ButtonType))
		i--
		dAtA[i] = 0x20
	}
	if m.RedirectInfo != nil {
		{
			size, err := m.RedirectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TransifyKey != nil {
		i -= len(*m.TransifyKey)
		copy(dAtA[i:], *m.TransifyKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransifyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.ButtonName != nil {
		i -= len(*m.ButtonName)
		copy(dAtA[i:], *m.ButtonName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ButtonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AttributeType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AttributeType))
		i--
		dAtA[i] = 0x18
	}
	if m.ValueInfo != nil {
		{
			size, err := m.ValueInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.KeyInfo != nil {
		{
			size, err := m.KeyInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attribute_KeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute_KeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute_KeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransifyKey != nil {
		i -= len(*m.TransifyKey)
		copy(dAtA[i:], *m.TransifyKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransifyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attribute_ValueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute_ValueInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute_ValueInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.TransifyKey != nil {
		i -= len(*m.TransifyKey)
		copy(dAtA[i:], *m.TransifyKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransifyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedirectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedirectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedirectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParamPairs) > 0 {
		for iNdEx := len(m.ParamPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParamPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RedirectUrl != nil {
		i -= len(*m.RedirectUrl)
		copy(dAtA[i:], *m.RedirectUrl)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RedirectUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedirectInfo_ParamPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedirectInfo_ParamPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedirectInfo_ParamPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WhitelistScope != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhitelistScope))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ExtInfo != nil {
		{
			size, err := m.ExtInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PromotionToolType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionToolType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PromotionTool_PromotionToolExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionTool_PromotionToolExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionTool_PromotionToolExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Logo != nil {
		i -= len(*m.Logo)
		copy(dAtA[i:], *m.Logo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if m.DescriptionInfo != nil {
		{
			size, err := m.DescriptionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RedirectInfo != nil {
		{
			size, err := m.RedirectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PromotionToolNameInfo != nil {
		{
			size, err := m.PromotionToolNameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransifyKey != nil {
		i -= len(*m.TransifyKey)
		copy(dAtA[i:], *m.TransifyKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransifyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.PromotionToolName != nil {
		i -= len(*m.PromotionToolName)
		copy(dAtA[i:], *m.PromotionToolName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionToolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransifyKey != nil {
		i -= len(*m.TransifyKey)
		copy(dAtA[i:], *m.TransifyKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransifyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPromotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPromotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPromotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RegisterEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterEndTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RegisterStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterStartTime))
		i--
		dAtA[i] = 0x78
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.ExtInfo != nil {
		{
			size, err := m.ExtInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.StoreSessionStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreSessionStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.ShowStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShowStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.JoinedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.JoinedTime))
		i--
		dAtA[i] = 0x40
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x28
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventPromotionNameInfo != nil {
		{
			size, err := m.EventPromotionNameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EventId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPromotion_EventPromotionExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPromotion_EventPromotionExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPromotion_EventPromotionExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReviewStatus != nil {
		i -= len(*m.ReviewStatus)
		copy(dAtA[i:], *m.ReviewStatus)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReviewStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Buttons) > 0 {
		for iNdEx := len(m.Buttons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buttons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PromotionImage != nil {
		i -= len(*m.PromotionImage)
		copy(dAtA[i:], *m.PromotionImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventPromotion_EventPromotionNameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPromotion_EventPromotionNameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPromotion_EventPromotionNameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiLangName) > 0 {
		for iNdEx := len(m.MultiLangName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiLangName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.WhitelistScope != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhitelistScope))
		i--
		dAtA[i] = 0x48
	}
	if m.EventExtInfo != nil {
		{
			size, err := m.EventExtInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.RegisterEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterEndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RegisterStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterStartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.PromotionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PromotionType))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNameInfo != nil {
		{
			size, err := m.EventNameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EventId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventObject_EventExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObject_EventExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObject_EventExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buttons) > 0 {
		for iNdEx := len(m.Buttons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buttons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RedirectInfo != nil {
		{
			size, err := m.RedirectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PromotionListImage != nil {
		i -= len(*m.PromotionListImage)
		copy(dAtA[i:], *m.PromotionListImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionListImage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MainBanner != nil {
		i -= len(*m.MainBanner)
		copy(dAtA[i:], *m.MainBanner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.MainBanner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventObject_EventNameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObject_EventNameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObject_EventNameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiLangName) > 0 {
		for iNdEx := len(m.MultiLangName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiLangName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SyncTime))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OldId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OldId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.DeliveryOrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryOrderId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x78
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x72
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PaymentLink != nil {
		i -= len(*m.PaymentLink)
		copy(dAtA[i:], *m.PaymentLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentLink)))
		i--
		dAtA[i] = 0x62
	}
	if m.PaymentChannelOption != nil {
		i -= len(*m.PaymentChannelOption)
		copy(dAtA[i:], *m.PaymentChannelOption)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentChannelOption)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PaymentChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentChannelId))
		i--
		dAtA[i] = 0x50
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x48
	}
	if m.TransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionRef))
		i--
		dAtA[i] = 0x40
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x38
	}
	if m.TipStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TipStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x28
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x20
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreChargeback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreChargeback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreChargeback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransactionRef != nil {
		i -= len(*m.TransactionRef)
		copy(dAtA[i:], *m.TransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransactionRef)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ChargebackMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChargebackMethod))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x38
	}
	if m.ChargebackAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChargebackAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.ChargebackStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChargebackStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x20
	}
	if m.ReturnId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnId))
		i--
		dAtA[i] = 0x18
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.IntervalEnd != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IntervalEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.IntervalStart != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IntervalStart))
		i--
		dAtA[i] = 0x18
	}
	if m.WeekBits != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WeekBits))
		i--
		dAtA[i] = 0x10
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x20
	}
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialRule_TimeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialRule_TimeRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialRule_TimeRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntervalEnd != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IntervalEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.IntervalStart != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IntervalStart))
		i--
		dAtA[i] = 0x10
	}
	if m.WeekBits != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WeekBits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialRule_LocationGroupRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialRule_LocationGroupRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialRule_LocationGroupRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LocationGroupDescription != nil {
		i -= len(*m.LocationGroupDescription)
		copy(dAtA[i:], *m.LocationGroupDescription)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.LocationGroupDescription)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LocationGroupIds) > 0 {
		for iNdEx := len(m.LocationGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.LocationGroupIds[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpecialRule_OrderStackRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialRule_OrderStackRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialRule_OrderStackRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDropOffPointEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDropOffPointEnabled))
		i--
		dAtA[i] = 0x10
	}
	if m.IsPickUpPointEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsPickUpPointEnabled))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialRule_Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialRule_Detail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialRule_Detail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderStackRule != nil {
		{
			size, err := m.OrderStackRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LocationGroupRule != nil {
		{
			size, err := m.LocationGroupRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TimeRule != nil {
		{
			size, err := m.TimeRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ValidTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ValidTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CashConversionRuleId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CashConversionRuleId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Rank != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Rank))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.BaseRules) > 0 {
		for iNdEx := len(m.BaseRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x7a
	}
	if m.LocationGroupDescription != nil {
		i -= len(*m.LocationGroupDescription)
		copy(dAtA[i:], *m.LocationGroupDescription)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.LocationGroupDescription)))
		i--
		dAtA[i] = 0x72
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x58
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SpecialRules) > 0 {
		for iNdEx := len(m.SpecialRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecialRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.BaseRule != nil {
		{
			size, err := m.BaseRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Requirement != nil {
		{
			size, err := m.Requirement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CashRules) > 0 {
		for iNdEx := len(m.CashRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CashRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PlanStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlanStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PlanName != nil {
		i -= len(*m.PlanName)
		copy(dAtA[i:], *m.PlanName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PlanName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePlan_CashRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlan_CashRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlan_CashRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePlan_Requirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlan_Requirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlan_Requirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinRatingScore != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MinRatingScore))))
		i--
		dAtA[i] = 0x15
	}
	if m.MinCompletionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinCompletionRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemainingOrder != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RemainingOrder))
		i--
		dAtA[i] = 0x78
	}
	if m.PointSettlementType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PointSettlementType))
		i--
		dAtA[i] = 0x70
	}
	if m.TaxInclusiveAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxInclusiveAmount))
		i--
		dAtA[i] = 0x68
	}
	if m.TaskStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaskStatus))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x48
	}
	if m.CreditStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreditStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaskDate))
		i--
		dAtA[i] = 0x20
	}
	if m.PlanId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlanId))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CashConversionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CashConversionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CashConversionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsSelectionEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsSelectionEnabled))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CashRules) > 0 {
		for iNdEx := len(m.CashRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CashRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RuleName != nil {
		i -= len(*m.RuleName)
		copy(dAtA[i:], *m.RuleName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CashConversionRule_CashRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CashConversionRule_CashRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CashConversionRule_CashRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CashConversionRuleId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CashConversionRuleId))
		i--
		dAtA[i] = 0x48
	}
	if m.CreditStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreditStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x38
	}
	if m.TaxInclusiveAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaxInclusiveAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x28
	}
	if m.SettlementStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SettlementDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementDate))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoucherRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AntiFraud != nil {
		i -= len(*m.AntiFraud)
		copy(dAtA[i:], *m.AntiFraud)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AntiFraud)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x70
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.Data != nil {
		i -= len(*m.Data)
		copy(dAtA[i:], *m.Data)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Data)))
		i--
		dAtA[i] = 0x52
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x48
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x40
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x38
	}
	if m.TccTransactionId != nil {
		i -= len(*m.TccTransactionId)
		copy(dAtA[i:], *m.TccTransactionId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TccTransactionId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReferenceId != nil {
		i -= len(*m.ReferenceId)
		copy(dAtA[i:], *m.ReferenceId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Signature != nil {
		i -= len(*m.Signature)
		copy(dAtA[i:], *m.Signature)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.VoucherCode != nil {
		i -= len(*m.VoucherCode)
		copy(dAtA[i:], *m.VoucherCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoucherId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AntiFraud) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AntiFraud) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AntiFraud) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RnVersion != nil {
		i -= len(*m.RnVersion)
		copy(dAtA[i:], *m.RnVersion)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RnVersion)))
		i--
		dAtA[i] = 0x42
	}
	if m.AppType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AppType))
		i--
		dAtA[i] = 0x38
	}
	if m.UserAgentType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserAgentType))
		i--
		dAtA[i] = 0x30
	}
	if m.AppVersionName != nil {
		i -= len(*m.AppVersionName)
		copy(dAtA[i:], *m.AppVersionName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AppVersionName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if m.SecurityDf != nil {
		i -= len(*m.SecurityDf)
		copy(dAtA[i:], *m.SecurityDf)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SecurityDf)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TongdunBlackbox != nil {
		i -= len(*m.TongdunBlackbox)
		copy(dAtA[i:], *m.TongdunBlackbox)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TongdunBlackbox)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceFingerprint != nil {
		i -= len(*m.DeviceFingerprint)
		copy(dAtA[i:], *m.DeviceFingerprint)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeviceFingerprint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverWalletPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverWalletPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverWalletPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x68
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.RevokeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RevokeTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x48
	}
	if m.InitTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x38
	}
	if m.PaymentStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x20
	}
	if m.PaymentType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentType))
		i--
		dAtA[i] = 0x18
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverWalletRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverWalletRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverWalletRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BalanceVersion != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BalanceVersion))
		i--
		dAtA[i] = 0x78
	}
	if m.AmountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AmountType))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Extend != nil {
		i -= len(*m.Extend)
		copy(dAtA[i:], *m.Extend)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Extend)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x52
	}
	if m.Tag != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Tag))
		i--
		dAtA[i] = 0x48
	}
	if m.TransactionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionId))
		i--
		dAtA[i] = 0x40
	}
	if m.IsRevoked != nil {
		i--
		if *m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TransactionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionType))
		i--
		dAtA[i] = 0x30
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Balance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Balance))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Penalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Penalty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Penalty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.ViolationId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ViolationId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.EventTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EventTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.EstimateExecuteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateExecuteTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.RuleGroup != nil {
		i -= len(*m.RuleGroup)
		copy(dAtA[i:], *m.RuleGroup)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleGroup)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.DeliveryOrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryOrderId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ViolationIds) > 0 {
		for iNdEx := len(m.ViolationIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.ViolationIds[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x98
		}
	}
	if len(m.ParentIds) > 0 {
		for iNdEx := len(m.ParentIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.ParentIds[iNdEx]))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x90
		}
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.RevokeReason != nil {
		i -= len(*m.RevokeReason)
		copy(dAtA[i:], *m.RevokeReason)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RevokeReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.RevokeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RevokeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.PenalizeFailTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenalizeFailTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.PenalizeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenalizeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.PenaltyStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenaltyStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CurrentPoints != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CurrentPoints))
		i--
		dAtA[i] = 0x68
	}
	if m.PointsResetTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PointsResetTime))
		i--
		dAtA[i] = 0x60
	}
	if m.PointsResetSeconds != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PointsResetSeconds))
		i--
		dAtA[i] = 0x58
	}
	if m.Points != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Points))
		i--
		dAtA[i] = 0x50
	}
	if m.FinePaymentId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FinePaymentId))
		i--
		dAtA[i] = 0x48
	}
	if m.FineAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FineAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.FineType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FineType))
		i--
		dAtA[i] = 0x38
	}
	if m.SuspensionSeconds != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SuspensionSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.SuspensionType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SuspensionType))
		i--
		dAtA[i] = 0x28
	}
	if m.PenaltySource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenaltySource))
		i--
		dAtA[i] = 0x20
	}
	if m.PenaltyCategory != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenaltyCategory))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Violation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Violation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Violation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.RevokeOperator != nil {
		i -= len(*m.RevokeOperator)
		copy(dAtA[i:], *m.RevokeOperator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RevokeOperator)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.RevokeReason != nil {
		i -= len(*m.RevokeReason)
		copy(dAtA[i:], *m.RevokeReason)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RevokeReason)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.IncentiveBonusFineEnable != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IncentiveBonusFineEnable))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.ShippingFeeFineAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFeeFineAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.CustomizedFineAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CustomizedFineAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.CreatorShift != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreatorShift))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.ViolationSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ViolationSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.RevokeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RevokeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PenalizeFailTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenalizeFailTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.PenalizeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenalizeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.PenalizingTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PenalizingTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.NoNeedPenalizeTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.NoNeedPenalizeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ViolationStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ViolationStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.RuleGroupDescription != nil {
		i -= len(*m.RuleGroupDescription)
		copy(dAtA[i:], *m.RuleGroupDescription)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleGroupDescription)))
		i--
		dAtA[i] = 0x72
	}
	if m.RuleGroup != nil {
		i -= len(*m.RuleGroup)
		copy(dAtA[i:], *m.RuleGroup)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleGroup)))
		i--
		dAtA[i] = 0x6a
	}
	if m.RuleName != nil {
		i -= len(*m.RuleName)
		copy(dAtA[i:], *m.RuleName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleName)))
		i--
		dAtA[i] = 0x62
	}
	if m.RuleDescription != nil {
		i -= len(*m.RuleDescription)
		copy(dAtA[i:], *m.RuleDescription)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleDescription)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RuleCode != nil {
		i -= len(*m.RuleCode)
		copy(dAtA[i:], *m.RuleCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.RuleCode)))
		i--
		dAtA[i] = 0x52
	}
	if m.EventTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EventTime))
		i--
		dAtA[i] = 0x28
	}
	if m.EventDescription != nil {
		i -= len(*m.EventDescription)
		copy(dAtA[i:], *m.EventDescription)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.EventDescription)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeliveryOrderId != nil {
		i -= len(*m.DeliveryOrderId)
		copy(dAtA[i:], *m.DeliveryOrderId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeliveryOrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Quality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.TerminateEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TerminateEnabled))
		i--
		dAtA[i] = 0x30
	}
	if m.RestrictCheckinEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RestrictCheckinEndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RestrictWithdrawEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RestrictWithdrawEndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Point != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Point))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MerchantConfirmTimeout != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantConfirmTimeout))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaymentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.Switch != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Switch))
		i--
		dAtA[i] = 0x18
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Area) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Area) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Area) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HiddenTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HiddenTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ServiceTypeFlag != nil {
		{
			size, err := m.ServiceTypeFlag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.AreaStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AreaStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.AreaName != nil {
		i -= len(*m.AreaName)
		copy(dAtA[i:], *m.AreaName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AreaName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Area_ServiceTypeFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Area_ServiceTypeFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Area_ServiceTypeFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpxInstantEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpxInstantEnabled))
		i--
		dAtA[i] = 0x18
	}
	if m.SpxInstantShopeeEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpxInstantShopeeEnabled))
		i--
		dAtA[i] = 0x10
	}
	if m.FoodEnabled != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FoodEnabled))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *District) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *District) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *District) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x58
	}
	if m.ServiceTypeFlag != nil {
		{
			size, err := m.ServiceTypeFlag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.AreaId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AreaId))
		i--
		dAtA[i] = 0x30
	}
	if m.StateName != nil {
		i -= len(*m.StateName)
		copy(dAtA[i:], *m.StateName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.StateName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CityName != nil {
		i -= len(*m.CityName)
		copy(dAtA[i:], *m.CityName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CityName)))
		i--
		dAtA[i] = 0x22
	}
	if m.CityId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CityId))
		i--
		dAtA[i] = 0x18
	}
	if m.DistrictName != nil {
		i -= len(*m.DistrictName)
		copy(dAtA[i:], *m.DistrictName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DistrictName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HiddenTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.HiddenTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x42
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsDefault != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDefault))
		i--
		dAtA[i] = 0x20
	}
	if m.AreaId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AreaId))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupName != nil {
		i -= len(*m.GroupName)
		copy(dAtA[i:], *m.GroupName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DistrictLocationGroupBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistrictLocationGroupBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistrictLocationGroupBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.IsDefault != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDefault))
		i--
		dAtA[i] = 0x18
	}
	if m.LocationGroupId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LocationGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.DistrictId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistrictId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x60
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Parameter != nil {
		{
			size, err := m.Parameter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DistrictName != nil {
		i -= len(*m.DistrictName)
		copy(dAtA[i:], *m.DistrictName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DistrictName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DistrictId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DistrictId))
		i--
		dAtA[i] = 0x30
	}
	if m.AreaName != nil {
		i -= len(*m.AreaName)
		copy(dAtA[i:], *m.AreaName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AreaName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AreaId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AreaId))
		i--
		dAtA[i] = 0x20
	}
	if m.Priority != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if m.Module != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Module))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_Parameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_Parameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkingHours != nil {
		{
			size, err := m.WorkingHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.NonPartnerFee != nil {
		{
			size, err := m.NonPartnerFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.SmallOrderFee != nil {
		{
			size, err := m.SmallOrderFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.InstantDeliveryShippingFee != nil {
		{
			size, err := m.InstantDeliveryShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.InstantShopeeShippingFee != nil {
		{
			size, err := m.InstantShopeeShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.InsuranceFee != nil {
		{
			size, err := m.InsuranceFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.DffSetting != nil {
		{
			size, err := m.DffSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ServiceFee != nil {
		{
			size, err := m.ServiceFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DriverShippingFee != nil {
		{
			size, err := m.DriverShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BuyerShippingFee != nil {
		{
			size, err := m.BuyerShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ShippingFee != nil {
		{
			size, err := m.ShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Eta != nil {
		{
			size, err := m.Eta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MatchAssessment != nil {
		{
			size, err := m.MatchAssessment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DriverFiltering != nil {
		{
			size, err := m.DriverFiltering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OrderFlow != nil {
		{
			size, err := m.OrderFlow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_OrderFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_OrderFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_OrderFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinCompletionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinCompletionRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_DriverFiltering) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_DriverFiltering) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_DriverFiltering) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AssignSameBuyerInterval != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignSameBuyerInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxAllowedNegativeBalance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxAllowedNegativeBalance))
		i--
		dAtA[i] = 0x18
	}
	if m.MinBalance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinBalance))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxMerchantDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaxMerchantDistance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_MatchAssessment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_MatchAssessment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_MatchAssessment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CompletionRateWeight != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompletionRateWeight))
		i--
		dAtA[i] = 0x18
	}
	if m.AutoAcceptanceWeight != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AutoAcceptanceWeight))
		i--
		dAtA[i] = 0x10
	}
	if m.MerchantDistanceWeight != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantDistanceWeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ETA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ETA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ETA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreListing != nil {
		{
			size, err := m.StoreListing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CheckoutPage != nil {
		{
			size, err := m.CheckoutPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ETA_Base) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ETA_Base) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ETA_Base) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DriverSpeed != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverSpeed))
		i--
		dAtA[i] = 0x10
	}
	if m.FixedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FixedTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Fare != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Fare))
		i--
		dAtA[i] = 0x10
	}
	if m.MinShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinShippingFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ShippingFeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ShippingFeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ShippingFeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fare != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Fare))
		i--
		dAtA[i] = 0x20
	}
	if m.FixedFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FixedFee))
		i--
		dAtA[i] = 0x18
	}
	if m.TierEnd != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TierEnd))
		i--
		dAtA[i] = 0x10
	}
	if m.TierStart != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TierStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_BaseShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_BaseShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_BaseShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MinShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinShippingFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_BuyerShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_BuyerShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_BuyerShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NonPartnerShippingFee != nil {
		{
			size, err := m.NonPartnerShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PartnerShippingFee != nil {
		{
			size, err := m.PartnerShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_DriverShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_DriverShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_DriverShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommissionRate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CommissionRate))
		i--
		dAtA[i] = 0x10
	}
	if m.ShippingFee != nil {
		{
			size, err := m.ShippingFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ServiceFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ServiceFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ServiceFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ValidTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ValidTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ListedIntervals) > 0 {
		for iNdEx := len(m.ListedIntervals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListedIntervals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NormalIntervals) > 0 {
		for iNdEx := len(m.NormalIntervals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NormalIntervals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_ServiceFeeInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_ServiceFeeInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_ServiceFeeInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceFee))
		i--
		dAtA[i] = 0x10
	}
	if m.CommissionRangEnd != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CommissionRangEnd))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_InsuranceTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_InsuranceTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_InsuranceTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumAssured != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SumAssured))
		i--
		dAtA[i] = 0x18
	}
	if m.InsurancePremium != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InsurancePremium))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_InsuranceFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_InsuranceFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_InsuranceFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_DFFSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_DFFSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_DFFSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_InstantShopeeShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_InstantShopeeShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_InstantShopeeShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BaseShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BaseShippingFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BaseShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BaseShippingFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_SmallOrderFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_SmallOrderFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_SmallOrderFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SmallOrderFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SmallOrderFee))
		i--
		dAtA[i] = 0x10
	}
	if m.MinSpend != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MinSpend))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_NonPartnerFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_NonPartnerFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_NonPartnerFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NonPartnerFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.NonPartnerFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlgoParameterConfig_WorkingHours) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlgoParameterConfig_WorkingHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlgoParameterConfig_WorkingHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContentRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DishTagsLogic != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishTagsLogic))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DishTags) > 0 {
		for iNdEx := len(m.DishTags) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.DishTags[iNdEx]))
			i--
			dAtA[i] = 0x40
		}
	}
	if m.StoreCategoriesLogic != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreCategoriesLogic))
		i--
		dAtA[i] = 0x38
	}
	if m.StoreTagsLogic != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreTagsLogic))
		i--
		dAtA[i] = 0x30
	}
	if len(m.StoreCategories) > 0 {
		for iNdEx := len(m.StoreCategories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoreCategories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.StoreTags) > 0 {
		for iNdEx := len(m.StoreTags) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.StoreTags[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.RatingScoreMax != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RatingScoreMax))))
		i--
		dAtA[i] = 0x1d
	}
	if m.RatingScoreMin != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RatingScoreMin))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.PartnerTypes) > 0 {
		for iNdEx := len(m.PartnerTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.PartnerTypes[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *Overlay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Overlay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Overlay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShowStatus))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpireTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpireTime))
		i--
		dAtA[i] = 0x50
	}
	if m.EffectiveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EffectiveTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.TagsLogic != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TagsLogic))
		i--
		dAtA[i] = 0x38
	}
	if len(m.StoreTagIds) > 0 {
		for iNdEx := len(m.StoreTagIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.StoreTagIds[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.Priority != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x28
	}
	if m.BannerImage != nil {
		i -= len(*m.BannerImage)
		copy(dAtA[i:], *m.BannerImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BannerImage)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogoImage != nil {
		i -= len(*m.LogoImage)
		copy(dAtA[i:], *m.LogoImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.LogoImage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MerchantWalletAdjustmentOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantWalletAdjustmentOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerchantWalletAdjustmentOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuditRemark != nil {
		i -= len(*m.AuditRemark)
		copy(dAtA[i:], *m.AuditRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AuditRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.ReferenceId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReferenceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.RejectReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RejectReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AuditResult != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AuditResult))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Auditor != nil {
		i -= len(*m.Auditor)
		copy(dAtA[i:], *m.Auditor)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Auditor)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x72
	}
	if m.FailedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FailedTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x60
	}
	if m.ApprovedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ApprovedTime))
		i--
		dAtA[i] = 0x58
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x50
	}
	if m.AmountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AmountType))
		i--
		dAtA[i] = 0x48
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x40
	}
	if m.WalletType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletType))
		i--
		dAtA[i] = 0x38
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x30
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x28
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x20
	}
	if m.SettlementDetailId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementDetailId))
		i--
		dAtA[i] = 0x18
	}
	if m.AdjustmentStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AdjustmentStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletSettlementOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletSettlementOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletSettlementOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreShardList != nil {
		{
			size, err := m.StoreShardList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.LastErrorCode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LastErrorCode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.FailedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FailedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CompletedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompletedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ProcessingTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProcessingTime))
		i--
		dAtA[i] = 0x78
	}
	if m.InitialTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitialTime))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.ClosingDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ClosingDate))
		i--
		dAtA[i] = 0x58
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x40
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x38
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x30
	}
	if m.WalletTxnId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletTxnId))
		i--
		dAtA[i] = 0x28
	}
	if m.WalletWithdrawOrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletWithdrawOrderId))
		i--
		dAtA[i] = 0x20
	}
	if m.WalletType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletType))
		i--
		dAtA[i] = 0x18
	}
	if m.SettlementStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletSettlementOrder_Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletSettlementOrder_Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletSettlementOrder_Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreDeductionAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PreDeductionAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.WhtAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WhtAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FeeAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletSettlementOrder_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletSettlementOrder_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletSettlementOrder_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSettlementCombined != nil {
		i--
		if *m.IsSettlementCombined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletSettlementOrder_StoreShardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletSettlementOrder_StoreShardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletSettlementOrder_StoreShardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Shard) > 0 {
		for iNdEx := len(m.Shard) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.Shard[iNdEx]))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *MerchantWalletWithdrawOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantWalletWithdrawOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerchantWalletWithdrawOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WalletTxnSn != nil {
		i -= len(*m.WalletTxnSn)
		copy(dAtA[i:], *m.WalletTxnSn)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.WalletTxnSn)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.TransactionRef != nil {
		i -= len(*m.TransactionRef)
		copy(dAtA[i:], *m.TransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransactionRef)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.BankAccountName != nil {
		i -= len(*m.BankAccountName)
		copy(dAtA[i:], *m.BankAccountName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.BankId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.PayoutMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.LastErrorCode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LastErrorCode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.FailedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.FailedTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CompletedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompletedTime))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.ProcessingTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProcessingTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ActualPayoutAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ActualPayoutAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x48
	}
	if m.Amount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x40
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x38
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x30
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x28
	}
	if m.WalletTxnId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletTxnId))
		i--
		dAtA[i] = 0x20
	}
	if m.WalletType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletType))
		i--
		dAtA[i] = 0x18
	}
	if m.WithdrawStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WithdrawStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpressContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EstimateDeliveryDuration != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateDeliveryDuration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.EstimatePickupDuration != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimatePickupDuration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.PickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ArriveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ArriveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CancelRemark != nil {
		i -= len(*m.CancelRemark)
		copy(dAtA[i:], *m.CancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CancelRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CancelCerts) > 0 {
		for iNdEx := len(m.CancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x70
	}
	if m.CancelProposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelProposer))
		i--
		dAtA[i] = 0x68
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x60
	}
	if m.Flag != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Flag))
		i--
		dAtA[i] = 0x58
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x52
	}
	if m.DepositAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DepositAmount))
		i--
		dAtA[i] = 0x48
	}
	if m.PayAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.PayTo != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayTo))
		i--
		dAtA[i] = 0x38
	}
	if m.CollectAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CollectAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.CollectFrom != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CollectFrom))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpressStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpressDelivery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressDelivery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressDelivery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GeoTracking != nil {
		{
			size, err := m.GeoTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.ReturnDeadline != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnDeadline))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.PickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PickupTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.ArriveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ArriveTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.CancelProposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelProposer))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OnholdFlag != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OnholdFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ShippingIncome != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingIncome))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.ShippingSurgeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingSurgeFee))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.ReturnReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.ReturnRemark != nil {
		i -= len(*m.ReturnRemark)
		copy(dAtA[i:], *m.ReturnRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReturnRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ReturnCerts) > 0 {
		for iNdEx := len(m.ReturnCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReturnCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.ReturnName != nil {
		i -= len(*m.ReturnName)
		copy(dAtA[i:], *m.ReturnName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReturnName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.DeliveryReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DeliveryRemark != nil {
		i -= len(*m.DeliveryRemark)
		copy(dAtA[i:], *m.DeliveryRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeliveryRemark)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DeliveryCerts) > 0 {
		for iNdEx := len(m.DeliveryCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeliveryCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.DeliveryType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryType))
		i--
		dAtA[i] = 0x68
	}
	if m.DeliveryName != nil {
		i -= len(*m.DeliveryName)
		copy(dAtA[i:], *m.DeliveryName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DeliveryName)))
		i--
		dAtA[i] = 0x62
	}
	if m.PickupRemark != nil {
		i -= len(*m.PickupRemark)
		copy(dAtA[i:], *m.PickupRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PickupRemark)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PickupCerts) > 0 {
		for iNdEx := len(m.PickupCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PickupCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.PickupName != nil {
		i -= len(*m.PickupName)
		copy(dAtA[i:], *m.PickupName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PickupName)))
		i--
		dAtA[i] = 0x42
	}
	if m.DeliveryStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x18
	}
	if m.PackageId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PackageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpressDelivery_GeoTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressDelivery_GeoTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressDelivery_GeoTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AcceptGeo != nil {
		{
			size, err := m.AcceptGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CompleteGeo != nil {
		{
			size, err := m.CompleteGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PickupGeo != nil {
		{
			size, err := m.PickupGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ArriveGeo != nil {
		{
			size, err := m.ArriveGeo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Height != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Height))
		i--
		dAtA[i] = 0x60
	}
	if m.Width != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Width))
		i--
		dAtA[i] = 0x58
	}
	if m.Length != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Length))
		i--
		dAtA[i] = 0x50
	}
	if m.Weight != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Weight))
		i--
		dAtA[i] = 0x48
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x40
	}
	if m.DeliveryAddress != nil {
		{
			size, err := m.DeliveryAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PickupAddress != nil {
		{
			size, err := m.PickupAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PackageStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PackageStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.Category != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Category))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpressAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CancelProposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelProposer))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.EstimatePickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimatePickupTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x78
	}
	if m.AssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CancelRemark != nil {
		i -= len(*m.CancelRemark)
		copy(dAtA[i:], *m.CancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CancelRemark)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CancelCerts) > 0 {
		for iNdEx := len(m.CancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x50
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x48
	}
	if m.DepositStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DepositStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.DepositAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DepositAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.PaymentId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentId))
		i--
		dAtA[i] = 0x30
	}
	if m.AssignmentStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignmentStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x20
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExpressDeliveryPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressDeliveryPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressDeliveryPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delivery != nil {
		{
			size, err := m.Delivery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Package != nil {
		{
			size, err := m.Package.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpressAuditOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressAuditOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressAuditOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ApproveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ApproveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Auditor != nil {
		i -= len(*m.Auditor)
		copy(dAtA[i:], *m.Auditor)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Auditor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.AuditRemark != nil {
		i -= len(*m.AuditRemark)
		copy(dAtA[i:], *m.AuditRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AuditRemark)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AuditCerts) > 0 {
		for iNdEx := len(m.AuditCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuditCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Proposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Proposer))
		i--
		dAtA[i] = 0x60
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Reason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Reason))
		i--
		dAtA[i] = 0x48
	}
	if m.Source != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Source))
		i--
		dAtA[i] = 0x40
	}
	if m.OrderStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.AuditType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AuditType))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpressId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ExpressId))
		i--
		dAtA[i] = 0x18
	}
	if m.DeliveryId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Express) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Express) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Express) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeliveryPackages) > 0 {
		for iNdEx := len(m.DeliveryPackages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeliveryPackages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SPXOrderContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXOrderContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXOrderContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StartAssignmentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartAssignmentTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.SchedulePickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SchedulePickupTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.IsScheduleOrder != nil {
		i--
		if *m.IsScheduleOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.ShippingFareDiscountAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFareDiscountAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.ShippingFareExtraFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFareExtraFee))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.EstimateDeliveryTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimateDeliveryTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.EstimatePickupTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EstimatePickupTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.RatingCompletedTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RatingCompletedTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.DeliveryReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryReturnTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DeliveryCompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryCompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.OnDeliveringTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OnDeliveringTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.ApproveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ApproveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.PlaceTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlaceTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.CancelRemark != nil {
		i -= len(*m.CancelRemark)
		copy(dAtA[i:], *m.CancelRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CancelRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.CancelCerts) > 0 {
		for iNdEx := len(m.CancelCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CancelCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.Flag != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Flag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.OrderShowStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderShowStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CancelProposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelProposer))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CancelReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelReason))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OrderStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.TotalAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalAmount))
		i--
		dAtA[i] = 0x78
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x70
	}
	if m.CoinsAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CoinsAmount))
		i--
		dAtA[i] = 0x68
	}
	if m.ShippingVoucherAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingVoucherAmount))
		i--
		dAtA[i] = 0x60
	}
	if m.InsuranceAssuredAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InsuranceAssuredAmount))
		i--
		dAtA[i] = 0x58
	}
	if m.InsuranceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InsuranceFee))
		i--
		dAtA[i] = 0x50
	}
	if m.ShippingFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFee))
		i--
		dAtA[i] = 0x48
	}
	if m.ShippingBaseFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingBaseFee))
		i--
		dAtA[i] = 0x40
	}
	if m.PlatformServiceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PlatformServiceFee))
		i--
		dAtA[i] = 0x38
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.OrderSource != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderSource))
		i--
		dAtA[i] = 0x20
	}
	if m.ReferenceId != nil {
		i -= len(*m.ReferenceId)
		copy(dAtA[i:], *m.ReferenceId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReferenceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PackageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsuranceName != nil {
		i -= len(*m.InsuranceName)
		copy(dAtA[i:], *m.InsuranceName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.InsuranceName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.CategoryName != nil {
		i -= len(*m.CategoryName)
		copy(dAtA[i:], *m.CategoryName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CategoryName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Remark != nil {
		i -= len(*m.Remark)
		copy(dAtA[i:], *m.Remark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Remark)))
		i--
		dAtA[i] = 0x72
	}
	if m.Height != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Height))
		i--
		dAtA[i] = 0x68
	}
	if m.Width != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Width))
		i--
		dAtA[i] = 0x60
	}
	if m.Length != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Length))
		i--
		dAtA[i] = 0x58
	}
	if m.Weight != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Weight))
		i--
		dAtA[i] = 0x50
	}
	if m.DeliveryAddress != nil {
		{
			size, err := m.DeliveryAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PickupAddress != nil {
		{
			size, err := m.PickupAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.InsuranceAssuredAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InsuranceAssuredAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.InsuranceFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InsuranceFee))
		i--
		dAtA[i] = 0x30
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x28
	}
	if m.Category != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Category))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Packages) > 0 {
		for iNdEx := len(m.Packages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SPXOrder_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXOrder_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXOrder_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRefunded != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsRefunded))
		i--
		dAtA[i] = 0x10
	}
	if m.IsReturned != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsReturned))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PaymentTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.InitiationTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.InitiationTime))
		i--
		dAtA[i] = 0x78
	}
	if m.PaymentType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentType))
		i--
		dAtA[i] = 0x70
	}
	if m.PaymentStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentStatus))
		i--
		dAtA[i] = 0x68
	}
	if m.Region != nil {
		i -= len(*m.Region)
		copy(dAtA[i:], *m.Region)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Region)))
		i--
		dAtA[i] = 0x62
	}
	if m.Currency != nil {
		i -= len(*m.Currency)
		copy(dAtA[i:], *m.Currency)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Currency)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TotalAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.PaymentChannelOption != nil {
		i -= len(*m.PaymentChannelOption)
		copy(dAtA[i:], *m.PaymentChannelOption)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentChannelOption)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PaymentChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentChannelId))
		i--
		dAtA[i] = 0x40
	}
	if m.PaymentMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentMethod))
		i--
		dAtA[i] = 0x38
	}
	if m.PaymentLink != nil {
		i -= len(*m.PaymentLink)
		copy(dAtA[i:], *m.PaymentLink)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PaymentLink)))
		i--
		dAtA[i] = 0x32
	}
	if m.TransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TransactionRef))
		i--
		dAtA[i] = 0x28
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXReturnOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXReturnOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXReturnOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ApproveTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ApproveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.StoreChargebackMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.StoreChargebackType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.OfflineRefundMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OfflineRefundMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Creator != nil {
		i -= len(*m.Creator)
		copy(dAtA[i:], *m.Creator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ReturnRemark != nil {
		i -= len(*m.ReturnRemark)
		copy(dAtA[i:], *m.ReturnRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReturnRemark)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Proposer != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Proposer))
		i--
		dAtA[i] = 0x70
	}
	if m.StoreChargebackAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreChargebackAmount))
		i--
		dAtA[i] = 0x68
	}
	if m.ReturnReason != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnReason))
		i--
		dAtA[i] = 0x60
	}
	if m.ReturnStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.RefundAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.RefundType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundType))
		i--
		dAtA[i] = 0x38
	}
	if m.Responsibility != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Responsibility))
		i--
		dAtA[i] = 0x30
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.ReturnType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnType))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXRefund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXRefund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXRefund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RefundCoins != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundCoins))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RefundTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundTime))
		i--
		dAtA[i] = 0x78
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x72
	}
	if m.RefundMode != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundMode))
		i--
		dAtA[i] = 0x68
	}
	if m.RefundStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundStatus))
		i--
		dAtA[i] = 0x60
	}
	if m.RefundAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundAmount))
		i--
		dAtA[i] = 0x58
	}
	if m.OfflineRefundTransactionRef != nil {
		i -= len(*m.OfflineRefundTransactionRef)
		copy(dAtA[i:], *m.OfflineRefundTransactionRef)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OfflineRefundTransactionRef)))
		i--
		dAtA[i] = 0x52
	}
	if m.RefundTransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundTransactionRef))
		i--
		dAtA[i] = 0x48
	}
	if m.PaymentTransactionRef != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentTransactionRef))
		i--
		dAtA[i] = 0x40
	}
	if m.RefundMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RefundMethod))
		i--
		dAtA[i] = 0x38
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x30
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.CheckoutId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CheckoutId))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReturnId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXVoucherRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXVoucherRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXVoucherRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AntiFraud != nil {
		i -= len(*m.AntiFraud)
		copy(dAtA[i:], *m.AntiFraud)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AntiFraud)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x68
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x50
	}
	if m.ReturnStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.UseStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UseStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.VoucherData != nil {
		i -= len(*m.VoucherData)
		copy(dAtA[i:], *m.VoucherData)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherData)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x28
	}
	if m.TransactionId != nil {
		i -= len(*m.TransactionId)
		copy(dAtA[i:], *m.TransactionId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransactionId)))
		i--
		dAtA[i] = 0x22
	}
	if m.VoucherCode != nil {
		i -= len(*m.VoucherCode)
		copy(dAtA[i:], *m.VoucherCode)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.VoucherCode)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoucherId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.VoucherId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SPXCoinRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPXCoinRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPXCoinRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x78
	}
	if m.ReturnStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnStatus))
		i--
		dAtA[i] = 0x70
	}
	if m.EarnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EarnTime))
		i--
		dAtA[i] = 0x68
	}
	if m.EarnStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EarnStatus))
		i--
		dAtA[i] = 0x60
	}
	if m.EarnVoucherAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EarnVoucherAmount))
		i--
		dAtA[i] = 0x58
	}
	if m.EarnOrderAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EarnOrderAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.EarnTotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EarnTotal))
		i--
		dAtA[i] = 0x48
	}
	if m.SpendTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpendTime))
		i--
		dAtA[i] = 0x40
	}
	if m.SpendStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpendStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.SpendAmount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SpendAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.TransactionId != nil {
		i -= len(*m.TransactionId)
		copy(dAtA[i:], *m.TransactionId)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TransactionId)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AreaIds) > 0 {
		for iNdEx := len(m.AreaIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintFoodyBase(dAtA, i, uint64(m.AreaIds[iNdEx]))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.CampaignName != nil {
		i -= len(*m.CampaignName)
		copy(dAtA[i:], *m.CampaignName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.CampaignName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleAreaTimeslotBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleAreaTimeslotBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleAreaTimeslotBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeslotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeslotId))
		i--
		dAtA[i] = 0x18
	}
	if m.AreaId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AreaId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleTimeslot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleTimeslot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleTimeslot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Banner != nil {
		i -= len(*m.Banner)
		copy(dAtA[i:], *m.Banner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Banner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.CampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleCampaignContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleCampaignContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleCampaignContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Timeslots) > 0 {
		for iNdEx := len(m.Timeslots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Timeslots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FalshSaleCampaign != nil {
		{
			size, err := m.FalshSaleCampaign.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DishNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishNum))
		i--
		dAtA[i] = 0x30
	}
	if m.StoreName != nil {
		i -= len(*m.StoreName)
		copy(dAtA[i:], *m.StoreName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.StoreName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeslotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeslotId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleDishDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleDishDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleDishDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x72
	}
	if m.DiscountPercentage != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPercentage))
		i--
		dAtA[i] = 0x68
	}
	if m.DiscountType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountType))
		i--
		dAtA[i] = 0x60
	}
	if m.DiscountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.DiscountPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPrice))
		i--
		dAtA[i] = 0x50
	}
	if m.LimitPerUser != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LimitPerUser))
		i--
		dAtA[i] = 0x48
	}
	if m.SoldNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SoldNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Stock != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Stock))
		i--
		dAtA[i] = 0x38
	}
	if m.FlashSaleDishName != nil {
		i -= len(*m.FlashSaleDishName)
		copy(dAtA[i:], *m.FlashSaleDishName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.FlashSaleDishName)))
		i--
		dAtA[i] = 0x32
	}
	if m.DishName != nil {
		i -= len(*m.DishName)
		copy(dAtA[i:], *m.DishName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.DishName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeslotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeslotId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleDishSoldRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleDishSoldRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleDishSoldRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x70
	}
	if m.ReturnTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CancelQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelQuantity))
		i--
		dAtA[i] = 0x60
	}
	if m.ReturnQuantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReturnQuantity))
		i--
		dAtA[i] = 0x58
	}
	if m.Quantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Quantity))
		i--
		dAtA[i] = 0x50
	}
	if m.SoldStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SoldStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.DiscountPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x38
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x30
	}
	if m.TimeslotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeslotId))
		i--
		dAtA[i] = 0x28
	}
	if m.DiscountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountId))
		i--
		dAtA[i] = 0x20
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x18
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleDish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleDish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleDish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Discount != nil {
		{
			size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dish != nil {
		{
			size, err := m.Dish.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleCartItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleCartItemDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleCartItemDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeslot != nil {
		{
			size, err := m.Timeslot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Discount != nil {
		{
			size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UserLimit != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UserLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleOrderItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleOrderItemDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleOrderItemDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Quantity))
		i--
		dAtA[i] = 0x30
	}
	if m.DiscountPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountPrice))
		i--
		dAtA[i] = 0x28
	}
	if m.DishPrice != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.DishId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DishId))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeslotId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TimeslotId))
		i--
		dAtA[i] = 0x10
	}
	if m.DiscountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DiscountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleOrderItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleOrderItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleOrderItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FlashSaleDishDetail) > 0 {
		for iNdEx := len(m.FlashSaleDishDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlashSaleDishDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyerId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BuyerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlashSaleDishDiscountTimeslot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlashSaleDishDiscountTimeslot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlashSaleDishDiscountTimeslot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timezone != nil {
		i -= len(*m.Timezone)
		copy(dAtA[i:], *m.Timezone)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Timezone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignId))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Discount != nil {
		{
			size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverDeliveryOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverDeliveryOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverDeliveryOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x78
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CancelTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CancelTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CompleteTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompleteTime))
		i--
		dAtA[i] = 0x60
	}
	if m.AssignTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AssignTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CanceledNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CanceledNum))
		i--
		dAtA[i] = 0x48
	}
	if m.CompletedNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CompletedNum))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalNum != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalNum))
		i--
		dAtA[i] = 0x38
	}
	if m.DeliveryDistance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryDistance))
		i--
		dAtA[i] = 0x30
	}
	if m.ShippingFeeItems != nil {
		{
			size, err := m.ShippingFeeItems.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ShippingFeeTotal != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingFeeTotal))
		i--
		dAtA[i] = 0x20
	}
	if m.DriverDeliveryOrderStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverDeliveryOrderStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.DriverId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DriverId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverDeliveryOrder_ShippingFeeItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverDeliveryOrder_ShippingFeeItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverDeliveryOrder_ShippingFeeItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShippingBaseFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingBaseFee))
		i--
		dAtA[i] = 0x10
	}
	if m.ShippingSurgeFee != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ShippingSurgeFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DriverDeliveryOrder_Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverDeliveryOrder_Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverDeliveryOrder_Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Distance != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Distance))
		i--
		dAtA[i] = 0x30
	}
	if m.Longitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Longitude))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Latitude != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Latitude))))
		i--
		dAtA[i] = 0x25
	}
	if m.OrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.DeliveryOrderId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.DeliveryOrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.LocationType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.LocationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreSettlementMart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSettlementMart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreSettlementMart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BankAccountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankAccountStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.ProductConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProductConfigStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.SettlementConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementConfigStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.WalletRelationStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletRelationStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.BankBranchId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankBranchId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SettlementEmails != nil {
		i -= len(*m.SettlementEmails)
		copy(dAtA[i:], *m.SettlementEmails)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SettlementEmails)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.AutoPayoutRemark != nil {
		i -= len(*m.AutoPayoutRemark)
		copy(dAtA[i:], *m.AutoPayoutRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AutoPayoutRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PayoutAccountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutAccountId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CrossMonthSettlement != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CrossMonthSettlement))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.PayoutMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMethod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.BankChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankChannelId))
		i--
		dAtA[i] = 0x78
	}
	if m.SettleTo != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettleTo))
		i--
		dAtA[i] = 0x70
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x68
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x58
	}
	if m.PaymentWay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentWay))
		i--
		dAtA[i] = 0x50
	}
	if m.SettlementMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMethod))
		i--
		dAtA[i] = 0x48
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x38
	}
	if m.BankAccountName != nil {
		i -= len(*m.BankAccountName)
		copy(dAtA[i:], *m.BankAccountName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountName)))
		i--
		dAtA[i] = 0x32
	}
	if m.BankBranch != nil {
		i -= len(*m.BankBranch)
		copy(dAtA[i:], *m.BankBranch)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankBranch)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x22
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsUseWallet != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseWallet))
		i--
		dAtA[i] = 0x10
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MerchantSettlementMart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerchantSettlementMart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerchantSettlementMart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BankAccountStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankAccountStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.ProductConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ProductConfigStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.SettlementConfigStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementConfigStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.WalletRelationStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletRelationStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.BankBranchId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankBranchId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.SettlementEmails != nil {
		i -= len(*m.SettlementEmails)
		copy(dAtA[i:], *m.SettlementEmails)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.SettlementEmails)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AutoPayoutRemark != nil {
		i -= len(*m.AutoPayoutRemark)
		copy(dAtA[i:], *m.AutoPayoutRemark)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.AutoPayoutRemark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.PayoutAccountId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutAccountId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CrossMonthSettlement != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CrossMonthSettlement))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PayoutMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PayoutMethod))
		i--
		dAtA[i] = 0x78
	}
	if m.BankChannelId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BankChannelId))
		i--
		dAtA[i] = 0x70
	}
	if m.Wht != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Wht))
		i--
		dAtA[i] = 0x68
	}
	if m.Vat != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Vat))
		i--
		dAtA[i] = 0x58
	}
	if m.PaymentWay != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.PaymentWay))
		i--
		dAtA[i] = 0x50
	}
	if m.SettlementMethod != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SettlementMethod))
		i--
		dAtA[i] = 0x48
	}
	if m.WalletId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.WalletId))
		i--
		dAtA[i] = 0x38
	}
	if m.BankAccountName != nil {
		i -= len(*m.BankAccountName)
		copy(dAtA[i:], *m.BankAccountName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountName)))
		i--
		dAtA[i] = 0x32
	}
	if m.BankBranch != nil {
		i -= len(*m.BankBranch)
		copy(dAtA[i:], *m.BankBranch)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankBranch)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BankAccountNo != nil {
		i -= len(*m.BankAccountNo)
		copy(dAtA[i:], *m.BankAccountNo)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankAccountNo)))
		i--
		dAtA[i] = 0x22
	}
	if m.BankName != nil {
		i -= len(*m.BankName)
		copy(dAtA[i:], *m.BankName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.BankName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsUseWallet != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsUseWallet))
		i--
		dAtA[i] = 0x10
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountCampaignEnableTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountCampaignEnableTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountCampaignEnableTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountCampaignEnableDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountCampaignEnableDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountCampaignEnableDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.EndDate))
		i--
		dAtA[i] = 0x10
	}
	if m.StartDate != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StartDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountCampaignApplyDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountCampaignApplyDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountCampaignApplyDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllowTimes) > 0 {
		for iNdEx := len(m.AllowTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AllowDate != nil {
		{
			size, err := m.AllowDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemDiscountCampaignAppliedTimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemDiscountCampaignAppliedTimes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemDiscountCampaignAppliedTimes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplyDates) > 0 {
		for iNdEx := len(m.ApplyDates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApplyDates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionMaterialTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionMaterialTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionMaterialTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.IsDeleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDeleted))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Error != nil {
		i -= len(*m.Error)
		copy(dAtA[i:], *m.Error)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Error)))
		i--
		dAtA[i] = 0x42
	}
	if m.BizId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BizId))
		i--
		dAtA[i] = 0x38
	}
	if m.BizType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BizType))
		i--
		dAtA[i] = 0x30
	}
	if m.TemplateValue != nil {
		i -= len(*m.TemplateValue)
		copy(dAtA[i:], *m.TemplateValue)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TemplateValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChildIds != nil {
		i -= len(*m.ChildIds)
		copy(dAtA[i:], *m.ChildIds)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ChildIds)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionMerchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionMerchant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionMerchant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TermsStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TermsStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x18
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x70
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.RegisterTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterTime))
		i--
		dAtA[i] = 0x60
	}
	if m.IsDeleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDeleted))
		i--
		dAtA[i] = 0x58
	}
	if m.BindStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BindStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.Source != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Source))
		i--
		dAtA[i] = 0x48
	}
	if m.Reason != nil {
		i -= len(*m.Reason)
		copy(dAtA[i:], *m.Reason)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.OptionalId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OptionalId))
		i--
		dAtA[i] = 0x30
	}
	if m.MaterialId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaterialId))
		i--
		dAtA[i] = 0x28
	}
	if m.MaterialType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaterialType))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionMerchantExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionMerchantExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionMerchantExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TerminateReason != nil {
		i -= len(*m.TerminateReason)
		copy(dAtA[i:], *m.TerminateReason)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TerminateReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StoreTagId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreTagId))
		i--
		dAtA[i] = 0x20
	}
	if m.OptionalName != nil {
		i -= len(*m.OptionalName)
		copy(dAtA[i:], *m.OptionalName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.OptionalName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OptionalId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OptionalId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecruitmentSessionMerchant != nil {
		{
			size, err := m.RecruitmentSessionMerchant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Content != nil {
		i -= len(*m.Content)
		copy(dAtA[i:], *m.Content)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Faqs) > 0 {
		for iNdEx := len(m.Faqs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Faqs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.WhyJoin != nil {
		i -= len(*m.WhyJoin)
		copy(dAtA[i:], *m.WhyJoin)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.WhyJoin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Answer != nil {
		i -= len(*m.Answer)
		copy(dAtA[i:], *m.Answer)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Answer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Question != nil {
		i -= len(*m.Question)
		copy(dAtA[i:], *m.Question)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Question)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BandStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.BandStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.InvitedStoreFile_Url != nil {
		i -= len(*m.InvitedStoreFile_Url)
		copy(dAtA[i:], *m.InvitedStoreFile_Url)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.InvitedStoreFile_Url)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Templates) > 0 {
		for iNdEx := len(m.Templates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Templates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoodyBase(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoodyBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Labels != nil {
		i -= len(*m.Labels)
		copy(dAtA[i:], *m.Labels)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Labels)))
		i--
		dAtA[i] = 0x72
	}
	if m.Desc != nil {
		i -= len(*m.Desc)
		copy(dAtA[i:], *m.Desc)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Desc)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PromotionListImage != nil {
		i -= len(*m.PromotionListImage)
		copy(dAtA[i:], *m.PromotionListImage)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.PromotionListImage)))
		i--
		dAtA[i] = 0x62
	}
	if m.MainBanner != nil {
		i -= len(*m.MainBanner)
		copy(dAtA[i:], *m.MainBanner)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.MainBanner)))
		i--
		dAtA[i] = 0x5a
	}
	if m.UniqueKey != nil {
		i -= len(*m.UniqueKey)
		copy(dAtA[i:], *m.UniqueKey)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.UniqueKey)))
		i--
		dAtA[i] = 0x52
	}
	if m.RunningEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RunningEndTime))
		i--
		dAtA[i] = 0x48
	}
	if m.RunningStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RunningStartTime))
		i--
		dAtA[i] = 0x40
	}
	if m.RegisterEndTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterEndTime))
		i--
		dAtA[i] = 0x38
	}
	if m.RegisterStartTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterStartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.IsDeleted != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.IsDeleted))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoucherPackageTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoucherPackageTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoucherPackageTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StoreTagId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreTagId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Benefits) > 0 {
		for iNdEx := len(m.Benefits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Benefits[iNdEx])
			copy(dAtA[i:], m.Benefits[iNdEx])
			i = encodeVarintFoodyBase(dAtA, i, uint64(len(m.Benefits[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if m.ErrorFileUrl != nil {
		i -= len(*m.ErrorFileUrl)
		copy(dAtA[i:], *m.ErrorFileUrl)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ErrorFileUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UploadFileUrl != nil {
		i -= len(*m.UploadFileUrl)
		copy(dAtA[i:], *m.UploadFileUrl)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.UploadFileUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskType != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TaskType))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskName != nil {
		i -= len(*m.TaskName)
		copy(dAtA[i:], *m.TaskName)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.TaskName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionPromotionSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionPromotionSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionPromotionSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedVoucherCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsedVoucherCount))
		i--
		dAtA[i] = 0x50
	}
	if m.UsedVoucherDishes != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsedVoucherDishes))
		i--
		dAtA[i] = 0x48
	}
	if m.Subsidy != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Subsidy))
		i--
		dAtA[i] = 0x40
	}
	if m.NewCustomers != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.NewCustomers))
		i--
		dAtA[i] = 0x38
	}
	if m.AllOrders != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.AllOrders))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalVoucherOrdersRevenue != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.TotalVoucherOrdersRevenue))
		i--
		dAtA[i] = 0x28
	}
	if m.UsedVoucherOrders != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UsedVoucherOrders))
		i--
		dAtA[i] = 0x20
	}
	if m.Dt != nil {
		i -= len(*m.Dt)
		copy(dAtA[i:], *m.Dt)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Dt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentVoucherPackageRegisterCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentVoucherPackageRegisterCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentVoucherPackageRegisterCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RegisterCount != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.RegisterCount))
		i--
		dAtA[i] = 0x18
	}
	if m.OptionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.OptionId))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentSessionReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentSessionReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentSessionReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Md5 != nil {
		i -= len(*m.Md5)
		copy(dAtA[i:], *m.Md5)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.Md5)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ReportError != nil {
		i -= len(*m.ReportError)
		copy(dAtA[i:], *m.ReportError)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReportError)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReportStatus != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.ReportStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.ReportUrl != nil {
		i -= len(*m.ReportUrl)
		copy(dAtA[i:], *m.ReportUrl)
		i = encodeVarintFoodyBase(dAtA, i, uint64(len(*m.ReportUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaterialTemplateId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MaterialTemplateId))
		i--
		dAtA[i] = 0x28
	}
	if m.StoreId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.StoreId))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.MerchantId))
		i--
		dAtA[i] = 0x18
	}
	if m.SessionId != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintFoodyBase(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFoodyBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovFoodyBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(*m.Hash)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AsyncTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.FileName != nil {
		l = len(*m.FileName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FileLink != nil {
		l = len(*m.FileLink)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.SucceedCnt != nil {
		n += 1 + sovFoodyBase(uint64(*m.SucceedCnt))
	}
	if m.FailedCnt != nil {
		n += 1 + sovFoodyBase(uint64(*m.FailedCnt))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.FailedLink != nil {
		l = len(*m.FailedLink)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Picture != nil {
		l = len(*m.Picture)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Available != nil {
		n += 1 + sovFoodyBase(uint64(*m.Available))
	}
	if m.Price != nil {
		n += 1 + sovFoodyBase(uint64(*m.Price))
	}
	if m.CatalogId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CatalogId))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.OptionGroupCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.OptionGroupCount))
	}
	if m.Deleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.Deleted))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.SalesVolume != nil {
		n += 1 + sovFoodyBase(uint64(*m.SalesVolume))
	}
	if m.RatingTotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.RatingTotal))
	}
	if m.RatingGood != nil {
		n += 2 + sovFoodyBase(uint64(*m.RatingGood))
	}
	if m.RatingBad != nil {
		n += 2 + sovFoodyBase(uint64(*m.RatingBad))
	}
	if m.BindGroupCount != nil {
		n += 2 + sovFoodyBase(uint64(*m.BindGroupCount))
	}
	if m.SaleStartTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SaleStartTime))
	}
	if m.SaleEndTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SaleEndTime))
	}
	if m.SaleWeekBit != nil {
		n += 2 + sovFoodyBase(uint64(*m.SaleWeekBit))
	}
	if m.InSaleTime != nil {
		n += 3
	}
	if m.ListingStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ListingStatus))
	}
	if m.SaleStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.SaleStatus))
	}
	if len(m.TimeForSales) > 0 {
		for _, e := range m.TimeForSales {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.RawFlag != nil {
		n += 2 + sovFoodyBase(uint64(*m.RawFlag))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SalesTime != nil {
		l = m.SalesTime.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CrawlerPicture != nil {
		l = len(*m.CrawlerPicture)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.SpecialSaleDates) > 0 {
		for _, e := range m.SpecialSaleDates {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.OutOfStockTime != nil {
		l = m.OutOfStockTime.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SyncItemGroupId != nil {
		n += 2 + sovFoodyBase(uint64(*m.SyncItemGroupId))
	}
	if m.Blocked != nil {
		n += 3
	}
	if m.BlockedTime != nil {
		l = m.BlockedTime.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.OutBizId != nil {
		l = len(*m.OutBizId)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dish_TimeForSales) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.SaleStartTime))
	}
	if m.SaleEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.SaleEndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dish_SalesDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Monday) > 0 {
		for _, e := range m.Monday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Tuesday) > 0 {
		for _, e := range m.Tuesday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Wednesday) > 0 {
		for _, e := range m.Wednesday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Thursday) > 0 {
		for _, e := range m.Thursday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Friday) > 0 {
		for _, e := range m.Friday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Saturday) > 0 {
		for _, e := range m.Saturday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Sunday) > 0 {
		for _, e := range m.Sunday {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dish_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alcoholic != nil {
		n += 2
	}
	if m.QcFrozen != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dish_SpecialSaleDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.StartDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartDate))
	}
	if m.EndDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndDate))
	}
	if len(m.TimeForSales) > 0 {
		for _, e := range m.TimeForSales {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Option) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovFoodyBase(uint64(*m.Price))
	}
	if m.Available != nil {
		n += 1 + sovFoodyBase(uint64(*m.Available))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.GroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.GroupId))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.OutOfStockTime != nil {
		l = m.OutOfStockTime.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SyncItemGroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SyncItemGroupId))
	}
	if m.OutBizId != nil {
		l = len(*m.OutBizId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ShelveState != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShelveState))
	}
	if m.SelectMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.SelectMode))
	}
	if m.SelectMin != nil {
		n += 1 + sovFoodyBase(uint64(*m.SelectMin))
	}
	if m.SelectMax != nil {
		n += 1 + sovFoodyBase(uint64(*m.SelectMax))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SyncItemGroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SyncItemGroupId))
	}
	if m.OutBizId != nil {
		l = len(*m.OutBizId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionGroup_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QcFrozen != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DishOptionBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.GroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.GroupId))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.ShelveState != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShelveState))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionGroupBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.GroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.GroupId))
	}
	if m.OptionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OptionId))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Price != nil {
		n += 1 + sovFoodyBase(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Catalog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DishCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishCount))
	}
	if m.Rank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.SyncItemGroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SyncItemGroupId))
	}
	if m.OutBizId != nil {
		l = len(*m.OutBizId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Buyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Avatar != nil {
		l = len(*m.Avatar)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Driver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.FullName != nil {
		l = len(*m.FullName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ProfilePhoto != nil {
		l = len(*m.ProfilePhoto)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.VehiclePlateNo != nil {
		l = len(*m.VehiclePlateNo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RatingTotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.RatingTotal))
	}
	if m.RatingScore != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = len(*m.State)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.District != nil {
		l = len(*m.District)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Latitude != nil {
		n += 5
	}
	if m.Longitude != nil {
		n += 5
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PreciseLatitude != nil {
		n += 9
	}
	if m.PreciseLongitude != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovFoodyBase(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartOptionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartDish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SnapshotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SnapshotId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovFoodyBase(uint64(*m.Price))
	}
	if m.CatalogId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CatalogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartItemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dish != nil {
		l = m.Dish.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.OptionGroups) > 0 {
		for _, e := range m.OptionGroups {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Discount != nil {
		l = m.Discount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FlashSaleDiscount != nil {
		l = m.FlashSaleDiscount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FlashSaleLimit != nil {
		n += 1 + sovFoodyBase(uint64(*m.FlashSaleLimit))
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CartItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Quantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.Quantity))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ItemId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DriverShippingIncome != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverShippingIncome))
	}
	if m.PayToMerchant != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayToMerchant))
	}
	if m.CollectFromCustomer != nil {
		n += 1 + sovFoodyBase(uint64(*m.CollectFromCustomer))
	}
	if m.ShippingSurgeFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingSurgeFee))
	}
	if m.ParkingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ParkingFee))
	}
	if m.BadWeatherFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.BadWeatherFee))
	}
	if m.HolidayFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.HolidayFee))
	}
	if m.LateNightFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.LateNightFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderCustomTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Source != nil {
		n += 1 + sovFoodyBase(uint64(*m.Source))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.Store != nil {
		l = m.Store.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryAddress != nil {
		l = m.DeliveryAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelProposer != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelProposer))
	}
	if m.PlaceTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PlaceTime))
	}
	if m.PaymentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.ReviewTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReviewTime))
	}
	if m.MerchantConfirmTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.MerchantConfirmTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.EstimateArrivedTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateArrivedTime))
	}
	if m.EstimateDeliveredTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateDeliveredTime))
	}
	if m.PickupSeq != nil {
		n += 2 + sovFoodyBase(uint64(*m.PickupSeq))
	}
	if m.DeliveryAssignTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryAssignTime))
	}
	if m.DeliveryArriveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryArriveTime))
	}
	if m.DeliveryPickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryPickupTime))
	}
	if m.DeliveryCompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryCompleteTime))
	}
	if m.IsReceived != nil {
		n += 3
	}
	if m.IsReady != nil {
		n += 3
	}
	if m.ReadyTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReadyTime))
	}
	if m.RatingCompletedTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RatingCompletedTime))
	}
	if m.IsRatingCompleted != nil {
		n += 2 + sovFoodyBase(uint64(*m.IsRatingCompleted))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ItemQuantity != nil {
		n += 2 + sovFoodyBase(uint64(*m.ItemQuantity))
	}
	if m.StoreSettlementFactor != nil {
		l = m.StoreSettlementFactor.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.RewriteType != nil {
		n += 2 + sovFoodyBase(uint64(*m.RewriteType))
	}
	if m.RewriteReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.RewriteReason))
	}
	if m.RewriteRemark != nil {
		l = len(*m.RewriteRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.RefundAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.RefundAmount))
	}
	if m.MakeupAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.MakeupAmount))
	}
	if m.PromotionFlag != nil {
		l = m.PromotionFlag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.VoucherReferenceId != nil {
		l = len(*m.VoucherReferenceId)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryDistance != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.DeliveryReconfirmTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryReconfirmTime))
	}
	if m.MerchantConfirmedDeadline != nil {
		n += 2 + sovFoodyBase(uint64(*m.MerchantConfirmedDeadline))
	}
	if m.OvertimeMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.OvertimeMode))
	}
	if m.RewriteSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.RewriteSource))
	}
	if len(m.StoreLocationGroups) > 0 {
		for _, e := range m.StoreLocationGroups {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.BuyerLocationGroups) > 0 {
		for _, e := range m.BuyerLocationGroups {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelRemark != nil {
		l = len(*m.CancelRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.CancelCerts) > 0 {
		for _, e := range m.CancelCerts {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.VendorId != nil {
		n += 2 + sovFoodyBase(uint64(*m.VendorId))
	}
	if m.DelayAssignDuration != nil {
		n += 2 + sovFoodyBase(uint64(*m.DelayAssignDuration))
	}
	if m.IsMerchantVisible != nil {
		n += 3
	}
	if m.PaymentInfo != nil {
		l = m.PaymentInfo.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.MinSpend != nil {
		n += 2 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if len(m.CustomTags) > 0 {
		for _, e := range m.CustomTags {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.DeliveryMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.CartItem != nil {
		l = m.CartItem.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UnitPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.UnitPrice))
	}
	if m.FlatFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.FlatFee))
	}
	if m.Subtotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.Subtotal))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UnitListPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.UnitListPrice))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subtotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.Subtotal))
	}
	if m.TaxAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaxAmount))
	}
	if m.MerchantServiceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantServiceFee))
	}
	if m.PlatformServiceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.PlatformServiceFee))
	}
	if m.ShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFee))
	}
	if m.TotalAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalAmount))
	}
	if m.ShippingBasicFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingBasicFee))
	}
	if m.ShippingSurgeFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingSurgeFee))
	}
	if m.MerchantSurchargeFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantSurchargeFee))
	}
	if m.Promotion != nil {
		l = m.Promotion.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PayToMerchant != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayToMerchant))
	}
	if m.CollectFromCustomer != nil {
		n += 1 + sovFoodyBase(uint64(*m.CollectFromCustomer))
	}
	if m.SmallOrderFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.SmallOrderFee))
	}
	if m.ShippingFareExtraFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFareExtraFee))
	}
	if m.ShippingFareDiscountAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFareDiscountAmount))
	}
	if m.ParkingFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ParkingFee))
	}
	if m.NonPartnerFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.NonPartnerFee))
	}
	if m.BadWeatherFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.BadWeatherFee))
	}
	if m.HolidayFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.HolidayFee))
	}
	if m.LateNightFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.LateNightFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Promotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShippingDiscountAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingDiscountAmount))
	}
	if m.CoinsRedeemedAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.CoinsRedeemedAmount))
	}
	if m.ItemVoucherAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemVoucherAmount))
	}
	if m.ShippingVoucherAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingVoucherAmount))
	}
	if m.CoinsEarning != nil {
		n += 1 + sovFoodyBase(uint64(*m.CoinsEarning))
	}
	if m.CoinsCashback != nil {
		n += 1 + sovFoodyBase(uint64(*m.CoinsCashback))
	}
	if m.ItemDiscountAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemDiscountAmount))
	}
	if m.VoucherMerchantSubsidyAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.VoucherMerchantSubsidyAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Promotion_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseItemVoucher != nil {
		n += 2
	}
	if m.UseShippingFeeVoucher != nil {
		n += 2
	}
	if m.UseCoinsCashbackVoucher != nil {
		n += 2
	}
	if m.UseCoins != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReturned != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsReturned))
	}
	if m.IsRefunded != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsRefunded))
	}
	if m.IsManualConfirmed != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsManualConfirmed))
	}
	if m.CanDriverRewrite != nil {
		n += 1 + sovFoodyBase(uint64(*m.CanDriverRewrite))
	}
	if m.IsDriverRewritePreview != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDriverRewritePreview))
	}
	if m.HasDropped != nil {
		n += 1 + sovFoodyBase(uint64(*m.HasDropped))
	}
	if m.IsInstantPreparation != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsInstantPreparation))
	}
	if m.CanMerchantRewrite != nil {
		n += 1 + sovFoodyBase(uint64(*m.CanMerchantRewrite))
	}
	if m.IsDff != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDff))
	}
	if m.IsPaoTang != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsPaoTang))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_StoreSettlementFactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreSettlementMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreSettlementMode))
	}
	if m.CommissionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.TaxRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaxRate))
	}
	if m.ServiceChargeFeeRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceChargeFeeRate))
	}
	if m.Vat != nil {
		n += 1 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.VatRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.VatRate))
	}
	if m.Wht != nil {
		n += 1 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.WhtRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhtRate))
	}
	if m.VatCalculate != nil {
		n += 1 + sovFoodyBase(uint64(*m.VatCalculate))
	}
	if m.SettleTo != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettleTo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Order_PaymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoucherPaymentType != nil {
		n += 1 + sovFoodyBase(uint64(*m.VoucherPaymentType))
	}
	if m.CreditCardBin != nil {
		l = len(*m.CreditCardBin)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DeliveryAddress != nil {
		l = m.DeliveryAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.EstimateArrivedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EstimateArrivedTime))
	}
	if m.EstimateDeliveredTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EstimateDeliveredTime))
	}
	if m.DeliveryAmount != nil {
		l = m.DeliveryAmount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PickupSeq != nil {
		n += 1 + sovFoodyBase(uint64(*m.PickupSeq))
	}
	if m.DeliveryStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryStatus))
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.AssignTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.AssignTime))
	}
	if m.ArriveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ArriveTime))
	}
	if m.PickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PickupTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.GeoTracking != nil {
		l = m.GeoTracking.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Receipt != nil {
		l = len(*m.Receipt)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreAddress != nil {
		l = m.StoreAddress.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AssignType != nil {
		n += 2 + sovFoodyBase(uint64(*m.AssignType))
	}
	if m.AssignOperator != nil {
		l = len(*m.AssignOperator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AdvanceDeposit != nil {
		l = m.AdvanceDeposit.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.DepositRefund != nil {
		l = m.DepositRefund.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CancelRemark != nil {
		l = len(*m.CancelRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.CancelCerts) > 0 {
		for _, e := range m.CancelCerts {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AdvanceDepositRefundStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.AdvanceDepositRefundStatus))
	}
	if m.BeginAssignTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.BeginAssignTime))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.GroupId != nil {
		n += 2 + sovFoodyBase(uint64(*m.GroupId))
	}
	if m.PickupRank != nil {
		n += 2 + sovFoodyBase(uint64(*m.PickupRank))
	}
	if m.DeliveryRank != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryRank))
	}
	if m.DriverDeliveryOrderId != nil {
		n += 2 + sovFoodyBase(uint64(*m.DriverDeliveryOrderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryOrder_GeoTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArriveGeo != nil {
		l = m.ArriveGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PickupGeo != nil {
		l = m.PickupGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CompleteGeo != nil {
		l = m.CompleteGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AcceptGeo != nil {
		l = m.AcceptGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryOrder_AdvanceDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Time != nil {
		n += 1 + sovFoodyBase(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryOrder_DepositRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Time != nil {
		n += 1 + sovFoodyBase(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeliveryOrder_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsInstantPreparation != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsInstantPreparation))
	}
	if m.IsDff != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDff))
	}
	if m.IsGroupDelivery != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsGroupDelivery))
	}
	if m.IsGroupFirstDelivery != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsGroupFirstDelivery))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckoutId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CheckoutId))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.TransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionRef))
	}
	if m.Method != nil {
		n += 1 + sovFoodyBase(uint64(*m.Method))
	}
	if m.ChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChannelId))
	}
	if m.ChannelOption != nil {
		l = len(*m.ChannelOption)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TotalAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalAmount))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.InitiationTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitiationTime))
	}
	if m.PaymentTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.PaymentType != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentType))
	}
	if m.PaymentLink != nil {
		l = len(*m.PaymentLink)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Platform != nil {
		n += 2 + sovFoodyBase(uint64(*m.Platform))
	}
	if m.ThirdPartyTransactionRef != nil {
		l = len(*m.ThirdPartyTransactionRef)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Geo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != nil {
		n += 5
	}
	if m.Latitude != nil {
		n += 5
	}
	if m.PreciseLongitude != nil {
		n += 9
	}
	if m.PreciseLatitude != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.EntityType != nil {
		n += 1 + sovFoodyBase(uint64(*m.EntityType))
	}
	if m.EntityId != nil {
		n += 1 + sovFoodyBase(uint64(*m.EntityId))
	}
	if m.ChangeType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChangeType))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.SellerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SellerId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.OldValue != nil {
		l = len(*m.OldValue)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.NewValue != nil {
		l = len(*m.NewValue)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Source != nil {
		n += 1 + sovFoodyBase(uint64(*m.Source))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OperateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.OperateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Code != nil {
		n += 1 + sovFoodyBase(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != nil {
		l = len(*m.DeviceId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeviceModel != nil {
		l = len(*m.DeviceModel)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Os != nil {
		n += 1 + sovFoodyBase(uint64(*m.Os))
	}
	if m.OsVersion != nil {
		l = len(*m.OsVersion)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PushToken != nil {
		l = len(*m.PushToken)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PushType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PushType))
	}
	if m.AppVersion != nil {
		l = len(*m.AppVersion)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Channel != nil {
		l = len(*m.Channel)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Ip != nil {
		n += 1 + sovFoodyBase(uint64(*m.Ip))
	}
	if m.Imei != nil {
		l = len(*m.Imei)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Idfa != nil {
		l = len(*m.Idfa)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Mac != nil {
		l = len(*m.Mac)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.BundleId != nil {
		l = len(*m.BundleId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.TagId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TagId))
	}
	if m.BrandId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BrandId))
	}
	if m.TobUserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TobUserId))
	}
	if m.IsUseWallet != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseWallet))
	}
	if m.IsUseMerchantApp != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseMerchantApp))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PostalCode != nil {
		l = len(*m.PostalCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RegisterPhone != nil {
		l = len(*m.RegisterPhone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.EmailSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.EmailSource))
	}
	if m.RegisterTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterTime))
	}
	if m.Logo != nil {
		l = len(*m.Logo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Banner != nil {
		l = len(*m.Banner)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PartnerType != nil {
		n += 2 + sovFoodyBase(uint64(*m.PartnerType))
	}
	if m.CommissionRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.TaxRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.TaxRate))
	}
	if m.ServiceFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceFee))
	}
	if m.MinSpend != nil {
		n += 2 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if m.DeliveryDistance != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.PreparationTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PreparationTime))
	}
	if m.ContactPhone != nil {
		l = len(*m.ContactPhone)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 2 + sovFoodyBase(uint64(*m.Status))
	}
	if m.AutoConfirmed != nil {
		n += 2 + sovFoodyBase(uint64(*m.AutoConfirmed))
	}
	if m.AutoConfirmedEnabled != nil {
		n += 2 + sovFoodyBase(uint64(*m.AutoConfirmedEnabled))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.RatingTotal != nil {
		n += 2 + sovFoodyBase(uint64(*m.RatingTotal))
	}
	if m.RatingScore != nil {
		n += 6
	}
	if m.OpeningStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.OpeningStatus))
	}
	if m.SurchargeIntervals != nil {
		l = m.SurchargeIntervals.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceChargeFeeRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceChargeFeeRate))
	}
	if m.DriverModifyOrderEnabled != nil {
		n += 2 + sovFoodyBase(uint64(*m.DriverModifyOrderEnabled))
	}
	if m.DeliveryDistanceMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryDistanceMode))
	}
	if m.BusinessInfoAdded != nil {
		n += 2 + sovFoodyBase(uint64(*m.BusinessInfoAdded))
	}
	if m.IsInstantPrep != nil {
		n += 2 + sovFoodyBase(uint64(*m.IsInstantPrep))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ModifyOrderMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.ModifyOrderMode))
	}
	if m.StatusReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.StatusReason))
	}
	if m.StatusReasonRemark != nil {
		l = len(*m.StatusReasonRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Overlay != nil {
		l = m.Overlay.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ScheduledCommissions != nil {
		l = m.ScheduledCommissions.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.EffectiveCommissionRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.EffectiveCommissionRate))
	}
	if m.VendorId != nil {
		n += 2 + sovFoodyBase(uint64(*m.VendorId))
	}
	if m.TobUserIds != nil {
		l = len(*m.TobUserIds)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranch != nil {
		l = len(*m.BankBranch)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountName != nil {
		l = len(*m.BankAccountName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.WalletId != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.TaxId != nil {
		l = len(*m.TaxId)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SettlementMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementMethod))
	}
	if m.PaymentWay != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentWay))
	}
	if m.Vat != nil {
		n += 2 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.VatRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.VatRate))
	}
	if m.Wht != nil {
		n += 2 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.WhtRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.WhtRate))
	}
	if m.SettleTo != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettleTo))
	}
	if m.SourceUpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SourceUpdateTime))
	}
	if m.BankChannelId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankChannelId))
	}
	if m.VatCalculate != nil {
		n += 2 + sovFoodyBase(uint64(*m.VatCalculate))
	}
	if m.PayoutMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutMethod))
	}
	if m.CrossMonthSettlement != nil {
		n += 2 + sovFoodyBase(uint64(*m.CrossMonthSettlement))
	}
	if m.HalalType != nil {
		n += 2 + sovFoodyBase(uint64(*m.HalalType))
	}
	if m.SmallOrderFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.SmallOrderFee))
	}
	if m.ServiceFeeMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceFeeMode))
	}
	if m.DffMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.DffMode))
	}
	if m.DffSetting != nil {
		n += 2 + sovFoodyBase(uint64(*m.DffSetting))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.DistrictId != nil {
		n += 2 + sovFoodyBase(uint64(*m.DistrictId))
	}
	if m.MainCategory != nil {
		l = m.MainCategory.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SubCategory != nil {
		l = m.SubCategory.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.MaxDelayTimeMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.MaxDelayTimeMode))
	}
	if m.MaxDelayTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.MaxDelayTime))
	}
	if m.StatusInAdmin != nil {
		n += 2 + sovFoodyBase(uint64(*m.StatusInAdmin))
	}
	if m.PayoutAccountId != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutAccountId))
	}
	if m.WalletRelationStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletRelationStatus))
	}
	if m.SettlementConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementConfigStatus))
	}
	if m.ProductConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ProductConfigStatus))
	}
	if m.BankAccountStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankAccountStatus))
	}
	if m.AutoPayoutRemark != nil {
		l = len(*m.AutoPayoutRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ParkingFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ParkingFee))
	}
	if m.SmallOrderFeeMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.SmallOrderFeeMode))
	}
	if m.ExtraContactPhones != nil {
		l = len(*m.ExtraContactPhones)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CategoryType != nil {
		n += 2 + sovFoodyBase(uint64(*m.CategoryType))
	}
	if m.MaximumSubtotalPrice != nil {
		n += 2 + sovFoodyBase(uint64(*m.MaximumSubtotalPrice))
	}
	if m.DeliveryMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryMethod))
	}
	if m.MinFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.MinFee))
	}
	if m.ShippingFees != nil {
		l = m.ShippingFees.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranchId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankBranchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_SurChargeIntervals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Intervals) > 0 {
		for _, e := range m.Intervals {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_SurChargeInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderPriceEnd != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderPriceEnd))
	}
	if m.Fee != nil {
		n += 1 + sovFoodyBase(uint64(*m.Fee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OvertimeOrderMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.OvertimeOrderMode))
	}
	if m.IsSuperMenu != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsSuperMenu))
	}
	if m.RequiredReceiptPhoto != nil {
		n += 1 + sovFoodyBase(uint64(*m.RequiredReceiptPhoto))
	}
	if m.EditMenuEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.EditMenuEnabled))
	}
	if m.HideDishNoteEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.HideDishNoteEnabled))
	}
	if m.AutoPrintDisabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.AutoPrintDisabled))
	}
	if m.EditPromotionEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.EditPromotionEnabled))
	}
	if m.ShowBuyerHalalType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShowBuyerHalalType))
	}
	if m.HideProcessingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.HideProcessingFee))
	}
	if m.SpecialModeStoreClose != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpecialModeStoreClose))
	}
	if m.SpecialModeDeliveryDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpecialModeDeliveryDistance))
	}
	if m.SpecialModeStoreDff != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpecialModeStoreDff))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_Overlay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogoImage != nil {
		l = len(*m.LogoImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BannerImage != nil {
		l = len(*m.BannerImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_ScheduledCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommissionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.Priority != nil {
		n += 1 + sovFoodyBase(uint64(*m.Priority))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EffectiveTime))
	}
	if m.ExpireTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpireTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_ScheduledCommissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScheduledCommissions) > 0 {
		for _, e := range m.ScheduledCommissions {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_SubCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubCategory) > 0 {
		for _, e := range m.SubCategory {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_ShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		n += 1 + sovFoodyBase(uint64(*m.From))
	}
	if m.To != nil {
		n += 1 + sovFoodyBase(uint64(*m.To))
	}
	if m.Fee != nil {
		n += 1 + sovFoodyBase(uint64(*m.Fee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Store_ShippingFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShippingFees) > 0 {
		for _, e := range m.ShippingFees {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreMin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.TagId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TagId))
	}
	if m.BrandId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BrandId))
	}
	if m.TobUserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TobUserId))
	}
	if m.IsUseWallet != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseWallet))
	}
	if m.IsUseMerchantApp != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseMerchantApp))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PostalCode != nil {
		l = len(*m.PostalCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RegisterPhone != nil {
		l = len(*m.RegisterPhone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.EmailSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.EmailSource))
	}
	if m.RegisterTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterTime))
	}
	if m.Logo != nil {
		l = len(*m.Logo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Banner != nil {
		l = len(*m.Banner)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PartnerType != nil {
		n += 2 + sovFoodyBase(uint64(*m.PartnerType))
	}
	if m.CommissionRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.TaxRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.TaxRate))
	}
	if m.ServiceFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceFee))
	}
	if m.MinSpend != nil {
		n += 2 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if m.DeliveryDistance != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.PreparationTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PreparationTime))
	}
	if m.ContactPhone != nil {
		l = len(*m.ContactPhone)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 2 + sovFoodyBase(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level_1 != nil {
		n += 1 + sovFoodyBase(uint64(*m.Level_1))
	}
	if m.Level_2 != nil {
		n += 1 + sovFoodyBase(uint64(*m.Level_2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpeningStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisplayOpeningStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DisplayOpeningStatus))
	}
	if m.OrderEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderEnabled))
	}
	if m.CurrentOpeningTime != nil {
		l = m.CurrentOpeningTime.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.NextOpeningTime != nil {
		l = m.NextOpeningTime.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OpeningStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.OpeningStatus))
	}
	if m.PauseTime != nil {
		l = m.PauseTime.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CloseStatus != nil {
		l = m.CloseStatus.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpeningStatus_Interval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartRelativeSec != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartRelativeSec))
	}
	if m.EndRelativeSec != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndRelativeSec))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpeningStatus_SpecialMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModeTypeId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ModeTypeId))
	}
	if m.ModeTypeName != nil {
		l = len(*m.ModeTypeName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpeningStatus_PauseTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PauseStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.PauseStartTime))
	}
	if m.PauseEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.PauseEndTime))
	}
	if m.PauseType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PauseType))
	}
	if m.SpecialMode != nil {
		l = m.SpecialMode.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpeningStatus_CloseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseType != nil {
		n += 1 + sovFoodyBase(uint64(*m.CloseType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Store != nil {
		l = m.Store.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OpeningStatus != nil {
		l = m.OpeningStatus.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Merchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.MerchantName != nil {
		l = len(*m.MerchantName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Logo != nil {
		l = len(*m.Logo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Banner != nil {
		l = len(*m.Banner)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RegisterTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.TobUserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TobUserId))
	}
	if m.TobUserIds != nil {
		l = len(*m.TobUserIds)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranch != nil {
		l = len(*m.BankBranch)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountName != nil {
		l = len(*m.BankAccountName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.WalletId != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.TaxId != nil {
		l = len(*m.TaxId)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SettlementMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementMethod))
	}
	if m.PaymentWay != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentWay))
	}
	if m.Vat != nil {
		n += 2 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.VatRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.VatRate))
	}
	if m.Wht != nil {
		n += 2 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.WhtRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.WhtRate))
	}
	if m.IsUseWallet != nil {
		n += 2 + sovFoodyBase(uint64(*m.IsUseWallet))
	}
	if m.SourceUpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SourceUpdateTime))
	}
	if m.BankChannelId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankChannelId))
	}
	if m.VatCalculate != nil {
		n += 2 + sovFoodyBase(uint64(*m.VatCalculate))
	}
	if m.PayoutMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutMethod))
	}
	if m.CrossMonthSettlement != nil {
		n += 2 + sovFoodyBase(uint64(*m.CrossMonthSettlement))
	}
	if m.PayoutAccountId != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutAccountId))
	}
	if m.WalletRelationStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletRelationStatus))
	}
	if m.SettlementConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementConfigStatus))
	}
	if m.ProductConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ProductConfigStatus))
	}
	if m.BankAccountStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankAccountStatus))
	}
	if m.AutoPayoutRemark != nil {
		l = len(*m.AutoPayoutRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.MerchantStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.MerchantStatus))
	}
	if m.BankBranchId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankBranchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Brand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.BrandName != nil {
		l = len(*m.BrandName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Deleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.Deleted))
	}
	if m.StoreCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreCount))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.TagName != nil {
		l = len(*m.TagName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Deleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.Deleted))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.TagTypeId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TagTypeId))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeleteTime))
	}
	if m.Editable != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.TypeName != nil {
		l = len(*m.TypeName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.TagCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TagCount))
	}
	if m.Deleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.Deleted))
	}
	if m.DeleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeleteTime))
	}
	if m.Editable != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PredefinedKeyword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ActualSearchKeyword != nil {
		l = len(*m.ActualSearchKeyword)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.UserSearchKeywords) > 0 {
		for _, s := range m.UserSearchKeywords {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Deleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.Deleted))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.DeleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeleteTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WithdrawalChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bank != nil {
		n += 1 + sovFoodyBase(uint64(*m.Bank))
	}
	if m.ShopeePay != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShopeePay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.Balance != nil {
		n += 1 + sovFoodyBase(uint64(*m.Balance))
	}
	if m.WalletStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletStatus))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.WalletType != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletType))
	}
	if m.PayoutMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayoutMode))
	}
	if m.ModeOperator != nil {
		l = len(*m.ModeOperator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ModeUpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ModeUpdateTime))
	}
	if m.BalanceVersion != nil {
		n += 1 + sovFoodyBase(uint64(*m.BalanceVersion))
	}
	if m.WithdrawalChannel != nil {
		l = m.WithdrawalChannel.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverWalletTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.TransactionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionType))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Balance != nil {
		n += 1 + sovFoodyBase(uint64(*m.Balance))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Extend != nil {
		l = len(*m.Extend)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BalanceVersion != nil {
		n += 1 + sovFoodyBase(uint64(*m.BalanceVersion))
	}
	if m.RelatedOrder != nil {
		n += 1 + sovFoodyBase(uint64(*m.RelatedOrder))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverWalletOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.DriverName != nil {
		l = len(*m.DriverName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DriverPhone != nil {
		l = len(*m.DriverPhone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AdjustReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.AdjustReason))
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.EscrowCerts) > 0 {
		for _, e := range m.EscrowCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.EscrowNo != nil {
		l = len(*m.EscrowNo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.TransactionRef != nil {
		n += 2 + sovFoodyBase(uint64(*m.TransactionRef))
	}
	if m.PaymentMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.PaymentChannelId != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentChannelId))
	}
	if m.PaymentChannelOption != nil {
		l = len(*m.PaymentChannelOption)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentLink != nil {
		l = len(*m.PaymentLink)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.InitialTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.PaymentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.AdjustTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.AdjustTime))
	}
	if m.RejectTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RejectTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.PayoutMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutMode))
	}
	if m.PaymentErrorCode != nil {
		l = len(*m.PaymentErrorCode)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AuditResult != nil {
		n += 2 + sovFoodyBase(uint64(*m.AuditResult))
	}
	if m.AuditRemark != nil {
		l = len(*m.AuditRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AuditOperator != nil {
		l = len(*m.AuditOperator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AuditTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.AuditTime))
	}
	if m.CancelSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.EstimateApproveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateApproveTime))
	}
	if m.PayoutNotifyTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutNotifyTime))
	}
	if m.BankAccountHolder != nil {
		l = len(*m.BankAccountHolder)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ShopeeUserId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShopeeUserId))
	}
	if m.WithdrawalChannel != nil {
		n += 2 + sovFoodyBase(uint64(*m.WithdrawalChannel))
	}
	if m.ShopeeUserName != nil {
		l = len(*m.ShopeeUserName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SettlementSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementSource))
	}
	if m.SettlementMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementMode))
	}
	if m.SettlementStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementStatus))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.IsFromCompensation != nil {
		n += 2
	}
	if m.SettlementErrorCode != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementErrorCode))
	}
	if m.ClearingFlag != nil {
		l = m.ClearingFlag.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransactionRef != nil {
		l = len(*m.TransactionRef)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ReferenceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceType))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.WalletSettlementId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletSettlementId))
	}
	if m.SettlementDetailId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementDetailId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.WalletType != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletType))
	}
	if m.StoreId != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.MerchantId != nil {
		n += 2 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.StoreName != nil {
		l = len(*m.StoreName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreSettlementMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreSettlementMode))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CancelReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ProcessingTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ProcessingTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreSettlement_Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemSubtotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemSubtotal))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Commission != nil {
		n += 1 + sovFoodyBase(uint64(*m.Commission))
	}
	if m.CommissionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.StoreSubsidy != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreSubsidy))
	}
	if m.TaxRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaxRate))
	}
	if m.Vat != nil {
		n += 1 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.VatRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.VatRate))
	}
	if m.VatAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.VatAmount))
	}
	if m.Wht != nil {
		n += 1 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.WhtRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhtRate))
	}
	if m.WhtAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhtAmount))
	}
	if m.VatCalculate != nil {
		n += 1 + sovFoodyBase(uint64(*m.VatCalculate))
	}
	if m.ItemVoucherSubsidy != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemVoucherSubsidy))
	}
	if m.ShippingFeeVoucherSubsidy != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFeeVoucherSubsidy))
	}
	if m.DeliveryCost != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryCost))
	}
	if m.ItemDiscountsSubsidy != nil {
		n += 2 + sovFoodyBase(uint64(*m.ItemDiscountsSubsidy))
	}
	if m.FlashsaleDiscountsSubsidy != nil {
		n += 2 + sovFoodyBase(uint64(*m.FlashsaleDiscountsSubsidy))
	}
	if m.SurchargeFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.SurchargeFee))
	}
	if m.SurchargeRate != nil {
		n += 2 + sovFoodyBase(uint64(*m.SurchargeRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreSettlement_ClearingFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsUseMerchantWalletOriginal != nil {
		n += 2
	}
	if m.IsUseMerchantWallet != nil {
		n += 2
	}
	if m.IsMerchantDelivery != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SettlementMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementMode))
	}
	if m.SettlementSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementSource))
	}
	if m.SettlementStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementStatus))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.ReferenceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceType))
	}
	if m.OrderAmount != nil {
		l = m.OrderAmount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryAmount != nil {
		l = m.DeliveryAmount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.PaymentId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentId))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.IsFromCompensation != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXDriverSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.SettlementType != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementType))
	}
	if m.SettlementStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementStatus))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.ReferenceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceType))
	}
	if m.PaymentId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentId))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.IsFromCompensation != nil {
		n += 3
	}
	if m.Extend != nil {
		l = len(*m.Extend)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXDriverSettlement_Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.CollectionAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.CollectionAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReturnOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.OrderCancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderCancelSource))
	}
	if m.OrderCancelResponsibility != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderCancelResponsibility))
	}
	if m.OrderCancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderCancelReason))
	}
	if m.OrderCancelRemark != nil {
		l = len(*m.OrderCancelRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.OrderCancelCerts) > 0 {
		for _, e := range m.OrderCancelCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.OrderReferenceStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderReferenceStatus))
	}
	if m.RefundType != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundType))
	}
	if m.RefundAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundAmount))
	}
	if m.ReturnStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnStatus))
	}
	if m.CancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.InitiationTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitiationTime))
	}
	if m.ApproveTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ApproveTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ReturnType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnType))
	}
	if m.ReturnReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnReason))
	}
	if m.ReturnRemark != nil {
		l = len(*m.ReturnRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Responsibility != nil {
		n += 2 + sovFoodyBase(uint64(*m.Responsibility))
	}
	if m.StoreChargebackAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreChargebackAmount))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BuyerId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.ReturnSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnSource))
	}
	if m.Proposer != nil {
		n += 2 + sovFoodyBase(uint64(*m.Proposer))
	}
	if m.OfflineRefundMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.OfflineRefundMethod))
	}
	if m.StoreChargebackType != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreChargebackType))
	}
	if m.StoreChargebackMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreChargebackMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Refund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ReturnId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.PaymentTransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentTransactionRef))
	}
	if m.RefundTransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundTransactionRef))
	}
	if m.RefundAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundAmount))
	}
	if m.RefundStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundStatus))
	}
	if m.InitiationTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitiationTime))
	}
	if m.RefundTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CheckoutId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CheckoutId))
	}
	if m.ReturnType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnType))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RefundMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundMethod))
	}
	if m.OfflineRefundTransactionRef != nil {
		l = len(*m.OfflineRefundTransactionRef)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BuyerId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.RefundMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.RefundMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnionCity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = len(*m.State)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.District != nil {
		l = len(*m.District)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MassChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.MassType != nil {
		n += 1 + sovFoodyBase(uint64(*m.MassType))
	}
	if m.ChangeType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChangeType))
	}
	if m.Filename != nil {
		l = len(*m.Filename)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FileHash != nil {
		l = len(*m.FileHash)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OperateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.OperateTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.OperateSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.OperateSource))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.LogType != nil {
		n += 1 + sovFoodyBase(uint64(*m.LogType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderDiscountCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.CampaignName != nil {
		l = len(*m.CampaignName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.PromotionStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionStatus))
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.DiscountPercentage != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPercentage))
	}
	if m.DiscountCap != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountCap))
	}
	if m.DiscountAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountAmount))
	}
	if m.MinSpend != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if m.Stock != nil {
		n += 1 + sovFoodyBase(uint64(*m.Stock))
	}
	if m.UsedQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsedQuantity))
	}
	if m.LimitPerDay != nil {
		n += 1 + sovFoodyBase(uint64(*m.LimitPerDay))
	}
	if m.LimitPerUser != nil {
		n += 1 + sovFoodyBase(uint64(*m.LimitPerUser))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.UserTags != nil {
		l = len(*m.UserTags)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PartnerType != nil {
		n += 2 + sovFoodyBase(uint64(*m.PartnerType))
	}
	if m.StoreFilename != nil {
		l = len(*m.StoreFilename)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.PaymentMethods) > 0 {
		for _, e := range m.PaymentMethods {
			n += 2 + sovFoodyBase(uint64(e))
		}
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if len(m.LocationGroupIds) > 0 {
		for _, e := range m.LocationGroupIds {
			n += 2 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionId))
	}
	if m.VoucherCode != nil {
		l = len(*m.VoucherCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RewardType != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardType))
	}
	if m.Prefix != nil {
		l = len(*m.Prefix)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Length != nil {
		n += 1 + sovFoodyBase(uint64(*m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DistributionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistributionMethod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidityStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuotaStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.QuotaStatus))
	}
	if m.TimeStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiLangTxt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != nil {
		l = len(*m.Language)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherTAndC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SectionTitle != nil {
		l = len(*m.SectionTitle)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SectionContent != nil {
		l = len(*m.SectionContent)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SectionTitleKey != nil {
		l = len(*m.SectionTitleKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DisplayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.IconText != nil {
		l = len(*m.IconText)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Label != nil {
		l = len(*m.Label)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.CustomizedLabels) > 0 {
		for _, e := range m.CustomizedLabels {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.TcSectionList) > 0 {
		for _, e := range m.TcSectionList {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.DisplayOnLandingPage != nil {
		n += 2
	}
	if m.BrowseListTags != nil {
		l = m.BrowseListTags.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtraInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisplayInfo != nil {
		l = m.DisplayInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentMethodScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentMethods) > 0 {
		for _, e := range m.PaymentMethods {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.SpmChannelIds) > 0 {
		for _, e := range m.SpmChannelIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentMethodScope != nil {
		l = m.PaymentMethodScope.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OrderScope != nil {
		l = m.OrderScope.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.CreditCardBins) > 0 {
		for _, s := range m.CreditCardBins {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.VoucherPaymentTypes) > 0 {
		for _, e := range m.VoucherPaymentTypes {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocationGroupIds) > 0 {
		for _, e := range m.LocationGroupIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinSpend != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreScope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ScopeType))
	}
	if len(m.StoreIds) > 0 {
		for _, e := range m.StoreIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.ExcludeStoreIds) > 0 {
		for _, e := range m.ExcludeStoreIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.StorePartnerTypes) > 0 {
		for _, e := range m.StorePartnerTypes {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.StoreTagIds) > 0 {
		for _, e := range m.StoreTagIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationScope != nil {
		l = m.LocationScope.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreScope != nil {
		l = m.StoreScope.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserAttributes) > 0 {
		for _, e := range m.UserAttributes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Percentage != nil {
		n += 1 + sovFoodyBase(uint64(*m.Percentage))
	}
	if m.Cap != nil {
		n += 1 + sovFoodyBase(uint64(*m.Cap))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherRewardDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardDiscount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardDiscount))
	}
	if m.RewardCoin != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardCoin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserVoucher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserVoucherId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserVoucherId))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.VoucherIdentifier != nil {
		l = m.VoucherIdentifier.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UsageCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsageCount))
	}
	if m.UsageLimit != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsageLimit))
	}
	if m.Voucher != nil {
		l = m.Voucher.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Voucher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = m.Identifier.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RewardType != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardType))
	}
	if m.RewardDiscount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardDiscount))
	}
	if m.RewardCoin != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardCoin))
	}
	if m.RewardCoinEquivalentCash != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardCoinEquivalentCash))
	}
	if m.RewardShippingFeeDiscount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RewardShippingFeeDiscount))
	}
	if m.Title != nil {
		l = len(*m.Title)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.CreatedBy != nil {
		l = len(*m.CreatedBy)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DistributionStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistributionStartTime))
	}
	if m.DistributionEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistributionEndTime))
	}
	if m.DistributionRule != nil {
		l = m.DistributionRule.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DistributionTotalLimit != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistributionTotalLimit))
	}
	if m.DistributionTotalCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistributionTotalCount))
	}
	if m.DistributionValidityStatus != nil {
		l = m.DistributionValidityStatus.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.VoucherName != nil {
		l = len(*m.VoucherName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentRules != nil {
		l = m.PaymentRules.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ProductRules != nil {
		l = m.ProductRules.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.VoucherRewardType != nil {
		n += 2 + sovFoodyBase(uint64(*m.VoucherRewardType))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.UpdatedBy != nil {
		l = len(*m.UpdatedBy)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.UsageDurationHrs != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsageDurationHrs))
	}
	if m.UsageStartTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsageStartTime))
	}
	if m.UsageEndTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsageEndTime))
	}
	if m.UsagePerUserLimit != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsagePerUserLimit))
	}
	if m.UsageTotalCount != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsageTotalCount))
	}
	if m.UsageTotalLimit != nil {
		n += 2 + sovFoodyBase(uint64(*m.UsageTotalLimit))
	}
	if m.UsageValidityStatus != nil {
		l = m.UsageValidityStatus.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.UserRules != nil {
		l = m.UserRules.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.VoucherId != nil {
		n += 2 + sovFoodyBase(uint64(*m.VoucherId))
	}
	if m.VoucherCode != nil {
		l = len(*m.VoucherCode)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.VoucherStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.VoucherStatus))
	}
	if m.ServiceType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.VoucherRewardDiscount != nil {
		l = m.VoucherRewardDiscount.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CoFundCampaignId != nil {
		n += 2 + sovFoodyBase(uint64(*m.CoFundCampaignId))
	}
	if m.MerchantSubsidyAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.MerchantSubsidyAmount))
	}
	if m.NonClaimableByCode != nil {
		n += 3
	}
	if m.SuffixLength != nil {
		n += 2 + sovFoodyBase(uint64(*m.SuffixLength))
	}
	if m.VoucherType != nil {
		n += 2 + sovFoodyBase(uint64(*m.VoucherType))
	}
	if m.Source != nil {
		n += 2 + sovFoodyBase(uint64(*m.Source))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherCustomisedLabelList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherCustomisedLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, e := range m.Label {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Color != nil {
		n += 1 + sovFoodyBase(uint64(*m.Color))
	}
	if m.ImageHash != nil {
		l = len(*m.ImageHash)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherTaskFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FileType != nil {
		n += 1 + sovFoodyBase(uint64(*m.FileType))
	}
	if m.Url != nil {
		l = len(*m.Url)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Hash != nil {
		l = len(*m.Hash)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherClaimStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoucherId != nil {
		n += 1 + sovFoodyBase(uint64(*m.VoucherId))
	}
	if m.VoucherCode != nil {
		l = len(*m.VoucherCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Claimed != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.TaskType != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaskType))
	}
	if m.TaskStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaskStatus))
	}
	if m.SuccessCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.SuccessCount))
	}
	if m.FailCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.FailCount))
	}
	if m.ExecuteCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExecuteCount))
	}
	if m.TotalCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalCount))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.UploadTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UploadTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UploadFile != nil {
		l = m.UploadFile.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.ResultFiles) > 0 {
		for _, e := range m.ResultFiles {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.UserAttribute != nil {
		l = m.UserAttribute.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpendCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coins != nil {
		n += 1 + sovFoodyBase(uint64(*m.Coins))
	}
	if m.Discount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Discount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampaignId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignId))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.Discount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Discount))
	}
	if m.CampaignName != nil {
		l = len(*m.CampaignName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EarnCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.Coins != nil {
		n += 1 + sovFoodyBase(uint64(*m.Coins))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Promotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voucher != nil {
		l = m.Voucher.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SpendCoins != nil {
		l = m.SpendCoins.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.OrderDiscounts) > 0 {
		for _, e := range m.OrderDiscounts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.EarnCoins != nil {
		l = m.EarnCoins.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Vouchers) > 0 {
		for _, e := range m.Vouchers {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.FlashSaleOrderItem != nil {
		l = m.FlashSaleOrderItem.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.CampaignName != nil {
		l = len(*m.CampaignName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.PromotionStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionStatus))
	}
	if m.ItemQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemQuantity))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.MaxDiscountPercentage != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaxDiscountPercentage))
	}
	if len(m.ItemDiscounts) > 0 {
		for _, e := range m.ItemDiscounts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.CreatorSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreatorSource))
	}
	if m.MaxDiscountAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.MaxDiscountAmount))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Purpose != nil {
		l = len(*m.Purpose)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.UserTags != nil {
		l = len(*m.UserTags)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AppliedTimes != nil {
		l = m.AppliedTimes.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.DiscountPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPrice))
	}
	if m.LimitPerOrder != nil {
		n += 1 + sovFoodyBase(uint64(*m.LimitPerOrder))
	}
	if m.DiscountStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountStatus))
	}
	if m.CampaignId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CampaignStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignStartTime))
	}
	if m.CampaignEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignEndTime))
	}
	if m.DiscountPercentage != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPercentage))
	}
	if m.GroupId != nil {
		l = len(*m.GroupId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.DiscountAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.DiscountAmount))
	}
	if m.CreatorSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreatorSource))
	}
	if m.Stock != nil {
		n += 2 + sovFoodyBase(uint64(*m.Stock))
	}
	if m.SoldNum != nil {
		n += 2 + sovFoodyBase(uint64(*m.SoldNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ItemDiscountId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ItemDiscountId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.OrderItemId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderItemId))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.Quantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.Quantity))
	}
	if m.ReturnQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnQuantity))
	}
	if m.CancelQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelQuantity))
	}
	if m.SoldStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SoldStatus))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ReturnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionId))
	}
	if m.PromotionName != nil {
		l = len(*m.PromotionName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionToolId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionToolId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.ShowStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShowStatus))
	}
	if m.ExtInfo != nil {
		l = m.ExtInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.PromotionNameInfo != nil {
		l = m.PromotionNameInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionObject_PromotionExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.PromotionImage != nil {
		l = len(*m.PromotionImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Buttons) > 0 {
		for _, e := range m.Buttons {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.ReviewStatus != nil {
		l = len(*m.ReviewStatus)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionObject_PromotionNameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiLangName) > 0 {
		for _, e := range m.MultiLangName {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Button) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ButtonName != nil {
		l = len(*m.ButtonName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransifyKey != nil {
		l = len(*m.TransifyKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RedirectInfo != nil {
		l = m.RedirectInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ButtonType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ButtonType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyInfo != nil {
		l = m.KeyInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ValueInfo != nil {
		l = m.ValueInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AttributeType != nil {
		n += 1 + sovFoodyBase(uint64(*m.AttributeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attribute_KeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransifyKey != nil {
		l = len(*m.TransifyKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Attribute_ValueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransifyKey != nil {
		l = len(*m.TransifyKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedirectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedirectUrl != nil {
		l = len(*m.RedirectUrl)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.ParamPairs) > 0 {
		for _, e := range m.ParamPairs {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RedirectInfo_ParamPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.PromotionToolType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionToolType))
	}
	if m.ExtInfo != nil {
		l = m.ExtInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.WhitelistScope != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhitelistScope))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionTool_PromotionToolExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotionToolNameInfo != nil {
		l = m.PromotionToolNameInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RedirectInfo != nil {
		l = m.RedirectInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DescriptionInfo != nil {
		l = m.DescriptionInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Logo != nil {
		l = len(*m.Logo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotionToolName != nil {
		l = len(*m.PromotionToolName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransifyKey != nil {
		l = len(*m.TransifyKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransifyKey != nil {
		l = len(*m.TransifyKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventPromotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.EventId != nil {
		n += 1 + sovFoodyBase(uint64(*m.EventId))
	}
	if m.EventPromotionNameInfo != nil {
		l = m.EventPromotionNameInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.JoinedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.JoinedTime))
	}
	if m.ShowStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShowStatus))
	}
	if m.StoreSessionStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreSessionStatus))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.ExtInfo != nil {
		l = m.ExtInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.RegisterStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterStartTime))
	}
	if m.RegisterEndTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RegisterEndTime))
	}
	if m.SyncTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SyncTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventPromotion_EventPromotionExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.PromotionImage != nil {
		l = len(*m.PromotionImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Buttons) > 0 {
		for _, e := range m.Buttons {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.ReviewStatus != nil {
		l = len(*m.ReviewStatus)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventPromotion_EventPromotionNameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiLangName) > 0 {
		for _, e := range m.MultiLangName {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != nil {
		n += 1 + sovFoodyBase(uint64(*m.EventId))
	}
	if m.EventNameInfo != nil {
		l = m.EventNameInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PromotionType))
	}
	if m.RegisterStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterStartTime))
	}
	if m.RegisterEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterEndTime))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.EventExtInfo != nil {
		l = m.EventExtInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.WhitelistScope != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhitelistScope))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventObject_EventExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.MainBanner != nil {
		l = len(*m.MainBanner)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionListImage != nil {
		l = len(*m.PromotionListImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.RedirectInfo != nil {
		l = m.RedirectInfo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Buttons) > 0 {
		for _, e := range m.Buttons {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventObject_EventNameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiLangName) > 0 {
		for _, e := range m.MultiLangName {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != nil {
		n += 1 + sovFoodyBase(uint64(*m.EventId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.SyncTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.SyncTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.TipStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.TipStatus))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.TransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionRef))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.PaymentChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentChannelId))
	}
	if m.PaymentChannelOption != nil {
		l = len(*m.PaymentChannelOption)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentLink != nil {
		l = len(*m.PaymentLink)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.InitialTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.PaymentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.DeliveryOrderId != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryOrderId))
	}
	if m.ExpressId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.ServiceType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.OldId != nil {
		n += 2 + sovFoodyBase(uint64(*m.OldId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreChargeback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.ReturnId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.ChargebackStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChargebackStatus))
	}
	if m.ChargebackAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChargebackAmount))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ChargebackMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChargebackMethod))
	}
	if m.TransactionRef != nil {
		l = len(*m.TransactionRef)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.WeekBits != nil {
		n += 1 + sovFoodyBase(uint64(*m.WeekBits))
	}
	if m.IntervalStart != nil {
		n += 1 + sovFoodyBase(uint64(*m.IntervalStart))
	}
	if m.IntervalEnd != nil {
		n += 1 + sovFoodyBase(uint64(*m.IntervalEnd))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialRule_TimeRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeekBits != nil {
		n += 1 + sovFoodyBase(uint64(*m.WeekBits))
	}
	if m.IntervalStart != nil {
		n += 1 + sovFoodyBase(uint64(*m.IntervalStart))
	}
	if m.IntervalEnd != nil {
		n += 1 + sovFoodyBase(uint64(*m.IntervalEnd))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialRule_LocationGroupRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocationGroupIds) > 0 {
		for _, e := range m.LocationGroupIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.LocationGroupDescription != nil {
		l = len(*m.LocationGroupDescription)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialRule_OrderStackRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPickUpPointEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsPickUpPointEnabled))
	}
	if m.IsDropOffPointEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDropOffPointEnabled))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialRule_Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeRule != nil {
		l = m.TimeRule.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.LocationGroupRule != nil {
		l = m.LocationGroupRule.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OrderStackRule != nil {
		l = m.OrderStackRule.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncentivePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.PlanName != nil {
		l = len(*m.PlanName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PlanStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PlanStatus))
	}
	if len(m.CashRules) > 0 {
		for _, e := range m.CashRules {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Requirement != nil {
		l = m.Requirement.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BaseRule != nil {
		l = m.BaseRule.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.SpecialRules) > 0 {
		for _, e := range m.SpecialRules {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.LocationGroupDescription != nil {
		l = len(*m.LocationGroupDescription)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.BaseRules) > 0 {
		for _, e := range m.BaseRules {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Rank != nil {
		n += 2 + sovFoodyBase(uint64(*m.Rank))
	}
	if m.CashConversionRuleId != nil {
		n += 2 + sovFoodyBase(uint64(*m.CashConversionRuleId))
	}
	if m.ValidTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ValidTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncentivePlan_CashRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncentivePlan_Requirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinCompletionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinCompletionRate))
	}
	if m.MinRatingScore != nil {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncentiveTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.PlanId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PlanId))
	}
	if m.TaskDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaskDate))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.CreditStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreditStatus))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.TaskStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaskStatus))
	}
	if m.TaxInclusiveAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaxInclusiveAmount))
	}
	if m.PointSettlementType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PointSettlementType))
	}
	if m.RemainingOrder != nil {
		n += 1 + sovFoodyBase(uint64(*m.RemainingOrder))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CashConversionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.RuleName != nil {
		l = len(*m.RuleName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.CashRules) > 0 {
		for _, e := range m.CashRules {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.IsSelectionEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsSelectionEnabled))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CashConversionRule_CashRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncentiveSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.SettlementDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementDate))
	}
	if m.SettlementStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementStatus))
	}
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.TaxInclusiveAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaxInclusiveAmount))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.CreditStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreditStatus))
	}
	if m.CashConversionRuleId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CashConversionRuleId))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.VoucherId != nil {
		n += 1 + sovFoodyBase(uint64(*m.VoucherId))
	}
	if m.VoucherCode != nil {
		l = len(*m.VoucherCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Signature != nil {
		l = len(*m.Signature)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ReferenceId != nil {
		l = len(*m.ReferenceId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TccTransactionId != nil {
		l = len(*m.TccTransactionId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.Data != nil {
		l = len(*m.Data)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.ReturnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.AntiFraud != nil {
		l = len(*m.AntiFraud)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AntiFraud) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceFingerprint != nil {
		l = len(*m.DeviceFingerprint)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TongdunBlackbox != nil {
		l = len(*m.TongdunBlackbox)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SecurityDf != nil {
		l = len(*m.SecurityDf)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AppVersionName != nil {
		l = len(*m.AppVersionName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UserAgentType != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserAgentType))
	}
	if m.AppType != nil {
		n += 1 + sovFoodyBase(uint64(*m.AppType))
	}
	if m.RnVersion != nil {
		l = len(*m.RnVersion)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverWalletPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.PaymentType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentType))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.PaymentStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentStatus))
	}
	if m.ReferenceId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.InitTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.RevokeTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RevokeTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverWalletRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.Balance != nil {
		n += 1 + sovFoodyBase(uint64(*m.Balance))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransactionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionType))
	}
	if m.IsRevoked != nil {
		n += 2
	}
	if m.TransactionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionId))
	}
	if m.Tag != nil {
		n += 1 + sovFoodyBase(uint64(*m.Tag))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Extend != nil {
		l = len(*m.Extend)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.AmountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.AmountType))
	}
	if m.BalanceVersion != nil {
		n += 1 + sovFoodyBase(uint64(*m.BalanceVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Penalty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.PenaltyCategory != nil {
		n += 1 + sovFoodyBase(uint64(*m.PenaltyCategory))
	}
	if m.PenaltySource != nil {
		n += 1 + sovFoodyBase(uint64(*m.PenaltySource))
	}
	if m.SuspensionType != nil {
		n += 1 + sovFoodyBase(uint64(*m.SuspensionType))
	}
	if m.SuspensionSeconds != nil {
		n += 1 + sovFoodyBase(uint64(*m.SuspensionSeconds))
	}
	if m.FineType != nil {
		n += 1 + sovFoodyBase(uint64(*m.FineType))
	}
	if m.FineAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.FineAmount))
	}
	if m.FinePaymentId != nil {
		n += 1 + sovFoodyBase(uint64(*m.FinePaymentId))
	}
	if m.Points != nil {
		n += 1 + sovFoodyBase(uint64(*m.Points))
	}
	if m.PointsResetSeconds != nil {
		n += 1 + sovFoodyBase(uint64(*m.PointsResetSeconds))
	}
	if m.PointsResetTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.PointsResetTime))
	}
	if m.CurrentPoints != nil {
		n += 1 + sovFoodyBase(uint64(*m.CurrentPoints))
	}
	if m.PenaltyStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenaltyStatus))
	}
	if m.InitialTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.PenalizeTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenalizeTime))
	}
	if m.PenalizeFailTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenalizeFailTime))
	}
	if m.RevokeTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RevokeTime))
	}
	if m.RevokeReason != nil {
		l = len(*m.RevokeReason)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.ParentIds) > 0 {
		for _, e := range m.ParentIds {
			n += 2 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.ViolationIds) > 0 {
		for _, e := range m.ViolationIds {
			n += 2 + sovFoodyBase(uint64(e))
		}
	}
	if m.DeliveryOrderId != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryOrderId))
	}
	if m.RuleGroup != nil {
		l = len(*m.RuleGroup)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.EstimateExecuteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateExecuteTime))
	}
	if m.EventTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EventTime))
	}
	if m.ViolationId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ViolationId))
	}
	if m.ServiceType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.ExpressId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Violation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.DeliveryOrderId != nil {
		l = len(*m.DeliveryOrderId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.EventDescription != nil {
		l = len(*m.EventDescription)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.EventTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EventTime))
	}
	if m.RuleCode != nil {
		l = len(*m.RuleCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RuleDescription != nil {
		l = len(*m.RuleDescription)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RuleName != nil {
		l = len(*m.RuleName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RuleGroup != nil {
		l = len(*m.RuleGroup)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RuleGroupDescription != nil {
		l = len(*m.RuleGroupDescription)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ViolationStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ViolationStatus))
	}
	if m.InitialTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.NoNeedPenalizeTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.NoNeedPenalizeTime))
	}
	if m.PenalizingTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenalizingTime))
	}
	if m.PenalizeTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenalizeTime))
	}
	if m.PenalizeFailTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PenalizeFailTime))
	}
	if m.RevokeTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RevokeTime))
	}
	if m.ViolationSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.ViolationSource))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreatorShift != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreatorShift))
	}
	if m.CustomizedFineAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.CustomizedFineAmount))
	}
	if m.ShippingFeeFineAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShippingFeeFineAmount))
	}
	if m.IncentiveBonusFineEnable != nil {
		n += 2 + sovFoodyBase(uint64(*m.IncentiveBonusFineEnable))
	}
	if m.RevokeReason != nil {
		l = len(*m.RevokeReason)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.RevokeOperator != nil {
		l = len(*m.RevokeOperator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ServiceType != nil {
		n += 2 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.ExpressId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Quality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.Point != nil {
		n += 1 + sovFoodyBase(uint64(*m.Point))
	}
	if m.RestrictWithdrawEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RestrictWithdrawEndTime))
	}
	if m.RestrictCheckinEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RestrictCheckinEndTime))
	}
	if m.TerminateEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.TerminateEnabled))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.MerchantConfirmTimeout != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantConfirmTimeout))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.Switch != nil {
		n += 1 + sovFoodyBase(uint64(*m.Switch))
	}
	if m.ChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ChannelId))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Area) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.AreaName != nil {
		l = len(*m.AreaName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AreaStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.AreaStatus))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceTypeFlag != nil {
		l = m.ServiceTypeFlag.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.HiddenTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.HiddenTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Area_ServiceTypeFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FoodEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.FoodEnabled))
	}
	if m.SpxInstantShopeeEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpxInstantShopeeEnabled))
	}
	if m.SpxInstantEnabled != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpxInstantEnabled))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *District) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DistrictName != nil {
		l = len(*m.DistrictName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CityId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CityId))
	}
	if m.CityName != nil {
		l = len(*m.CityName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StateName != nil {
		l = len(*m.StateName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AreaId != nil {
		n += 1 + sovFoodyBase(uint64(*m.AreaId))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ServiceTypeFlag != nil {
		l = m.ServiceTypeFlag.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovFoodyBase(uint64(*m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.GroupName != nil {
		l = len(*m.GroupName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AreaId != nil {
		n += 1 + sovFoodyBase(uint64(*m.AreaId))
	}
	if m.IsDefault != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDefault))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.HiddenTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.HiddenTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DistrictLocationGroupBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistrictId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistrictId))
	}
	if m.LocationGroupId != nil {
		n += 1 + sovFoodyBase(uint64(*m.LocationGroupId))
	}
	if m.IsDefault != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDefault))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Module != nil {
		n += 1 + sovFoodyBase(uint64(*m.Module))
	}
	if m.Priority != nil {
		n += 1 + sovFoodyBase(uint64(*m.Priority))
	}
	if m.AreaId != nil {
		n += 1 + sovFoodyBase(uint64(*m.AreaId))
	}
	if m.AreaName != nil {
		l = len(*m.AreaName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DistrictId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DistrictId))
	}
	if m.DistrictName != nil {
		l = len(*m.DistrictName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Parameter != nil {
		l = m.Parameter.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_Parameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderFlow != nil {
		l = m.OrderFlow.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DriverFiltering != nil {
		l = m.DriverFiltering.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.MatchAssessment != nil {
		l = m.MatchAssessment.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Eta != nil {
		l = m.Eta.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ShippingFee != nil {
		l = m.ShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BuyerShippingFee != nil {
		l = m.BuyerShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DriverShippingFee != nil {
		l = m.DriverShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceFee != nil {
		l = m.ServiceFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DffSetting != nil {
		l = m.DffSetting.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.InsuranceFee != nil {
		l = m.InsuranceFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.InstantShopeeShippingFee != nil {
		l = m.InstantShopeeShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.InstantDeliveryShippingFee != nil {
		l = m.InstantDeliveryShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.SmallOrderFee != nil {
		l = m.SmallOrderFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.NonPartnerFee != nil {
		l = m.NonPartnerFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.WorkingHours != nil {
		l = m.WorkingHours.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_OrderFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinCompletionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinCompletionRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_DriverFiltering) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxMerchantDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaxMerchantDistance))
	}
	if m.MinBalance != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinBalance))
	}
	if m.MaxAllowedNegativeBalance != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaxAllowedNegativeBalance))
	}
	if m.AssignSameBuyerInterval != nil {
		n += 1 + sovFoodyBase(uint64(*m.AssignSameBuyerInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_MatchAssessment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantDistanceWeight != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantDistanceWeight))
	}
	if m.AutoAcceptanceWeight != nil {
		n += 1 + sovFoodyBase(uint64(*m.AutoAcceptanceWeight))
	}
	if m.CompletionRateWeight != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompletionRateWeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ETA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckoutPage != nil {
		l = m.CheckoutPage.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreListing != nil {
		l = m.StoreListing.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ETA_Base) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.FixedTime))
	}
	if m.DriverSpeed != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverSpeed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinShippingFee))
	}
	if m.Fare != nil {
		n += 1 + sovFoodyBase(uint64(*m.Fare))
	}
	if m.CommissionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ShippingFeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TierStart != nil {
		n += 1 + sovFoodyBase(uint64(*m.TierStart))
	}
	if m.TierEnd != nil {
		n += 1 + sovFoodyBase(uint64(*m.TierEnd))
	}
	if m.FixedFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.FixedFee))
	}
	if m.Fare != nil {
		n += 1 + sovFoodyBase(uint64(*m.Fare))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_BaseShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinShippingFee))
	}
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_BuyerShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartnerShippingFee != nil {
		l = m.PartnerShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.NonPartnerShippingFee != nil {
		l = m.NonPartnerShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_DriverShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShippingFee != nil {
		l = m.ShippingFee.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CommissionRate != nil {
		n += 1 + sovFoodyBase(uint64(*m.CommissionRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ServiceFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NormalIntervals) > 0 {
		for _, e := range m.NormalIntervals {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.ListedIntervals) > 0 {
		for _, e := range m.ListedIntervals {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.ValidTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ValidTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_ServiceFeeInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommissionRangEnd != nil {
		n += 5
	}
	if m.ServiceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_InsuranceTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.InsurancePremium != nil {
		n += 1 + sovFoodyBase(uint64(*m.InsurancePremium))
	}
	if m.SumAssured != nil {
		n += 1 + sovFoodyBase(uint64(*m.SumAssured))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_InsuranceFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_DFFSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		n += 1 + sovFoodyBase(uint64(*m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_InstantShopeeShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.BaseShippingFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_InstantDeliveryShippingFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.BaseShippingFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_SmallOrderFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinSpend != nil {
		n += 1 + sovFoodyBase(uint64(*m.MinSpend))
	}
	if m.SmallOrderFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.SmallOrderFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_NonPartnerFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonPartnerFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.NonPartnerFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AlgoParameterConfig_WorkingHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContentRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PartnerTypes) > 0 {
		for _, e := range m.PartnerTypes {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.RatingScoreMin != nil {
		n += 5
	}
	if m.RatingScoreMax != nil {
		n += 5
	}
	if len(m.StoreTags) > 0 {
		for _, e := range m.StoreTags {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if len(m.StoreCategories) > 0 {
		for _, e := range m.StoreCategories {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.StoreTagsLogic != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreTagsLogic))
	}
	if m.StoreCategoriesLogic != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreCategoriesLogic))
	}
	if len(m.DishTags) > 0 {
		for _, e := range m.DishTags {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.DishTagsLogic != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishTagsLogic))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Overlay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.LogoImage != nil {
		l = len(*m.LogoImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BannerImage != nil {
		l = len(*m.BannerImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Priority != nil {
		n += 1 + sovFoodyBase(uint64(*m.Priority))
	}
	if len(m.StoreTagIds) > 0 {
		for _, e := range m.StoreTagIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.TagsLogic != nil {
		n += 1 + sovFoodyBase(uint64(*m.TagsLogic))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.EffectiveTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EffectiveTime))
	}
	if m.ExpireTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpireTime))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ShowStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShowStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerchantWalletAdjustmentOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.AdjustmentStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.AdjustmentStatus))
	}
	if m.SettlementDetailId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementDetailId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.WalletType != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletType))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.AmountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.AmountType))
	}
	if m.InitialTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.ApprovedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ApprovedTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.FailedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.FailedTime))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Auditor != nil {
		l = len(*m.Auditor)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AuditResult != nil {
		n += 2 + sovFoodyBase(uint64(*m.AuditResult))
	}
	if m.RejectReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.RejectReason))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.ReferenceId != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReferenceId))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.AuditRemark != nil {
		l = len(*m.AuditRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletSettlementOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SettlementStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementStatus))
	}
	if m.WalletType != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletType))
	}
	if m.WalletWithdrawOrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletWithdrawOrderId))
	}
	if m.WalletTxnId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletTxnId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.ClosingDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.ClosingDate))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.InitialTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitialTime))
	}
	if m.ProcessingTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ProcessingTime))
	}
	if m.CompletedTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompletedTime))
	}
	if m.FailedTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.FailedTime))
	}
	if m.LastErrorCode != nil {
		n += 2 + sovFoodyBase(uint64(*m.LastErrorCode))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreShardList != nil {
		l = m.StoreShardList.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletSettlementOrder_Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.FeeAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.FeeAmount))
	}
	if m.WhtAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.WhtAmount))
	}
	if m.PreDeductionAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.PreDeductionAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletSettlementOrder_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSettlementCombined != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletSettlementOrder_StoreShardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shard) > 0 {
		for _, e := range m.Shard {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerchantWalletWithdrawOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.WithdrawStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.WithdrawStatus))
	}
	if m.WalletType != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletType))
	}
	if m.WalletTxnId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletTxnId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.Amount != nil {
		n += 1 + sovFoodyBase(uint64(*m.Amount))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.ActualPayoutAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ActualPayoutAmount))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.ProcessingTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ProcessingTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CompletedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompletedTime))
	}
	if m.FailedTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.FailedTime))
	}
	if m.LastErrorCode != nil {
		n += 2 + sovFoodyBase(uint64(*m.LastErrorCode))
	}
	if m.PayoutMode != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutMode))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankId))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountName != nil {
		l = len(*m.BankAccountName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.TransactionRef != nil {
		l = len(*m.TransactionRef)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.WalletTxnSn != nil {
		l = len(*m.WalletTxnSn)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.ExpressStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpressStatus))
	}
	if m.CollectFrom != nil {
		n += 1 + sovFoodyBase(uint64(*m.CollectFrom))
	}
	if m.CollectAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.CollectAmount))
	}
	if m.PayTo != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayTo))
	}
	if m.PayAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayAmount))
	}
	if m.DepositAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.DepositAmount))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Flag != nil {
		n += 1 + sovFoodyBase(uint64(*m.Flag))
	}
	if m.CancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelProposer != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelProposer))
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if len(m.CancelCerts) > 0 {
		for _, e := range m.CancelCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelRemark != nil {
		l = len(*m.CancelRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.AssignTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.AssignTime))
	}
	if m.ArriveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ArriveTime))
	}
	if m.PickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PickupTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.ReturnTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.EstimatePickupDuration != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimatePickupDuration))
	}
	if m.EstimateDeliveryDuration != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateDeliveryDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressDelivery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.PackageId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PackageId))
	}
	if m.ExpressId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.DeliveryStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryStatus))
	}
	if m.PickupName != nil {
		l = len(*m.PickupName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.PickupCerts) > 0 {
		for _, e := range m.PickupCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.PickupRemark != nil {
		l = len(*m.PickupRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryName != nil {
		l = len(*m.DeliveryName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryType))
	}
	if len(m.DeliveryCerts) > 0 {
		for _, e := range m.DeliveryCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.DeliveryRemark != nil {
		l = len(*m.DeliveryRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryReason))
	}
	if m.ReturnName != nil {
		l = len(*m.ReturnName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.ReturnCerts) > 0 {
		for _, e := range m.ReturnCerts {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.ReturnRemark != nil {
		l = len(*m.ReturnRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.ReturnReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnReason))
	}
	if m.ShippingSurgeFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShippingSurgeFee))
	}
	if m.ShippingIncome != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShippingIncome))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.OnholdFlag != nil {
		n += 2 + sovFoodyBase(uint64(*m.OnholdFlag))
	}
	if m.CancelProposer != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelProposer))
	}
	if m.CancelSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.ArriveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ArriveTime))
	}
	if m.PickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PickupTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.ReturnDeadline != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnDeadline))
	}
	if m.ReturnTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.GeoTracking != nil {
		l = m.GeoTracking.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressDelivery_GeoTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArriveGeo != nil {
		l = m.ArriveGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PickupGeo != nil {
		l = m.PickupGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CompleteGeo != nil {
		l = m.CompleteGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.AcceptGeo != nil {
		l = m.AcceptGeo.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ExpressId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.Category != nil {
		n += 1 + sovFoodyBase(uint64(*m.Category))
	}
	if m.PackageStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PackageStatus))
	}
	if m.PickupAddress != nil {
		l = m.PickupAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryAddress != nil {
		l = m.DeliveryAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.Weight != nil {
		n += 1 + sovFoodyBase(uint64(*m.Weight))
	}
	if m.Length != nil {
		n += 1 + sovFoodyBase(uint64(*m.Length))
	}
	if m.Width != nil {
		n += 1 + sovFoodyBase(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovFoodyBase(uint64(*m.Height))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.ReturnTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ExpressId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.AssignmentStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.AssignmentStatus))
	}
	if m.PaymentId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentId))
	}
	if m.DepositAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.DepositAmount))
	}
	if m.DepositStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DepositStatus))
	}
	if m.CancelSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if len(m.CancelCerts) > 0 {
		for _, e := range m.CancelCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelRemark != nil {
		l = len(*m.CancelRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.AssignTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.AssignTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.EstimatePickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimatePickupTime))
	}
	if m.CancelProposer != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelProposer))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressDeliveryPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Package != nil {
		l = m.Package.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Delivery != nil {
		l = m.Delivery.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpressAuditOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DeliveryId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryId))
	}
	if m.ExpressId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ExpressId))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.AuditType != nil {
		n += 1 + sovFoodyBase(uint64(*m.AuditType))
	}
	if m.OrderStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderStatus))
	}
	if m.Source != nil {
		n += 1 + sovFoodyBase(uint64(*m.Source))
	}
	if m.Reason != nil {
		n += 1 + sovFoodyBase(uint64(*m.Reason))
	}
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Proposer != nil {
		n += 1 + sovFoodyBase(uint64(*m.Proposer))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.AuditCerts) > 0 {
		for _, e := range m.AuditCerts {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.AuditRemark != nil {
		l = len(*m.AuditRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Auditor != nil {
		l = len(*m.Auditor)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.CancelSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.ApproveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ApproveTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Express) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if len(m.DeliveryPackages) > 0 {
		for _, e := range m.DeliveryPackages {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXOrderContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.ReferenceId != nil {
		l = len(*m.ReferenceId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OrderSource != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderSource))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PlatformServiceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.PlatformServiceFee))
	}
	if m.ShippingBaseFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingBaseFee))
	}
	if m.ShippingFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFee))
	}
	if m.InsuranceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.InsuranceFee))
	}
	if m.InsuranceAssuredAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.InsuranceAssuredAmount))
	}
	if m.ShippingVoucherAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingVoucherAmount))
	}
	if m.CoinsAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.CoinsAmount))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.TotalAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalAmount))
	}
	if m.OrderStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.OrderStatus))
	}
	if m.CancelSource != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelSource))
	}
	if m.CancelReason != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelReason))
	}
	if m.CancelProposer != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelProposer))
	}
	if m.OrderShowStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.OrderShowStatus))
	}
	if m.Flag != nil {
		n += 2 + sovFoodyBase(uint64(*m.Flag))
	}
	if len(m.CancelCerts) > 0 {
		for _, e := range m.CancelCerts {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.CancelRemark != nil {
		l = len(*m.CancelRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.PlaceTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PlaceTime))
	}
	if m.ApproveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ApproveTime))
	}
	if m.PaymentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.OnDeliveringTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.OnDeliveringTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.DeliveryCompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryCompleteTime))
	}
	if m.DeliveryReturnTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.DeliveryReturnTime))
	}
	if m.CancelTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.RatingCompletedTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.RatingCompletedTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.EstimatePickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimatePickupTime))
	}
	if m.EstimateDeliveryTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.EstimateDeliveryTime))
	}
	if m.ShippingFareExtraFee != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShippingFareExtraFee))
	}
	if m.ShippingFareDiscountAmount != nil {
		n += 2 + sovFoodyBase(uint64(*m.ShippingFareDiscountAmount))
	}
	if m.IsScheduleOrder != nil {
		n += 3
	}
	if m.SchedulePickupTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.SchedulePickupTime))
	}
	if m.StartAssignmentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.StartAssignmentTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.Category != nil {
		n += 1 + sovFoodyBase(uint64(*m.Category))
	}
	if m.DeliveryDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.InsuranceFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.InsuranceFee))
	}
	if m.InsuranceAssuredAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.InsuranceAssuredAmount))
	}
	if m.PickupAddress != nil {
		l = m.PickupAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryAddress != nil {
		l = m.DeliveryAddress.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Weight != nil {
		n += 1 + sovFoodyBase(uint64(*m.Weight))
	}
	if m.Length != nil {
		n += 1 + sovFoodyBase(uint64(*m.Length))
	}
	if m.Width != nil {
		n += 1 + sovFoodyBase(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovFoodyBase(uint64(*m.Height))
	}
	if m.Remark != nil {
		l = len(*m.Remark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.CategoryName != nil {
		l = len(*m.CategoryName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.InsuranceName != nil {
		l = len(*m.InsuranceName)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Packages) > 0 {
		for _, e := range m.Packages {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXOrder_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReturned != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsReturned))
	}
	if m.IsRefunded != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsRefunded))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.TransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.TransactionRef))
	}
	if m.PaymentLink != nil {
		l = len(*m.PaymentLink)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentMethod))
	}
	if m.PaymentChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentChannelId))
	}
	if m.PaymentChannelOption != nil {
		l = len(*m.PaymentChannelOption)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TotalAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalAmount))
	}
	if m.Currency != nil {
		l = len(*m.Currency)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Region != nil {
		l = len(*m.Region)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PaymentStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentStatus))
	}
	if m.PaymentType != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentType))
	}
	if m.InitiationTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.InitiationTime))
	}
	if m.PaymentTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.PaymentTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXReturnOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.ReturnType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnType))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.Responsibility != nil {
		n += 1 + sovFoodyBase(uint64(*m.Responsibility))
	}
	if m.RefundType != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundType))
	}
	if m.RefundAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundAmount))
	}
	if m.ReturnStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnStatus))
	}
	if m.ReturnReason != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnReason))
	}
	if m.StoreChargebackAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreChargebackAmount))
	}
	if m.Proposer != nil {
		n += 1 + sovFoodyBase(uint64(*m.Proposer))
	}
	if m.ReturnRemark != nil {
		l = len(*m.ReturnRemark)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Creator != nil {
		l = len(*m.Creator)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.OfflineRefundMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.OfflineRefundMethod))
	}
	if m.StoreChargebackType != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreChargebackType))
	}
	if m.StoreChargebackMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.StoreChargebackMethod))
	}
	if m.ApproveTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.ApproveTime))
	}
	if m.CompleteTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXRefund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.ReturnId != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.CheckoutId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CheckoutId))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.RefundMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundMethod))
	}
	if m.PaymentTransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentTransactionRef))
	}
	if m.RefundTransactionRef != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundTransactionRef))
	}
	if m.OfflineRefundTransactionRef != nil {
		l = len(*m.OfflineRefundTransactionRef)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RefundAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundAmount))
	}
	if m.RefundStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundStatus))
	}
	if m.RefundMode != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundMode))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.RefundTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RefundTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.RefundCoins != nil {
		n += 2 + sovFoodyBase(uint64(*m.RefundCoins))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXVoucherRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.VoucherId != nil {
		n += 1 + sovFoodyBase(uint64(*m.VoucherId))
	}
	if m.VoucherCode != nil {
		l = len(*m.VoucherCode)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TransactionId != nil {
		l = len(*m.TransactionId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.VoucherData != nil {
		l = len(*m.VoucherData)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UseStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.UseStatus))
	}
	if m.ReturnStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnStatus))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.ReturnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.AntiFraud != nil {
		l = len(*m.AntiFraud)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SPXCoinRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.UserId != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserId))
	}
	if m.TransactionId != nil {
		l = len(*m.TransactionId)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ServiceType != nil {
		n += 1 + sovFoodyBase(uint64(*m.ServiceType))
	}
	if m.SpendAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpendAmount))
	}
	if m.SpendStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpendStatus))
	}
	if m.SpendTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.SpendTime))
	}
	if m.EarnTotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.EarnTotal))
	}
	if m.EarnOrderAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.EarnOrderAmount))
	}
	if m.EarnVoucherAmount != nil {
		n += 1 + sovFoodyBase(uint64(*m.EarnVoucherAmount))
	}
	if m.EarnStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.EarnStatus))
	}
	if m.EarnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EarnTime))
	}
	if m.ReturnStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnStatus))
	}
	if m.ReturnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.CampaignName != nil {
		l = len(*m.CampaignName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.AreaIds) > 0 {
		for _, e := range m.AreaIds {
			n += 1 + sovFoodyBase(uint64(e))
		}
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleAreaTimeslotBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.AreaId != nil {
		n += 1 + sovFoodyBase(uint64(*m.AreaId))
	}
	if m.TimeslotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeslotId))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleTimeslot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.CampaignId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignId))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.Banner != nil {
		l = len(*m.Banner)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleCampaignContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalshSaleCampaign != nil {
		l = m.FalshSaleCampaign.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Timeslots) > 0 {
		for _, e := range m.Timeslots {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.TimeslotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeslotId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.StoreName != nil {
		l = len(*m.StoreName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DishNum != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishNum))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleDishDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.TimeslotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeslotId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.DishName != nil {
		l = len(*m.DishName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.FlashSaleDishName != nil {
		l = len(*m.FlashSaleDishName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Stock != nil {
		n += 1 + sovFoodyBase(uint64(*m.Stock))
	}
	if m.SoldNum != nil {
		n += 1 + sovFoodyBase(uint64(*m.SoldNum))
	}
	if m.LimitPerUser != nil {
		n += 1 + sovFoodyBase(uint64(*m.LimitPerUser))
	}
	if m.DiscountPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPrice))
	}
	if m.DiscountStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountStatus))
	}
	if m.DiscountType != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountType))
	}
	if m.DiscountPercentage != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPercentage))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleDishSoldRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.DiscountId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountId))
	}
	if m.TimeslotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeslotId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.DiscountPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPrice))
	}
	if m.SoldStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.SoldStatus))
	}
	if m.Quantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.Quantity))
	}
	if m.ReturnQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnQuantity))
	}
	if m.CancelQuantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelQuantity))
	}
	if m.ReturnTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReturnTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleDish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dish != nil {
		l = m.Dish.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Discount != nil {
		l = m.Discount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleCartItemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLimit != nil {
		n += 1 + sovFoodyBase(uint64(*m.UserLimit))
	}
	if m.Discount != nil {
		l = m.Discount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Timeslot != nil {
		l = m.Timeslot.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleOrderItemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscountId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountId))
	}
	if m.TimeslotId != nil {
		n += 1 + sovFoodyBase(uint64(*m.TimeslotId))
	}
	if m.DishId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishId))
	}
	if m.DishPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.DishPrice))
	}
	if m.DiscountPrice != nil {
		n += 1 + sovFoodyBase(uint64(*m.DiscountPrice))
	}
	if m.Quantity != nil {
		n += 1 + sovFoodyBase(uint64(*m.Quantity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleOrderItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyerId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BuyerId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if len(m.FlashSaleDishDetail) > 0 {
		for _, e := range m.FlashSaleDishDetail {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlashSaleDishDiscountTimeslot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Discount != nil {
		l = m.Discount.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.CampaignId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignId))
	}
	if m.Timezone != nil {
		l = len(*m.Timezone)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverDeliveryOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.DriverId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverId))
	}
	if m.DriverDeliveryOrderStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.DriverDeliveryOrderStatus))
	}
	if m.ShippingFeeTotal != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingFeeTotal))
	}
	if m.ShippingFeeItems != nil {
		l = m.ShippingFeeItems.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.DeliveryDistance != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryDistance))
	}
	if m.TotalNum != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalNum))
	}
	if m.CompletedNum != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompletedNum))
	}
	if m.CanceledNum != nil {
		n += 1 + sovFoodyBase(uint64(*m.CanceledNum))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.AssignTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.AssignTime))
	}
	if m.CompleteTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CompleteTime))
	}
	if m.CancelTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CancelTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverDeliveryOrder_ShippingFeeItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShippingSurgeFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingSurgeFee))
	}
	if m.ShippingBaseFee != nil {
		n += 1 + sovFoodyBase(uint64(*m.ShippingBaseFee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DriverDeliveryOrder_Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationType != nil {
		n += 1 + sovFoodyBase(uint64(*m.LocationType))
	}
	if m.DeliveryOrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.DeliveryOrderId))
	}
	if m.OrderId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OrderId))
	}
	if m.Latitude != nil {
		n += 5
	}
	if m.Longitude != nil {
		n += 5
	}
	if m.Distance != nil {
		n += 1 + sovFoodyBase(uint64(*m.Distance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreSettlementMart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.IsUseWallet != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseWallet))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranch != nil {
		l = len(*m.BankBranch)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountName != nil {
		l = len(*m.BankAccountName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.SettlementMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementMethod))
	}
	if m.PaymentWay != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentWay))
	}
	if m.Vat != nil {
		n += 1 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.Wht != nil {
		n += 1 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.SettleTo != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettleTo))
	}
	if m.BankChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BankChannelId))
	}
	if m.PayoutMethod != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutMethod))
	}
	if m.CrossMonthSettlement != nil {
		n += 2 + sovFoodyBase(uint64(*m.CrossMonthSettlement))
	}
	if m.PayoutAccountId != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutAccountId))
	}
	if m.AutoPayoutRemark != nil {
		l = len(*m.AutoPayoutRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SettlementEmails != nil {
		l = len(*m.SettlementEmails)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranchId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankBranchId))
	}
	if m.WalletRelationStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletRelationStatus))
	}
	if m.SettlementConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementConfigStatus))
	}
	if m.ProductConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ProductConfigStatus))
	}
	if m.BankAccountStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankAccountStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MerchantSettlementMart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.IsUseWallet != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsUseWallet))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountNo != nil {
		l = len(*m.BankAccountNo)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranch != nil {
		l = len(*m.BankBranch)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BankAccountName != nil {
		l = len(*m.BankAccountName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.WalletId != nil {
		n += 1 + sovFoodyBase(uint64(*m.WalletId))
	}
	if m.SettlementMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.SettlementMethod))
	}
	if m.PaymentWay != nil {
		n += 1 + sovFoodyBase(uint64(*m.PaymentWay))
	}
	if m.Vat != nil {
		n += 1 + sovFoodyBase(uint64(*m.Vat))
	}
	if m.Wht != nil {
		n += 1 + sovFoodyBase(uint64(*m.Wht))
	}
	if m.BankChannelId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BankChannelId))
	}
	if m.PayoutMethod != nil {
		n += 1 + sovFoodyBase(uint64(*m.PayoutMethod))
	}
	if m.CrossMonthSettlement != nil {
		n += 2 + sovFoodyBase(uint64(*m.CrossMonthSettlement))
	}
	if m.PayoutAccountId != nil {
		n += 2 + sovFoodyBase(uint64(*m.PayoutAccountId))
	}
	if m.AutoPayoutRemark != nil {
		l = len(*m.AutoPayoutRemark)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.SettlementEmails != nil {
		l = len(*m.SettlementEmails)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BankBranchId != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankBranchId))
	}
	if m.WalletRelationStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.WalletRelationStatus))
	}
	if m.SettlementConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.SettlementConfigStatus))
	}
	if m.ProductConfigStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.ProductConfigStatus))
	}
	if m.BankAccountStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.BankAccountStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountCampaignEnableTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountCampaignEnableDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.StartDate))
	}
	if m.EndDate != nil {
		n += 1 + sovFoodyBase(uint64(*m.EndDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountCampaignApplyDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowDate != nil {
		l = m.AllowDate.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.AllowTimes) > 0 {
		for _, e := range m.AllowTimes {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemDiscountCampaignAppliedTimes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApplyDates) > 0 {
		for _, e := range m.ApplyDates {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionMaterialTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.ChildIds != nil {
		l = len(*m.ChildIds)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TemplateValue != nil {
		l = len(*m.TemplateValue)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.BizType != nil {
		n += 1 + sovFoodyBase(uint64(*m.BizType))
	}
	if m.BizId != nil {
		n += 1 + sovFoodyBase(uint64(*m.BizId))
	}
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.IsDeleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDeleted))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionMerchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.TermsStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.TermsStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.MaterialType != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaterialType))
	}
	if m.MaterialId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaterialId))
	}
	if m.OptionalId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OptionalId))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Source != nil {
		n += 1 + sovFoodyBase(uint64(*m.Source))
	}
	if m.BindStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.BindStatus))
	}
	if m.IsDeleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDeleted))
	}
	if m.RegisterTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterTime))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionMerchantExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecruitmentSessionMerchant != nil {
		l = m.RecruitmentSessionMerchant.Size()
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.OptionalId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OptionalId))
	}
	if m.OptionalName != nil {
		l = len(*m.OptionalName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.StoreTagId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreTagId))
	}
	if m.TerminateReason != nil {
		l = len(*m.TerminateReason)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.WhyJoin != nil {
		l = len(*m.WhyJoin)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Faqs) > 0 {
		for _, e := range m.Faqs {
			l = e.Size()
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionPage_QuestionAndAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Question != nil {
		l = len(*m.Question)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Answer != nil {
		l = len(*m.Answer)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovFoodyBase(uint64(*m.Type))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.IsDeleted != nil {
		n += 1 + sovFoodyBase(uint64(*m.IsDeleted))
	}
	if m.RegisterStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterStartTime))
	}
	if m.RegisterEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterEndTime))
	}
	if m.RunningStartTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RunningStartTime))
	}
	if m.RunningEndTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.RunningEndTime))
	}
	if m.UniqueKey != nil {
		l = len(*m.UniqueKey)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.MainBanner != nil {
		l = len(*m.MainBanner)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.PromotionListImage != nil {
		l = len(*m.PromotionListImage)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Labels != nil {
		l = len(*m.Labels)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 2 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Templates) > 0 {
		for _, e := range m.Templates {
			l = e.Size()
			n += 2 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.InvitedStoreFile_Url != nil {
		l = len(*m.InvitedStoreFile_Url)
		n += 2 + l + sovFoodyBase(uint64(l))
	}
	if m.BandStatus != nil {
		n += 2 + sovFoodyBase(uint64(*m.BandStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoucherPackageTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if len(m.Benefits) > 0 {
		for _, s := range m.Benefits {
			l = len(s)
			n += 1 + l + sovFoodyBase(uint64(l))
		}
	}
	if m.StoreTagId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreTagId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.TaskName != nil {
		l = len(*m.TaskName)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.TaskType != nil {
		n += 1 + sovFoodyBase(uint64(*m.TaskType))
	}
	if m.Status != nil {
		n += 1 + sovFoodyBase(uint64(*m.Status))
	}
	if m.UploadFileUrl != nil {
		l = len(*m.UploadFileUrl)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ErrorFileUrl != nil {
		l = len(*m.ErrorFileUrl)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionPromotionSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.CampaignId != nil {
		n += 1 + sovFoodyBase(uint64(*m.CampaignId))
	}
	if m.Dt != nil {
		l = len(*m.Dt)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.UsedVoucherOrders != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsedVoucherOrders))
	}
	if m.TotalVoucherOrdersRevenue != nil {
		n += 1 + sovFoodyBase(uint64(*m.TotalVoucherOrdersRevenue))
	}
	if m.AllOrders != nil {
		n += 1 + sovFoodyBase(uint64(*m.AllOrders))
	}
	if m.NewCustomers != nil {
		n += 1 + sovFoodyBase(uint64(*m.NewCustomers))
	}
	if m.Subsidy != nil {
		n += 1 + sovFoodyBase(uint64(*m.Subsidy))
	}
	if m.UsedVoucherDishes != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsedVoucherDishes))
	}
	if m.UsedVoucherCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.UsedVoucherCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentVoucherPackageRegisterCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.OptionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.OptionId))
	}
	if m.RegisterCount != nil {
		n += 1 + sovFoodyBase(uint64(*m.RegisterCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecruitmentSessionReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFoodyBase(uint64(*m.Id))
	}
	if m.SessionId != nil {
		n += 1 + sovFoodyBase(uint64(*m.SessionId))
	}
	if m.MerchantId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MerchantId))
	}
	if m.StoreId != nil {
		n += 1 + sovFoodyBase(uint64(*m.StoreId))
	}
	if m.MaterialTemplateId != nil {
		n += 1 + sovFoodyBase(uint64(*m.MaterialTemplateId))
	}
	if m.ReportUrl != nil {
		l = len(*m.ReportUrl)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.ReportStatus != nil {
		n += 1 + sovFoodyBase(uint64(*m.ReportStatus))
	}
	if m.ReportError != nil {
		l = len(*m.ReportError)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.Md5 != nil {
		l = len(*m.Md5)
		n += 1 + l + sovFoodyBase(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.CreateTime))
	}
	if m.UpdateTime != nil {
		n += 1 + sovFoodyBase(uint64(*m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFoodyBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFoodyBase(x uint64) (n int) {
	return sovFoodyBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hash = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsyncTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsyncTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsyncTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v AsyncTask_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AsyncTask_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileLink = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v AsyncTask_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AsyncTask_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SucceedCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SucceedCnt = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedCnt = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailedLink = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Picture = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v Available
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Available(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatalogId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionGroupCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionGroupCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesVolume", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SalesVolume = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingTotal", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingTotal = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingGood", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingGood = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingBad", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingBad = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindGroupCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindGroupCount = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleStartTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleEndTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleWeekBit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleWeekBit = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InSaleTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.InSaleTime = &b
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingStatus", wireType)
			}
			var v DishListingStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DishListingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ListingStatus = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleStatus", wireType)
			}
			var v DishSaleStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DishSaleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleStatus = &v
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeForSales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeForSales = append(m.TimeForSales, &Dish_TimeForSales{})
			if err := m.TimeForSales[len(m.TimeForSales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawFlag", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RawFlag = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &Dish_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SalesTime == nil {
				m.SalesTime = &Dish_SalesDay{}
			}
			if err := m.SalesTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrawlerPicture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CrawlerPicture = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialSaleDates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialSaleDates = append(m.SpecialSaleDates, &Dish_SpecialSaleDate{})
			if err := m.SpecialSaleDates[len(m.SpecialSaleDates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfStockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutOfStockTime == nil {
				m.OutOfStockTime = &TimeRange{}
			}
			if err := m.OutOfStockTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncItemGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncItemGroupId = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Blocked = &b
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockedTime == nil {
				m.BlockedTime = &TimeRange{}
			}
			if err := m.BlockedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OutBizId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dish_TimeForSales) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeForSales: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeForSales: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleStartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleEndTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dish_SalesDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalesDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalesDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monday = append(m.Monday, &Dish_TimeForSales{})
			if err := m.Monday[len(m.Monday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tuesday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tuesday = append(m.Tuesday, &Dish_TimeForSales{})
			if err := m.Tuesday[len(m.Tuesday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wednesday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wednesday = append(m.Wednesday, &Dish_TimeForSales{})
			if err := m.Wednesday[len(m.Wednesday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thursday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thursday = append(m.Thursday, &Dish_TimeForSales{})
			if err := m.Thursday[len(m.Thursday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friday = append(m.Friday, &Dish_TimeForSales{})
			if err := m.Friday[len(m.Friday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Saturday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Saturday = append(m.Saturday, &Dish_TimeForSales{})
			if err := m.Saturday[len(m.Saturday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sunday = append(m.Sunday, &Dish_TimeForSales{})
			if err := m.Sunday[len(m.Sunday)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dish_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alcoholic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Alcoholic = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QcFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.QcFrozen = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dish_SpecialSaleDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialSaleDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialSaleDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartDate = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndDate = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeForSales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeForSales = append(m.TimeForSales, &Dish_TimeForSales{})
			if err := m.TimeForSales[len(m.TimeForSales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Option) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Option: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Option: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v Available
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Available(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfStockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutOfStockTime == nil {
				m.OutOfStockTime = &TimeRange{}
			}
			if err := m.OutOfStockTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncItemGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncItemGroupId = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OutBizId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShelveState", wireType)
			}
			var v ShelveState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ShelveState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShelveState = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectMode", wireType)
			}
			var v OptionSelectMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OptionSelectMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectMode = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectMin", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectMin = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectMax = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &OptionGroup_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncItemGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncItemGroupId = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OutBizId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionGroup_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QcFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.QcFrozen = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DishOptionBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DishOptionBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DishOptionBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShelveState", wireType)
			}
			var v ShelveState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ShelveState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShelveState = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionGroupBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionGroupBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionGroupBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Catalog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Catalog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Catalog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncItemGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncItemGroupId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OutBizId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Buyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Avatar = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliveryAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliveryAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Driver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Driver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Driver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FullName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePhoto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProfilePhoto = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VehiclePlateNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VehiclePlateNo = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingTotal", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingTotal = &v
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RatingScore = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.State = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.District = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Latitude = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Longitude = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreciseLatitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PreciseLatitude = &v2
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreciseLongitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PreciseLongitude = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartOptionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartOptionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartOptionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &CartOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartDish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartDish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartDish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatalogId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatalogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartItemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dish == nil {
				m.Dish = &CartDish{}
			}
			if err := m.Dish.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionGroups = append(m.OptionGroups, &CartOptionGroup{})
			if err := m.OptionGroups[len(m.OptionGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discount == nil {
				m.Discount = &ItemDiscount{}
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSaleDiscount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlashSaleDiscount == nil {
				m.FlashSaleDiscount = &FlashSaleDishDiscount{}
			}
			if err := m.FlashSaleDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSaleLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlashSaleLimit = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v CartItemDetail_DiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CartItemDetail_DiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &CartItemDetail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quantity = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v CartItemStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CartItemStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliveryAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliveryAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverShippingIncome", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverShippingIncome = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayToMerchant", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayToMerchant = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectFromCustomer", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectFromCustomer = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingSurgeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingSurgeFee = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParkingFee = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadWeatherFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BadWeatherFee = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolidayFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HolidayFee = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LateNightFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LateNightFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderCustomTag) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderCustomTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderCustomTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v OrderSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Store == nil {
				m.Store = &Store{}
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAddress == nil {
				m.DeliveryAddress = &DeliveryAddress{}
			}
			if err := m.DeliveryAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Order_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Order_Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v OrderStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelProposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelProposer = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlaceTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReviewTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantConfirmTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantConfirmTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateArrivedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateArrivedTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateDeliveredTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateDeliveredTime = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupSeq", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupSeq = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryAssignTime = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryArriveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryArriveTime = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryPickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryPickupTime = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryCompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryCompleteTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsReceived = &b
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsReady = &b
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadyTime = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingCompletedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingCompletedTime = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRatingCompleted", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRatingCompleted = &v
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &Order_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemQuantity", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemQuantity = &v
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSettlementFactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreSettlementFactor == nil {
				m.StoreSettlementFactor = &Order_StoreSettlementFactor{}
			}
			if err := m.StoreSettlementFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteType", wireType)
			}
			var v Order_RewriteType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Order_RewriteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewriteType = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteReason", wireType)
			}
			var v Order_RewriteReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Order_RewriteReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewriteReason = &v
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RewriteRemark = &s
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundAmount = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeupAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakeupAmount = &v
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromotionFlag == nil {
				m.PromotionFlag = &Order_Promotion_Flag{}
			}
			if err := m.PromotionFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherReferenceId = &s
			iNdEx = postIndex
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryReconfirmTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryReconfirmTime = &v
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantConfirmedDeadline", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantConfirmedDeadline = &v
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OvertimeMode", wireType)
			}
			var v Store_Flag_OvertimeOrderMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_Flag_OvertimeOrderMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OvertimeMode = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewriteSource", wireType)
			}
			var v RewriteSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RewriteSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewriteSource = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreLocationGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreLocationGroups = append(m.StoreLocationGroups, &LocationGroup{})
			if err := m.StoreLocationGroups[len(m.StoreLocationGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerLocationGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerLocationGroups = append(m.BuyerLocationGroups, &LocationGroup{})
			if err := m.BuyerLocationGroups[len(m.BuyerLocationGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelRemark = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelCerts = append(m.CancelCerts, &Certificate{})
			if err := m.CancelCerts[len(m.CancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorId = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayAssignDuration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayAssignDuration = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMerchantVisible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMerchantVisible = &b
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentInfo == nil {
				m.PaymentInfo = &Order_PaymentInfo{}
			}
			if err := m.PaymentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomTags = append(m.CustomTags, &OrderCustomTag{})
			if err := m.CustomTags[len(m.CustomTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryMode", wireType)
			}
			var v DeliveryMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryMode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CartItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CartItem == nil {
				m.CartItem = &CartItem{}
			}
			if err := m.CartItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnitPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlatFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlatFee = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subtotal = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitListPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnitListPrice = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v Order_OrderItemStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Order_OrderItemStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v ItemDiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtotal", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subtotal = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxAmount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantServiceFee = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformServiceFee = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFee = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingBasicFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingBasicFee = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingSurgeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingSurgeFee = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantSurchargeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantSurchargeFee = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promotion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Promotion == nil {
				m.Promotion = &Order_Promotion{}
			}
			if err := m.Promotion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayToMerchant", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayToMerchant = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectFromCustomer", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectFromCustomer = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrderFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallOrderFee = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFareExtraFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFareExtraFee = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFareDiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFareDiscountAmount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParkingFee = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonPartnerFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonPartnerFee = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadWeatherFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BadWeatherFee = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolidayFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HolidayFee = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LateNightFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LateNightFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_Promotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Promotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Promotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingDiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingDiscountAmount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsRedeemedAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsRedeemedAmount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemVoucherAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemVoucherAmount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingVoucherAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingVoucherAmount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsEarning", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsEarning = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsCashback", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsCashback = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemDiscountAmount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherMerchantSubsidyAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherMerchantSubsidyAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_Promotion_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseItemVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseItemVoucher = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseShippingFeeVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseShippingFeeVoucher = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCoinsCashbackVoucher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseCoinsCashbackVoucher = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCoins", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseCoins = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReturned", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReturned = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefunded", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefunded = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManualConfirmed", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsManualConfirmed = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDriverRewrite", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanDriverRewrite = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDriverRewritePreview", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDriverRewritePreview = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDropped", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDropped = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstantPreparation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstantPreparation = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanMerchantRewrite", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanMerchantRewrite = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDff", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDff = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaoTang", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaoTang = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_StoreSettlementFactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSettlementFactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSettlementFactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSettlementMode", wireType)
			}
			var v SettlementMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreSettlementMode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceChargeFeeRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceChargeFeeRate = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatRate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtRate = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatCalculate", wireType)
			}
			var v VatCalculate
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VatCalculate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatCalculate = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleTo", wireType)
			}
			var v Store_SettleTo
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_SettleTo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettleTo = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order_PaymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherPaymentType", wireType)
			}
			var v VoucherPaymentType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherPaymentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherPaymentType = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardBin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreditCardBin = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliveryOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliveryOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAddress == nil {
				m.DeliveryAddress = &DeliveryAddress{}
			}
			if err := m.DeliveryAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateArrivedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateArrivedTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateDeliveredTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateDeliveredTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAmount == nil {
				m.DeliveryAmount = &DeliveryAmount{}
			}
			if err := m.DeliveryAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupSeq", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupSeq = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryStatus", wireType)
			}
			var v DeliveryStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryStatus = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArriveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArriveTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoTracking == nil {
				m.GeoTracking = &DeliveryOrder_GeoTracking{}
			}
			if err := m.GeoTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Receipt = &s
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreAddress == nil {
				m.StoreAddress = &Location{}
			}
			if err := m.StoreAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignType", wireType)
			}
			var v DeliveryOrder_AssignType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryOrder_AssignType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignType = &v
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AssignOperator = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvanceDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvanceDeposit == nil {
				m.AdvanceDeposit = &DeliveryOrder_AdvanceDeposit{}
			}
			if err := m.AdvanceDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRefund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositRefund == nil {
				m.DepositRefund = &DeliveryOrder_DepositRefund{}
			}
			if err := m.DepositRefund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelRemark = &s
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelCerts = append(m.CancelCerts, &Certificate{})
			if err := m.CancelCerts[len(m.CancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &DeliveryOrder_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvanceDepositRefundStatus", wireType)
			}
			var v DeliveryOrder_AdvanceDepositRefundStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryOrder_AdvanceDepositRefundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvanceDepositRefundStatus = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginAssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeginAssignTime = &v
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupRank", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupRank = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryRank", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryRank = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverDeliveryOrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverDeliveryOrderId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryOrder_GeoTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArriveGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArriveGeo == nil {
				m.ArriveGeo = &Geo{}
			}
			if err := m.ArriveGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PickupGeo == nil {
				m.PickupGeo = &Geo{}
			}
			if err := m.PickupGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteGeo == nil {
				m.CompleteGeo = &Geo{}
			}
			if err := m.CompleteGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptGeo == nil {
				m.AcceptGeo = &Geo{}
			}
			if err := m.AcceptGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryOrder_AdvanceDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v DeliveryOrder_AdvanceDeposit_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryOrder_AdvanceDeposit_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryOrder_DepositRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v DeliveryOrder_DepositRefund_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DeliveryOrder_DepositRefund_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Time = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliveryOrder_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstantPreparation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstantPreparation = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDff", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDff = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroupDelivery", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroupDelivery = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroupFirstDelivery", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroupFirstDelivery = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckoutId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionRef = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Method = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChannelOption = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalAmount = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v PaymentStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitiationTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var v Payment_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Payment_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentType = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentLink = &s
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v PaymentPlatform
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentPlatform(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyTransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ThirdPartyTransactionRef = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Geo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Geo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Geo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Longitude = &v2
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Latitude = &v2
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreciseLongitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PreciseLongitude = &v2
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreciseLatitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.PreciseLatitude = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			var v EntityType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EntityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EntityType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EntityId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v ChangeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OldValue = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NewValue = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v Source
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceModel = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var v OS
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Os = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OsVersion = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PushToken = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			var v PushType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PushType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushType = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppVersion = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Channel = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Imei = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Idfa = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mac = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BundleId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Store: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Store: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BrandId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TobUserId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseWallet", wireType)
			}
			var v Store_WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseWallet = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseMerchantApp", wireType)
			}
			var v Store_AppStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_AppStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseMerchantApp = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PostalCode = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RegisterPhone = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailSource", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailSource = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Logo = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Banner = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerType", wireType)
			}
			var v PartnerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PartnerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartnerType = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxRate = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFee = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreparationTime = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContactPhone = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v StoreStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoConfirmed", wireType)
			}
			var v Store_AutoConfirmed
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_AutoConfirmed(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoConfirmed = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoConfirmedEnabled", wireType)
			}
			var v Store_AutoConfirmedEnabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_AutoConfirmedEnabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoConfirmedEnabled = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingTotal", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingTotal = &v
		case 33:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RatingScore = &v2
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningStatus", wireType)
			}
			var v OpeningStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OpeningStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpeningStatus = &v
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurchargeIntervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SurchargeIntervals == nil {
				m.SurchargeIntervals = &Store_SurChargeIntervals{}
			}
			if err := m.SurchargeIntervals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceChargeFeeRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceChargeFeeRate = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverModifyOrderEnabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverModifyOrderEnabled = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistanceMode", wireType)
			}
			var v Store_DeliveryDistanceMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_DeliveryDistanceMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistanceMode = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessInfoAdded", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BusinessInfoAdded = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstantPrep", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstantPrep = &v
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &Store_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyOrderMode", wireType)
			}
			var v Store_ModifyOrderMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_ModifyOrderMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModifyOrderMode = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusReason", wireType)
			}
			var v Store_StatusReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_StatusReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusReason = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusReasonRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusReasonRemark = &s
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Overlay == nil {
				m.Overlay = &Store_Overlay{}
			}
			if err := m.Overlay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledCommissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledCommissions == nil {
				m.ScheduledCommissions = &Store_ScheduledCommissions{}
			}
			if err := m.ScheduledCommissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCommissionRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveCommissionRate = &v
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorId = &v
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobUserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TobUserIds = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankBranch = &s
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountName = &s
			iNdEx = postIndex
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TaxId = &s
			iNdEx = postIndex
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMethod", wireType)
			}
			var v SettlementMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMethod = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWay", wireType)
			}
			var v PaymentWay
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentWay(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentWay = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatRate = &v
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtRate = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleTo", wireType)
			}
			var v Store_SettleTo
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_SettleTo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettleTo = &v
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceUpdateTime = &v
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankChannelId = &v
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatCalculate", wireType)
			}
			var v VatCalculate
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VatCalculate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatCalculate = &v
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMethod", wireType)
			}
			var v PayoutMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMethod = &v
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossMonthSettlement", wireType)
			}
			var v CrossMonthSettlement
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CrossMonthSettlement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossMonthSettlement = &v
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HalalType", wireType)
			}
			var v Store_HalalType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_HalalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HalalType = &v
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrderFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallOrderFee = &v
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeeMode", wireType)
			}
			var v Store_ServiceFeeMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_ServiceFeeMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFeeMode = &v
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DffMode", wireType)
			}
			var v Store_DFFMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_DFFMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DffMode = &v
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DffSetting", wireType)
			}
			var v Store_DFFSetting
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_DFFSetting(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DffSetting = &v
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistrictId = &v
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MainCategory == nil {
				m.MainCategory = &StoreCategory{}
			}
			if err := m.MainCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubCategory == nil {
				m.SubCategory = &Store_SubCategory{}
			}
			if err := m.SubCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelayTimeMode", wireType)
			}
			var v Store_MaxDelayTimeMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_MaxDelayTimeMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDelayTimeMode = &v
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelayTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDelayTime = &v
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusInAdmin", wireType)
			}
			var v Store_StatusInAdmin
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_StatusInAdmin(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusInAdmin = &v
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutAccountId = &v
		case 92:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRelationStatus", wireType)
			}
			var v Store_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletRelationStatus = &v
		case 93:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementConfigStatus", wireType)
			}
			var v Store_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementConfigStatus = &v
		case 94:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductConfigStatus", wireType)
			}
			var v Store_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductConfigStatus = &v
		case 95:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountStatus", wireType)
			}
			var v BankAccountStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BankAccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankAccountStatus = &v
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPayoutRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AutoPayoutRemark = &s
			iNdEx = postIndex
		case 97:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParkingFee = &v
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrderFeeMode", wireType)
			}
			var v Store_SmallOrderFeeMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_SmallOrderFeeMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallOrderFeeMode = &v
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraContactPhones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExtraContactPhones = &s
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CategoryType = &v
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumSubtotalPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaximumSubtotalPrice = &v
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryMethod", wireType)
			}
			var v Store_DeliveryMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_DeliveryMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryMethod = &v
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinFee = &v
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingFees == nil {
				m.ShippingFees = &Store_ShippingFees{}
			}
			if err := m.ShippingFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranchId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankBranchId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_SurChargeIntervals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurChargeIntervals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurChargeIntervals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intervals = append(m.Intervals, &Store_SurChargeInterval{})
			if err := m.Intervals[len(m.Intervals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_SurChargeInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurChargeInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurChargeInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPriceEnd", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderPriceEnd = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OvertimeOrderMode", wireType)
			}
			var v Store_Flag_OvertimeOrderMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Store_Flag_OvertimeOrderMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OvertimeOrderMode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuperMenu", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuperMenu = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredReceiptPhoto", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiredReceiptPhoto = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMenuEnabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMenuEnabled = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideDishNoteEnabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideDishNoteEnabled = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPrintDisabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoPrintDisabled = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditPromotionEnabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditPromotionEnabled = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowBuyerHalalType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowBuyerHalalType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideProcessingFee", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideProcessingFee = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialModeStoreClose", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpecialModeStoreClose = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialModeDeliveryDistance", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpecialModeDeliveryDistance = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialModeStoreDff", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpecialModeStoreDff = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_Overlay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overlay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overlay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogoImage = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BannerImage = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_ScheduledCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_ScheduledCommissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledCommissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledCommissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledCommissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledCommissions = append(m.ScheduledCommissions, &Store_ScheduledCommission{})
			if err := m.ScheduledCommissions[len(m.ScheduledCommissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_SubCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubCategory = append(m.SubCategory, &StoreCategory{})
			if err := m.SubCategory[len(m.SubCategory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_ShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.To = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store_ShippingFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingFees = append(m.ShippingFees, &Store_ShippingFee{})
			if err := m.ShippingFees[len(m.ShippingFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreMin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreMin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreMin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BrandId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TobUserId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseWallet", wireType)
			}
			var v StoreMin_WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreMin_WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseWallet = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseMerchantApp", wireType)
			}
			var v StoreMin_AppStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreMin_AppStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseMerchantApp = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PostalCode = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RegisterPhone = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailSource", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailSource = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Logo = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Banner = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerType", wireType)
			}
			var v PartnerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PartnerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartnerType = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxRate = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFee = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreparationTime = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContactPhone = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v StoreStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level_1", wireType)
			}
			var v StoreCategoryFirstLevel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreCategoryFirstLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level_1 = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level_2", wireType)
			}
			var v StoreCategorySecondLevel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreCategorySecondLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level_2 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpeningStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpeningStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpeningStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOpeningStatus", wireType)
			}
			var v DisplayOpeningStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DisplayOpeningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayOpeningStatus = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderEnabled", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderEnabled = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOpeningTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentOpeningTime == nil {
				m.CurrentOpeningTime = &OpeningStatus_Interval{}
			}
			if err := m.CurrentOpeningTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOpeningTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOpeningTime == nil {
				m.NextOpeningTime = &OpeningStatus_Interval{}
			}
			if err := m.NextOpeningTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningStatus", wireType)
			}
			var v OpeningStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OpeningStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpeningStatus = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PauseTime == nil {
				m.PauseTime = &OpeningStatus_PauseTime{}
			}
			if err := m.PauseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseStatus == nil {
				m.CloseStatus = &OpeningStatus_CloseStatus{}
			}
			if err := m.CloseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpeningStatus_Interval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRelativeSec", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartRelativeSec = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndRelativeSec", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndRelativeSec = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpeningStatus_SpecialMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeTypeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModeTypeId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModeTypeName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpeningStatus_PauseTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PauseStartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PauseEndTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseType", wireType)
			}
			var v OpeningStatus_PauseType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OpeningStatus_PauseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PauseType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialMode == nil {
				m.SpecialMode = &OpeningStatus_SpecialMode{}
			}
			if err := m.SpecialMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpeningStatus_CloseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseType", wireType)
			}
			var v OpeningStatus_CloseType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OpeningStatus_CloseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Store == nil {
				m.Store = &Store{}
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpeningStatus == nil {
				m.OpeningStatus = &OpeningStatus{}
			}
			if err := m.OpeningStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Merchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MerchantName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Logo = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Banner = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TobUserId = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TobUserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TobUserIds = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankBranch = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountName = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TaxId = &s
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMethod", wireType)
			}
			var v SettlementMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMethod = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWay", wireType)
			}
			var v PaymentWay
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentWay(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentWay = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatRate = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtRate = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseWallet", wireType)
			}
			var v Merchant_WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Merchant_WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseWallet = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceUpdateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankChannelId = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatCalculate", wireType)
			}
			var v VatCalculate
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VatCalculate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatCalculate = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMethod", wireType)
			}
			var v PayoutMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMethod = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossMonthSettlement", wireType)
			}
			var v CrossMonthSettlement
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CrossMonthSettlement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossMonthSettlement = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutAccountId = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRelationStatus", wireType)
			}
			var v Merchant_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Merchant_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletRelationStatus = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementConfigStatus", wireType)
			}
			var v Merchant_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Merchant_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementConfigStatus = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductConfigStatus", wireType)
			}
			var v Merchant_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Merchant_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductConfigStatus = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountStatus", wireType)
			}
			var v BankAccountStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BankAccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankAccountStatus = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPayoutRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AutoPayoutRemark = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantStatus", wireType)
			}
			var v Merchant_MerchantStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Merchant_MerchantStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantStatus = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranchId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankBranchId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Brand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Brand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Brand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BrandName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TagName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagTypeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagTypeId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Editable = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TagType_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TagType_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Editable = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredefinedKeyword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredefinedKeyword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredefinedKeyword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualSearchKeyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ActualSearchKeyword = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSearchKeywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSearchKeywords = append(m.UserSearchKeywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bank = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopeePay", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopeePay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Balance = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletStatus", wireType)
			}
			var v WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var v WalletType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMode", wireType)
			}
			var v PayoutMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMode = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ModeOperator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeUpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModeUpdateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceVersion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalanceVersion = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawalChannel == nil {
				m.WithdrawalChannel = &WithdrawalChannel{}
			}
			if err := m.WithdrawalChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverWalletTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverWalletTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverWalletTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			var v TransactionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= TransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Balance = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extend = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceVersion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalanceVersion = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedOrder", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelatedOrder = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverWalletOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverWalletOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverWalletOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DriverName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverPhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DriverPhone = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v DriverWalletOrder_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v DriverWalletOrder_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustReason", wireType)
			}
			var v DriverWalletOrder_AdjustReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_AdjustReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdjustReason = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v DriverWalletOrder_CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowCerts = append(m.EscrowCerts, &Certificate{})
			if err := m.EscrowCerts[len(m.EscrowCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EscrowNo = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionRef = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentChannelId = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentChannelOption = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentLink = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdjustTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectTime = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMode", wireType)
			}
			var v PayoutMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMode = &v
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentErrorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentErrorCode = &s
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var v DriverWalletOrder_AuditResult
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_AuditResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditResult = &v
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuditRemark = &s
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuditOperator = &s
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditTime = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v DriverWalletOrder_CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletOrder_CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateApproveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateApproveTime = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutNotifyTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutNotifyTime = &v
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountHolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountHolder = &s
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopeeUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShopeeUserId = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalChannel", wireType)
			}
			var v WithdrawalChannelType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= WithdrawalChannelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalChannel = &v
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopeeUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ShopeeUserName = &s
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementSource", wireType)
			}
			var v SettlementSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementSource = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMode", wireType)
			}
			var v SettlementMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMode = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementStatus", wireType)
			}
			var v SettlementStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementStatus = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &StoreSettlement_Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFromCompensation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFromCompensation = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementErrorCode", wireType)
			}
			var v SettlementErrorCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementErrorCode = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearingFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClearingFlag == nil {
				m.ClearingFlag = &StoreSettlement_ClearingFlag{}
			}
			if err := m.ClearingFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransactionRef = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceType", wireType)
			}
			var v ReferenceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceType = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletSettlementId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletSettlementId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDetailId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementDetailId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var v MerchantWalletType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletType = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoreName = &s
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSettlementMode", wireType)
			}
			var v SettlementMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreSettlementMode = &v
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessingTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSettlement_Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemSubtotal", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemSubtotal = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commission = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSubsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreSubsidy = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxRate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatRate = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatAmount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtRate = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtAmount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatCalculate", wireType)
			}
			var v VatCalculate
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VatCalculate(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatCalculate = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemVoucherSubsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemVoucherSubsidy = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeVoucherSubsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFeeVoucherSubsidy = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryCost", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryCost = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDiscountsSubsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemDiscountsSubsidy = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashsaleDiscountsSubsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlashsaleDiscountsSubsidy = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurchargeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SurchargeFee = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurchargeRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SurchargeRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSettlement_ClearingFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearingFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearingFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseMerchantWalletOriginal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUseMerchantWalletOriginal = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseMerchantWallet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUseMerchantWallet = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMerchantDelivery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMerchantDelivery = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMode", wireType)
			}
			var v SettlementMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementSource", wireType)
			}
			var v SettlementSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementSource = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementStatus", wireType)
			}
			var v SettlementStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceType", wireType)
			}
			var v ReferenceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceType = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderAmount == nil {
				m.OrderAmount = &Order_Amount{}
			}
			if err := m.OrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAmount == nil {
				m.DeliveryAmount = &DeliveryAmount{}
			}
			if err := m.DeliveryAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFromCompensation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFromCompensation = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXDriverSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXDriverSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXDriverSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementType", wireType)
			}
			var v SettlementType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementStatus", wireType)
			}
			var v SettlementStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceType", wireType)
			}
			var v ReferenceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &SPXDriverSettlement_Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFromCompensation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFromCompensation = &b
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extend = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXDriverSettlement_Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectionAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderCancelSource = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCancelResponsibility", wireType)
			}
			var v Responsibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Responsibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderCancelResponsibility = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCancelReason", wireType)
			}
			var v ReturnOrder_ReturnReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_ReturnReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderCancelReason = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderCancelRemark = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCancelCerts = append(m.OrderCancelCerts, &Certificate{})
			if err := m.OrderCancelCerts[len(m.OrderCancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderReferenceStatus", wireType)
			}
			var v OrderStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderReferenceStatus = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundType", wireType)
			}
			var v ReturnOrder_RefundType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_RefundType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStatus", wireType)
			}
			var v ReturnOrder_ReturnStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_ReturnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnStatus = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitiationTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnType", wireType)
			}
			var v ReturnOrder_ReturnType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_ReturnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnType = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnReason", wireType)
			}
			var v ReturnOrder_ReturnReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_ReturnReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnReason = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnRemark = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responsibility", wireType)
			}
			var v Responsibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Responsibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Responsibility = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackAmount = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnSource", wireType)
			}
			var v ReturnSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnSource = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proposer = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineRefundMethod", wireType)
			}
			var v Refund_RefundMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Refund_RefundMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfflineRefundMethod = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackType", wireType)
			}
			var v StoreChargeBackType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreChargeBackType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackType = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackMethod", wireType)
			}
			var v StoreChargebackMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreChargebackMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackMethod = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTransactionRef = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundTransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundTransactionRef = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundStatus", wireType)
			}
			var v RefundStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RefundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundStatus = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitiationTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckoutId = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnType", wireType)
			}
			var v ReturnOrder_ReturnType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ReturnOrder_ReturnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnType = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundMethod", wireType)
			}
			var v Refund_RefundMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Refund_RefundMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundMethod = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineRefundTransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OfflineRefundTransactionRef = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundMode", wireType)
			}
			var v Refund_RefundMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Refund_RefundMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundMode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnionCity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionCity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionCity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.State = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.District = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MassChangeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MassChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MassChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassType", wireType)
			}
			var v MassType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MassType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MassType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var v ChangeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Filename = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FileHash = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateSource", wireType)
			}
			var v Source
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperateSource = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			var v MassChangeLogType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MassChangeLogType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDiscountCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDiscountCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDiscountCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CampaignName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v OrderDiscountCampaign_PromotionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderDiscountCampaign_PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionStatus", wireType)
			}
			var v OrderDiscountCampaign_PromotionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderDiscountCampaign_PromotionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v OrderDiscountCampaign_DiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderDiscountCampaign_DiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPercentage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPercentage = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountCap", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountCap = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountAmount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stock", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stock = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedQuantity", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsedQuantity = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPerDay", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitPerDay = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPerUser", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitPerUser = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserTags = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerType", wireType)
			}
			var v PartnerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PartnerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartnerType = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoreFilename = &s
			iNdEx = postIndex
		case 19:
			if wireType == 0 {
				var v PaymentMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PaymentMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PaymentMethods = append(m.PaymentMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PaymentMethods) == 0 {
					m.PaymentMethods = make([]PaymentMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PaymentMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PaymentMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PaymentMethods = append(m.PaymentMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethods", wireType)
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 24:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LocationGroupIds = append(m.LocationGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LocationGroupIds) == 0 {
					m.LocationGroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LocationGroupIds = append(m.LocationGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherCode = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			var v Voucher_Reward_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Voucher_Reward_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Prefix = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionMethod", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistributionMethod = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidityStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidityStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidityStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaStatus", wireType)
			}
			var v VoucherQuotaStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherQuotaStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QuotaStatus = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStatus", wireType)
			}
			var v VoucherTimeStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherTimeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiLangTxt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiLangTxt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiLangTxt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Language = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherTAndC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherTAndC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherTAndC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SectionTitle = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SectionContent = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionTitleKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SectionTitleKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisplayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisplayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IconText = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Label = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizedLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomizedLabels = append(m.CustomizedLabels, &MultiLangTxt{})
			if err := m.CustomizedLabels[len(m.CustomizedLabels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcSectionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcSectionList = append(m.TcSectionList, &VoucherTAndC{})
			if err := m.TcSectionList[len(m.TcSectionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOnLandingPage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DisplayOnLandingPage = &b
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrowseListTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BrowseListTags == nil {
				m.BrowseListTags = &VoucherCustomisedLabelList{}
			}
			if err := m.BrowseListTags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayInfo == nil {
				m.DisplayInfo = &DisplayInfo{}
			}
			if err := m.DisplayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethodScope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentMethodScope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentMethodScope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v PaymentMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PaymentMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PaymentMethods = append(m.PaymentMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PaymentMethods) == 0 {
					m.PaymentMethods = make([]PaymentMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PaymentMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PaymentMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PaymentMethods = append(m.PaymentMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethods", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpmChannelIds = append(m.SpmChannelIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SpmChannelIds) == 0 {
					m.SpmChannelIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpmChannelIds = append(m.SpmChannelIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpmChannelIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethodScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentMethodScope == nil {
				m.PaymentMethodScope = &PaymentMethodScope{}
			}
			if err := m.PaymentMethodScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderScope == nil {
				m.OrderScope = &OrderScope{}
			}
			if err := m.OrderScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardBins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditCardBins = append(m.CreditCardBins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VoucherPaymentTypes = append(m.VoucherPaymentTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VoucherPaymentTypes) == 0 {
					m.VoucherPaymentTypes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VoucherPaymentTypes = append(m.VoucherPaymentTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherPaymentTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationScope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationScope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationScope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LocationGroupIds = append(m.LocationGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LocationGroupIds) == 0 {
					m.LocationGroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LocationGroupIds = append(m.LocationGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderScope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderScope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderScope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreScope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreScope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreScope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeType", wireType)
			}
			var v StoreScope_StoreScopeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreScope_StoreScopeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScopeType = &v
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreIds = append(m.StoreIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreIds) == 0 {
					m.StoreIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreIds = append(m.StoreIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExcludeStoreIds = append(m.ExcludeStoreIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExcludeStoreIds) == 0 {
					m.ExcludeStoreIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExcludeStoreIds = append(m.ExcludeStoreIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeStoreIds", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StorePartnerTypes = append(m.StorePartnerTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StorePartnerTypes) == 0 {
					m.StorePartnerTypes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StorePartnerTypes = append(m.StorePartnerTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StorePartnerTypes", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreTagIds = append(m.StoreTagIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreTagIds) == 0 {
					m.StoreTagIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreTagIds = append(m.StoreTagIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTagIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocationScope == nil {
				m.LocationScope = &LocationScope{}
			}
			if err := m.LocationScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreScope == nil {
				m.StoreScope = &StoreScope{}
			}
			if err := m.StoreScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAttributes = append(m.UserAttributes, &UserAttribute{})
			if err := m.UserAttributes[len(m.UserAttributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Percentage = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cap = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherRewardDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherRewardDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherRewardDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDiscount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardDiscount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoin", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardCoin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserVoucher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserVoucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserVoucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserVoucherId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserVoucherId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoucherIdentifier == nil {
				m.VoucherIdentifier = &VoucherIdentifier{}
			}
			if err := m.VoucherIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageLimit = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voucher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voucher == nil {
				m.Voucher = &Voucher{}
			}
			if err := m.Voucher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Voucher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identifier == nil {
				m.Identifier = &VoucherIdentifier{}
			}
			if err := m.Identifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			var v Voucher_Reward_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Voucher_Reward_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDiscount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardDiscount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardCoin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoinEquivalentCash", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardCoinEquivalentCash = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardShippingFeeDiscount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RewardShippingFeeDiscount = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Title = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CreatedBy = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistributionStartTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistributionEndTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionRule == nil {
				m.DistributionRule = &DistributionRule{}
			}
			if err := m.DistributionRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTotalLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistributionTotalLimit = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTotalCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistributionTotalCount = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionValidityStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionValidityStatus == nil {
				m.DistributionValidityStatus = &ValidityStatus{}
			}
			if err := m.DistributionValidityStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &ExtraInfo{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentRules == nil {
				m.PaymentRules = &PaymentRules{}
			}
			if err := m.PaymentRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProductRules == nil {
				m.ProductRules = &ProductRules{}
			}
			if err := m.ProductRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherRewardType", wireType)
			}
			var v VoucherRewardType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherRewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherRewardType = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UpdatedBy = &s
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageDurationHrs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageDurationHrs = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageStartTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageEndTime = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsagePerUserLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsagePerUserLimit = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageTotalCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageTotalCount = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageTotalLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsageTotalLimit = &v
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageValidityStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsageValidityStatus == nil {
				m.UsageValidityStatus = &ValidityStatus{}
			}
			if err := m.UsageValidityStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserRules == nil {
				m.UserRules = &UserRules{}
			}
			if err := m.UserRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherId = &v
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherCode = &s
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherStatus", wireType)
			}
			var v VoucherStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherStatus = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherRewardDiscount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoucherRewardDiscount == nil {
				m.VoucherRewardDiscount = &VoucherRewardDiscount{}
			}
			if err := m.VoucherRewardDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoFundCampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoFundCampaignId = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantSubsidyAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantSubsidyAmount = &v
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonClaimableByCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NonClaimableByCode = &b
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixLength", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuffixLength = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherType", wireType)
			}
			var v Voucher_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Voucher_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherType = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherCustomisedLabelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherCustomisedLabelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherCustomisedLabelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &VoucherCustomisedLabel{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherCustomisedLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherCustomisedLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherCustomisedLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, &MultiLangTxt{})
			if err := m.Label[len(m.Label)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Color = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageHash = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherTaskFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherTaskFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherTaskFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			var v VoucherTaskFile_FileType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherTaskFile_FileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FileType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Url = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hash = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherClaimStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherClaimStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherClaimStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherCode = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Claimed = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			var v VoucherTaskType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherTaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			var v VoucherTaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherTaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskStatus = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuccessCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecuteCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UploadTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadFile == nil {
				m.UploadFile = &VoucherTaskFile{}
			}
			if err := m.UploadFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultFiles = append(m.ResultFiles, &VoucherTaskFile{})
			if err := m.ResultFiles[len(m.ResultFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAttribute == nil {
				m.UserAttribute = &UserAttribute{}
			}
			if err := m.UserAttribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coins = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Discount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v OrderDiscountCampaign_PromotionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= OrderDiscountCampaign_PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Discount = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CampaignName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EarnCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EarnCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EarnCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v EarnCoins_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EarnCoins_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coins = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Promotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Promotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Promotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voucher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voucher == nil {
				m.Voucher = &Voucher{}
			}
			if err := m.Voucher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpendCoins == nil {
				m.SpendCoins = &SpendCoins{}
			}
			if err := m.SpendCoins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderDiscounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderDiscounts = append(m.OrderDiscounts, &OrderDiscount{})
			if err := m.OrderDiscounts[len(m.OrderDiscounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EarnCoins == nil {
				m.EarnCoins = &EarnCoins{}
			}
			if err := m.EarnCoins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vouchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vouchers = append(m.Vouchers, &Voucher{})
			if err := m.Vouchers[len(m.Vouchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSaleOrderItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlashSaleOrderItem == nil {
				m.FlashSaleOrderItem = &FlashSaleOrderItem{}
			}
			if err := m.FlashSaleOrderItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CampaignName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v ItemDiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionStatus", wireType)
			}
			var v ItemDiscountCampaign_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountCampaign_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionStatus = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemQuantity", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemQuantity = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiscountPercentage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDiscountPercentage = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDiscounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemDiscounts = append(m.ItemDiscounts, &ItemDiscount{})
			if err := m.ItemDiscounts[len(m.ItemDiscounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v DiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorSource", wireType)
			}
			var v ItemDiscountCreatorSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountCreatorSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatorSource = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDiscountAmount = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Purpose = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserTags = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppliedTimes == nil {
				m.AppliedTimes = &ItemDiscountCampaignAppliedTimes{}
			}
			if err := m.AppliedTimes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPerOrder", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitPerOrder = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountStatus", wireType)
			}
			var v ItemDiscount_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscount_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountStatus = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignStartTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignEndTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPercentage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPercentage = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupId = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v DiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountAmount = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorSource", wireType)
			}
			var v ItemDiscountCreatorSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountCreatorSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatorSource = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stock", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stock = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDiscountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ItemDiscountId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderItemId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderItemId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quantity = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnQuantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnQuantity = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelQuantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelQuantity = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldStatus", wireType)
			}
			var v ItemDiscountRecord_SoldStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ItemDiscountRecord_SoldStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldStatus = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionToolId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionToolId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v PromotionObject_PromotionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PromotionObject_PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v PromotionObject_PromotionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PromotionObject_PromotionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStatus", wireType)
			}
			var v PromotionObject_PromotionShowStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PromotionObject_PromotionShowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStatus = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtInfo == nil {
				m.ExtInfo = &PromotionObject_PromotionExtInfo{}
			}
			if err := m.ExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionNameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromotionNameInfo == nil {
				m.PromotionNameInfo = &PromotionObject_PromotionNameInfo{}
			}
			if err := m.PromotionNameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionObject_PromotionExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionImage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buttons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buttons = append(m.Buttons, &Button{})
			if err := m.Buttons[len(m.Buttons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReviewStatus = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionObject_PromotionNameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionNameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionNameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLangName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiLangName = append(m.MultiLangName, &MultiLangTxt{})
			if err := m.MultiLangName[len(m.MultiLangName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Button) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Button: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Button: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ButtonName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransifyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransifyKey = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedirectInfo == nil {
				m.RedirectInfo = &RedirectInfo{}
			}
			if err := m.RedirectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonType", wireType)
			}
			var v Button_ButtonType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Button_ButtonType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ButtonType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyInfo == nil {
				m.KeyInfo = &Attribute_KeyInfo{}
			}
			if err := m.KeyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueInfo == nil {
				m.ValueInfo = &Attribute_ValueInfo{}
			}
			if err := m.ValueInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			var v Attribute_AttributeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Attribute_AttributeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttributeType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute_KeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransifyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransifyKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute_ValueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransifyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransifyKey = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Attribute_ValueInfo_ValueInfoType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Attribute_ValueInfo_ValueInfoType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedirectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedirectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedirectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RedirectUrl = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamPairs = append(m.ParamPairs, &RedirectInfo_ParamPair{})
			if err := m.ParamPairs[len(m.ParamPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedirectInfo_ParamPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionToolType", wireType)
			}
			var v PromotionTool_PromotionToolType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PromotionTool_PromotionToolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionToolType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtInfo == nil {
				m.ExtInfo = &PromotionTool_PromotionToolExtInfo{}
			}
			if err := m.ExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistScope", wireType)
			}
			var v PromotionTool_WhiteListScope
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PromotionTool_WhiteListScope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhitelistScope = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionTool_PromotionToolExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionToolExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionToolExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionToolNameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromotionToolNameInfo == nil {
				m.PromotionToolNameInfo = &PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo{}
			}
			if err := m.PromotionToolNameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedirectInfo == nil {
				m.RedirectInfo = &RedirectInfo{}
			}
			if err := m.RedirectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescriptionInfo == nil {
				m.DescriptionInfo = &PromotionTool_PromotionToolExtInfo_DescriptionInfo{}
			}
			if err := m.DescriptionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Logo = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionTool_PromotionToolExtInfo_PromotionToolNameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionToolNameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionToolNameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionToolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionToolName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransifyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransifyKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionTool_PromotionToolExtInfo_DescriptionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransifyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransifyKey = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPromotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPromotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPromotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPromotionNameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventPromotionNameInfo == nil {
				m.EventPromotionNameInfo = &EventPromotion_EventPromotionNameInfo{}
			}
			if err := m.EventPromotionNameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v EventPromotion_PromotionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventPromotion_PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinedTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStatus", wireType)
			}
			var v EventPromotion_EventPromotionShowStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventPromotion_EventPromotionShowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStatus = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSessionStatus", wireType)
			}
			var v EventPromotion_StoreSessionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventPromotion_StoreSessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreSessionStatus = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v EventPromotion_EventPromotionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventPromotion_EventPromotionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtInfo == nil {
				m.ExtInfo = &EventPromotion_EventPromotionExtInfo{}
			}
			if err := m.ExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterStartTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterEndTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPromotion_EventPromotionExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPromotionExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPromotionExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionImage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buttons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buttons = append(m.Buttons, &Button{})
			if err := m.Buttons[len(m.Buttons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReviewStatus = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPromotion_EventPromotionNameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPromotionNameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPromotionNameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLangName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiLangName = append(m.MultiLangName, &MultiLangTxt{})
			if err := m.MultiLangName[len(m.MultiLangName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventNameInfo == nil {
				m.EventNameInfo = &EventObject_EventNameInfo{}
			}
			if err := m.EventNameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionType", wireType)
			}
			var v EventObject_PromotionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventObject_PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PromotionType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterStartTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterEndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventExtInfo == nil {
				m.EventExtInfo = &EventObject_EventExtInfo{}
			}
			if err := m.EventExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistScope", wireType)
			}
			var v EventObject_WhiteListScope
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventObject_WhiteListScope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhitelistScope = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v EventObject_EventStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EventObject_EventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObject_EventExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainBanner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MainBanner = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionListImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionListImage = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedirectInfo == nil {
				m.RedirectInfo = &RedirectInfo{}
			}
			if err := m.RedirectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buttons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buttons = append(m.Buttons, &Button{})
			if err := m.Buttons[len(m.Buttons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObject_EventNameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLangName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiLangName = append(m.MultiLangName, &MultiLangTxt{})
			if err := m.MultiLangName[len(m.MultiLangName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v WhiteList_WhiteListStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= WhiteList_WhiteListStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipStatus", wireType)
			}
			var v Tip_TipStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Tip_TipStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TipStatus = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionRef = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentChannelId = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentChannelOption = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentLink = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryOrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryOrderId = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreChargeback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreChargeback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreChargeback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargebackStatus", wireType)
			}
			var v ChargebackStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ChargebackStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChargebackStatus = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargebackAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChargebackAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargebackMethod", wireType)
			}
			var v StoreChargebackMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreChargebackMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChargebackMethod = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransactionRef = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekBits", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekBits = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalStart", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalStart = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalEnd", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalEnd = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v SpecialRule_RuleType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SpecialRule_RuleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &SpecialRule_Detail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialRule_TimeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekBits", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WeekBits = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalStart", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalStart = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalEnd", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalEnd = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialRule_LocationGroupRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationGroupRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationGroupRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LocationGroupIds = append(m.LocationGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LocationGroupIds) == 0 {
					m.LocationGroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LocationGroupIds = append(m.LocationGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocationGroupDescription = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialRule_OrderStackRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderStackRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderStackRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPickUpPointEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPickUpPointEnabled = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDropOffPointEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDropOffPointEnabled = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialRule_Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeRule == nil {
				m.TimeRule = &SpecialRule_TimeRule{}
			}
			if err := m.TimeRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocationGroupRule == nil {
				m.LocationGroupRule = &SpecialRule_LocationGroupRule{}
			}
			if err := m.LocationGroupRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStackRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderStackRule == nil {
				m.OrderStackRule = &SpecialRule_OrderStackRule{}
			}
			if err := m.OrderStackRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlanName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanStatus", wireType)
			}
			var v IncentivePlan_PlanStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentivePlan_PlanStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlanStatus = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CashRules = append(m.CashRules, &IncentivePlan_CashRule{})
			if err := m.CashRules[len(m.CashRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requirement == nil {
				m.Requirement = &IncentivePlan_Requirement{}
			}
			if err := m.Requirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRule == nil {
				m.BaseRule = &BaseRule{}
			}
			if err := m.BaseRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialRules = append(m.SpecialRules, &SpecialRule{})
			if err := m.SpecialRules[len(m.SpecialRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocationGroupDescription = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseRules = append(m.BaseRules, &BaseRule{})
			if err := m.BaseRules[len(m.BaseRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rank = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashConversionRuleId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CashConversionRuleId = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePlan_CashRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CashRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CashRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePlan_Requirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Requirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Requirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCompletionRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinCompletionRate = &v
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRatingScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MinRatingScore = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlanId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskDate = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditStatus", wireType)
			}
			var v IncentiveTask_CreditStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentiveTask_CreditStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreditStatus = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			var v IncentiveTask_TaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentiveTask_TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskStatus = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxInclusiveAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxInclusiveAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointSettlementType", wireType)
			}
			var v IncentiveTask_PointSettlementType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentiveTask_PointSettlementType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PointSettlementType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOrder", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemainingOrder = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CashConversionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CashConversionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CashConversionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CashRules = append(m.CashRules, &CashConversionRule_CashRule{})
			if err := m.CashRules[len(m.CashRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelectionEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelectionEnabled = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CashConversionRule_CashRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CashRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CashRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementDate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementStatus", wireType)
			}
			var v IncentiveSettlement_SettlementStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentiveSettlement_SettlementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxInclusiveAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaxInclusiveAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditStatus", wireType)
			}
			var v IncentiveSettlement_CreditStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= IncentiveSettlement_CreditStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreditStatus = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashConversionRuleId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CashConversionRuleId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherCode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Signature = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReferenceId = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TccTransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TccTransactionId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Data = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v VoucherRecord_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VoucherRecord_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntiFraud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AntiFraud = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AntiFraud) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AntiFraud: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AntiFraud: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceFingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeviceFingerprint = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TongdunBlackbox", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TongdunBlackbox = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityDf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SecurityDf = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppVersionName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgentType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserAgentType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppType = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RnVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RnVersion = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverWalletPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverWalletPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverWalletPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var v DriverWalletPayment_PaymentType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletPayment_PaymentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			var v DriverWalletPayment_PaymentStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletPayment_PaymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentStatus = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RevokeTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverWalletRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverWalletRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverWalletRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Balance = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			var v DriverWalletRecord_TransactionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletRecord_TransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRevoked = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var v RecordTag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecordTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tag = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Extend = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountType", wireType)
			}
			var v DriverWalletRecord_AmountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverWalletRecord_AmountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AmountType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceVersion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalanceVersion = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Penalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Penalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Penalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyCategory", wireType)
			}
			var v Penalty_Category
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Penalty_Category(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenaltyCategory = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltySource", wireType)
			}
			var v QualitySource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= QualitySource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenaltySource = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspensionType", wireType)
			}
			var v Penalty_SuspensionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Penalty_SuspensionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuspensionType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspensionSeconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuspensionSeconds = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineType", wireType)
			}
			var v Penalty_FineType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Penalty_FineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FineType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FineAmount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinePaymentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinePaymentId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Points = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsResetSeconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PointsResetSeconds = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsResetTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PointsResetTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPoints", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPoints = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyStatus", wireType)
			}
			var v Penalty_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Penalty_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenaltyStatus = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenalizeTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizeFailTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenalizeFailTime = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RevokeTime = &v
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RevokeReason = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 34:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParentIds = append(m.ParentIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ParentIds) == 0 {
					m.ParentIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParentIds = append(m.ParentIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentIds", wireType)
			}
		case 35:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ViolationIds = append(m.ViolationIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ViolationIds) == 0 {
					m.ViolationIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ViolationIds = append(m.ViolationIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationIds", wireType)
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryOrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryOrderId = &v
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleGroup = &s
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateExecuteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateExecuteTime = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventTime = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViolationId = &v
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Violation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Violation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Violation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliveryOrderId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventDescription = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleCode = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleDescription = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleGroup = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleGroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RuleGroupDescription = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationStatus", wireType)
			}
			var v Violation_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Violation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViolationStatus = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNeedPenalizeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoNeedPenalizeTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizingTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenalizingTime = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenalizeTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenalizeFailTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PenalizeFailTime = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RevokeTime = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViolationSource", wireType)
			}
			var v QualitySource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= QualitySource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViolationSource = &v
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorShift", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatorShift = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomizedFineAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CustomizedFineAmount = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeFineAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFeeFineAmount = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveBonusFineEnable", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncentiveBonusFineEnable = &v
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RevokeReason = &s
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RevokeOperator = &s
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Point = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictWithdrawEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictWithdrawEndTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictCheckinEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictCheckinEndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminateEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TerminateEnabled = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantConfirmTimeout", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantConfirmTimeout = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Switch = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChannelId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Area) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Area: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Area: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaStatus", wireType)
			}
			var v Area_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Area_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AreaStatus = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTypeFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceTypeFlag == nil {
				m.ServiceTypeFlag = &Area_ServiceTypeFlag{}
			}
			if err := m.ServiceTypeFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HiddenTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Area_ServiceTypeFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTypeFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTypeFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FoodEnabled = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpxInstantShopeeEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpxInstantShopeeEnabled = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpxInstantEnabled", wireType)
			}
			var v Enabled
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Enabled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpxInstantEnabled = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *District) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: District: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: District: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DistrictName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CityId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CityName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StateName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AreaId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v District_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= District_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTypeFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceTypeFlag == nil {
				m.ServiceTypeFlag = &Area_ServiceTypeFlag{}
			}
			if err := m.ServiceTypeFlag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AreaId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HiddenTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistrictLocationGroupBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistrictLocationGroupBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistrictLocationGroupBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistrictId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationGroupId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlgoParameterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlgoParameterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var v AlgoParameterConfig_Module
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AlgoParameterConfig_Module(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Module = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v AlgoParameterConfig_Priority
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AlgoParameterConfig_Priority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AreaId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AreaName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DistrictId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DistrictName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameter == nil {
				m.Parameter = &AlgoParameterConfig_Parameter{}
			}
			if err := m.Parameter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderFlow == nil {
				m.OrderFlow = &AlgoParameterConfig_OrderFlow{}
			}
			if err := m.OrderFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverFiltering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DriverFiltering == nil {
				m.DriverFiltering = &AlgoParameterConfig_DriverFiltering{}
			}
			if err := m.DriverFiltering.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchAssessment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchAssessment == nil {
				m.MatchAssessment = &AlgoParameterConfig_MatchAssessment{}
			}
			if err := m.MatchAssessment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eta == nil {
				m.Eta = &AlgoParameterConfig_ETA{}
			}
			if err := m.Eta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingFee == nil {
				m.ShippingFee = &AlgoParameterConfig_ShippingFee{}
			}
			if err := m.ShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyerShippingFee == nil {
				m.BuyerShippingFee = &AlgoParameterConfig_BuyerShippingFee{}
			}
			if err := m.BuyerShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DriverShippingFee == nil {
				m.DriverShippingFee = &AlgoParameterConfig_DriverShippingFee{}
			}
			if err := m.DriverShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceFee == nil {
				m.ServiceFee = &AlgoParameterConfig_ServiceFee{}
			}
			if err := m.ServiceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DffSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DffSetting == nil {
				m.DffSetting = &AlgoParameterConfig_DFFSetting{}
			}
			if err := m.DffSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsuranceFee == nil {
				m.InsuranceFee = &AlgoParameterConfig_InsuranceFee{}
			}
			if err := m.InsuranceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantShopeeShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantShopeeShippingFee == nil {
				m.InstantShopeeShippingFee = &AlgoParameterConfig_InstantShopeeShippingFee{}
			}
			if err := m.InstantShopeeShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantDeliveryShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantDeliveryShippingFee == nil {
				m.InstantDeliveryShippingFee = &AlgoParameterConfig_InstantDeliveryShippingFee{}
			}
			if err := m.InstantDeliveryShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrderFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallOrderFee == nil {
				m.SmallOrderFee = &AlgoParameterConfig_SmallOrderFee{}
			}
			if err := m.SmallOrderFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonPartnerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonPartnerFee == nil {
				m.NonPartnerFee = &AlgoParameterConfig_NonPartnerFee{}
			}
			if err := m.NonPartnerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkingHours == nil {
				m.WorkingHours = &AlgoParameterConfig_WorkingHours{}
			}
			if err := m.WorkingHours.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_OrderFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCompletionRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinCompletionRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_DriverFiltering) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverFiltering: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverFiltering: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMerchantDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxMerchantDistance = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBalance", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinBalance = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedNegativeBalance", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxAllowedNegativeBalance = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignSameBuyerInterval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignSameBuyerInterval = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_MatchAssessment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchAssessment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchAssessment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantDistanceWeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantDistanceWeight = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoAcceptanceWeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoAcceptanceWeight = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionRateWeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompletionRateWeight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ETA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ETA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ETA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckoutPage == nil {
				m.CheckoutPage = &AlgoParameterConfig_ETA_Base{}
			}
			if err := m.CheckoutPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreListing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreListing == nil {
				m.StoreListing = &AlgoParameterConfig_ETA_Base{}
			}
			if err := m.StoreListing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ETA_Base) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FixedTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverSpeed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverSpeed = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinShippingFee = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fare", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fare = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ShippingFeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingFeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingFeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierStart", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TierStart = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierEnd", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TierEnd = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FixedFee = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fare", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fare = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_BaseShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinShippingFee = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &AlgoParameterConfig_ShippingFeeTier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_BuyerShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyerShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyerShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartnerShippingFee == nil {
				m.PartnerShippingFee = &AlgoParameterConfig_BaseShippingFee{}
			}
			if err := m.PartnerShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonPartnerShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonPartnerShippingFee == nil {
				m.NonPartnerShippingFee = &AlgoParameterConfig_BaseShippingFee{}
			}
			if err := m.NonPartnerShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_DriverShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingFee == nil {
				m.ShippingFee = &AlgoParameterConfig_BaseShippingFee{}
			}
			if err := m.ShippingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommissionRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ServiceFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalIntervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalIntervals = append(m.NormalIntervals, &AlgoParameterConfig_ServiceFeeInterval{})
			if err := m.NormalIntervals[len(m.NormalIntervals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListedIntervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListedIntervals = append(m.ListedIntervals, &AlgoParameterConfig_ServiceFeeInterval{})
			if err := m.ListedIntervals[len(m.ListedIntervals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_ServiceFeeInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceFeeInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceFeeInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRangEnd", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CommissionRangEnd = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_InsuranceTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsuranceTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsuranceTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsurancePremium", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsurancePremium = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumAssured", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumAssured = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_InsuranceFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsuranceFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsuranceFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &AlgoParameterConfig_InsuranceTier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_DFFSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DFFSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DFFSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var v AlgoParameterConfig_DFFSetting_DFFSettingMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= AlgoParameterConfig_DFFSetting_DFFSettingMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_InstantShopeeShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantShopeeShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantShopeeShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BaseShippingFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_InstantDeliveryShippingFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantDeliveryShippingFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantDeliveryShippingFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BaseShippingFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_SmallOrderFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallOrderFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallOrderFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinSpend = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallOrderFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmallOrderFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_NonPartnerFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonPartnerFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonPartnerFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonPartnerFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonPartnerFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlgoParameterConfig_WorkingHours) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkingHours: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkingHours: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v PartnerType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PartnerType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartnerTypes = append(m.PartnerTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PartnerTypes) == 0 {
					m.PartnerTypes = make([]PartnerType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PartnerType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PartnerType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartnerTypes = append(m.PartnerTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerTypes", wireType)
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingScoreMin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RatingScoreMin = &v2
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingScoreMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RatingScoreMax = &v2
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreTags = append(m.StoreTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreTags) == 0 {
					m.StoreTags = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreTags = append(m.StoreTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTags", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreCategories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreCategories = append(m.StoreCategories, &StoreCategory{})
			if err := m.StoreCategories[len(m.StoreCategories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTagsLogic", wireType)
			}
			var v ContentRuleLogic
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ContentRuleLogic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreTagsLogic = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreCategoriesLogic", wireType)
			}
			var v ContentRuleLogic
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ContentRuleLogic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreCategoriesLogic = &v
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DishTags = append(m.DishTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DishTags) == 0 {
					m.DishTags = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DishTags = append(m.DishTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DishTags", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishTagsLogic", wireType)
			}
			var v ContentRuleLogic
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ContentRuleLogic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishTagsLogic = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Overlay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overlay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overlay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogoImage = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BannerImage = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreTagIds = append(m.StoreTagIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StoreTagIds) == 0 {
					m.StoreTagIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreTagIds = append(m.StoreTagIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTagIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagsLogic", wireType)
			}
			var v Overlay_TagsLogic
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Overlay_TagsLogic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagsLogic = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v Overlay_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Overlay_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectiveTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireTime = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStatus", wireType)
			}
			var v Overlay_ShowStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Overlay_ShowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerchantWalletAdjustmentOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantWalletAdjustmentOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantWalletAdjustmentOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustmentStatus", wireType)
			}
			var v MerchantWalletAdjustmentOrder_AdjustmentStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletAdjustmentOrder_AdjustmentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdjustmentStatus = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDetailId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementDetailId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var v MerchantWalletType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountType", wireType)
			}
			var v MerchantWalletAdjustmentOrder_AmountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletAdjustmentOrder_AmountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AmountType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApprovedTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedTime = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auditor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Auditor = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditResult", wireType)
			}
			var v MerchantWalletAdjustmentOrder_AuditResult
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletAdjustmentOrder_AuditResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditResult = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var v MerchantWalletAdjustmentOrder_RejectReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletAdjustmentOrder_RejectReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectReason = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferenceId = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuditRemark = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletSettlementOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletSettlementOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletSettlementOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementStatus", wireType)
			}
			var v WalletSettlementOrder_SettlementStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= WalletSettlementOrder_SettlementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementStatus = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var v MerchantWalletType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletWithdrawOrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletWithdrawOrderId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletTxnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletTxnId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingDate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClosingDate = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessingTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompletedTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrorCode", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastErrorCode = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &WalletSettlementOrder_Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &WalletSettlementOrder_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreShardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreShardList == nil {
				m.StoreShardList = &WalletSettlementOrder_StoreShardList{}
			}
			if err := m.StoreShardList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletSettlementOrder_Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeAmount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhtAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhtAmount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDeductionAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreDeductionAmount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletSettlementOrder_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettlementCombined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSettlementCombined = &b
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletSettlementOrder_StoreShardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreShardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreShardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shard = append(m.Shard, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shard) == 0 {
					m.Shard = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shard = append(m.Shard, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerchantWalletWithdrawOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantWalletWithdrawOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantWalletWithdrawOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawStatus", wireType)
			}
			var v MerchantWalletWithdrawOrder_WithdrawStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletWithdrawOrder_WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawStatus = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			var v MerchantWalletType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletTxnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletTxnId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v MerchantWalletWithdrawOrder_PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletWithdrawOrder_PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualPayoutAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActualPayoutAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessingTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompletedTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrorCode", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastErrorCode = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMode", wireType)
			}
			var v MerchantWalletWithdrawOrder_PayoutMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantWalletWithdrawOrder_PayoutMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMode = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankId = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountName = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransactionRef = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletTxnSn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WalletTxnSn = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressStatus", wireType)
			}
			var v ExpressStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressStatus = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectFrom", wireType)
			}
			var v ExpressContent_CollectFrom
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressContent_CollectFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectFrom = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTo", wireType)
			}
			var v ExpressContent_PayTo
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressContent_PayTo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayTo = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayAmount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositAmount = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelProposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelProposer = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v SPXCancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelCerts = append(m.CancelCerts, &Certificate{})
			if err := m.CancelCerts[len(m.CancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelRemark = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignTime = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArriveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArriveTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatePickupDuration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimatePickupDuration = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateDeliveryDuration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateDeliveryDuration = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressDelivery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressDelivery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressDelivery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PackageId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryStatus", wireType)
			}
			var v ExpressDeliveryStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressDeliveryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryStatus = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PickupName = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PickupCerts = append(m.PickupCerts, &Certificate{})
			if err := m.PickupCerts[len(m.PickupCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PickupRemark = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliveryName = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryType", wireType)
			}
			var v ExpressDelivery_DeliveryType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressDelivery_DeliveryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryType = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryCerts = append(m.DeliveryCerts, &Certificate{})
			if err := m.DeliveryCerts[len(m.DeliveryCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DeliveryRemark = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryReason", wireType)
			}
			var v ExpressDelivery_CompleteReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressDelivery_CompleteReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryReason = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnName = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnCerts = append(m.ReturnCerts, &Certificate{})
			if err := m.ReturnCerts[len(m.ReturnCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnRemark = &s
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnReason", wireType)
			}
			var v ExpressDelivery_ReturnReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressDelivery_ReturnReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnReason = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingSurgeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingSurgeFee = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingIncome", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingIncome = &v
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnholdFlag", wireType)
			}
			var v ExpressDelivery_OnHoldFlag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressDelivery_OnHoldFlag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnholdFlag = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelProposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelProposer = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v SPXCancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArriveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArriveTime = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickupTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnDeadline", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnDeadline = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoTracking == nil {
				m.GeoTracking = &ExpressDelivery_GeoTracking{}
			}
			if err := m.GeoTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressDelivery_GeoTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArriveGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArriveGeo == nil {
				m.ArriveGeo = &Geo{}
			}
			if err := m.ArriveGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PickupGeo == nil {
				m.PickupGeo = &Geo{}
			}
			if err := m.PickupGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteGeo == nil {
				m.CompleteGeo = &Geo{}
			}
			if err := m.CompleteGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptGeo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptGeo == nil {
				m.AcceptGeo = &Geo{}
			}
			if err := m.AcceptGeo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var v PackageCategory
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PackageCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Category = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageStatus", wireType)
			}
			var v ExpressPackageStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressPackageStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PackageStatus = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PickupAddress == nil {
				m.PickupAddress = &DeliveryAddress{}
			}
			if err := m.PickupAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAddress == nil {
				m.DeliveryAddress = &DeliveryAddress{}
			}
			if err := m.DeliveryAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentStatus", wireType)
			}
			var v ExpressAssignmentStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressAssignmentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignmentStatus = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositAmount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositStatus", wireType)
			}
			var v ExpressAssignment_DepositStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressAssignment_DepositStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositStatus = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v SPXCancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelCerts = append(m.CancelCerts, &Certificate{})
			if err := m.CancelCerts[len(m.CancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelRemark = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatePickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimatePickupTime = &v
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelProposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelProposer = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressDeliveryPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressDeliveryPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressDeliveryPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Package == nil {
				m.Package = &ExpressPackage{}
			}
			if err := m.Package.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delivery == nil {
				m.Delivery = &ExpressDelivery{}
			}
			if err := m.Delivery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressAuditOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressAuditOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressAuditOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpressId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditType", wireType)
			}
			var v ExpressAuditOrder_AuditType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressAuditOrder_AuditType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuditType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			var v ExpressAuditOrder_OrderStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExpressAuditOrder_OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderStatus = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v Source
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var v SPXCancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reason = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &Certificate{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proposer = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditCerts = append(m.AuditCerts, &Certificate{})
			if err := m.AuditCerts[len(m.AuditCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuditRemark = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auditor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Auditor = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v SPXCancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Express) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Express: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Express: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &ExpressContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &ExpressAssignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryPackages = append(m.DeliveryPackages, &ExpressDeliveryPackage{})
			if err := m.DeliveryPackages[len(m.DeliveryPackages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXOrderContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXOrderContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXOrderContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReferenceId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSource", wireType)
			}
			var v SPXOrderContent_OrderSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXOrderContent_OrderSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderSource = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformServiceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlatformServiceFee = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingBaseFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingBaseFee = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFee = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsuranceFee = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceAssuredAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsuranceAssuredAmount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingVoucherAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingVoucherAmount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalAmount = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			var v SPXOrderStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderStatus = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSource", wireType)
			}
			var v CancelSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelSource = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var v CancelReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CancelReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReason = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelProposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelProposer = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderShowStatus", wireType)
			}
			var v SPXOrderShowStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXOrderShowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderShowStatus = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelCerts = append(m.CancelCerts, &Certificate{})
			if err := m.CancelCerts[len(m.CancelCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CancelRemark = &s
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlaceTime = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveTime = &v
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDeliveringTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnDeliveringTime = &v
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryCompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryCompleteTime = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryReturnTime = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingCompletedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RatingCompletedTime = &v
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatePickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimatePickupTime = &v
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimateDeliveryTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstimateDeliveryTime = &v
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFareExtraFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFareExtraFee = &v
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFareDiscountAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFareDiscountAmount = &v
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsScheduleOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsScheduleOrder = &b
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePickupTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SchedulePickupTime = &v
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAssignmentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartAssignmentTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var v PackageCategory
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PackageCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Category = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsuranceFee = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceAssuredAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsuranceAssuredAmount = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickupAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PickupAddress == nil {
				m.PickupAddress = &DeliveryAddress{}
			}
			if err := m.PickupAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryAddress == nil {
				m.DeliveryAddress = &DeliveryAddress{}
			}
			if err := m.DeliveryAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remark = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CategoryName = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InsuranceName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &SPXOrderContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packages = append(m.Packages, &PackageInfo{})
			if err := m.Packages[len(m.Packages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &SPXOrder_Flag{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXOrder_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReturned", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReturned = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefunded", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefunded = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionRef = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentLink = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var v PaymentMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentMethod = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentChannelId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentChannelOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PaymentChannelOption = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalAmount = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Currency = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Region = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			var v PaymentStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentStatus = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var v SPXPayment_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXPayment_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitiationTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXReturnOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXReturnOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXReturnOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnType", wireType)
			}
			var v SPXReturnOrder_ReturnType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXReturnOrder_ReturnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responsibility", wireType)
			}
			var v Responsibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Responsibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Responsibility = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundType", wireType)
			}
			var v SPXReturnOrder_RefundType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXReturnOrder_RefundType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStatus", wireType)
			}
			var v SPXReturnOrder_ReturnStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXReturnOrder_ReturnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnStatus = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnReason", wireType)
			}
			var v SPXReturnOrder_ReturnReason
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXReturnOrder_ReturnReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnReason = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackAmount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var v Proposer
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Proposer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proposer = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReturnRemark = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Creator = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineRefundMethod", wireType)
			}
			var v SPXRefund_RefundMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXRefund_RefundMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfflineRefundMethod = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackType", wireType)
			}
			var v StoreChargeBackType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreChargeBackType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackType = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreChargebackMethod", wireType)
			}
			var v StoreChargebackMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreChargebackMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreChargebackMethod = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveTime = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXRefund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXRefund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXRefund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckoutId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundMethod", wireType)
			}
			var v SPXRefund_RefundMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXRefund_RefundMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundMethod = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentTransactionRef = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundTransactionRef", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundTransactionRef = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineRefundTransactionRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OfflineRefundTransactionRef = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundAmount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundStatus", wireType)
			}
			var v RefundStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RefundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundStatus = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundMode", wireType)
			}
			var v SPXRefund_RefundMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXRefund_RefundMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundMode = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundCoins", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefundCoins = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXVoucherRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXVoucherRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXVoucherRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoucherId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherCode = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransactionId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VoucherData = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseStatus", wireType)
			}
			var v UseStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= UseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseStatus = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStatus", wireType)
			}
			var v SPXVoucherRecord_ReturnStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXVoucherRecord_ReturnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnStatus = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntiFraud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AntiFraud = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPXCoinRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPXCoinRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPXCoinRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransactionId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var v ServiceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpendAmount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendStatus", wireType)
			}
			var v UseStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= UseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpendStatus = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpendTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnTotal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarnTotal = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnOrderAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarnOrderAmount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnVoucherAmount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarnVoucherAmount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnStatus", wireType)
			}
			var v UseStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= UseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarnStatus = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarnTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnStatus", wireType)
			}
			var v SPXCoinRecord_ReturnStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SPXCoinRecord_ReturnStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnStatus = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CampaignName = &s
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AreaIds = append(m.AreaIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFoodyBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFoodyBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFoodyBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AreaIds) == 0 {
					m.AreaIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFoodyBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AreaIds = append(m.AreaIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleAreaTimeslotBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleAreaTimeslotBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleAreaTimeslotBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AreaId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeslotId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleTimeslot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleTimeslot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleTimeslot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Banner = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleCampaignContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleCampaignContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleCampaignContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalshSaleCampaign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FalshSaleCampaign == nil {
				m.FalshSaleCampaign = &FlashSaleCampaign{}
			}
			if err := m.FalshSaleCampaign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeslots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeslots = append(m.Timeslots, &FlashSaleTimeslot{})
			if err := m.Timeslots[len(m.Timeslots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeslotId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StoreName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishNum = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleDishDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleDishDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleDishDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeslotId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DishName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSaleDishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FlashSaleDishName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stock", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stock = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldNum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPerUser", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitPerUser = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPrice = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountStatus", wireType)
			}
			var v FlashSaleDishStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FlashSaleDishStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountStatus = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var v FlashSaleDishDiscount_DishDiscountType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FlashSaleDishDiscount_DishDiscountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountType = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPercentage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPercentage = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleDishSoldRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleDishSoldRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleDishSoldRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeslotId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPrice = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldStatus", wireType)
			}
			var v FlashSaleDishSoldRecord_RecordSoldStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FlashSaleDishSoldRecord_RecordSoldStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoldStatus = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quantity = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnQuantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnQuantity = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelQuantity", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelQuantity = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleDish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleDish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleDish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dish == nil {
				m.Dish = &Dish{}
			}
			if err := m.Dish.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discount == nil {
				m.Discount = &FlashSaleDishDiscount{}
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleCartItemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleCartItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleCartItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserLimit = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discount == nil {
				m.Discount = &FlashSaleDishDiscount{}
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeslot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timeslot == nil {
				m.Timeslot = &FlashSaleTimeslot{}
			}
			if err := m.Timeslot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleOrderItemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleOrderItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleOrderItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeslotId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DishPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DishPrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiscountPrice = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Quantity = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleOrderItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleOrderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleOrderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashSaleDishDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlashSaleDishDetail = append(m.FlashSaleDishDetail, &FlashSaleOrderItemDetail{})
			if err := m.FlashSaleDishDetail[len(m.FlashSaleDishDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlashSaleDishDiscountTimeslot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlashSaleDishDiscountTimeslot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlashSaleDishDiscountTimeslot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discount == nil {
				m.Discount = &FlashSaleDishDiscount{}
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timezone = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverDeliveryOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverDeliveryOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverDeliveryOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverDeliveryOrderStatus", wireType)
			}
			var v DriverDeliveryStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverDeliveryStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DriverDeliveryOrderStatus = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeTotal", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingFeeTotal = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingFeeItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingFeeItems == nil {
				m.ShippingFeeItems = &DriverDeliveryOrder_ShippingFeeItems{}
			}
			if err := m.ShippingFeeItems.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDistance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryDistance = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompletedNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanceledNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanceledNum = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &DriverDeliveryOrder_Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssignTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverDeliveryOrder_ShippingFeeItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingFeeItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingFeeItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingSurgeFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingSurgeFee = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingBaseFee", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShippingBaseFee = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverDeliveryOrder_Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationType", wireType)
			}
			var v DriverDeliveryOrder_LocationType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DriverDeliveryOrder_LocationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocationType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryOrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeliveryOrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Latitude = &v2
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Longitude = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Distance = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSettlementMart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSettlementMart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSettlementMart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseWallet", wireType)
			}
			var v StoreSettlementMart_WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreSettlementMart_WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseWallet = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankBranch = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMethod", wireType)
			}
			var v SettlementMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMethod = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWay", wireType)
			}
			var v PaymentWay
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentWay(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentWay = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleTo", wireType)
			}
			var v SettleTo
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettleTo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettleTo = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankChannelId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMethod", wireType)
			}
			var v PayoutMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMethod = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossMonthSettlement", wireType)
			}
			var v CrossMonthSettlement
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CrossMonthSettlement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossMonthSettlement = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutAccountId = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPayoutRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AutoPayoutRemark = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementEmails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SettlementEmails = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranchId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankBranchId = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRelationStatus", wireType)
			}
			var v StoreSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletRelationStatus = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementConfigStatus", wireType)
			}
			var v StoreSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementConfigStatus = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductConfigStatus", wireType)
			}
			var v StoreSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductConfigStatus = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountStatus", wireType)
			}
			var v BankAccountStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BankAccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankAccountStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerchantSettlementMart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerchantSettlementMart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerchantSettlementMart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseWallet", wireType)
			}
			var v MerchantSettlementMart_WalletStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantSettlementMart_WalletStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUseWallet = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountNo = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankBranch = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankAccountName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementMethod", wireType)
			}
			var v SettlementMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SettlementMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementMethod = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentWay", wireType)
			}
			var v PaymentWay
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PaymentWay(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PaymentWay = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vat", wireType)
			}
			var v Vat
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Vat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vat = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wht", wireType)
			}
			var v Wht
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Wht(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wht = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankChannelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankChannelId = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutMethod", wireType)
			}
			var v PayoutMethod
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PayoutMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutMethod = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossMonthSettlement", wireType)
			}
			var v CrossMonthSettlement
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= CrossMonthSettlement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossMonthSettlement = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAccountId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayoutAccountId = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPayoutRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AutoPayoutRemark = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementEmails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SettlementEmails = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankBranchId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankBranchId = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRelationStatus", wireType)
			}
			var v MerchantSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WalletRelationStatus = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementConfigStatus", wireType)
			}
			var v MerchantSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementConfigStatus = &v
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductConfigStatus", wireType)
			}
			var v MerchantSettlementMart_ConfigStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MerchantSettlementMart_ConfigStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductConfigStatus = &v
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankAccountStatus", wireType)
			}
			var v BankAccountStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BankAccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BankAccountStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountCampaignEnableTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountCampaignEnableTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountCampaignEnableTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountCampaignEnableDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountCampaignEnableDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountCampaignEnableDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartDate = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndDate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountCampaignApplyDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountCampaignApplyDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountCampaignApplyDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowDate == nil {
				m.AllowDate = &ItemDiscountCampaignEnableDate{}
			}
			if err := m.AllowDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowTimes = append(m.AllowTimes, &ItemDiscountCampaignEnableTime{})
			if err := m.AllowTimes[len(m.AllowTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemDiscountCampaignAppliedTimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemDiscountCampaignAppliedTimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemDiscountCampaignAppliedTimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyDates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyDates = append(m.ApplyDates, &ItemDiscountCampaignApplyDate{})
			if err := m.ApplyDates[len(m.ApplyDates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionMaterialTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionMaterialTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionMaterialTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ChildIds = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TemplateValue = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			var v RecruitmentSessionMaterialTemplate_BizType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionMaterialTemplate_BizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BizType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BizId = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v RecruitmentSessionMaterialTemplate_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionMaterialTemplate_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionMerchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionMerchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionMerchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v StoreSessionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= StoreSessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermsStatus", wireType)
			}
			var v SessionTermsStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SessionTermsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TermsStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialType", wireType)
			}
			var v MaterialType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MaterialType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaterialType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaterialId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v RecruitmentSessionRegistration_RegistrationStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionRegistration_RegistrationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var v RecruitmentSessionRegistration_RegistrationSource
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionRegistration_RegistrationSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Source = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindStatus", wireType)
			}
			var v RecruitmentSessionRegistration_BindStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionRegistration_BindStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindStatus = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionMerchantExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionMerchantExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionMerchantExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecruitmentSessionMerchant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecruitmentSessionMerchant == nil {
				m.RecruitmentSessionMerchant = &RecruitmentSessionMerchant{}
			}
			if err := m.RecruitmentSessionMerchant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OptionalName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTagId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreTagId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminateReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TerminateReason = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhyJoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WhyJoin = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faqs = append(m.Faqs, &RecruitmentSessionPage_QuestionAndAnswer{})
			if err := m.Faqs[len(m.Faqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionPage_QuestionAndAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionAndAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionAndAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Question = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Answer = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v RecruitmentSession_RecruitmentSessionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSession_RecruitmentSessionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v RecruitmentSession_RecruitmentSessionStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSession_RecruitmentSessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterStartTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterEndTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunningStartTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunningEndTime = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UniqueKey = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainBanner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MainBanner = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionListImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PromotionListImage = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Labels = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &RecruitmentSessionPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Templates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Templates = append(m.Templates, &RecruitmentSessionMaterialTemplate{})
			if err := m.Templates[len(m.Templates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedStoreFile_Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InvitedStoreFile_Url = &s
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BandStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoucherPackageTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoucherPackageTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoucherPackageTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benefits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benefits = append(m.Benefits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreTagId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreTagId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TaskName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			var v RecruitmentSessionTask_TaskType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionTask_TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v RecruitmentSessionTask_TaskStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RecruitmentSessionTask_TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UploadFileUrl = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorFileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorFileUrl = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionPromotionSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionPromotionSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionPromotionSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CampaignId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Dt = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedVoucherOrders", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsedVoucherOrders = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVoucherOrdersRevenue", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVoucherOrdersRevenue = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllOrders", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllOrders = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCustomers", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewCustomers = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subsidy = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedVoucherDishes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsedVoucherDishes = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedVoucherCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsedVoucherCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentVoucherPackageRegisterCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentVoucherPackageRegisterCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentVoucherPackageRegisterCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentSessionReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentSessionReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentSessionReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MerchantId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialTemplateId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaterialTemplateId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReportUrl = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReportStatus = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReportError = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoodyBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Md5 = &s
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFoodyBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFoodyBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFoodyBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFoodyBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoodyBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFoodyBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFoodyBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFoodyBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFoodyBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFoodyBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFoodyBase = fmt.Errorf("proto: unexpected end of group")
)
